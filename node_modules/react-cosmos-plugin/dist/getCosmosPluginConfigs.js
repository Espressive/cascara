"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCosmosPluginConfigs = getCosmosPluginConfigs;
exports.getCosmosPluginConfig = getCosmosPluginConfig;

var _glob = _interopRequireDefault(require("glob"));

var _path = _interopRequireDefault(require("path"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getCosmosPluginConfigs(rootDir, ignore) {
  var configPaths = getCosmosPluginConfigPaths(rootDir, ignore);
  return configPaths.map(function (configPath) {
    return getCosmosPluginConfig(rootDir, configPath);
  });
}

function getCosmosPluginConfigPaths(rootDir, ignore) {
  return _glob.default.sync('**/cosmos.plugin.json', {
    cwd: rootDir,
    absolute: true,
    ignore: ignore
  });
}

function getCosmosPluginConfig(rootDir, configPath) {
  var rawConfig = require(configPath);

  var pluginRootDir = _path.default.dirname(configPath);

  var relativePluginRootDir = _path.default.relative(rootDir, pluginRootDir);

  var config = {
    name: rawConfig.name,
    rootDir: relativePluginRootDir
  };

  if (rawConfig.ui) {
    var uiPath = _path.default.join(pluginRootDir, rawConfig.ui);

    var resolvedUiPath = _resolveFrom.default.silent(pluginRootDir, uiPath); // TODO: Handle missing path


    if (resolvedUiPath) config.ui = _path.default.relative(rootDir, resolvedUiPath);
  }

  return config;
}