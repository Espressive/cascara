{"version":3,"sources":["behaviors/SplitButton/splitButtonBehavior.ts"],"names":["keyboardKey","IS_FOCUSABLE_ATTRIBUTE","menuButtonBehavior","splitButtonBehavior","props","splitButtonMenuButtonBehavior","menuButtonBehaviorData","attributes","trigger","undefined","keyActions","popup","closeAndFocusTrigger","keyCombinations","keyCode","Escape","ArrowUp","altKey","stopPropagation","ArrowLeft","ArrowRight","root","open","openAndFocusFirst","ArrowDown","toggleButton","tabIndex","childBehaviors","menuButton"],"mappings":";AAAA,SAASA,WAAT,QAA4B,oBAA5B;AAGA,SAASC,sBAAT,QAAuC,kBAAvC;AAEA,SAASC,kBAAT,QAA4D,kCAA5D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,mBAAkC,GAAG,SAArCA,mBAAqC,CAAAC,KAAK,EAAI;AAAA;;AACzD,MAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,GAAM;AAC1C,QAAMC,sBAAsB,GAAGJ,kBAAkB,CAACE,KAAD,CAAjD;AACAE,IAAAA,sBAAsB,CAACC,UAAvB,CAAkCC,OAAlC,CAA0C,eAA1C,IAA6DC,SAA7D;AAEA,WAAO,OAAQH,sBAAR,EAAgC;AACrCI,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE;AACLC,UAAAA,oBAAoB,EAAE;AACpBC,YAAAA,eAAe,EAAE,CAAC;AAAEC,cAAAA,OAAO,EAAEd,WAAW,CAACe;AAAvB,aAAD,EAAkC;AAAED,cAAAA,OAAO,EAAEd,WAAW,CAACgB,OAAvB;AAAgCC,cAAAA,MAAM,EAAE;AAAxC,aAAlC;AADG,WADjB;AAILC,UAAAA,eAAe,EAAE;AACfL,YAAAA,eAAe,EAAE,CAAC;AAAEC,cAAAA,OAAO,EAAEd,WAAW,CAACmB;AAAvB,aAAD,EAAqC;AAAEL,cAAAA,OAAO,EAAEd,WAAW,CAACoB;AAAvB,aAArC;AADF;AAJZ,SADG;AASVC,QAAAA,IAAI,oBACE,CAACjB,KAAK,CAACkB,IAAP,IAAe;AACjBC,UAAAA,iBAAiB,EAAE;AACjBV,YAAAA,eAAe,EAAE,CAAC;AAAEC,cAAAA,OAAO,EAAEd,WAAW,CAACwB,SAAvB;AAAkCP,cAAAA,MAAM,EAAE;AAA1C,aAAD;AADA;AADF,SADjB;AATM;AADyB,KAAhC,CAAP;AAmBD,GAvBD;;AAyBA,SAAO;AACLV,IAAAA,UAAU,EAAE;AACVc,MAAAA,IAAI,EAAE,EADI;AAEVI,MAAAA,YAAY;AACVC,QAAAA,QAAQ,EAAE,CAAC,CADD;AAEV,yBAAiB;AAFP,uBAGTzB,sBAHS,IAGgB,KAHhB;AAFF,KADP;AASL0B,IAAAA,cAAc,EAAE;AACdC,MAAAA,UAAU,EAAEvB;AADE;AATX,GAAP;AAaD,CAvCM","sourcesContent":["import { keyboardKey } from '../../keyboard-key';\nimport * as _ from 'lodash';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\nimport { menuButtonBehavior, MenuButtonBehaviorProps } from '../MenuButton/menuButtonBehavior';\n\n/**\n * @description\n * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.\n * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.\n * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.\n * Triggers 'closeAndFocusTrigger' action with 'Escape' or 'altKey'+'ArrowUp'.\n * Triggers 'openAndFocusFirst' action with 'altKey'+'ArrowDown' on 'root' slot.\n * Triggers 'stopPropagation' action with 'ArrowLeft' or 'ArrowRight' on 'root' slot.\n *\n * @specification\n * Adds attribute 'tabIndex=-1' to 'toggleButton' slot.\n * Adds attribute 'aria-haspopup=true' to 'toggleButton' slot.\n * Adds attribute 'data-is-focusable=false' to 'toggleButton' slot.\n */\nexport const splitButtonBehavior: Accessibility = props => {\n  const splitButtonMenuButtonBehavior = () => {\n    const menuButtonBehaviorData = menuButtonBehavior(props);\n    menuButtonBehaviorData.attributes.trigger['aria-haspopup'] = undefined;\n\n    return _.merge(menuButtonBehaviorData, {\n      keyActions: {\n        popup: {\n          closeAndFocusTrigger: {\n            keyCombinations: [{ keyCode: keyboardKey.Escape }, { keyCode: keyboardKey.ArrowUp, altKey: true }],\n          },\n          stopPropagation: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }, { keyCode: keyboardKey.ArrowRight }],\n          },\n        },\n        root: {\n          ...(!props.open && {\n            openAndFocusFirst: {\n              keyCombinations: [{ keyCode: keyboardKey.ArrowDown, altKey: true }],\n            },\n          }),\n        },\n      },\n    });\n  };\n\n  return {\n    attributes: {\n      root: {},\n      toggleButton: {\n        tabIndex: -1,\n        'aria-haspopup': true,\n        [IS_FOCUSABLE_ATTRIBUTE]: false,\n      },\n    },\n    childBehaviors: {\n      menuButton: splitButtonMenuButtonBehavior,\n    },\n  };\n};\n\nexport type SplitButtonBehaviorProps = Pick<MenuButtonBehaviorProps, 'open'>;\n"],"file":"splitButtonBehavior.js"}