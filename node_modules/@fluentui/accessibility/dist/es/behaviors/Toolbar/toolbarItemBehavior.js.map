{"version":3,"sources":["behaviors/Toolbar/toolbarItemBehavior.ts"],"names":["keyboardKey","SpacebarKey","buttonBehavior","toolbarItemBehavior","props","behaviorData","attributes","root","hasPopup","hasMenu","undefined","keyActions","wrapper","performWrapperClick","keyCombinations","keyCode","Enter","closeMenuAndFocusTrigger","menuOpen","Escape","Tab","shiftKey","doNotNavigateNextToolbarItem","ArrowLeft","ArrowRight"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,oBAAzC;AAGA,SAASC,cAAT,QAAoD,0BAApD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,mBAA4D,GAAG,SAA/DA,mBAA+D,CAAAC,KAAK,EAAI;AACnF,MAAMC,YAAY,GAAGH,cAAc,CAACE,KAAD,CAAnC;AACAC,EAAAA,YAAY,CAACC,UAAb,CAAwBC,IAAxB,qBACKF,YAAY,CAACC,UAAb,CAAwBC,IAD7B;AAEE,qBAAiBH,KAAK,CAACI,QAAN,GAAiB,QAAjB,GAA4BJ,KAAK,CAACK,OAAN,GAAgB,MAAhB,GAAyBC;AAFxE;AAIAL,EAAAA,YAAY,CAACM,UAAb,CAAwBC,OAAxB,qBACKP,YAAY,CAACM,UAAb,CAAwBC,OAD7B;AAEEC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,eAAe,EAAE,CAAC;AAAEC,QAAAA,OAAO,EAAEf,WAAW,CAACgB;AAAvB,OAAD,EAAiC;AAAED,QAAAA,OAAO,EAAEd;AAAX,OAAjC;AADE,KAFvB;AAKEgB,IAAAA,wBAAwB,EAAE;AACxBH,MAAAA,eAAe,EACbV,KAAK,CAACK,OAAN,IAAiBL,KAAK,CAACc,QAAvB,GACI,CAAC;AAAEH,QAAAA,OAAO,EAAEf,WAAW,CAACmB;AAAvB,OAAD,EAAkC;AAAEJ,QAAAA,OAAO,EAAEf,WAAW,CAACoB,GAAvB;AAA4BC,QAAAA,QAAQ,EAAE;AAAtC,OAAlC,CADJ,GAEI;AAJkB,KAL5B;AAWEC,IAAAA,4BAA4B,EAAE;AAC5BR,MAAAA,eAAe,EACbV,KAAK,CAACK,OAAN,IAAiBL,KAAK,CAACc,QAAvB,GACI,CAAC;AAAEH,QAAAA,OAAO,EAAEf,WAAW,CAACuB;AAAvB,OAAD,EAAqC;AAAER,QAAAA,OAAO,EAAEf,WAAW,CAACwB;AAAvB,OAArC,CADJ,GAEI;AAJsB;AAXhC;AAkBA,SAAOnB,YAAP;AACD,CAzBM","sourcesContent":["import { keyboardKey, SpacebarKey } from '../../keyboard-key';\n\nimport { Accessibility } from '../../types';\nimport { buttonBehavior, ButtonBehaviorProps } from '../Button/buttonBehavior';\n\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-haspopup=menu' to 'root' slot if 'hasMenu' property is set.\n * Adds attribute 'aria-haspopup=dialog' to 'root' slot if 'hasPopup' property is set.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper', when toolbar button has submenu and it is opened.\n * Triggers 'doNotNavigateNextToolbarItem' action with 'ArrowLeft' or 'ArrowRight' on 'wrapper', when toolbar button has submenu and it is opened.\n */\nexport const toolbarItemBehavior: Accessibility<ToolbarItemBehaviorProps> = props => {\n  const behaviorData = buttonBehavior(props);\n  behaviorData.attributes.root = {\n    ...behaviorData.attributes.root,\n    'aria-haspopup': props.hasPopup ? 'dialog' : props.hasMenu ? 'menu' : undefined,\n  };\n  behaviorData.keyActions.wrapper = {\n    ...behaviorData.keyActions.wrapper,\n    performWrapperClick: {\n      keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n    },\n    closeMenuAndFocusTrigger: {\n      keyCombinations:\n        props.hasMenu && props.menuOpen\n          ? [{ keyCode: keyboardKey.Escape }, { keyCode: keyboardKey.Tab, shiftKey: true }]\n          : null,\n    },\n    doNotNavigateNextToolbarItem: {\n      keyCombinations:\n        props.hasMenu && props.menuOpen\n          ? [{ keyCode: keyboardKey.ArrowLeft }, { keyCode: keyboardKey.ArrowRight }]\n          : null,\n    },\n  };\n  return behaviorData;\n};\n\nexport type ToolbarItemBehaviorProps = {\n  /** Indicated if toolbar item has a menu. */\n  hasMenu?: boolean;\n  /** If the menu is in open state. */\n  menuOpen?: boolean;\n  /** Indicated if toolbar item has a popup. */\n  hasPopup?: boolean;\n} & ButtonBehaviorProps;\n"],"file":"toolbarItemBehavior.js"}