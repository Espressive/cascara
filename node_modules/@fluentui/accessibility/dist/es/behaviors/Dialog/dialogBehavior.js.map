{"version":3,"sources":["behaviors/Dialog/dialogBehavior.ts"],"names":["popupBehavior","dialogBehavior","props","behaviorData","defaultAriaLabelledBy","getDefaultAriaLabelledBy","defaultAriaDescribedBy","getDefaultAriaDescribedBy","attributes","popup","role","header","id","content","undefined","headerId","contentId"],"mappings":"AACA,SAASA,aAAT,QAAkD,wBAAlD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAkD,GAAG,SAArDA,cAAqD,CAAAC,KAAK,EAAI;AACzE,MAAMC,YAAY,GAAGH,aAAa,CAACE,KAAD,CAAlC;AAEA,MAAME,qBAAqB,GAAGC,wBAAwB,CAACH,KAAD,CAAtD;AACA,MAAMI,sBAAsB,GAAGC,yBAAyB,CAACL,KAAD,CAAxD;AAEAC,EAAAA,YAAY,CAACK,UAAb,CAAwBC,KAAxB,qBACKN,YAAY,CAACK,UAAb,CAAwBC,KAD7B;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGE,kBAAc,IAHhB;AAIE,uBAAmBN,qBAAqB,IAAIF,KAAK,CAAC,iBAAD,CAJnD;AAKE,wBAAoBI,sBAAsB,IAAIJ,KAAK,CAAC,kBAAD;AALrD;AAOAC,EAAAA,YAAY,CAACK,UAAb,CAAwBG,MAAxB,GAAiC;AAC/BC,IAAAA,EAAE,EAAER;AAD2B,GAAjC;AAGAD,EAAAA,YAAY,CAACK,UAAb,CAAwBK,OAAxB,GAAkC;AAChCD,IAAAA,EAAE,EAAEN;AAD4B,GAAlC;AAIA,SAAOH,YAAP;AACD,CArBM;AAuBP;AACA;AACA;AACA;;AACA,IAAME,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACH,KAAD,EAAgC;AAC/D,MAAIA,KAAK,CAAC,YAAD,CAAL,IAAuBA,KAAK,CAAC,iBAAD,CAAhC,EAAqD;AACnD,WAAOY,SAAP;AACD;;AACD,SAAOZ,KAAK,CAACa,QAAb;AACD,CALD;AAOA;AACA;AACA;AACA;;;AACA,IAAMR,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACL,KAAD,EAAgC;AAChE,MAAIA,KAAK,CAAC,kBAAD,CAAT,EAA+B;AAC7B,WAAOY,SAAP;AACD;;AACD,SAAOZ,KAAK,CAACc,SAAb;AACD,CALD","sourcesContent":["import { Accessibility, AccessibilityAttributes } from '../../types';\nimport { popupBehavior, PopupBehaviorProps } from '../Popup/popupBehavior';\n\n/**\n * @description\n * Implements ARIA Dialog (Modal) design pattern.\n * Adds tabIndex='0' to 'trigger' slot, if it is not tabbable element and no tabIndex attribute provided.\n *\n * @specification\n * Adds attribute 'aria-modal=true' to 'popup' slot.\n * Adds attribute 'role=dialog' to 'popup' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'popup' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'popup' slot.\n */\nexport const dialogBehavior: Accessibility<DialogBehaviorProps> = props => {\n  const behaviorData = popupBehavior(props);\n\n  const defaultAriaLabelledBy = getDefaultAriaLabelledBy(props);\n  const defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n\n  behaviorData.attributes.popup = {\n    ...behaviorData.attributes.popup,\n    role: 'dialog',\n    'aria-modal': true,\n    'aria-labelledby': defaultAriaLabelledBy || props['aria-labelledby'],\n    'aria-describedby': defaultAriaDescribedBy || props['aria-describedby'],\n  };\n  behaviorData.attributes.header = {\n    id: defaultAriaLabelledBy,\n  };\n  behaviorData.attributes.content = {\n    id: defaultAriaDescribedBy,\n  };\n\n  return behaviorData;\n};\n\n/**\n * Returns the element id of the header, it is used when user does not provide aria-label or\n * aria-labelledby as props.\n */\nconst getDefaultAriaLabelledBy = (props: DialogBehaviorProps) => {\n  if (props['aria-label'] || props['aria-labelledby']) {\n    return undefined;\n  }\n  return props.headerId;\n};\n\n/**\n * Returns the element id of the content, it is used when user does not provide aria-describedby\n * as props.\n */\nconst getDefaultAriaDescribedBy = (props: DialogBehaviorProps) => {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n  return props.contentId;\n};\n\nexport type DialogBehaviorProps = {\n  headerId?: string;\n  contentId?: string;\n} & PopupBehaviorProps &\n  Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby'>;\n"],"file":"dialogBehavior.js"}