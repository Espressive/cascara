{"version":3,"sources":["behaviors/Tooltip/tooltipAsDescriptionBehavior.ts"],"names":["keyboardKey","tooltipAsDescriptionBehavior","props","defaultAriaDescribedBy","getDefaultAriaDescribedBy","attributes","trigger","tooltip","role","id","open","keyActions","close","keyCombinations","keyCode","Escape","undefined","contentId"],"mappings":"AAAA,SAASA,WAAT,QAA4B,oBAA5B;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,4BAAiE,GAAG,SAApEA,4BAAoE,CAAAC,KAAK,EAAI;AACxF,MAAMC,sBAAsB,GAAGC,yBAAyB,CAACF,KAAD,CAAxD;AAEA,SAAO;AACLG,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACP,4BAAoBH,sBAAsB,IAAID,KAAK,CAAC,kBAAD;AAD5C,OADC;AAIVK,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,SADC;AAEPC,QAAAA,EAAE,EAAEN,sBAFG;AAGP,uBAAe,CAACD,KAAK,CAACQ;AAHf;AAJC,KADP;AAWLC,IAAAA,UAAU,EAAE;AACVL,MAAAA,OAAO,EAAE;AACPM,QAAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEd,WAAW,CAACe;AAAvB,WAAD;AADZ;AADA;AADC;AAXP,GAAP;AAmBD,CAtBM;AAwBP;AACA;AACA;;AACA,IAAMX,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACF,KAAD,EAAiC;AACjE,MAAIA,KAAK,CAAC,kBAAD,CAAT,EAA+B;AAC7B,WAAOc,SAAP;AACD;;AACD,SAAOd,KAAK,CAACe,SAAb;AACD,CALD","sourcesContent":["import { keyboardKey } from '../../keyboard-key';\nimport { Accessibility, AccessibilityAttributes } from '../../types';\n\n/**\n * @description\n * Implements ARIA Tooltip design pattern.\n *\n * @specification\n * Adds attribute 'role=tooltip' to 'tooltip' slot.\n * Adds attribute 'aria-hidden=false' to 'tooltip' slot if 'open' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-describedby' based on the property 'contentId' to 'trigger' slot. This can be overriden by providing 'aria-describedby' property directly to the component.\n * Triggers 'close' action with 'Escape' on 'trigger'.\n */\nexport const tooltipAsDescriptionBehavior: Accessibility<TooltipBehaviorProps> = props => {\n  const defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n\n  return {\n    attributes: {\n      trigger: {\n        'aria-describedby': defaultAriaDescribedBy || props['aria-describedby'],\n      },\n      tooltip: {\n        role: 'tooltip',\n        id: defaultAriaDescribedBy,\n        'aria-hidden': !props.open,\n      },\n    },\n    keyActions: {\n      trigger: {\n        close: {\n          keyCombinations: [{ keyCode: keyboardKey.Escape }],\n        },\n      },\n    },\n  };\n};\n\n/**\n * Returns the element id of the tooltip, it is used when user does not provide aria-describedby as props.\n */\nconst getDefaultAriaDescribedBy = (props: TooltipBehaviorProps) => {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n  return props.contentId;\n};\n\nexport type TooltipBehaviorProps = {\n  /** If tooltip is visible. */\n  open: boolean;\n  /** Tooltip's container id. */\n  contentId: string;\n  /** aria-label from trigger shorthand. */\n  triggerAriaLabel: string;\n} & Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby'>;\n"],"file":"tooltipAsDescriptionBehavior.js"}