"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuButtonBehavior = void 0;
var tslib_1 = require("tslib");
var keyboard_key_1 = require("../../keyboard-key");
var _ = require("lodash");
var popupBehavior_1 = require("../Popup/popupBehavior");
/**
 * @description
 * Implements ARIA [MenuButton](https://www.w3.org/TR/wai-aria-practices/#menubutton) design pattern.
 */
var menuButtonBehavior = function (props) {
    var behavior = popupBehavior_1.popupBehavior(tslib_1.__assign(tslib_1.__assign({}, props), { inline: !props.contextMenu }));
    return _.merge(behavior, {
        attributes: {
            trigger: tslib_1.__assign({ 'aria-controls': props.open ? props.menuId : undefined, 'aria-expanded': (props.open && !props.contextMenu) || undefined, 'aria-haspopup': props.contextMenu ? undefined : 'true', id: props.triggerId }, (!props.contextMenu && props.open && { tabIndex: -1 })),
            menu: {
                'aria-labelledby': props.triggerId,
                id: props.menuId,
            },
        },
        keyActions: {
            root: tslib_1.__assign({}, (props.open
                ? {
                    closeMenu: {
                        keyCombinations: [
                            { keyCode: keyboard_key_1.keyboardKey.Tab, shiftKey: false },
                            { keyCode: keyboard_key_1.keyboardKey.Tab, shiftKey: true },
                        ],
                    },
                }
                : _.includes(props.on, 'click') && {
                    openAndFocusFirst: {
                        keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowDown }],
                    },
                    openAndFocusLast: {
                        keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowUp }],
                    },
                })),
        },
    });
};
exports.menuButtonBehavior = menuButtonBehavior;
