"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toolbarItemBehavior = void 0;
var tslib_1 = require("tslib");
var keyboard_key_1 = require("../../keyboard-key");
var buttonBehavior_1 = require("../Button/buttonBehavior");
/**
 * @specification
 * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.
 * Adds attribute 'tabIndex=0' if element type is other than 'button'.
 * Adds attribute 'aria-haspopup=menu' to 'root' slot if 'hasMenu' property is set.
 * Adds attribute 'aria-haspopup=dialog' to 'root' slot if 'hasPopup' property is set.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper', when toolbar button has submenu and it is opened.
 * Triggers 'doNotNavigateNextToolbarItem' action with 'ArrowLeft' or 'ArrowRight' on 'wrapper', when toolbar button has submenu and it is opened.
 */
var toolbarItemBehavior = function (props) {
    var behaviorData = buttonBehavior_1.buttonBehavior(props);
    behaviorData.attributes.root = tslib_1.__assign(tslib_1.__assign({}, behaviorData.attributes.root), { 'aria-haspopup': props.hasPopup ? 'dialog' : props.hasMenu ? 'menu' : undefined });
    behaviorData.keyActions.wrapper = tslib_1.__assign(tslib_1.__assign({}, behaviorData.keyActions.wrapper), { performWrapperClick: {
            keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Enter }, { keyCode: keyboard_key_1.SpacebarKey }],
        }, closeMenuAndFocusTrigger: {
            keyCombinations: props.hasMenu && props.menuOpen
                ? [{ keyCode: keyboard_key_1.keyboardKey.Escape }, { keyCode: keyboard_key_1.keyboardKey.Tab, shiftKey: true }]
                : null,
        }, doNotNavigateNextToolbarItem: {
            keyCombinations: props.hasMenu && props.menuOpen
                ? [{ keyCode: keyboard_key_1.keyboardKey.ArrowLeft }, { keyCode: keyboard_key_1.keyboardKey.ArrowRight }]
                : null,
        } });
    return behaviorData;
};
exports.toolbarItemBehavior = toolbarItemBehavior;
