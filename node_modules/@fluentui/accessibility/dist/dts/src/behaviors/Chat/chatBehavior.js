"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chatBehavior = void 0;
var keyboard_key_1 = require("../../keyboard-key");
var attributes_1 = require("../../attributes");
var types_1 = require("../../focusZone/types");
var CHAT_FOCUSZONE_ATTRIBUTE = 'chat-focuszone';
/**
 * @description
 * Adds a vertical focus zone navigation with a last message as a default tabbable element, pressing enter key focuses inside a message.
 *
 * @specification
 * Provides arrow key navigation in vertical direction.
 * Focus is set initially on the specified default tabbable element.
 * Focused active element of the component is reset when TAB from the component.
 * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.
 * Does not handle PageDown and PageUp.
 */
var chatBehavior = function () {
    var _a;
    return ({
        attributes: {
            root: {},
        },
        focusZone: {
            props: (_a = {
                    shouldEnterInnerZone: function (event) { return keyboard_key_1.getCode(event) === keyboard_key_1.keyboardKey.Enter; },
                    direction: types_1.FocusZoneDirection.vertical,
                    shouldResetActiveElementWhenTabFromZone: true,
                    defaultTabbableElement: getLastTabbableElement
                },
                _a[CHAT_FOCUSZONE_ATTRIBUTE] = '',
                _a.pagingSupportDisabled = true,
                _a),
        },
    });
};
exports.chatBehavior = chatBehavior;
var getLastTabbableElement = function (root) {
    var lastVisibleMessage = root.querySelector('[data-last-visible="true"]');
    if (lastVisibleMessage)
        return lastVisibleMessage;
    var chatItemsElements = root.querySelectorAll("[" + CHAT_FOCUSZONE_ATTRIBUTE + "] .ui-chat__message[" + attributes_1.IS_FOCUSABLE_ATTRIBUTE + "=\"true\"]");
    return chatItemsElements.length > 0 ? chatItemsElements[chatItemsElements.length - 1] : null;
};
