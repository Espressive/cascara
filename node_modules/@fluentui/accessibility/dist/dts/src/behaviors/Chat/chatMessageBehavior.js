"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chatMessageBehavior = void 0;
var tslib_1 = require("tslib");
var keyboard_key_1 = require("../../keyboard-key");
var attributes_1 = require("../../attributes");
var types_1 = require("../../focusZone/types");
/**
 * @description
 * Sets the message to be a focusable element.
 * Adds a vertical circular focus zone navigation where a user navigates using a Tab key.
 * Adds a key action which prevents up and down arrow keys from navigating in FocusZone, we only want a Tab key to navigate.
 * Adds an escape key action which focuses the chat message, i.e., moves key handling from inside a message back to the chat list.
 *
 * @specification
 * Provides arrow key navigation in vertical direction.
 * Keyboard navigation is circular.
 * Focus is moved within the focusable children of the component using TAB key.
 * Does not handle PageDown and PageUp.
 */
var chatMessageBehavior = function (props) {
    var _a;
    return ({
        attributes: {
            root: tslib_1.__assign((_a = {}, _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true, _a.tabIndex = -1, _a), (props.hasActionMenu &&
                !props.inlineActionMenu && {
                'aria-owns': props.actionMenuId,
            })),
        },
        focusZone: {
            props: {
                handleTabKey: types_1.FocusZoneTabbableElements.all,
                isCircularNavigation: true,
                direction: types_1.FocusZoneDirection.vertical,
                pagingSupportDisabled: true,
            },
        },
        keyActions: {
            root: {
                // prevents default FocusZone behavior, in this case, prevents using arrow keys as navigation (we only want a Tab key to navigate)
                preventDefault: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowUp }, { keyCode: keyboard_key_1.keyboardKey.ArrowDown }],
                },
                focus: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Escape }],
                },
            },
        },
    });
};
exports.chatMessageBehavior = chatMessageBehavior;
