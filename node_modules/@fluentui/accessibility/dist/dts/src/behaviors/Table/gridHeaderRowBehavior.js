"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gridHeaderRowBehavior = void 0;
var attributes_1 = require("../../attributes");
var types_1 = require("../../focusZone/types");
var keyboard_key_1 = require("../../keyboard-key");
var gridHeaderCellBehavior_1 = require("./gridHeaderCellBehavior");
/**
 * @specification
 * Adds role='row'.
 * Adds attribute 'data-is-focusable=true' to 'root' slot.
 * Provides arrow key navigation in horizontal direction.
 * Focused active element of the component is reset when TAB from the component.
 * When component's container element receives focus, focus will be set to the default focusable child element of the component.
 * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.
 * Applies 'gridHeaderCellBehavior' for 'cell' child component.
 */
var gridHeaderRowBehavior = function (props) {
    var _a;
    return ({
        attributes: {
            root: (_a = {},
                _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true,
                _a.role = 'row',
                _a),
        },
        focusZone: {
            props: {
                direction: types_1.FocusZoneDirection.horizontal,
                shouldFocusInnerElementWhenReceivedFocus: true,
                shouldResetActiveElementWhenTabFromZone: true,
            },
        },
        keyActions: {
            root: {
                unsetRowTabbable: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Tab, shiftKey: true }],
                },
            },
        },
        childBehaviors: {
            cell: gridHeaderCellBehavior_1.gridHeaderCellBehavior,
        },
    });
};
exports.gridHeaderRowBehavior = gridHeaderRowBehavior;
