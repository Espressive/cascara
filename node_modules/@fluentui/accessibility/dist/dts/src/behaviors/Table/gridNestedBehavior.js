"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gridNestedBehavior = void 0;
var keyboard_key_1 = require("../../keyboard-key");
var types_1 = require("../../focusZone/types");
var gridRowBehavior_1 = require("./gridRowBehavior");
/**
 * @specification
 * Adds role='grid'.
 * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.
 * Provides arrow key navigation in vertical direction.
 * Focused active element of the component is reset when TAB from the component.
 * Triggers 'focus' action with 'Escape' on 'root'.
 * Applies 'gridRowBehavior' for 'row' child component.
 */
var gridNestedBehavior = function () { return ({
    attributes: {
        root: {
            role: 'grid',
        },
    },
    focusZone: {
        props: {
            shouldEnterInnerZone: function (event) { return keyboard_key_1.getCode(event) === keyboard_key_1.keyboardKey.ArrowRight; },
            direction: types_1.FocusZoneDirection.vertical,
            shouldResetActiveElementWhenTabFromZone: true,
        },
    },
    keyActions: {
        root: {
            focus: {
                keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Escape }],
            },
        },
    },
    childBehaviors: {
        row: gridRowBehavior_1.gridRowBehavior,
    },
}); };
exports.gridNestedBehavior = gridNestedBehavior;
