"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.popupBehavior = void 0;
var tslib_1 = require("tslib");
var keyboard_key_1 = require("../../keyboard-key");
var _ = require("lodash");
var popupBehavior = function (props) {
    var onAsArray = _.isArray(props.on) ? props.on : [props.on];
    var tabbableTriggerProps = props.tabbableTrigger
        ? { tabIndex: getAriaAttributeFromProps('tabIndex', props, 0) }
        : undefined;
    if (tabbableTriggerProps) {
        tabbableTriggerProps['aria-haspopup'] = 'dialog';
        if (process.env.NODE_ENV !== 'production') {
            // Override the default trigger's accessibility schema class.
            tabbableTriggerProps['data-aa-class'] = 'PopupButton';
        }
    }
    return {
        attributes: {
            trigger: tslib_1.__assign({}, tabbableTriggerProps),
            popup: {
                role: props.trapFocus ? 'dialog' : props.inline ? undefined : 'complementary',
                'aria-modal': props.trapFocus ? true : undefined,
                'data-popup-trapfocus': props.trapFocus ? true : undefined,
            },
        },
        keyActions: {
            popup: {
                closeAndFocusTrigger: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Escape }],
                },
                preventScroll: {
                    keyCombinations: props.isOpenedByRightClick &&
                        _.includes(onAsArray, 'context') && [
                        { keyCode: keyboard_key_1.keyboardKey.ArrowDown },
                        { keyCode: keyboard_key_1.keyboardKey.ArrowUp },
                        { keyCode: keyboard_key_1.keyboardKey.PageDown },
                        { keyCode: keyboard_key_1.keyboardKey.PageUp },
                        { keyCode: keyboard_key_1.keyboardKey.Home },
                        { keyCode: keyboard_key_1.keyboardKey.End },
                    ],
                },
            },
            trigger: {
                close: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Escape }],
                },
                toggle: {
                    keyCombinations: _.includes(onAsArray, 'click') && [{ keyCode: keyboard_key_1.keyboardKey.Enter }, { keyCode: keyboard_key_1.SpacebarKey }],
                },
                open: {
                    keyCombinations: _.includes(onAsArray, 'hover') &&
                        !_.includes(onAsArray, 'context') && [{ keyCode: keyboard_key_1.keyboardKey.Enter }, { keyCode: keyboard_key_1.SpacebarKey }],
                },
                click: {
                    keyCombinations: _.includes(onAsArray, 'hover') &&
                        !_.includes(onAsArray, 'context') && [{ keyCode: keyboard_key_1.keyboardKey.Enter }, { keyCode: keyboard_key_1.SpacebarKey }],
                },
            },
        },
    };
};
exports.popupBehavior = popupBehavior;
var isFocusable = function (propsData) {
    try {
        var as = propsData.as, href = propsData.href, type = propsData.type;
        return type === 'button' || type === 'input' || (type === 'a' && href !== undefined) || as === 'button';
    }
    catch (_a) {
        return false;
    }
};
var getAriaAttributeFromProps = function (attributeName, props, defaultValue) {
    if (!props.trigger)
        return undefined;
    if (props.trigger.props[attributeName]) {
        return props.trigger.props[attributeName];
    }
    var _a = props.trigger.props, as = _a.as, href = _a.href;
    var type = props.trigger.type;
    if (isFocusable({ as: as, href: href, type: type })) {
        return undefined;
    }
    return defaultValue;
};
