"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.treeItemAsOptionBehavior = void 0;
var tslib_1 = require("tslib");
var treeItemBehavior_1 = require("./treeItemBehavior");
var treeTitleAsOptionBehavior_1 = require("./treeTitleAsOptionBehavior");
var attributes_1 = require("../../attributes");
/**
 * @description
 * Adds role 'option' to a non-leaf item.
 * Adds 'aria-selected' to a non-leaf item if it is selectable, based on the 'selected' property
 * @specification
 * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.
 * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.
 * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.
 * Adds attribute 'role=option' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'expandSiblings' action with '*' on 'root'.
 * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.
 * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.
 * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.
 */
var treeItemAsOptionBehavior = function (props) {
    var _a;
    var behavior = treeItemBehavior_1.treeItemBehavior(props);
    var definition = tslib_1.__assign(tslib_1.__assign({}, behavior), { attributes: {
            root: tslib_1.__assign({ role: 'none' }, (props.hasSubtree && tslib_1.__assign((_a = { tabIndex: -1 }, _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true, _a.role = 'option', _a['aria-setsize'] = props.treeSize, _a['aria-posinset'] = props.index, _a), (props.selectable && { 'aria-selected': !!props.selected })))),
        }, childBehaviors: {
            title: treeTitleAsOptionBehavior_1.treeTitleAsOptionBehavior,
        } });
    if (process.env.NODE_ENV !== 'production') {
        if (props.hasSubtree)
            definition.attributes.root['data-aa-class'] = 'TreeItemOption';
        else
            definition.attributes.root['data-aa-class'] = behavior.attributes.root['data-aa-class'];
    }
    return definition;
};
exports.treeItemAsOptionBehavior = treeItemAsOptionBehavior;
