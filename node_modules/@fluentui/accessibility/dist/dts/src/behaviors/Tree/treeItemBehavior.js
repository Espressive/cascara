"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.treeItemBehavior = void 0;
var tslib_1 = require("tslib");
var keyboard_key_1 = require("../../keyboard-key");
var attributes_1 = require("../../attributes");
var treeTitleBehavior_1 = require("./treeTitleBehavior");
/**
 * @description
 * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.
 * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.
 * Adds attribute 'aria-checked=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property true. Does not set anything if false or undefined.
 *
 * @specification
 * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.
 * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.
 * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.
 * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.
 * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.
 * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'expandSiblings' action with '*' on 'root'.
 * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.
 * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has no subtree.
 * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.
 * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.
 */
var treeItemBehavior = function (props) {
    var _a;
    var definition = {
        attributes: {
            root: tslib_1.__assign({ role: 'none' }, (props.hasSubtree && tslib_1.__assign((_a = { 'aria-expanded': props.expanded, tabIndex: -1 }, _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true, _a.role = 'treeitem', _a['aria-setsize'] = props.treeSize, _a['aria-posinset'] = props.index, _a['aria-level'] = props.level, _a), (props.selectable && {
                'aria-checked': props.indeterminate ? 'mixed' : !!props.selected,
            })))),
        },
        keyActions: {
            root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ performClick: {
                    keyCombinations: [{ keyCode: keyboard_key_1.EnterKey }, { keyCode: keyboard_key_1.SpacebarKey }],
                } }, (props.hasSubtree
                ? props.expanded
                    ? {
                        collapse: {
                            keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowLeft }],
                        },
                        focusFirstChild: {
                            keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowRight }],
                        },
                    }
                    : {
                        expand: {
                            keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowRight }],
                        },
                        focusParent: {
                            keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowLeft }],
                        },
                    }
                : {
                    focusParent: {
                        keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowLeft }],
                    },
                })), { expandSiblings: {
                    keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey['*'] }],
                } }), (props.selectable && {
                performClick: {
                    keyCombinations: props.hasSubtree ? [{ keyCode: keyboard_key_1.keyboardKey.Enter }] : [{ keyCode: keyboard_key_1.SpacebarKey }],
                },
                performSelection: {
                    keyCombinations: [{ keyCode: keyboard_key_1.SpacebarKey }],
                },
            })),
        },
        childBehaviors: {
            title: treeTitleBehavior_1.treeTitleBehavior,
        },
    };
    if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {
        // Override the default trigger's accessibility schema class.
        definition.attributes.root['data-aa-class'] = 'SingleTreeItem';
    }
    return definition;
};
exports.treeItemBehavior = treeItemBehavior;
