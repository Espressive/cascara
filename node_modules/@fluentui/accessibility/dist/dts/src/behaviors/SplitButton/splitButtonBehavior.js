"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitButtonBehavior = void 0;
var tslib_1 = require("tslib");
var keyboard_key_1 = require("../../keyboard-key");
var _ = require("lodash");
var attributes_1 = require("../../attributes");
var menuButtonBehavior_1 = require("../MenuButton/menuButtonBehavior");
/**
 * @description
 * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.
 * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.
 * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.
 * Triggers 'closeAndFocusTrigger' action with 'Escape' or 'altKey'+'ArrowUp'.
 * Triggers 'openAndFocusFirst' action with 'altKey'+'ArrowDown' on 'root' slot.
 * Triggers 'stopPropagation' action with 'ArrowLeft' or 'ArrowRight' on 'root' slot.
 *
 * @specification
 * Adds attribute 'tabIndex=-1' to 'toggleButton' slot.
 * Adds attribute 'aria-haspopup=true' to 'toggleButton' slot.
 * Adds attribute 'data-is-focusable=false' to 'toggleButton' slot.
 */
var splitButtonBehavior = function (props) {
    var _a;
    var splitButtonMenuButtonBehavior = function () {
        var menuButtonBehaviorData = menuButtonBehavior_1.menuButtonBehavior(props);
        menuButtonBehaviorData.attributes.trigger['aria-haspopup'] = undefined;
        return _.merge(menuButtonBehaviorData, {
            keyActions: {
                popup: {
                    closeAndFocusTrigger: {
                        keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Escape }, { keyCode: keyboard_key_1.keyboardKey.ArrowUp, altKey: true }],
                    },
                    stopPropagation: {
                        keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowLeft }, { keyCode: keyboard_key_1.keyboardKey.ArrowRight }],
                    },
                },
                root: tslib_1.__assign({}, (!props.open && {
                    openAndFocusFirst: {
                        keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowDown, altKey: true }],
                    },
                })),
            },
        });
    };
    return {
        attributes: {
            root: {},
            toggleButton: (_a = {
                    tabIndex: -1,
                    'aria-haspopup': true
                },
                _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = false,
                _a),
        },
        childBehaviors: {
            menuButton: splitButtonMenuButtonBehavior,
        },
    };
};
exports.splitButtonBehavior = splitButtonBehavior;
