"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusZoneDirection = exports.FocusZoneTabbableElements = void 0;
var FocusZoneTabbableElements;
(function (FocusZoneTabbableElements) {
    /** Tabbing is not allowed */
    FocusZoneTabbableElements[FocusZoneTabbableElements["none"] = 0] = "none";
    /** All tabbing action is allowed */
    FocusZoneTabbableElements[FocusZoneTabbableElements["all"] = 1] = "all";
    /** Tabbing is allowed only on input elements */
    FocusZoneTabbableElements[FocusZoneTabbableElements["inputOnly"] = 2] = "inputOnly";
})(FocusZoneTabbableElements = exports.FocusZoneTabbableElements || (exports.FocusZoneTabbableElements = {}));
var FocusZoneDirection;
(function (FocusZoneDirection) {
    /** Only react to up/down arrows. */
    FocusZoneDirection[FocusZoneDirection["vertical"] = 0] = "vertical";
    /** Only react to left/right arrows. */
    FocusZoneDirection[FocusZoneDirection["horizontal"] = 1] = "horizontal";
    /** React to all arrows. */
    FocusZoneDirection[FocusZoneDirection["bidirectional"] = 2] = "bidirectional";
    /** React to all arrows. Navigate next item on right/down arrow keys and previous - left/up arrow keys. Vice versa in RTL mode. */
    FocusZoneDirection[FocusZoneDirection["bidirectionalDomOrder"] = 3] = "bidirectionalDomOrder";
})(FocusZoneDirection = exports.FocusZoneDirection || (exports.FocusZoneDirection = {}));
