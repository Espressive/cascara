"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var codes_1 = require("./codes");
var index_1 = require("./index");
/* eslint-disable @typescript-eslint/no-explicit-any */
describe('keyboardKey', function () {
    it('has a key/value for every value/key in codes', function () {
        Object.keys(codes_1.codes).forEach(function (code) {
            var name = codes_1.codes[Number(code)];
            if (Array.isArray(name)) {
                expect(String(index_1.keyboardKey[name[0]])).toEqual(code);
                expect(String(index_1.keyboardKey[name[1]])).toEqual(code);
            }
            else {
                expect(String(index_1.keyboardKey[name])).toEqual(code);
            }
        });
    });
    describe('getCode', function () {
        it('is a function', function () {
            expect(index_1.getCode).toBeInstanceOf(Function);
        });
        it('returns the code for a given key name', function () {
            expect(index_1.getCode('Enter')).toEqual(13);
        });
        it('handles all key names in codes', function () {
            Object.keys(codes_1.codes).forEach(function (code) {
                var name = codes_1.codes[code];
                var _code = Number(code);
                if (Array.isArray(name)) {
                    expect(index_1.getCode(name[0])).toEqual(_code);
                    expect(index_1.getCode(name[1])).toEqual(_code);
                }
                else {
                    expect(index_1.getCode(name)).toEqual(_code);
                }
            });
        });
        it('handles event like objects with `key` prop', function () {
            Object.keys(codes_1.codes).forEach(function (code) {
                var name = codes_1.codes[code];
                var _code = Number(code);
                if (Array.isArray(name)) {
                    var key0 = { key: name[0], which: _code, keyCode: _code, shiftKey: false };
                    var key1 = { key: name[1], which: _code, keyCode: _code, shiftKey: false };
                    expect(index_1.getCode(key0)).toEqual(_code);
                    expect(index_1.getCode(key1)).toEqual(_code);
                }
                else {
                    var key = { key: name, which: _code, keyCode: _code, shiftKey: false };
                    expect(index_1.getCode(key)).toEqual(_code);
                }
            });
        });
    });
    describe('getKey', function () {
        it('is a function', function () {
            expect(index_1.getKey).toBeInstanceOf(Function);
        });
        it('returns the code for a given key name', function () {
            expect(index_1.getKey(13)).toEqual('Enter');
        });
        it('handles all codes', function () {
            Object.keys(codes_1.codes).forEach(function (code) {
                var name = codes_1.codes[code];
                var keyName = index_1.getKey(Number(code));
                if (Array.isArray(name)) {
                    expect(keyName).toEqual(name[0]);
                }
                else {
                    expect(keyName).toEqual(name);
                }
            });
        });
        it('handles event like object: { keyCode: code, shiftKey: false }`', function () {
            Object.keys(codes_1.codes).forEach(function (code) {
                var name = codes_1.codes[code];
                var _code = Number(code);
                var keyName = index_1.getKey({ which: _code, keyCode: _code, shiftKey: false });
                if (Array.isArray(name)) {
                    expect(keyName).toEqual(name[0]);
                }
                else {
                    expect(keyName).toEqual(name);
                }
            });
        });
        it('handles event like object: { keyCode: code, shiftKey: true }`', function () {
            Object.keys(codes_1.codes).forEach(function (code) {
                var name = codes_1.codes[code];
                var keyName = index_1.getKey({ keyCode: Number(code), shiftKey: true });
                if (Array.isArray(name)) {
                    expect(keyName).toEqual(name[1]);
                }
                else {
                    expect(keyName).toEqual(name);
                }
            });
        });
        it('handles event like object: { which: code, shiftKey: false }', function () {
            Object.keys(codes_1.codes).forEach(function (code) {
                var name = codes_1.codes[code];
                var keyName = index_1.getKey({ which: Number(code), shiftKey: false });
                if (Array.isArray(name)) {
                    expect(keyName).toEqual(name[0]);
                }
                else {
                    expect(keyName).toEqual(name);
                }
            });
        });
        it('handles event like object: { which: code, shiftKey: true }', function () {
            Object.keys(codes_1.codes).forEach(function (code) {
                var name = codes_1.codes[code];
                var keyName = index_1.getKey({ which: Number(code), shiftKey: true });
                if (Array.isArray(name)) {
                    expect(keyName).toEqual(name[1]);
                }
                else {
                    expect(keyName).toEqual(name);
                }
            });
        });
        it('handles event like objects with a `key` property', function () {
            var keyName = index_1.getKey({ key: '/' });
            expect(keyName).toEqual('/');
        });
    });
});
