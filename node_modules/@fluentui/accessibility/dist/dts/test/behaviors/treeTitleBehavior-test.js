"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
describe('TreeTitleBehavior', function () {
    describe('tabIndex', function () {
        test("is added with '0' value to a title with hasSubtree prop false", function () {
            var expectedResult = accessibility_1.treeTitleBehavior({ hasSubtree: false });
            expect(expectedResult.attributes.root.tabIndex).toEqual(-1);
        });
        test("is not added to a title with hasSubtree prop true", function () {
            var expectedResult = accessibility_1.treeTitleBehavior({ hasSubtree: true });
            expect(expectedResult.attributes.root.tabIndex).toBeUndefined();
        });
    });
    describe('role', function () {
        test("is added with 'treeitem' value to a title with hasSubtree prop false", function () {
            var expectedResult = accessibility_1.treeTitleBehavior({ hasSubtree: false });
            expect(expectedResult.attributes.root.role).toEqual('treeitem');
        });
        test("is not added to a title with hasSubtree prop true", function () {
            var expectedResult = accessibility_1.treeTitleBehavior({ hasSubtree: true });
            expect(expectedResult.attributes.root.role).toBeUndefined();
        });
    });
    describe('aria-checked', function () {
        test("is added with 'selected' prop value to a title with hasSubtree prop false, when tree title is 'selectable'", function () {
            var expectedResultWhenSelected = accessibility_1.treeTitleBehavior({ hasSubtree: false, selectable: true, selected: true });
            var expectedResultWhenNotSelected = accessibility_1.treeTitleBehavior({ hasSubtree: false, selectable: true, selected: false });
            expect(expectedResultWhenSelected.attributes.root['aria-checked']).toEqual(true);
            expect(expectedResultWhenNotSelected.attributes.root['aria-checked']).toEqual(false);
        });
        test("is not added to a title, when tree title is NOT 'selectable'", function () {
            var expectedResult = accessibility_1.treeTitleBehavior({ selectable: false });
            expect(expectedResult.attributes.root['aria-checked']).toBeUndefined();
        });
    });
    describe('keyboard interaction', function () {
        test("click is executed only with 'spacebar' or 'enter', when tree title is 'selectable'", function () {
            var expectedResult = accessibility_1.treeTitleBehavior({ selectable: true, hasSubtree: true });
            expect(expectedResult.keyActions.root.performClick.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.performClick.keyCombinations[0].keyCode).toEqual(accessibility_1.SpacebarKey);
        });
        test("arrow left navigation, should focus on parent  ", function () {
            var expectedResult = accessibility_1.treeTitleBehavior({ hasSubtree: false });
            expect(expectedResult.keyActions.root.focusParent.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.focusParent.keyCombinations[0].keyCode).toEqual(accessibility_1.keyboardKey.ArrowLeft);
        });
    });
});
