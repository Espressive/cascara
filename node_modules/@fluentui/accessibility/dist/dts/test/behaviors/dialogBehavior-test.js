"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
var React = require("react");
describe('DialogBehavior.ts', function () {
    test('adds tabIndex=0 to trigger if element is not tabbable and tabIndex attribute is not provided', function () {
        var expectedResult = accessibility_1.dialogBehavior({ trigger: React.createElement("div", null), tabbableTrigger: true });
        expect(expectedResult.attributes.trigger.tabIndex).toEqual(0);
    });
    test('adds tabIndex attribute with value passed as prop', function () {
        var expectedResult = accessibility_1.dialogBehavior({
            trigger: React.createElement("div", { tabIndex: -1 }),
            tabbableTrigger: true,
        });
        expect(expectedResult.attributes.trigger.tabIndex).toEqual(-1);
    });
    test('does not add tabIndex if element is already tabbable', function () {
        var expectedResult = accessibility_1.dialogBehavior({ trigger: React.createElement("button", null), tabbableTrigger: true });
        expect(expectedResult.attributes.trigger.tabIndex).toBeUndefined();
    });
    test('uses computed "aria-describedby" based on "contentId"', function () {
        var expectedResult = accessibility_1.dialogBehavior({ contentId: 'content-id' });
        expect(expectedResult.attributes.popup['aria-describedby']).toEqual('content-id');
        expect(expectedResult.attributes.content.id).toEqual('content-id');
    });
    test('uses computed "aria-labelledby" based on "headerId"', function () {
        var expectedResult = accessibility_1.dialogBehavior({ headerId: 'header-id' });
        expect(expectedResult.attributes.popup['aria-labelledby']).toEqual('header-id');
        expect(expectedResult.attributes.header.id).toEqual('header-id');
    });
});
