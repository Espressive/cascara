import { Accessibility } from '@fluentui/accessibility';
interface FilteredSpecification {
    behaviorName: string;
    testMethod: (arg: TestMethod) => void;
    params: RegExpExecArray;
}
export interface TestMethod {
    behavior: Accessibility;
    props: string[];
}
export interface TestDefinition {
    regexp: RegExp;
    testMethod: (arg: TestMethod) => void;
}
export declare class TestHelper {
    behaviors: Map<string, Accessibility>;
    testDefinitions: TestDefinition[];
    filteredSpecificationWithAssignedTestMethod: FilteredSpecification[];
    addBehavior(name: string, behavior: Accessibility): void;
    addTest(regexp: RegExp, testMethod: (arg: TestMethod) => void): void;
    addTests(testDefinitions: TestDefinition[]): void;
    run(behaviorMenuItems: any): void;
    findRegexAndAssingCorrespondingInfoToArray(behaviorMenuItems: any): void;
    iterateRegexDefinitions(specLine: string, behaviorName: string): void;
    getBehavior(behaviorName: string): Accessibility;
    convertToMatchingTypeIfApplicable(stringToConvert: any): boolean | number | string;
    failSpecificationPresenceTest(behaviorFileName: string): void;
    failDescriptionPresenceTest(behaviorFileName: string): void;
}
export {};
