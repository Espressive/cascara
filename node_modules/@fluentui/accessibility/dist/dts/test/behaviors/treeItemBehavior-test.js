"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
describe('TreeItemBehavior', function () {
    describe('tabIndex', function () {
        test("is added with '0' value to an item that is expandable", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true });
            expect(expectedResult.attributes.root.tabIndex).toEqual(-1);
        });
        test("is not added to a leaf item (no items)", function () {
            var expectedResult = accessibility_1.treeItemBehavior({});
            expect(expectedResult.attributes.root.tabIndex).toBeUndefined();
        });
    });
    describe('aria-expanded', function () {
        test("is not added to a leaf item", function () {
            var expectedResult = accessibility_1.treeItemBehavior({});
            expect(expectedResult.attributes.root['aria-expanded']).toBeUndefined();
        });
        test("is added with 'false' value to an item that is expandable but not open", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true, expanded: false });
            expect(expectedResult.attributes.root['aria-expanded']).toEqual(false);
        });
        test("is added with 'false' value to an item that is expandable and open", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true, expanded: true });
            expect(expectedResult.attributes.root['aria-expanded']).toEqual(true);
        });
    });
    describe('role', function () {
        test("is 'treeitem' if not a leaf", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true });
            expect(expectedResult.attributes.root.role).toEqual('treeitem');
        });
        test("is 'none' if a leaf", function () {
            var expectedResult = accessibility_1.treeItemBehavior({});
            expect(expectedResult.attributes.root.role).toEqual('none');
        });
    });
    describe('keyboard interaction', function () {
        test("click is executed only with 'spacebar', when tree item is 'selectable' and tree item has no subtree", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ selectable: true, hasSubtree: false });
            expect(expectedResult.keyActions.root.performClick.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.performClick.keyCombinations[0].keyCode).toEqual(accessibility_1.SpacebarKey);
        });
        test("selection is executed only with 'spacebar', when tree item is 'selectable'", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ selectable: true });
            expect(expectedResult.keyActions.root.performSelection.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.performSelection.keyCombinations[0].keyCode).toEqual(accessibility_1.SpacebarKey);
        });
        test("click is executed with 'enter' key, when tree item is 'selectable' and tree item has subtree", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ selectable: true, hasSubtree: true });
            expect(expectedResult.keyActions.root.performClick.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.performClick.keyCombinations[0].keyCode).toEqual(accessibility_1.keyboardKey.Enter);
        });
        test("arrow left navigation, should collapse when tree expanded", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ expanded: true, hasSubtree: true });
            expect(expectedResult.keyActions.root.collapse.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.collapse.keyCombinations[0].keyCode).toEqual(accessibility_1.keyboardKey.ArrowLeft);
        });
        test("arrow left navigation, should focus on parent when tree is not expanded", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ expanded: false, hasSubtree: true });
            expect(expectedResult.keyActions.root.focusParent.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.focusParent.keyCombinations[0].keyCode).toEqual(accessibility_1.keyboardKey.ArrowLeft);
        });
        test("arrow left navigation, should focus on parent when treeItem has no subtree", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: false });
            expect(expectedResult.keyActions.root.focusParent.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.focusParent.keyCombinations[0].keyCode).toEqual(accessibility_1.keyboardKey.ArrowLeft);
        });
        test("arrow right navigation, should expand when tree collapsed", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ expanded: false, hasSubtree: true });
            expect(expectedResult.keyActions.root.expand.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.expand.keyCombinations[0].keyCode).toEqual(accessibility_1.keyboardKey.ArrowRight);
        });
        test("arrow right navigation, should focus on frist child when tree expanded", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ expanded: true, hasSubtree: true });
            expect(expectedResult.keyActions.root.focusFirstChild.keyCombinations).toHaveLength(1);
            expect(expectedResult.keyActions.root.focusFirstChild.keyCombinations[0].keyCode).toEqual(accessibility_1.keyboardKey.ArrowRight);
        });
    });
    describe('aria-checked', function () {
        test("is added with 'true' value to an item that has hasSubtree, is selectable and selected", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true, selectable: true, selected: true });
            expect(expectedResult.attributes.root['aria-checked']).toEqual(true);
        });
        test("is added with 'false' value to an item that has hasSubtree, is selectable and not selected", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true, selectable: true });
            expect(expectedResult.attributes.root['aria-checked']).toEqual(false);
        });
        test("is added with 'mixed' value to an item that has hasSubtree, is selectable and in indeterminate state", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true, selectable: true, indeterminate: true });
            expect(expectedResult.attributes.root['aria-checked']).toEqual('mixed');
        });
        test("is not added to an item that is not selectable", function () {
            var expectedResult = accessibility_1.treeItemBehavior({ hasSubtree: true });
            expect(expectedResult.attributes.root['aria-checked']).toBeUndefined();
        });
    });
});
