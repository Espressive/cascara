"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
describe('LoaderBehavior.ts', function () {
    test('do NOT add aria-labelledby, when aria-label was set already', function () {
        var props = { labelId: 'label-id', 'aria-label': 'any loading string' };
        var expectedResult = accessibility_1.loaderBehavior(props);
        expect(expectedResult.attributes.root['aria-labelledby']).toEqual(undefined);
    });
    test('do NOT add aria-labelledby, when aria-labelled was set already', function () {
        var props = { labelId: 'label-id', 'aria-labelledby': 'id' };
        var expectedResult = accessibility_1.loaderBehavior(props);
        expect(expectedResult.attributes.root['aria-labelledby']).toEqual(undefined);
    });
    test('do NOT add aria-labelledby, when there is no tabIndex specified', function () {
        var props = { labelId: 'label-id' };
        var expectedResult = accessibility_1.loaderBehavior(props);
        expect(expectedResult.attributes.root['aria-labelledby']).toEqual(undefined);
    });
    test('add aria-labelledby, when there is tabIndex=0 specified', function () {
        var props = { labelId: 'label-id', tabIndex: 0 };
        var expectedResult = accessibility_1.loaderBehavior(props);
        expect(expectedResult.attributes.root['aria-labelledby']).toEqual('label-id');
    });
    test('add aria-labelledby, when there is tabIndex=-1 specified', function () {
        var props = { labelId: 'label-id', tabIndex: -1 };
        var expectedResult = accessibility_1.loaderBehavior(props);
        expect(expectedResult.attributes.root['aria-labelledby']).toEqual('label-id');
    });
});
