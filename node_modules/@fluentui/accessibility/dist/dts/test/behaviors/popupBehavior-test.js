"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
var React = require("react");
describe('PopupBehavior.ts', function () {
    test('adds tabIndex=0 to trigger if element is not tabbable and tabIndex attribute is not provided', function () {
        var expectedResult = accessibility_1.popupBehavior({ trigger: React.createElement("div", null), tabbableTrigger: true });
        expect(expectedResult.attributes.trigger.tabIndex).toEqual(0);
    });
    test('does not add tabIndex=0 to trigger if element is not tabbable and tabIndex attribute is not provided and tabbableTrigger is false', function () {
        var expectedResult = accessibility_1.popupBehavior({ trigger: React.createElement("div", null), tabbableTrigger: false });
        expect(expectedResult.attributes.trigger.tabIndex).toBeUndefined();
    });
    test('adds tabIndex attribute with value passed as prop', function () {
        var expectedResult = accessibility_1.popupBehavior({
            trigger: React.createElement("div", { tabIndex: -1 }),
            tabbableTrigger: true,
        });
        expect(expectedResult.attributes.trigger.tabIndex).toEqual(-1);
    });
    // TODO: Fix me
    // test('does not add tabIndex if element is already tabbable', () => {
    //   const expectedResult = popupBehavior({ trigger: <Button />, tabbableTrigger: true })
    //   expect(expectedResult.attributes.trigger.tabIndex).toBeUndefined()
    // })
});
