"use strict";

exports.__esModule = true;
exports.getCode = getCode;
exports.getKey = getKey;
exports.TabKey = exports.PageUpKey = exports.PageDownKey = exports.HomeKey = exports.EnterKey = exports.EndKey = exports.ArrowUpKey = exports.ArrowRightKey = exports.ArrowLeftKey = exports.ArrowDownKey = exports.RightSquareBracketKey = exports.LeftSquareBracketKey = exports.RightAngleBracketKey = exports.LeftAngleBracketKey = exports.RightParenthesisKey = exports.LeftParenthesisKey = exports.RightCurlyBraceKey = exports.LeftCurlyBraceKey = exports.DoubleQuoteKey = exports.SingleQuoteKey = exports.QuestionMarkKey = exports.BackSlashKey = exports.PipeKey = exports.SemicolonKey = exports.ColonKey = exports.DecimalKey = exports.CommaKey = exports.MultiplicationSignKey = exports.DivisionSignKey = exports.EqualsSignKey = exports.MinusSignKey = exports.PlusSignKey = exports.AmpersandKey = exports.CaretKey = exports.PercentSignKey = exports.PoundSignKey = exports.AtSignKey = exports.ExclamationPointKey = exports.GraveAccentKey = exports.TildeKey = exports.Digit9Key = exports.Digit8Key = exports.Digit7Key = exports.Digit6Key = exports.Digit5Key = exports.Digit4Key = exports.Digit3Key = exports.Digit2Key = exports.Digit1Key = exports.Digit0Key = exports.SpacebarKey = exports.keyboardKey = void 0;

var _codes = require("./codes");

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var isObject = function isObject(val) {
  return val !== null && !Array.isArray(val) && typeof val === 'object';
};
/**
 * Get the `keyCode` or `which` value from a keyboard event or `key` name.
 * If an object is provided, the precedence of properties is `keyCode`, `which`, `key`.
 * @param eventOrKey - A keyboard event-like object or `key` name. If an object, at least one of
 * `key`, `keyCode`, or `which` must be defined.
 */


function getCode(eventOrKey) {
  if (isObject(eventOrKey)) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return eventOrKey.keyCode || eventOrKey.which || keyboardKey[eventOrKey.key];
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  return keyboardKey[eventOrKey];
}
/**
 * Get the key name from a keyboard event, `keyCode`, or `which` value.
 * If an object is provided, the precedence of properties is `key`, `keyCode`, `which`.
 * @param eventOrCode - A keyboard event-like object or key code. If an object, at least one of
 * `key`, `keyCode`, or `which` must be defined.
 */


function getKey(eventOrCode) {
  var isEvent = isObject(eventOrCode);
  var event = eventOrCode; // handle events with a `key` already defined

  if (isEvent && event.key) {
    return event.key;
  }

  var name = _codes.codes[isEvent ? event.keyCode || event.which : eventOrCode];

  if (Array.isArray(name)) {
    if (isEvent) {
      name = name[event.shiftKey ? 1 : 0];
    } else {
      name = name[0];
    }
  }

  return name;
}
/**
 * Mapping of keyboard keys with aliases and codes.
 */


var keyboardKey = {}; // Populate names on keyboardKey.

exports.keyboardKey = keyboardKey;

for (var code in _codes.codes) {
  if (_codes.codes.hasOwnProperty(code)) {
    var value = _codes.codes[code];

    if (typeof value === 'string') {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      keyboardKey[value] = Number(code);
    } else {
      // Array of valid values which map to the same code.
      for (var i = 0; i < value.length; i++) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        keyboardKey[value[i]] = Number(code);
      }
    }
  }
} // As single exports for keys that normally have special functionality attached to them.


var SpacebarKey = keyboardKey[' '];
exports.SpacebarKey = SpacebarKey;
var Digit0Key = keyboardKey['0'];
exports.Digit0Key = Digit0Key;
var Digit1Key = keyboardKey['1'];
exports.Digit1Key = Digit1Key;
var Digit2Key = keyboardKey['2'];
exports.Digit2Key = Digit2Key;
var Digit3Key = keyboardKey['3'];
exports.Digit3Key = Digit3Key;
var Digit4Key = keyboardKey['4'];
exports.Digit4Key = Digit4Key;
var Digit5Key = keyboardKey['5'];
exports.Digit5Key = Digit5Key;
var Digit6Key = keyboardKey['6'];
exports.Digit6Key = Digit6Key;
var Digit7Key = keyboardKey['7'];
exports.Digit7Key = Digit7Key;
var Digit8Key = keyboardKey['8'];
exports.Digit8Key = Digit8Key;
var Digit9Key = keyboardKey['9'];
exports.Digit9Key = Digit9Key;
var TildeKey = keyboardKey['~'];
exports.TildeKey = TildeKey;
var GraveAccentKey = keyboardKey['`'];
exports.GraveAccentKey = GraveAccentKey;
var ExclamationPointKey = keyboardKey['!'];
exports.ExclamationPointKey = ExclamationPointKey;
var AtSignKey = keyboardKey['@'];
exports.AtSignKey = AtSignKey;
var PoundSignKey = keyboardKey['#'];
exports.PoundSignKey = PoundSignKey;
var PercentSignKey = keyboardKey['%'];
exports.PercentSignKey = PercentSignKey;
var CaretKey = keyboardKey['^'];
exports.CaretKey = CaretKey;
var AmpersandKey = keyboardKey['&'];
exports.AmpersandKey = AmpersandKey;
var PlusSignKey = keyboardKey['+'];
exports.PlusSignKey = PlusSignKey;
var MinusSignKey = keyboardKey['-'];
exports.MinusSignKey = MinusSignKey;
var EqualsSignKey = keyboardKey['='];
exports.EqualsSignKey = EqualsSignKey;
var DivisionSignKey = keyboardKey['/'];
exports.DivisionSignKey = DivisionSignKey;
var MultiplicationSignKey = keyboardKey['*'];
exports.MultiplicationSignKey = MultiplicationSignKey;
var CommaKey = keyboardKey[','];
exports.CommaKey = CommaKey;
var DecimalKey = keyboardKey['.'];
exports.DecimalKey = DecimalKey;
var ColonKey = keyboardKey[':'];
exports.ColonKey = ColonKey;
var SemicolonKey = keyboardKey[';'];
exports.SemicolonKey = SemicolonKey;
var PipeKey = keyboardKey['|'];
exports.PipeKey = PipeKey;
var BackSlashKey = keyboardKey['\\'];
exports.BackSlashKey = BackSlashKey;
var QuestionMarkKey = keyboardKey['?'];
exports.QuestionMarkKey = QuestionMarkKey;
var SingleQuoteKey = keyboardKey["'"];
exports.SingleQuoteKey = SingleQuoteKey;
var DoubleQuoteKey = keyboardKey['"'];
exports.DoubleQuoteKey = DoubleQuoteKey;
var LeftCurlyBraceKey = keyboardKey['{'];
exports.LeftCurlyBraceKey = LeftCurlyBraceKey;
var RightCurlyBraceKey = keyboardKey['}'];
exports.RightCurlyBraceKey = RightCurlyBraceKey;
var LeftParenthesisKey = keyboardKey['('];
exports.LeftParenthesisKey = LeftParenthesisKey;
var RightParenthesisKey = keyboardKey[')'];
exports.RightParenthesisKey = RightParenthesisKey;
var LeftAngleBracketKey = keyboardKey['<'];
exports.LeftAngleBracketKey = LeftAngleBracketKey;
var RightAngleBracketKey = keyboardKey['>'];
exports.RightAngleBracketKey = RightAngleBracketKey;
var LeftSquareBracketKey = keyboardKey['['];
exports.LeftSquareBracketKey = LeftSquareBracketKey;
var RightSquareBracketKey = keyboardKey[']'];
exports.RightSquareBracketKey = RightSquareBracketKey;
var ArrowDownKey = keyboardKey.ArrowDown;
exports.ArrowDownKey = ArrowDownKey;
var ArrowLeftKey = keyboardKey.ArrowLeft;
exports.ArrowLeftKey = ArrowLeftKey;
var ArrowRightKey = keyboardKey.ArrowRight;
exports.ArrowRightKey = ArrowRightKey;
var ArrowUpKey = keyboardKey.ArrowUp;
exports.ArrowUpKey = ArrowUpKey;
var EndKey = keyboardKey.End;
exports.EndKey = EndKey;
var EnterKey = keyboardKey.Enter;
exports.EnterKey = EnterKey;
var HomeKey = keyboardKey.Home;
exports.HomeKey = HomeKey;
var PageDownKey = keyboardKey.PageDown;
exports.PageDownKey = PageDownKey;
var PageUpKey = keyboardKey.PageUp;
exports.PageUpKey = PageUpKey;
var TabKey = keyboardKey.Tab;
exports.TabKey = TabKey;
//# sourceMappingURL=index.js.map
