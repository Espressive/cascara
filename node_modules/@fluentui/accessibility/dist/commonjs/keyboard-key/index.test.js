"use strict";

var _codes = require("./codes");

var _index = require("./index");

/* eslint-disable @typescript-eslint/no-explicit-any */
describe('keyboardKey', function () {
  it('has a key/value for every value/key in codes', function () {
    Object.keys(_codes.codes).forEach(function (code) {
      var name = _codes.codes[Number(code)];

      if (Array.isArray(name)) {
        expect(String(_index.keyboardKey[name[0]])).toEqual(code);
        expect(String(_index.keyboardKey[name[1]])).toEqual(code);
      } else {
        expect(String(_index.keyboardKey[name])).toEqual(code);
      }
    });
  });
  describe('getCode', function () {
    it('is a function', function () {
      expect(_index.getCode).toBeInstanceOf(Function);
    });
    it('returns the code for a given key name', function () {
      expect((0, _index.getCode)('Enter')).toEqual(13);
    });
    it('handles all key names in codes', function () {
      Object.keys(_codes.codes).forEach(function (code) {
        var name = _codes.codes[code];

        var _code = Number(code);

        if (Array.isArray(name)) {
          expect((0, _index.getCode)(name[0])).toEqual(_code);
          expect((0, _index.getCode)(name[1])).toEqual(_code);
        } else {
          expect((0, _index.getCode)(name)).toEqual(_code);
        }
      });
    });
    it('handles event like objects with `key` prop', function () {
      Object.keys(_codes.codes).forEach(function (code) {
        var name = _codes.codes[code];

        var _code = Number(code);

        if (Array.isArray(name)) {
          var key0 = {
            key: name[0],
            which: _code,
            keyCode: _code,
            shiftKey: false
          };
          var key1 = {
            key: name[1],
            which: _code,
            keyCode: _code,
            shiftKey: false
          };
          expect((0, _index.getCode)(key0)).toEqual(_code);
          expect((0, _index.getCode)(key1)).toEqual(_code);
        } else {
          var key = {
            key: name,
            which: _code,
            keyCode: _code,
            shiftKey: false
          };
          expect((0, _index.getCode)(key)).toEqual(_code);
        }
      });
    });
  });
  describe('getKey', function () {
    it('is a function', function () {
      expect(_index.getKey).toBeInstanceOf(Function);
    });
    it('returns the code for a given key name', function () {
      expect((0, _index.getKey)(13)).toEqual('Enter');
    });
    it('handles all codes', function () {
      Object.keys(_codes.codes).forEach(function (code) {
        var name = _codes.codes[code];
        var keyName = (0, _index.getKey)(Number(code));

        if (Array.isArray(name)) {
          expect(keyName).toEqual(name[0]);
        } else {
          expect(keyName).toEqual(name);
        }
      });
    });
    it('handles event like object: { keyCode: code, shiftKey: false }`', function () {
      Object.keys(_codes.codes).forEach(function (code) {
        var name = _codes.codes[code];

        var _code = Number(code);

        var keyName = (0, _index.getKey)({
          which: _code,
          keyCode: _code,
          shiftKey: false
        });

        if (Array.isArray(name)) {
          expect(keyName).toEqual(name[0]);
        } else {
          expect(keyName).toEqual(name);
        }
      });
    });
    it('handles event like object: { keyCode: code, shiftKey: true }`', function () {
      Object.keys(_codes.codes).forEach(function (code) {
        var name = _codes.codes[code];
        var keyName = (0, _index.getKey)({
          keyCode: Number(code),
          shiftKey: true
        });

        if (Array.isArray(name)) {
          expect(keyName).toEqual(name[1]);
        } else {
          expect(keyName).toEqual(name);
        }
      });
    });
    it('handles event like object: { which: code, shiftKey: false }', function () {
      Object.keys(_codes.codes).forEach(function (code) {
        var name = _codes.codes[code];
        var keyName = (0, _index.getKey)({
          which: Number(code),
          shiftKey: false
        });

        if (Array.isArray(name)) {
          expect(keyName).toEqual(name[0]);
        } else {
          expect(keyName).toEqual(name);
        }
      });
    });
    it('handles event like object: { which: code, shiftKey: true }', function () {
      Object.keys(_codes.codes).forEach(function (code) {
        var name = _codes.codes[code];
        var keyName = (0, _index.getKey)({
          which: Number(code),
          shiftKey: true
        });

        if (Array.isArray(name)) {
          expect(keyName).toEqual(name[1]);
        } else {
          expect(keyName).toEqual(name);
        }
      });
    });
    it('handles event like objects with a `key` property', function () {
      var keyName = (0, _index.getKey)({
        key: '/'
      });
      expect(keyName).toEqual('/');
    });
  });
});
//# sourceMappingURL=index.test.js.map
