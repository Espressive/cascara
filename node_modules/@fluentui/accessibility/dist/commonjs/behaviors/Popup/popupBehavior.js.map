{"version":3,"sources":["behaviors/Popup/popupBehavior.ts"],"names":["popupBehavior","props","onAsArray","on","tabbableTriggerProps","tabbableTrigger","tabIndex","getAriaAttributeFromProps","undefined","process","env","NODE_ENV","attributes","trigger","popup","role","trapFocus","inline","keyActions","closeAndFocusTrigger","keyCombinations","keyCode","keyboardKey","Escape","preventScroll","isOpenedByRightClick","ArrowDown","ArrowUp","PageDown","PageUp","Home","End","close","toggle","Enter","SpacebarKey","open","click","isFocusable","propsData","as","href","type","attributeName","defaultValue"],"mappings":"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","sourcesContent":["import { keyboardKey, SpacebarKey } from '../../keyboard-key';\nimport * as _ from 'lodash';\n\nimport { Accessibility } from '../../types';\n\nexport const popupBehavior: Accessibility<PopupBehaviorProps> = props => {\n  const onAsArray = _.isArray(props.on) ? props.on : [props.on];\n  const tabbableTriggerProps = props.tabbableTrigger\n    ? { tabIndex: getAriaAttributeFromProps('tabIndex', props, 0) }\n    : undefined;\n\n  if (tabbableTriggerProps) {\n    tabbableTriggerProps['aria-haspopup'] = 'dialog';\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Override the default trigger's accessibility schema class.\n      tabbableTriggerProps['data-aa-class'] = 'PopupButton';\n    }\n  }\n\n  return {\n    attributes: {\n      trigger: {\n        ...tabbableTriggerProps,\n      },\n      popup: {\n        role: props.trapFocus ? 'dialog' : props.inline ? undefined : 'complementary',\n        'aria-modal': props.trapFocus ? true : undefined,\n        'data-popup-trapfocus': props.trapFocus ? true : undefined,\n      },\n    },\n    keyActions: {\n      popup: {\n        closeAndFocusTrigger: {\n          keyCombinations: [{ keyCode: keyboardKey.Escape }],\n        },\n        preventScroll: {\n          keyCombinations: props.isOpenedByRightClick &&\n            _.includes(onAsArray, 'context') && [\n              { keyCode: keyboardKey.ArrowDown },\n              { keyCode: keyboardKey.ArrowUp },\n              { keyCode: keyboardKey.PageDown },\n              { keyCode: keyboardKey.PageUp },\n              { keyCode: keyboardKey.Home },\n              { keyCode: keyboardKey.End },\n            ],\n        },\n      },\n      trigger: {\n        close: {\n          keyCombinations: [{ keyCode: keyboardKey.Escape }],\n        },\n        toggle: {\n          keyCombinations: _.includes(onAsArray, 'click') && [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n        open: {\n          keyCombinations: _.includes(onAsArray, 'hover') &&\n            !_.includes(onAsArray, 'context') && [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n        click: {\n          keyCombinations: _.includes(onAsArray, 'hover') &&\n            !_.includes(onAsArray, 'context') && [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n      },\n    },\n  };\n};\n\nconst isFocusable = propsData => {\n  try {\n    const { as, href, type } = propsData;\n    return type === 'button' || type === 'input' || (type === 'a' && href !== undefined) || as === 'button';\n  } catch {\n    return false;\n  }\n};\n\nconst getAriaAttributeFromProps = (attributeName: string, props: any, defaultValue: number | string) => {\n  if (!props.trigger) return undefined;\n  if (props.trigger.props[attributeName]) {\n    return props.trigger.props[attributeName];\n  }\n  const { as, href } = props.trigger.props;\n  const { type } = props.trigger;\n  if (isFocusable({ as, href, type })) {\n    return undefined;\n  }\n  return defaultValue;\n};\n\ntype PopupEvents = 'click' | 'hover' | 'focus' | 'context';\ntype RestrictedClickEvents = 'click' | 'focus';\ntype RestrictedHoverEvents = 'hover' | 'focus' | 'context';\ntype PopupEventsArray = RestrictedClickEvents[] | RestrictedHoverEvents[];\n\nexport type PopupBehaviorProps = {\n  /** Indicates if focus should be trapped inside popup's container. */\n  trapFocus?: boolean | object;\n  /** Events triggering the popup. */\n  on?: PopupEvents | PopupEventsArray;\n  /** Element which triggers popup */\n  trigger?: {\n    props?: {\n      /** Element type. */\n      as?: string;\n      href?: string;\n      tabIndex?: string;\n    };\n    /** Element type. */\n    type?: string;\n  };\n  /** Whether the trigger should be tabbable */\n  tabbableTrigger?: boolean;\n  /** Whether the popup was opened by right click */\n  isOpenedByRightClick?: boolean;\n  /** Whether the Popup should be rendered inline with the trigger or in the body. */\n  inline?: boolean;\n};\n"],"file":"popupBehavior.js"}