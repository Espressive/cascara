{"version":3,"sources":["behaviors/Accordion/accordionTitleBehavior.ts"],"names":["accordionTitleBehavior","props","isHeading","test","as","forcedOpen","active","canBeCollapsed","attributes","root","role","undefined","content","disabled","accordionContentId","tabIndex","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey"],"mappings":";;;;;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,sBAAkE,GAAG,SAArEA,sBAAqE,CAAAC,KAAK,EAAI;AACzF,MAAMC,SAAS,GAAG,YAAYC,IAAZ,CAAiBF,KAAK,CAACG,EAAvB,CAAlB;AACA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,MAAN,IAAgB,CAACL,KAAK,CAACM,cAA1C;AACA,SAAO;AACLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAER,SAAS,GAAGS,SAAH,GAAe,SAD1B;AAEJ,sBAAcT,SAAS,GAAGS,SAAH,GAAe;AAFlC,OADI;AAKVC,MAAAA,OAAO,EAAE;AACP,yBAAiB,CAAC,CAACX,KAAK,CAACK,MADlB;AAEP,yBAAiB,CAAC,EAAED,UAAU,IAAIJ,KAAK,CAACY,QAAtB,CAFX;AAGP,yBAAiBZ,KAAK,CAACa,kBAHhB;AAIPJ,QAAAA,IAAI,EAAE,QAJC;AAKPK,QAAAA,QAAQ,EAAE;AALH;AALC,KADP;AAcLC,IAAAA,UAAU,EAAE;AACVJ,MAAAA,OAAO,EAAE;AACPK,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,yBAAYC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADP;AADC;AAdP,GAAP;AAsBD,CAzBM","sourcesContent":["import { keyboardKey, SpacebarKey } from '../../keyboard-key';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * Adds accessibility attributed to implement the Accordion design pattern.\n * Adds 'aria-disabled' to the 'content' slot with a value based on disabled, active and canBeCollapsed props.\n * Adds role='heading' and aria-level='3' if the element type is not a header.\n *\n * @specification\n * Adds attribute 'role=button' to 'content' slot.\n * Adds attribute 'tabIndex=0' to 'content' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'active' to 'content' slot.\n * Adds attribute 'aria-controls=content-id' based on the property 'accordionContentId' to 'content' slot.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'content'.\n */\nexport const accordionTitleBehavior: Accessibility<AccordionTitleBehaviorProps> = props => {\n  const isHeading = /(h\\d{1})$/.test(props.as);\n  const forcedOpen = props.active && !props.canBeCollapsed;\n  return {\n    attributes: {\n      root: {\n        role: isHeading ? undefined : 'heading',\n        'aria-level': isHeading ? undefined : 3,\n      },\n      content: {\n        'aria-expanded': !!props.active,\n        'aria-disabled': !!(forcedOpen || props.disabled),\n        'aria-controls': props.accordionContentId,\n        role: 'button',\n        tabIndex: 0,\n      },\n    },\n    keyActions: {\n      content: {\n        performClick: {\n          keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n      },\n    },\n  };\n};\n\nexport type AccordionTitleBehaviorProps = {\n  /** Element type. */\n  as?: string;\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n};\n"],"file":"accordionTitleBehavior.js"}