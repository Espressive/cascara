"use strict";

exports.__esModule = true;
exports.chatBehavior = void 0;

var _keyboardKey = require("../../keyboard-key");

var _attributes = require("../../attributes");

var _types = require("../../focusZone/types");

var CHAT_FOCUSZONE_ATTRIBUTE = 'chat-focuszone';
/**
 * @description
 * Adds a vertical focus zone navigation with a last message as a default tabbable element, pressing enter key focuses inside a message.
 *
 * @specification
 * Provides arrow key navigation in vertical direction.
 * Focus is set initially on the specified default tabbable element.
 * Focused active element of the component is reset when TAB from the component.
 * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.
 * Does not handle PageDown and PageUp.
 */

var chatBehavior = function chatBehavior() {
  var _props;

  return {
    attributes: {
      root: {}
    },
    focusZone: {
      props: (_props = {
        shouldEnterInnerZone: function shouldEnterInnerZone(event) {
          return (0, _keyboardKey.getCode)(event) === _keyboardKey.keyboardKey.Enter;
        },
        direction: _types.FocusZoneDirection.vertical,
        shouldResetActiveElementWhenTabFromZone: true,
        defaultTabbableElement: getLastTabbableElement
      }, _props[CHAT_FOCUSZONE_ATTRIBUTE] = '', _props.pagingSupportDisabled = true, _props)
    }
  };
};

exports.chatBehavior = chatBehavior;

var getLastTabbableElement = function getLastTabbableElement(root) {
  var lastVisibleMessage = root.querySelector('[data-last-visible="true"]');
  if (lastVisibleMessage) return lastVisibleMessage;
  var chatItemsElements = root.querySelectorAll("[" + CHAT_FOCUSZONE_ATTRIBUTE + "] .ui-chat__message[" + _attributes.IS_FOCUSABLE_ATTRIBUTE + "=\"true\"]");
  return chatItemsElements.length > 0 ? chatItemsElements[chatItemsElements.length - 1] : null;
};
//# sourceMappingURL=chatBehavior.js.map
