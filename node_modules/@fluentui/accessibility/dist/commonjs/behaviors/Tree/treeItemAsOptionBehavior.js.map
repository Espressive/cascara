{"version":3,"sources":["behaviors/Tree/treeItemAsOptionBehavior.ts"],"names":["treeItemAsOptionBehavior","props","behavior","definition","attributes","root","role","hasSubtree","tabIndex","IS_FOCUSABLE_ATTRIBUTE","treeSize","index","selectable","selected","childBehaviors","title","treeTitleAsOptionBehavior","process","env","NODE_ENV"],"mappings":";;;;;AACA;;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,wBAA8D,GAAG,SAAjEA,wBAAiE,CAAAC,KAAK,EAAI;AAAA;;AACrF,MAAMC,QAAQ,GAAG,wCAAiBD,KAAjB,CAAjB;AAEA,MAAME,UAAU,qBACXD,QADW;AAEdE,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI;AACFC,QAAAA,IAAI,EAAE;AADJ,SAEEL,KAAK,CAACM,UAAN;AACFC,QAAAA,QAAQ,EAAE,CAAC;AADT,wBAEDC,kCAFC,IAEwB,IAFxB,iBAGFH,IAHE,GAGI,QAHJ,iBAIF,cAJE,IAIcL,KAAK,CAACS,QAJpB,iBAKF,eALE,IAKeT,KAAK,CAACU,KALrB,mBAMEV,KAAK,CAACW,UAAN,IAAoB;AAAE,yBAAiB,CAAC,CAACX,KAAK,CAACY;AAA3B,OANtB,CAFF;AADM,KAFE;AAedC,IAAAA,cAAc,EAAE;AACdC,MAAAA,KAAK,EAAEC;AADO;AAfF,IAAhB;;AAoBA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIlB,KAAK,CAACM,UAAV,EAAsBJ,UAAU,CAACC,UAAX,CAAsBC,IAAtB,CAA2B,eAA3B,IAA8C,gBAA9C,CAAtB,KACKF,UAAU,CAACC,UAAX,CAAsBC,IAAtB,CAA2B,eAA3B,IAA8CH,QAAQ,CAACE,UAAT,CAAoBC,IAApB,CAAyB,eAAzB,CAA9C;AACN;;AAED,SAAOF,UAAP;AACD,CA7BM","sourcesContent":["import { Accessibility, AriaRole } from '../../types';\nimport { treeItemBehavior, TreeItemBehaviorProps } from './treeItemBehavior';\nimport { treeTitleAsOptionBehavior } from './treeTitleAsOptionBehavior';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n\n/**\n * @description\n * Adds role 'option' to a non-leaf item.\n * Adds 'aria-selected' to a non-leaf item if it is selectable, based on the 'selected' property\n * @specification\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'role=option' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const treeItemAsOptionBehavior: Accessibility<TreeItemBehaviorProps> = props => {\n  const behavior = treeItemBehavior(props);\n\n  const definition = {\n    ...behavior,\n    attributes: {\n      root: {\n        role: 'none',\n        ...(props.hasSubtree && {\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'option' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          ...(props.selectable && { 'aria-selected': !!props.selected }),\n        }),\n      },\n    },\n    childBehaviors: {\n      title: treeTitleAsOptionBehavior,\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.hasSubtree) definition.attributes.root['data-aa-class'] = 'TreeItemOption';\n    else definition.attributes.root['data-aa-class'] = behavior.attributes.root['data-aa-class'];\n  }\n\n  return definition;\n};\n"],"file":"treeItemAsOptionBehavior.js"}