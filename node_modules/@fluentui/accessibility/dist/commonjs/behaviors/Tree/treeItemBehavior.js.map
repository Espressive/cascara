{"version":3,"sources":["behaviors/Tree/treeItemBehavior.ts"],"names":["treeItemBehavior","props","definition","attributes","root","role","hasSubtree","expanded","tabIndex","IS_FOCUSABLE_ATTRIBUTE","treeSize","index","level","selectable","indeterminate","selected","keyActions","performClick","keyCombinations","keyCode","EnterKey","SpacebarKey","collapse","keyboardKey","ArrowLeft","focusFirstChild","ArrowRight","expand","focusParent","expandSiblings","Enter","performSelection","childBehaviors","title","treeTitleBehavior","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import { keyboardKey, SpacebarKey, EnterKey } from '../../keyboard-key';\nimport { Accessibility, AriaRole } from '../../types';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { treeTitleBehavior } from './treeTitleBehavior';\n\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * Adds attribute 'aria-checked=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property true. Does not set anything if false or undefined.\n *\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has no subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const treeItemBehavior: Accessibility<TreeItemBehaviorProps> = props => {\n  const definition = {\n    attributes: {\n      root: {\n        role: 'none',\n        ...(props.hasSubtree && {\n          'aria-expanded': props.expanded,\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'treeitem' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          'aria-level': props.level,\n          ...(props.selectable && {\n            'aria-checked': props.indeterminate ? ('mixed' as const) : !!props.selected,\n          }),\n        }),\n      },\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{ keyCode: EnterKey }, { keyCode: SpacebarKey }],\n        },\n        ...(props.hasSubtree\n          ? props.expanded\n            ? {\n                collapse: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n                },\n                focusFirstChild: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n                },\n              }\n            : {\n                expand: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n                },\n                focusParent: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n                },\n              }\n          : {\n              focusParent: {\n                keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n              },\n            }),\n        expandSiblings: {\n          keyCombinations: [{ keyCode: keyboardKey['*'] }],\n        },\n        ...(props.selectable && {\n          performClick: {\n            keyCombinations: props.hasSubtree ? [{ keyCode: keyboardKey.Enter }] : [{ keyCode: SpacebarKey }],\n          },\n          performSelection: {\n            keyCombinations: [{ keyCode: SpacebarKey }],\n          },\n        }),\n      },\n    },\n    childBehaviors: {\n      title: treeTitleBehavior,\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'SingleTreeItem';\n  }\n\n  return definition;\n};\n\nexport type TreeItemBehaviorProps = {\n  /** If item is a subtree, it indicates if it's expanded. */\n  expanded?: boolean;\n  level?: number;\n  index?: number;\n  hasSubtree?: boolean;\n  treeSize?: number;\n  selectable?: boolean;\n  selected?: boolean;\n  indeterminate?: boolean;\n};\n"],"file":"treeItemBehavior.js"}