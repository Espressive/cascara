"use strict";

exports.__esModule = true;
exports.gridNestedBehavior = void 0;

var _keyboardKey = require("../../keyboard-key");

var _types = require("../../focusZone/types");

var _gridRowBehavior = require("./gridRowBehavior");

/**
 * @specification
 * Adds role='grid'.
 * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.
 * Provides arrow key navigation in vertical direction.
 * Focused active element of the component is reset when TAB from the component.
 * Triggers 'focus' action with 'Escape' on 'root'.
 * Applies 'gridRowBehavior' for 'row' child component.
 */
var gridNestedBehavior = function gridNestedBehavior() {
  return {
    attributes: {
      root: {
        role: 'grid'
      }
    },
    focusZone: {
      props: {
        shouldEnterInnerZone: function shouldEnterInnerZone(event) {
          return (0, _keyboardKey.getCode)(event) === _keyboardKey.keyboardKey.ArrowRight;
        },
        direction: _types.FocusZoneDirection.vertical,
        shouldResetActiveElementWhenTabFromZone: true
      }
    },
    keyActions: {
      root: {
        focus: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.Escape
          }]
        }
      }
    },
    childBehaviors: {
      row: _gridRowBehavior.gridRowBehavior
    }
  };
};

exports.gridNestedBehavior = gridNestedBehavior;
//# sourceMappingURL=gridNestedBehavior.js.map
