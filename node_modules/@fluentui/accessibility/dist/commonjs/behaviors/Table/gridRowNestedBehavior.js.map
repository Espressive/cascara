{"version":3,"sources":["behaviors/Table/gridRowNestedBehavior.ts"],"names":["gridRowNestedBehavior","props","attributes","root","IS_FOCUSABLE_ATTRIBUTE","role","selected","focusZone","shouldEnterInnerZone","event","keyboardKey","Enter","direction","FocusZoneDirection","horizontal","keyActions","unsetRowTabbable","keyCombinations","keyCode","Tab","shiftKey","performClick","SpacebarKey","childBehaviors","cell","gridCellBehavior"],"mappings":";;;;;AACA;;AACA;;AACA;;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,qBAA0D,GAAG,SAA7DA,qBAA6D,CAAAC,KAAK;AAAA;;AAAA,SAAK;AAClFC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,qBACDC,kCADC,IACwB,IADxB,QAEFC,IAFE,GAEI,KAFJ,QAGF,eAHE,IAGeJ,KAAK,CAACK,QAHrB;AADM,KADsE;AAQlFC,IAAAA,SAAS,EAAE;AACTN,MAAAA,KAAK,EAAE;AACLO,QAAAA,oBAAoB,EAAE,8BAAAC,KAAK;AAAA,iBAAI,0BAAQA,KAAR,MAAmBC,yBAAYC,KAAnC;AAAA,SADtB;AAELC,QAAAA,SAAS,EAAEC,0BAAmBC;AAFzB;AADE,KARuE;AAclFC,IAAAA,UAAU,EAAE;AACVZ,MAAAA,IAAI,EAAE;AACJa,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAER,yBAAYS,GAAvB;AAA4BC,YAAAA,QAAQ,EAAE;AAAtC,WAAD;AADD,SADd;AAIJC,QAAAA,YAAY,EAAE;AACZJ,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAER,yBAAYC;AAAvB,WAAD,EAAiC;AAAEO,YAAAA,OAAO,EAAEI;AAAX,WAAjC;AADL;AAJV;AADI,KAdsE;AAwBlFC,IAAAA,cAAc,EAAE;AACdC,MAAAA,IAAI,EAAEC;AADQ;AAxBkE,GAAL;AAAA,CAAxE","sourcesContent":["import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { getCode, keyboardKey, SpacebarKey } from '../../keyboard-key';\nimport { gridCellBehavior } from './gridCellBehavior';\nimport { GridRowBehaviorProps } from './gridRowBehavior';\n\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Adds attribute 'aria-selected=true' based on the property 'selected'. Based on this screen readers will recognize the selected state of the item.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Provides arrow key navigation in horizontal direction.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridCellBehavior' for 'cell' child component.\n */\nexport const gridRowNestedBehavior: Accessibility<GridRowBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n      role: 'row',\n      'aria-selected': props.selected,\n    },\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => getCode(event) === keyboardKey.Enter,\n      direction: FocusZoneDirection.horizontal,\n    },\n  },\n  keyActions: {\n    root: {\n      unsetRowTabbable: {\n        keyCombinations: [{ keyCode: keyboardKey.Tab, shiftKey: true }],\n      },\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n  },\n  childBehaviors: {\n    cell: gridCellBehavior,\n  },\n});\n"],"file":"gridRowNestedBehavior.js"}