"use strict";

exports.__esModule = true;
exports.menuItemBehavior = void 0;

var _keyboardKey = require("../../keyboard-key");

/**
 * @description
 * The behavior is designed for particular structure of menu item. The item consists of root element and anchor inside the root element.
 *
 * @specification
 * Adds role 'presentation' to 'wrapper' slot.
 * Adds role 'menuitem' to 'root' slot.
 * Adds attribute 'tabIndex=0' to 'root' slot.
 * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.
 * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.
 * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.
 * Adds attribute 'aria-expanded=true' based on the property 'menuOpen' if the component has 'hasMenu' property to 'root' slot.
 * Adds attribute 'aria-haspopup=true' to 'root' slot if 'hasMenu' property is set.
 * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper'.
 * Triggers 'closeAllMenusAndFocusNextParentItem' action with 'ArrowRight' on 'wrapper'.
 * Triggers 'closeMenu' action with 'ArrowLeft' on 'wrapper'.
 * Triggers 'openMenu' action with 'ArrowDown' on 'wrapper', when orientation is horizontal.
 * Triggers 'openMenu' action with 'ArrowRight' on 'wrapper', when orientation is vertical.
 */
var menuItemBehavior = function menuItemBehavior(props) {
  return {
    attributes: {
      wrapper: {
        role: 'presentation'
      },
      root: {
        role: 'menuitem',
        tabIndex: 0,
        'aria-expanded': props.hasMenu ? props.menuOpen || false : undefined,
        'aria-haspopup': props.hasMenu ? 'true' : undefined,
        'aria-label': props['aria-label'],
        'aria-labelledby': props['aria-labelledby'],
        'aria-describedby': props['aria-describedby'],
        'aria-disabled': props.disabled
      }
    },
    keyActions: {
      root: {
        performClick: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.Enter
          }, {
            keyCode: _keyboardKey.SpacebarKey
          }]
        }
      },
      wrapper: {
        closeAllMenus: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.Enter
          }, {
            keyCode: _keyboardKey.SpacebarKey
          }]
        },
        closeAllMenusAndFocusNextParentItem: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.ArrowRight
          }]
        },
        closeMenuAndFocusTrigger: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.Escape
          }]
        },
        closeMenu: {
          keyCombinations: [{
            keyCode: _keyboardKey.keyboardKey.ArrowLeft
          }]
        },
        openMenu: {
          keyCombinations: [{
            keyCode: props.vertical ? _keyboardKey.keyboardKey.ArrowRight : _keyboardKey.keyboardKey.ArrowDown
          }]
        }
      }
    }
  };
};

exports.menuItemBehavior = menuItemBehavior;
//# sourceMappingURL=menuItemBehavior.js.map
