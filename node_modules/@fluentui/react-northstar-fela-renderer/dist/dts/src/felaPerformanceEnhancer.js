"use strict";
//
// This file is one-to-one copy-paste from Fela source code. It includes `_renderStyleToClassNames()` and all
// non-exported utils.
// A single change is only one line inside `generateDeclarationReference()`.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.felaPerformanceEnhancer = void 0;
var tslib_1 = require("tslib");
// @ts-ignore
var cssifyDeclaration_1 = require("css-in-js-utils/lib/cssifyDeclaration");
var fela_utils_1 = require("fela-utils");
function isPlainObject(val) {
    return val != null && typeof val === 'object' && Array.isArray(val) === false;
}
var chars = 'abcdefghijklmnopqrstuvwxyz';
var charLength = chars.length;
function generateUniqueClassName(id, className) {
    if (className === void 0) { className = ''; }
    if (id <= charLength) {
        return chars[id - 1] + className;
    }
    // Bitwise floor as safari performs much faster
    // https://jsperf.com/math-floor-vs-math-round-vs-parseint/55
    return generateUniqueClassName((id / charLength) | 0, chars[id % charLength] + className);
}
function generateClassName(getId, filterClassName) {
    if (filterClassName === void 0) { filterClassName = function () { return true; }; }
    var startId = getId();
    var generatedClassName = generateUniqueClassName(startId);
    if (!filterClassName(generatedClassName)) {
        return generateClassName(getId, filterClassName);
    }
    return generatedClassName;
}
function generateDeclarationReference(property, value, pseudo, media, support) {
    //
    // This a single perf change here, it removes `camelCaseProperty()` call
    //
    if (pseudo === void 0) { pseudo = ''; }
    if (media === void 0) { media = ''; }
    if (support === void 0) { support = ''; }
    // CHANGE:START
    return support + media + pseudo + property + value;
    // CHANGE:END
}
//
function felaPerformanceEnhancer(renderer) {
    renderer._renderStyleToClassNames = function _renderStyleToClassNames(_a, pseudo, media, support) {
        if (pseudo === void 0) { pseudo = ''; }
        if (media === void 0) { media = ''; }
        if (support === void 0) { support = ''; }
        var _className = _a._className, style = tslib_1.__rest(_a, ["_className"]);
        var classNames = _className ? " " + _className : '';
        for (var property in style) {
            var value = style[property];
            if (isPlainObject(value)) {
                if (fela_utils_1.isNestedSelector(property)) {
                    classNames += renderer._renderStyleToClassNames(value, pseudo + fela_utils_1.normalizeNestedProperty(property), media, support);
                }
                else if (fela_utils_1.isMediaQuery(property)) {
                    var combinedMediaQuery = fela_utils_1.generateCombinedMediaQuery(media, property.slice(6).trim());
                    classNames += renderer._renderStyleToClassNames(value, pseudo, combinedMediaQuery, support);
                }
                else if (fela_utils_1.isSupport(property)) {
                    var combinedSupport = fela_utils_1.generateCombinedMediaQuery(support, property.slice(9).trim());
                    classNames += renderer._renderStyleToClassNames(value, pseudo, media, combinedSupport);
                }
                else {
                    // eslint-disable-next-line no-console
                    console.warn("The object key \"" + property + "\" is not a valid nested key in Fela.\nMaybe you forgot to add a plugin to resolve it?\nCheck http://fela.js.org/docs/basics/Rules.html#styleobject for more information.");
                }
            }
            else {
                var declarationReference = generateDeclarationReference(property, value, pseudo, media, support);
                if (!renderer.cache.hasOwnProperty(declarationReference)) {
                    // we remove undefined values to enable
                    // usage of optional props without side-effects
                    if (fela_utils_1.isUndefinedValue(value)) {
                        renderer.cache[declarationReference] = {
                            className: '',
                        };
                        /* eslint-disable no-continue */
                        continue;
                        /* eslint-enable */
                    }
                    var className = renderer.selectorPrefix + generateClassName(renderer.getNextRuleIdentifier, renderer.filterClassName);
                    var declaration = cssifyDeclaration_1.default(property, value);
                    var selector = fela_utils_1.generateCSSSelector(className, pseudo);
                    var change = {
                        type: fela_utils_1.RULE_TYPE,
                        className: className,
                        selector: selector,
                        declaration: declaration,
                        pseudo: pseudo,
                        media: media,
                        support: support,
                    };
                    renderer.cache[declarationReference] = change;
                    renderer._emitChange(change);
                }
                var cachedClassName = renderer.cache[declarationReference].className;
                // only append if we got a class cached
                if (cachedClassName) {
                    classNames += " " + cachedClassName;
                }
            }
        }
        return classNames;
    };
    return renderer;
}
exports.felaPerformanceEnhancer = felaPerformanceEnhancer;
