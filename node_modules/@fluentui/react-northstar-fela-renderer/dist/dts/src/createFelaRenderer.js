"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFelaRenderer = void 0;
var tslib_1 = require("tslib");
var fela_1 = require("fela");
var fela_plugin_embedded_1 = require("fela-plugin-embedded");
var fela_plugin_fallback_value_1 = require("fela-plugin-fallback-value");
var fela_plugin_placeholder_prefixer_1 = require("fela-plugin-placeholder-prefixer");
var fela_plugin_rtl_1 = require("fela-plugin-rtl");
var React = require("react");
var react_fela_1 = require("react-fela");
var felaDisableAnimationsPlugin_1 = require("./felaDisableAnimationsPlugin");
var felaExpandCssShorthandsPlugin_1 = require("./felaExpandCssShorthandsPlugin");
var felaFocusVisibleEnhancer_1 = require("./felaFocusVisibleEnhancer");
var felaInvokeKeyframesPlugin_1 = require("./felaInvokeKeyframesPlugin");
var felaPerformanceEnhancer_1 = require("./felaPerformanceEnhancer");
var felaSanitizeCssPlugin_1 = require("./felaSanitizeCssPlugin");
var felaStylisEnhancer_1 = require("./felaStylisEnhancer");
var felaDevMode = false;
try {
    // eslint-disable-next-line no-undef
    felaDevMode = !!window.localStorage.felaDevMode;
}
catch (_a) { }
if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
    if (felaDevMode) {
        /* eslint-disable-next-line no-console */
        console.warn([
            '@fluentui/react-northstar:',
            'You are running Fela in development mode and this can cause performance degrades.',
            'To disable it please paste `delete window.localStorage.felaDevMode` to your browsers console and reload current page.',
        ].join(' '));
    }
    else {
        /* eslint-disable-next-line no-console */
        console.warn([
            '@fluentui/react-northstar:',
            'You are running Fela in production mode.',
            'This limits your ability to edit styles in browsers development tools.',
            'To enable development mode please paste `window.localStorage.felaDevMode = true` to your browsers console and reload the page.',
        ].join(' '));
    }
}
var blacklistedClassNames = [
    // Blacklist contains a list of classNames that are used by FontAwesome
    // https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use
    'fa',
    'fas',
    'far',
    'fal',
    'fab',
    // .cke is used by CKEditor
    'ck',
    'cke',
];
var filterClassName = function (className) {
    return className.indexOf('ad') === -1 && blacklistedClassNames.indexOf(className) === -1;
};
var rendererConfig = {
    devMode: felaDevMode,
    filterClassName: filterClassName,
    enhancers: [felaPerformanceEnhancer_1.felaPerformanceEnhancer, felaFocusVisibleEnhancer_1.felaFocusVisibleEnhancer, felaStylisEnhancer_1.felaStylisEnhancer],
    plugins: [
        felaDisableAnimationsPlugin_1.felaDisableAnimationsPlugin,
        // is necessary to prevent accidental style typos
        // from breaking ALL the styles on the page
        felaSanitizeCssPlugin_1.felaSanitizeCssPlugin,
        fela_plugin_placeholder_prefixer_1.default(),
        felaInvokeKeyframesPlugin_1.felaInvokeKeyframesPlugin,
        fela_plugin_embedded_1.default(),
        felaExpandCssShorthandsPlugin_1.felaExpandCssShorthandsPlugin,
        // Heads up!
        // This is required after fela-plugin-prefixer to resolve the array of fallback values prefixer produces.
        fela_plugin_fallback_value_1.default(),
        fela_plugin_rtl_1.default(),
    ],
};
var createFelaRenderer = function (target) {
    var felaRenderer = fela_1.createRenderer(rendererConfig);
    var usedRenderers = 0;
    // rehydration disabled to avoid leaking styles between renderers
    // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md
    var Provider = function (props) { return (React.createElement(react_fela_1.RendererProvider, tslib_1.__assign({ renderer: felaRenderer }, { rehydrate: false, targetDocument: target }), props.children)); };
    return {
        registerUsage: function () {
            usedRenderers += 1;
        },
        unregisterUsage: function () {
            usedRenderers -= 1;
            if (usedRenderers === 0) {
                felaRenderer.listeners = [];
                felaRenderer.nodes = {};
                felaRenderer.updateSubscription = undefined;
            }
        },
        renderFont: function (font) {
            felaRenderer.renderFont(font.name, font.paths, font.props);
        },
        renderGlobal: felaRenderer.renderStatic,
        renderRule: function (styles, param) {
            var felaParam = tslib_1.__assign(tslib_1.__assign({}, param), { theme: { direction: param.direction } });
            return felaRenderer.renderRule(function () { return styles; }, felaParam);
        },
        // getOriginalRenderer() is implemented only for tests to be compatible with jest-react-fela expectations.
        getOriginalRenderer: function () {
            if (process.env.NODE_ENV !== 'test') {
                throw new Error('This method implements private API and can be used only in tests');
            }
            return felaRenderer;
        },
        Provider: Provider,
    };
};
exports.createFelaRenderer = createFelaRenderer;
