"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.felaDisableAnimationsPlugin = void 0;
var tslib_1 = require("tslib");
var animationProps = [
    'animation',
    'animationName',
    'animationDuration',
    'animationTimingFunction',
    'animationDelay',
    'animationIterationCount',
    'animationDirection',
    'animationFillMode',
    'animationPlayState',
];
function isPlainObject(val) {
    return val != null && typeof val === 'object' && Array.isArray(val) === false;
}
/**
 * Fela plugin for disabling animations. The animations are disabled or not based on the
 * props' disableAnimations param. If the value of the prop is true, all animation related
 * styles are removed.
 *
 * Caution! Infinite recursion is possible in case if style object has links to self in the props
 * tree.
 */
var felaDisableAnimationsPlugin = function (styles, type, renderer, props) {
    if (props && props.disableAnimations && type === 'RULE') {
        return Object.keys(styles).reduce(function (acc, cssPropertyName) {
            var _a, _b;
            var cssPropertyValue = styles[cssPropertyName];
            if (animationProps.indexOf(cssPropertyName) !== -1) {
                return acc;
            }
            if (isPlainObject(cssPropertyValue)) {
                return tslib_1.__assign(tslib_1.__assign({}, acc), (_a = {}, _a[cssPropertyName] = exports.felaDisableAnimationsPlugin(cssPropertyValue, type, renderer, props), _a));
            }
            return tslib_1.__assign(tslib_1.__assign({}, acc), (_b = {}, _b[cssPropertyName] = styles[cssPropertyName], _b));
        }, {});
    }
    return styles;
};
exports.felaDisableAnimationsPlugin = felaDisableAnimationsPlugin;
