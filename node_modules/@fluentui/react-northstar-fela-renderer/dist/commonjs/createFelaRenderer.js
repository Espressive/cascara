"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.createFelaRenderer = void 0;

var _fela = require("fela");

var _felaPluginEmbedded = _interopRequireDefault(require("fela-plugin-embedded"));

var _felaPluginFallbackValue = _interopRequireDefault(require("fela-plugin-fallback-value"));

var _felaPluginPlaceholderPrefixer = _interopRequireDefault(require("fela-plugin-placeholder-prefixer"));

var _felaPluginRtl = _interopRequireDefault(require("fela-plugin-rtl"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _felaDisableAnimationsPlugin = require("./felaDisableAnimationsPlugin");

var _felaExpandCssShorthandsPlugin = require("./felaExpandCssShorthandsPlugin");

var _felaFocusVisibleEnhancer = require("./felaFocusVisibleEnhancer");

var _felaInvokeKeyframesPlugin = require("./felaInvokeKeyframesPlugin");

var _felaPerformanceEnhancer = require("./felaPerformanceEnhancer");

var _felaSanitizeCssPlugin = require("./felaSanitizeCssPlugin");

var _felaStylisEnhancer = require("./felaStylisEnhancer");

var felaDevMode = false;

try {
  // eslint-disable-next-line no-undef
  felaDevMode = !!window.localStorage.felaDevMode;
} catch (_unused) {}

if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
  if (felaDevMode) {
    /* eslint-disable-next-line no-console */
    console.warn(['@fluentui/react-northstar:', 'You are running Fela in development mode and this can cause performance degrades.', 'To disable it please paste `delete window.localStorage.felaDevMode` to your browsers console and reload current page.'].join(' '));
  } else {
    /* eslint-disable-next-line no-console */
    console.warn(['@fluentui/react-northstar:', 'You are running Fela in production mode.', 'This limits your ability to edit styles in browsers development tools.', 'To enable development mode please paste `window.localStorage.felaDevMode = true` to your browsers console and reload the page.'].join(' '));
  }
}

var blacklistedClassNames = [// Blacklist contains a list of classNames that are used by FontAwesome
// https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use
'fa', 'fas', 'far', 'fal', 'fab', // .cke is used by CKEditor
'ck', 'cke'];

var filterClassName = function filterClassName(className) {
  return className.indexOf('ad') === -1 && blacklistedClassNames.indexOf(className) === -1;
};

var rendererConfig = {
  devMode: felaDevMode,
  filterClassName: filterClassName,
  enhancers: [_felaPerformanceEnhancer.felaPerformanceEnhancer, _felaFocusVisibleEnhancer.felaFocusVisibleEnhancer, _felaStylisEnhancer.felaStylisEnhancer],
  plugins: [_felaDisableAnimationsPlugin.felaDisableAnimationsPlugin, // is necessary to prevent accidental style typos
  // from breaking ALL the styles on the page
  _felaSanitizeCssPlugin.felaSanitizeCssPlugin, (0, _felaPluginPlaceholderPrefixer.default)(), _felaInvokeKeyframesPlugin.felaInvokeKeyframesPlugin, (0, _felaPluginEmbedded.default)(), _felaExpandCssShorthandsPlugin.felaExpandCssShorthandsPlugin, // Heads up!
  // This is required after fela-plugin-prefixer to resolve the array of fallback values prefixer produces.
  (0, _felaPluginFallbackValue.default)(), (0, _felaPluginRtl.default)()]
};

var createFelaRenderer = function createFelaRenderer(target) {
  var felaRenderer = (0, _fela.createRenderer)(rendererConfig);
  var usedRenderers = 0; // rehydration disabled to avoid leaking styles between renderers
  // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md

  var Provider = function Provider(props) {
    return /*#__PURE__*/React.createElement(_reactFela.RendererProvider, {
      renderer: felaRenderer,
      rehydrate: false,
      targetDocument: target
    }, props.children);
  };

  return {
    registerUsage: function registerUsage() {
      usedRenderers += 1;
    },
    unregisterUsage: function unregisterUsage() {
      usedRenderers -= 1;

      if (usedRenderers === 0) {
        felaRenderer.listeners = [];
        felaRenderer.nodes = {};
        felaRenderer.updateSubscription = undefined;
      }
    },
    renderFont: function renderFont(font) {
      felaRenderer.renderFont(font.name, font.paths, font.props);
    },
    renderGlobal: felaRenderer.renderStatic,
    renderRule: function renderRule(styles, param) {
      var felaParam = Object.assign({}, param, {
        theme: {
          direction: param.direction
        }
      });
      return felaRenderer.renderRule(function () {
        return styles;
      }, felaParam);
    },
    // getOriginalRenderer() is implemented only for tests to be compatible with jest-react-fela expectations.
    getOriginalRenderer: function getOriginalRenderer() {
      if (process.env.NODE_ENV !== 'test') {
        throw new Error('This method implements private API and can be used only in tests');
      }

      return felaRenderer;
    },
    Provider: Provider
  };
};

exports.createFelaRenderer = createFelaRenderer;
//# sourceMappingURL=createFelaRenderer.js.map
