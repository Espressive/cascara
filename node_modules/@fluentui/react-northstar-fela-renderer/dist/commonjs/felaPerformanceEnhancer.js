"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.felaPerformanceEnhancer = felaPerformanceEnhancer;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _cssifyDeclaration = _interopRequireDefault(require("css-in-js-utils/lib/cssifyDeclaration"));

var _felaUtils = require("fela-utils");

//
// This file is one-to-one copy-paste from Fela source code. It includes `_renderStyleToClassNames()` and all
// non-exported utils.
// A single change is only one line inside `generateDeclarationReference()`.
//
// @ts-ignore
function isPlainObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
}

var chars = 'abcdefghijklmnopqrstuvwxyz';
var charLength = chars.length;

function generateUniqueClassName(id, className) {
  if (className === void 0) {
    className = '';
  }

  if (id <= charLength) {
    return chars[id - 1] + className;
  } // Bitwise floor as safari performs much faster
  // https://jsperf.com/math-floor-vs-math-round-vs-parseint/55


  return generateUniqueClassName(id / charLength | 0, chars[id % charLength] + className);
}

function generateClassName(getId, filterClassName) {
  if (filterClassName === void 0) {
    filterClassName = function filterClassName() {
      return true;
    };
  }

  var startId = getId();
  var generatedClassName = generateUniqueClassName(startId);

  if (!filterClassName(generatedClassName)) {
    return generateClassName(getId, filterClassName);
  }

  return generatedClassName;
}

function generateDeclarationReference(property, value, pseudo, media, support) {
  if (pseudo === void 0) {
    pseudo = '';
  }

  if (media === void 0) {
    media = '';
  }

  if (support === void 0) {
    support = '';
  }

  //
  // This a single perf change here, it removes `camelCaseProperty()` call
  //
  // CHANGE:START
  return support + media + pseudo + property + value; // CHANGE:END
} //


function felaPerformanceEnhancer(renderer) {
  renderer._renderStyleToClassNames = function _renderStyleToClassNames(_ref, pseudo, media, support) {
    if (pseudo === void 0) {
      pseudo = '';
    }

    if (media === void 0) {
      media = '';
    }

    if (support === void 0) {
      support = '';
    }

    var _className = _ref._className,
        style = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["_className"]);
    var classNames = _className ? " " + _className : '';

    for (var property in style) {
      var value = style[property];

      if (isPlainObject(value)) {
        if ((0, _felaUtils.isNestedSelector)(property)) {
          classNames += renderer._renderStyleToClassNames(value, pseudo + (0, _felaUtils.normalizeNestedProperty)(property), media, support);
        } else if ((0, _felaUtils.isMediaQuery)(property)) {
          var combinedMediaQuery = (0, _felaUtils.generateCombinedMediaQuery)(media, property.slice(6).trim());
          classNames += renderer._renderStyleToClassNames(value, pseudo, combinedMediaQuery, support);
        } else if ((0, _felaUtils.isSupport)(property)) {
          var combinedSupport = (0, _felaUtils.generateCombinedMediaQuery)(support, property.slice(9).trim());
          classNames += renderer._renderStyleToClassNames(value, pseudo, media, combinedSupport);
        } else {
          // eslint-disable-next-line no-console
          console.warn("The object key \"" + property + "\" is not a valid nested key in Fela.\nMaybe you forgot to add a plugin to resolve it?\nCheck http://fela.js.org/docs/basics/Rules.html#styleobject for more information.");
        }
      } else {
        var declarationReference = generateDeclarationReference(property, value, pseudo, media, support);

        if (!renderer.cache.hasOwnProperty(declarationReference)) {
          // we remove undefined values to enable
          // usage of optional props without side-effects
          if ((0, _felaUtils.isUndefinedValue)(value)) {
            renderer.cache[declarationReference] = {
              className: ''
            };
            /* eslint-disable no-continue */

            continue;
            /* eslint-enable */
          }

          var className = renderer.selectorPrefix + generateClassName(renderer.getNextRuleIdentifier, renderer.filterClassName);
          var declaration = (0, _cssifyDeclaration.default)(property, value);
          var selector = (0, _felaUtils.generateCSSSelector)(className, pseudo);
          var change = {
            type: _felaUtils.RULE_TYPE,
            className: className,
            selector: selector,
            declaration: declaration,
            pseudo: pseudo,
            media: media,
            support: support
          };
          renderer.cache[declarationReference] = change;

          renderer._emitChange(change);
        }

        var cachedClassName = renderer.cache[declarationReference].className; // only append if we got a class cached

        if (cachedClassName) {
          classNames += " " + cachedClassName;
        }
      }
    }

    return classNames;
  };

  return renderer;
}
//# sourceMappingURL=felaPerformanceEnhancer.js.map
