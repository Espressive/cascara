{"version":3,"sources":["felaSanitizeCssPlugin.ts"],"names":["isValidCssValue","value","openingBrackets","closingBrackets","openingBracketsStack","i","length","currentCharacter","includes","push","lastOpeningBracket","pop","indexOf","cssPropertiesToSkip","felaSanitizeCssPlugin","styles","type","renderer","props","sanitizeCss","processedStyles","Array","isArray","Object","keys","forEach","cssPropertyNameOrIndex","cssPropertyValue","isPropertyToSkip","some","propToExclude","process","env","NODE_ENV","console","warn"],"mappings":";;;;;AAKA;AACA;AACA;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAgB;AACtC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,MAAMC,eAAe,GAAG,KAAxB;AACA,MAAMC,eAAe,GAAG,KAAxB;AAEA,MAAMC,oBAA8B,GAAG,EAAvC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrC,QAAME,gBAAgB,GAAGN,KAAK,CAACI,CAAD,CAA9B;;AACA,QAAIH,eAAe,CAACM,QAAhB,CAAyBD,gBAAzB,CAAJ,EAAgD;AAC9CH,MAAAA,oBAAoB,CAACK,IAArB,CAA0BF,gBAA1B;AACD,KAFD,MAEO,IAAIJ,eAAe,CAACK,QAAhB,CAAyBD,gBAAzB,CAAJ,EAAgD;AACrD,UAAMG,kBAAkB,GAAGN,oBAAoB,CAACO,GAArB,EAA3B;;AACA,UACED,kBAAkB,IAClBR,eAAe,CAACU,OAAhB,CAAwBF,kBAAxB,MAAgDP,eAAe,CAACS,OAAhB,CAAwBL,gBAAxB,CAFlD,EAGE;AACA,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAOH,oBAAoB,CAACE,MAArB,KAAgC,CAAvC;AACD,CAhCD;;AAkCA,IAAMO,mBAAmB,GAAG,CAAC,SAAD,EAAY,UAAZ,CAA5B;;AAEO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,MADmC,EAEnCC,IAFmC,EAGnCC,QAHmC,EAInCC,KAJmC,EAKjB;AAClB,MAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,WAAOJ,MAAP;AACD;;AAED,MAAMK,eAAoB,GAAGC,KAAK,CAACC,OAAN,CAAcP,MAAd,IAAwB,EAAxB,GAA6B,EAA1D;AAEAQ,EAAAA,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,OAApB,CAA4B,UAACC,sBAAD,EAAiD;AAC3E,QAAMC,gBAAgB,GAAGZ,MAAM,CAACW,sBAAD,CAA/B;;AAEA,QAAI,OAAOC,gBAAP,KAA4B,QAAhC,EAA0C;AACxCP,MAAAA,eAAe,CAACM,sBAAD,CAAf,GAA0CZ,qBAAqB,CAC7Da,gBAD6D,EAE7DX,IAF6D,EAG7DC,QAH6D,EAI7DC,KAJ6D,CAA/D;AAMA;AACD;;AAED,QAAMU,gBAAgB,GAAGf,mBAAmB,CAACgB,IAApB,CAAyB,UAAAC,aAAa;AAAA,aAAIA,aAAa,KAAKJ,sBAAtB;AAAA,KAAtC,CAAzB;;AAEA,QAAIE,gBAAJ,EAAsB;AACpBR,MAAAA,eAAe,CAACM,sBAAD,CAAf,GAA0CC,gBAA1C;AACA;AACD;;AAED,QAAI3B,eAAe,CAAC2B,gBAAD,CAAnB,EAAuC;AACrCP,MAAAA,eAAe,CAACM,sBAAD,CAAf,GAA0CC,gBAA1C;AACD,KAFD,MAEO,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAChD;AACAC,MAAAA,OAAO,CAACC,IAAR,4CAC0CR,gBAD1C,oCACuFD,sBADvF;AAGD;AACF,GA5BD;AA8BA,SAAON,eAAP;AACD,CA3CM","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport { TRuleType } from 'fela-utils';\n\nimport { FelaRenderer, FelaRendererParam } from './types';\n\n/**\n * Checks whether provided CSS property value is safe for being rendered by Fela engine.\n */\nconst isValidCssValue = (value: any) => {\n  if (typeof value !== 'string') {\n    return true;\n  }\n\n  const openingBrackets = '({[';\n  const closingBrackets = ')}]';\n\n  const openingBracketsStack: string[] = [];\n\n  /**\n   * This loop logic checks whether braces sequence of input argument is valid.\n   * Essentially, it ensures that each of the '(', '{', '[' braces\n   * - is properly matched by its complementary closing character\n   * - closing brace properly corresponds to the last opened one\n   */\n  for (let i = 0; i < value.length; ++i) {\n    const currentCharacter = value[i];\n    if (openingBrackets.includes(currentCharacter)) {\n      openingBracketsStack.push(currentCharacter);\n    } else if (closingBrackets.includes(currentCharacter)) {\n      const lastOpeningBracket = openingBracketsStack.pop();\n      if (\n        lastOpeningBracket &&\n        openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return openingBracketsStack.length === 0;\n};\n\nconst cssPropertiesToSkip = ['content', 'keyframe'];\n\nexport const felaSanitizeCssPlugin = (\n  styles: ICSSInJSStyle,\n  type: TRuleType,\n  renderer: FelaRenderer,\n  props: FelaRendererParam,\n): ICSSInJSStyle => {\n  if (!props.sanitizeCss) {\n    return styles;\n  }\n\n  const processedStyles: any = Array.isArray(styles) ? [] : {};\n\n  Object.keys(styles).forEach((cssPropertyNameOrIndex: keyof ICSSInJSStyle) => {\n    const cssPropertyValue = styles[cssPropertyNameOrIndex];\n\n    if (typeof cssPropertyValue === 'object') {\n      processedStyles[cssPropertyNameOrIndex] = felaSanitizeCssPlugin(\n        cssPropertyValue as ICSSInJSStyle,\n        type,\n        renderer,\n        props,\n      );\n      return;\n    }\n\n    const isPropertyToSkip = cssPropertiesToSkip.some(propToExclude => propToExclude === cssPropertyNameOrIndex);\n\n    if (isPropertyToSkip) {\n      processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n      return;\n    }\n\n    if (isValidCssValue(cssPropertyValue)) {\n      processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `fela-sanitize-css: An invalid value \"${cssPropertyValue}\" was passed to property \"${cssPropertyNameOrIndex}\"`,\n      );\n    }\n  });\n\n  return processedStyles;\n};\n"],"file":"felaSanitizeCssPlugin.js"}