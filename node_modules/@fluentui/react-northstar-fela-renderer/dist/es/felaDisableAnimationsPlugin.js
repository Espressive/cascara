var animationProps = ['animation', 'animationName', 'animationDuration', 'animationTimingFunction', 'animationDelay', 'animationIterationCount', 'animationDirection', 'animationFillMode', 'animationPlayState'];

function isPlainObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
}
/**
 * Fela plugin for disabling animations. The animations are disabled or not based on the
 * props' disableAnimations param. If the value of the prop is true, all animation related
 * styles are removed.
 *
 * Caution! Infinite recursion is possible in case if style object has links to self in the props
 * tree.
 */


export var felaDisableAnimationsPlugin = function felaDisableAnimationsPlugin(styles, type, renderer, props) {
  if (props && props.disableAnimations && type === 'RULE') {
    return Object.keys(styles).reduce(function (acc, cssPropertyName) {
      var _Object$assign2;

      var cssPropertyValue = styles[cssPropertyName];

      if (animationProps.indexOf(cssPropertyName) !== -1) {
        return acc;
      }

      if (isPlainObject(cssPropertyValue)) {
        var _Object$assign;

        return Object.assign({}, acc, (_Object$assign = {}, _Object$assign[cssPropertyName] = felaDisableAnimationsPlugin(cssPropertyValue, type, renderer, props), _Object$assign));
      }

      return Object.assign({}, acc, (_Object$assign2 = {}, _Object$assign2[cssPropertyName] = styles[cssPropertyName], _Object$assign2));
    }, {});
  }

  return styles;
};
//# sourceMappingURL=felaDisableAnimationsPlugin.js.map
