import { ComponentSlotStyle, ComponentSlotStylesInput, ComponentSlotStylesPrepared, ComponentVariablesInput, ComponentVariablesPrepared, FontFace, SiteVariablesInput, SiteVariablesPrepared, StaticStyle, ThemeAnimation, ThemeComponentStylesInput, ThemeComponentStylesPrepared, ThemeComponentVariablesInput, ThemeComponentVariablesPrepared, ThemeInput, ThemePrepared } from './types';
export declare const emptyTheme: ThemePrepared;
/**
 * Merges a single component's styles (keyed by component part) with another component's styles.
 */
export declare const mergeComponentStyles__PROD: typeof mergeComponentStyles;
export declare const mergeComponentStyles__DEV: typeof mergeComponentStyles;
export declare const mergeComponentStyles: (stylesA: ComponentSlotStylesInput | null | undefined, stylesB: ComponentSlotStylesInput | null | undefined) => ComponentSlotStylesPrepared;
/**
 * Merges a single component's variables with another component's variables.
 */
export declare const mergeComponentVariables__PROD: (...sources: ComponentVariablesInput[]) => ComponentVariablesPrepared;
export declare const mergeComponentVariables__DEV: (...sources: ComponentVariablesInput[]) => ComponentVariablesPrepared;
export declare const mergeComponentVariables: (...sources: ComponentVariablesInput[]) => ComponentVariablesPrepared;
/**
 * Site variables can safely be merged at each Provider in the tree.
 * They are flat objects and do not depend on render-time values, such as props.
 */
export declare const mergeSiteVariables__PROD: (...sources: (SiteVariablesInput | null | undefined)[]) => SiteVariablesPrepared;
export declare const mergeSiteVariables__DEV: (...sources: (SiteVariablesInput | null | undefined)[]) => SiteVariablesPrepared;
export declare const mergeSiteVariables: (...sources: (SiteVariablesInput | null | undefined)[]) => SiteVariablesPrepared;
/**
 * Component variables can be objects, functions, or an array of these.
 * The functions must be called with the final result of siteVariables, otherwise
 *   the component variable objects would have no ability to apply siteVariables.
 * Therefore, componentVariables must be resolved by the component at render time.
 * We instead pass down call stack of component variable functions to be resolved later.
 */
export declare const mergeThemeVariables__PROD: (...sources: (ThemeComponentVariablesInput | null | undefined)[]) => ThemeComponentVariablesPrepared;
export declare const mergeThemeVariables__DEV: (...sources: (ThemeComponentVariablesInput | null | undefined)[]) => ThemeComponentVariablesPrepared;
export declare const mergeThemeVariables: (...sources: (ThemeComponentVariablesInput | null | undefined)[]) => ThemeComponentVariablesPrepared;
/**
 * See mergeThemeVariables() description.
 * Component styles adhere to the same pattern as component variables, except
 *   that they return style objects.
 */
export declare const mergeThemeStyles: (...sources: (ThemeComponentStylesInput | null | undefined)[]) => ThemeComponentStylesPrepared;
export declare const mergeFontFaces: (...sources: FontFace[]) => FontFace[];
export declare const mergeStaticStyles: (...sources: StaticStyle[]) => StaticStyle[];
export declare const mergeAnimations: (...sources: {
    [key: string]: ThemeAnimation<{}>;
}[]) => {
    [key: string]: ThemeAnimation<{}>;
};
export declare const mergeStyles: (...sources: ComponentSlotStyle[]) => (...args: any[]) => any;
export declare const mergeThemes: (...themes: ThemeInput[]) => ThemePrepared;
