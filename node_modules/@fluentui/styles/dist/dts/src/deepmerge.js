"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepmerge = void 0;
var isObject = function (o) { return o !== null && typeof o === 'object' && !Array.isArray(o); };
var isValid = function (k) { return k !== '__proto__' && k !== 'prototype' && k !== 'constructor'; };
// Heads Up!
// Changes here need to consider breaking all object references.
// Merging should result in a themes that are non-mutated and have broken references.
var deepmerge = function () {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var inner = function (target, source) {
        Object.keys(source).forEach(function (k) {
            if (isValid(k)) {
                if (isObject(source[k])) {
                    if (!isObject(target[k])) {
                        target[k] = {};
                    }
                    inner(target[k], source[k]);
                }
                else {
                    target[k] = source[k]; // TODO: do deep clone for arrays? We currently do not have any deep arrays in variables
                }
            }
        });
        return target;
    };
    return sources.filter(Boolean).reduce(function (acc, src) { return inner(acc, src); }, {});
};
exports.deepmerge = deepmerge;
