"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var styles_1 = require("@fluentui/styles");
var debugEnabled = require("../../src/debugEnabled");
var mergeThemes_1 = require("../../src/mergeThemes");
describe('mergeSiteVariables', function () {
    var originalDebugEnabled;
    beforeEach(function () {
        originalDebugEnabled = debugEnabled.isEnabled;
    });
    afterEach(function () {
        Object.defineProperty(debugEnabled, 'isEnabled', {
            get: function () { return originalDebugEnabled; },
        });
    });
    function mockIsDebugEnabled(enabled) {
        Object.defineProperty(debugEnabled, 'isEnabled', {
            get: jest.fn(function () { return enabled; }),
        });
    }
    function testMergeSiteVariables(mergeSiteVariables) {
        test("always returns an object", function () {
            expect(mergeSiteVariables({}, {})).toMatchObject({});
            expect(mergeSiteVariables(null, null)).toMatchObject({});
            expect(mergeSiteVariables(undefined, undefined)).toMatchObject({});
            expect(mergeSiteVariables(null, undefined)).toMatchObject({});
            expect(mergeSiteVariables(undefined, null)).toMatchObject({});
            expect(mergeSiteVariables({}, undefined)).toMatchObject({});
            expect(mergeSiteVariables(undefined, {})).toMatchObject({});
            expect(mergeSiteVariables({}, null)).toMatchObject({});
            expect(mergeSiteVariables(null, {})).toMatchObject({});
        });
        test('always adds fontSizes', function () {
            var target = {};
            var source = {};
            expect(mergeSiteVariables(target, source)).toMatchObject({ fontSizes: {} });
        });
        test('gracefully handles null and undefined', function () {
            expect(function () { return mergeSiteVariables({ color: 'black' }, null); }).not.toThrow();
            expect(function () { return mergeSiteVariables({ color: 'black' }, { color: null }); }).not.toThrow();
            expect(function () { return mergeSiteVariables(null, { color: 'black' }); }).not.toThrow();
            expect(function () { return mergeSiteVariables({ color: null }, { color: 'black' }); }).not.toThrow();
            expect(function () { return mergeSiteVariables({ color: 'black' }, undefined); }).not.toThrow();
            expect(function () { return mergeSiteVariables({ color: 'black' }, { color: undefined }); }).not.toThrow();
            expect(function () { return mergeSiteVariables(undefined, { color: 'black' }); }).not.toThrow();
            expect(function () { return mergeSiteVariables({ color: undefined }, { color: 'black' }); }).not.toThrow();
        });
        test('undefined overwrites previously set value', function () {
            var merged = mergeSiteVariables({ color: 'black' }, { color: undefined });
            expect(merged).toMatchObject({
                color: undefined,
            });
        });
        test('null overwrites previously set value', function () {
            var merged = mergeSiteVariables({ color: 'black' }, { color: null });
            expect(merged).toMatchObject({
                color: null,
            });
        });
        test('merges top level keys', function () {
            var target = { overridden: false, keep: true };
            var source = { overridden: true, add: true };
            expect(mergeSiteVariables(target, source)).toMatchObject({
                overridden: true,
                keep: true,
                add: true,
            });
        });
        test('deep merges nested keys', function () {
            var target = { nested: { replaced: false, deep: { dOne: 1 } } };
            var source = { nested: { other: 'value', deep: { dTwo: 'two' } } };
            expect(mergeSiteVariables(target, source)).toMatchObject({
                nested: { replaced: false, other: 'value', deep: { dOne: 1, dTwo: 'two' } },
            });
        });
    }
    describe('prod version', function () {
        beforeEach(function () {
            mockIsDebugEnabled(true); // it is not possible to enable debug in prod
        });
        testMergeSiteVariables(mergeThemes_1.mergeSiteVariables__PROD);
        test('debug frames are not saved', function () {
            var target = { one: 1, a: 'tA' };
            var source = { two: 2, a: 'sA' };
            var merged = mergeThemes_1.mergeSiteVariables__PROD(target, source);
            expect(merged._debug).toBe(undefined);
        });
    });
    describe('dev version, debug disabled', function () {
        beforeEach(function () {
            mockIsDebugEnabled(false);
        });
        testMergeSiteVariables(mergeThemes_1.mergeSiteVariables__DEV);
        test('debug frames are not saved', function () {
            var target = { one: 1, a: 'tA' };
            var source = { two: 2, a: 'sA' };
            var merged = mergeThemes_1.mergeSiteVariables__DEV(target, source);
            expect(merged._debug).toBe(undefined);
        });
    });
    describe('dev version, debug enabled', function () {
        beforeEach(function () {
            mockIsDebugEnabled(true);
        });
        testMergeSiteVariables(mergeThemes_1.mergeSiteVariables__DEV);
        describe('debug frames', function () {
            test('are saved', function () {
                var target = { one: 1, a: 'tA' };
                var source = { two: 2, a: 'sA' };
                var merged = mergeThemes_1.mergeSiteVariables__DEV(target, source);
                expect(merged).toMatchObject({
                    _debug: [{ resolved: { one: 1, a: 'tA' } }, { resolved: { two: 2, a: 'sA' } }],
                });
            });
            test('contain debugId', function () {
                var target = styles_1.withDebugId({ one: 1, a: 'tA', target: true }, 'target');
                var source = styles_1.withDebugId({ two: 2, a: 'sA', source: true }, 'source');
                var merged = mergeThemes_1.mergeSiteVariables__DEV(target, source);
                expect(merged).toMatchObject({
                    _debug: [{ debugId: 'target' }, { debugId: 'source' }],
                });
            });
        });
    });
});
