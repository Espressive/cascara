"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var styles_1 = require("@fluentui/styles");
var debugEnabled = require("../../src/debugEnabled");
var mergeThemes_1 = require("../../src/mergeThemes");
describe('mergeComponentVariables', function () {
    var originalDebugEnabled;
    beforeEach(function () {
        originalDebugEnabled = debugEnabled.isEnabled;
    });
    afterEach(function () {
        Object.defineProperty(debugEnabled, 'isEnabled', {
            get: function () { return originalDebugEnabled; },
        });
    });
    function mockIsDebugEnabled(enabled) {
        Object.defineProperty(debugEnabled, 'isEnabled', {
            get: jest.fn(function () { return enabled; }),
        });
    }
    function testMergeComponentVariables(mergeComponentVariables) {
        test("always returns a function that returns an object", function () {
            expect(mergeComponentVariables({}, {})()).toMatchObject({});
            expect(mergeComponentVariables(null, null)()).toMatchObject({});
            expect(mergeComponentVariables(undefined, undefined)()).toMatchObject({});
            expect(mergeComponentVariables(null, undefined)()).toMatchObject({});
            expect(mergeComponentVariables(undefined, null)()).toMatchObject({});
            expect(mergeComponentVariables({}, undefined)()).toMatchObject({});
            expect(mergeComponentVariables(undefined, {})()).toMatchObject({});
            expect(mergeComponentVariables({}, null)()).toMatchObject({});
            expect(mergeComponentVariables(null, {})()).toMatchObject({});
        });
        test('gracefully handles null and undefined', function () {
            expect(mergeComponentVariables({ color: 'black' }, null)).not.toThrow();
            expect(mergeComponentVariables({ color: 'black' }, { color: null })).not.toThrow();
            expect(mergeComponentVariables(null, { color: 'black' })).not.toThrow();
            expect(mergeComponentVariables({ color: null }, { color: 'black' })).not.toThrow();
            expect(mergeComponentVariables({ color: 'black' }, undefined)).not.toThrow();
            expect(mergeComponentVariables({ color: 'black' }, { color: undefined })).not.toThrow();
            expect(mergeComponentVariables(undefined, { color: 'black' })).not.toThrow();
            expect(mergeComponentVariables({ color: undefined }, { color: 'black' })).not.toThrow();
        });
        test('undefined overwrites previously set value', function () {
            var merged = mergeComponentVariables({ color: 'black' }, { color: undefined });
            expect(merged()).toMatchObject({
                color: undefined,
            });
        });
        test('null overwrites previously set value', function () {
            var merged = mergeComponentVariables({ color: 'black' }, { color: null });
            expect(merged()).toMatchObject({
                color: null,
            });
        });
        test('merged functions return merged variables', function () {
            var target = function () { return ({ one: 1, three: 3 }); };
            var source = function () { return ({ one: 'one', two: 'two' }); };
            var merged = mergeComponentVariables(target, source);
            expect(merged()).toMatchObject({
                one: 'one',
                two: 'two',
                three: 3,
            });
        });
        test('merged functions accept and apply siteVariables', function () {
            var target = function (siteVariables) { return (tslib_1.__assign({ one: 1, target: true }, siteVariables)); };
            var source = function (siteVariables) { return (tslib_1.__assign({ two: 2, source: true }, siteVariables)); };
            var merged = mergeComponentVariables(target, source);
            var siteVariables = { one: 'one', two: 'two', fontSizes: {} };
            expect(merged(siteVariables)).toMatchObject({
                one: 'one',
                two: 'two',
                source: true,
                target: true,
            });
        });
        test('object values of variables are merged', function () {
            var target = { foo: { bar: true, deep: { dOne: 1 } }, target: true };
            var source = { foo: { baz: false, deep: { dTwo: 'two' } }, source: true };
            var merged = mergeComponentVariables(target, source);
            expect(merged()).toMatchObject({
                source: true,
                target: true,
                foo: { bar: true, baz: false, deep: { dOne: 1, dTwo: 'two' } },
            });
        });
        test('merges multiple objects', function () {
            var siteVariables = {
                colors: {
                    colorForC: 'c_color',
                },
            };
            var target = { a: 1, b: 2, c: 3, d: 4, e: 5 };
            var source1 = { b: 'bS1', d: false, bb: 'bbS1' };
            var source2 = function (sv) { return ({ c: sv.colors.colorForC, cc: 'bbS2' }); };
            var source3 = { d: 'bS3', dd: 'bbS3' };
            expect(mergeComponentVariables(target, source1, source2, source3)(siteVariables)).toMatchObject({
                a: 1,
                b: 'bS1',
                c: 'c_color',
                d: 'bS3',
                e: 5,
                bb: 'bbS1',
                cc: 'bbS2',
                dd: 'bbS3',
            });
        });
    }
    describe('prod version', function () {
        beforeEach(function () {
            mockIsDebugEnabled(true); // it is not possible to enable debug in prod
        });
        testMergeComponentVariables(mergeThemes_1.mergeComponentVariables__PROD);
        test('debug frames are not saved', function () {
            var target = function (siteVariables) { return ({ one: 1, a: 'tA', target: true }); };
            var source = function (siteVariables) { return ({ two: 2, a: 'sA', source: true }); };
            var merged = mergeThemes_1.mergeComponentVariables__PROD(target, source);
            expect(merged()._debug).toBe(undefined);
        });
        test('useless frames are not created', function () {
            var target = function () { return ({}); };
            expect(mergeThemes_1.mergeComponentVariables__PROD(target)).toBe(target);
            expect(mergeThemes_1.mergeComponentVariables__PROD(target, undefined)).toBe(target);
        });
    });
    describe('dev version, debug disabled', function () {
        beforeEach(function () {
            mockIsDebugEnabled(false);
        });
        testMergeComponentVariables(mergeThemes_1.mergeComponentVariables__DEV);
        test('debug frames are not saved', function () {
            var target = function (siteVariables) { return ({ one: 1, a: 'tA', target: true }); };
            var source = function (siteVariables) { return ({ two: 2, a: 'sA', source: true }); };
            var merged = mergeThemes_1.mergeComponentVariables__PROD(target, source);
            expect(merged()._debug).toBe(undefined);
        });
    });
    describe('dev version, debug enabled', function () {
        beforeEach(function () {
            mockIsDebugEnabled(true);
        });
        testMergeComponentVariables(mergeThemes_1.mergeComponentVariables__DEV);
        describe('debug frames', function () {
            test('are saved', function () {
                var target = function (siteVariables) { return (tslib_1.__assign({ one: 1, a: 'tA', target: true }, siteVariables)); };
                var source = function (siteVariables) { return (tslib_1.__assign({ two: 2, a: 'sA', source: true }, siteVariables)); };
                var merged = mergeThemes_1.mergeComponentVariables__DEV(target, source);
                var siteVariables = { one: 'one', two: 'two', fontSizes: {} };
                expect(merged(siteVariables)).toMatchObject({
                    _debug: [
                        { resolved: { target: true, one: 'one', a: 'tA' } },
                        { resolved: { source: true, two: 'two', a: 'sA' } },
                    ],
                });
            });
            test('contain debugId', function () {
                var target = function (siteVariables) { return styles_1.withDebugId({ one: 1, a: 'tA', target: true }, 'target'); };
                var source = function (siteVariables) { return styles_1.withDebugId({ two: 2, a: 'sA', source: true }, 'source'); };
                var merged = mergeThemes_1.mergeComponentVariables__DEV(target, source);
                expect(merged()).toMatchObject({
                    _debug: [{ debugId: 'target' }, { debugId: 'source' }],
                });
            });
            test('contain `input` with unresolved site variables', function () {
                var target = function (siteVariables) { return ({ one: 1, a: siteVariables.varA }); };
                var source = function (siteVariables) { return ({ two: 2, a: siteVariables.nested.varA }); };
                var merged = mergeThemes_1.mergeComponentVariables__DEV(target, source);
                var siteVariables = { varA: 42, nested: { varA: 42 } };
                siteVariables['_invertedKeys'] = styles_1.objectKeyToValues(siteVariables, function (v) { return "siteVariables." + v; });
                expect(merged(siteVariables)).toMatchObject({
                    _debug: [{ input: { a: 'siteVariables.varA' } }, { input: { a: 'siteVariables.nested.varA' } }],
                });
            });
            test('are flat for recursive merge', function () {
                var siteVariables = {
                    colors: {
                        colorForC: 'c_color',
                    },
                };
                var target = styles_1.withDebugId({ a: 1, b: 2, c: 3, d: 4, e: 5 }, 'target');
                var source1 = styles_1.withDebugId({ b: 'bS1', d: false, bb: 'bbS1' }, 'source1');
                var source2 = styles_1.withDebugId(function (sv) { return ({ c: sv.colors.colorForC, cc: 'bbS2' }); }, 'source2');
                var merged1 = mergeThemes_1.mergeComponentVariables__DEV(target, source1, source2)(siteVariables);
                var merged2 = mergeThemes_1.mergeComponentVariables__DEV(mergeThemes_1.mergeComponentVariables__DEV(target, source1), source2)(siteVariables);
                var merged3 = mergeThemes_1.mergeComponentVariables__DEV(target, mergeThemes_1.mergeComponentVariables__DEV(source1, source2))(siteVariables);
                expect(merged1).toMatchObject({
                    _debug: [{ debugId: 'target' }, { debugId: 'source1' }, { debugId: 'source2' }],
                });
                expect(merged2).toMatchObject({
                    _debug: [{ debugId: 'target' }, { debugId: 'source1' }, { debugId: 'source2' }],
                });
                expect(merged3).toMatchObject({
                    _debug: [{ debugId: 'target' }, { debugId: 'source1' }, { debugId: 'source2' }],
                });
            });
        });
    });
});
