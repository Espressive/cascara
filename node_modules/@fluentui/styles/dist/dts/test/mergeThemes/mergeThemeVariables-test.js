"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
var debugEnabled = require("../../src/debugEnabled");
var mergeThemes_1 = require("../../src/mergeThemes");
describe('mergeThemeVariables', function () {
    var originalDebugEnabled;
    beforeEach(function () {
        originalDebugEnabled = debugEnabled.isEnabled;
    });
    afterEach(function () {
        Object.defineProperty(debugEnabled, 'isEnabled', {
            get: function () { return originalDebugEnabled; },
        });
    });
    function mockIsDebugEnabled(enabled) {
        Object.defineProperty(debugEnabled, 'isEnabled', {
            get: jest.fn(function () { return enabled; }),
        });
    }
    function testMergeThemeVariables(mergeThemeVariables) {
        test('component variables are merged', function () {
            var target = { Button: {} };
            var source = { Icon: {} };
            var merged = mergeThemeVariables(target, source);
            expect(merged).toHaveProperty('Button');
            expect(merged).toHaveProperty('Icon');
        });
        test('component variable objects are converted to functions', function () {
            var target = { Button: {} };
            var source = { Button: {} };
            var merged = mergeThemeVariables(target, source);
            expect(merged.Button).toBeInstanceOf(Function);
            expect(merged.Button).toBeInstanceOf(Function);
        });
        test('component variable objects are deeply merged', function () {
            var target = { Button: { a: 'a', b: 'b', c: 'c', d: 'd', e: 'e' } };
            var source1 = styles_1.withDebugId({
                Button: function (siteVariables) { return ({ b: siteVariables.colors.colorForB }); },
            }, 's1');
            var source2 = { Button: { c: 'cS2' } };
            var source3 = { Button: { d: 'dS3' } };
            var siteVariables = {
                fontSizes: {},
                colors: {
                    colorForB: 'b_color',
                    colorForC: 'c_color',
                },
            };
            var merged = mergeThemeVariables(target, mergeThemeVariables(source1, source2), source3);
            var resolved = _.mapValues(merged, function (cv) { return cv(siteVariables); });
            expect(resolved).toMatchObject({
                Button: { a: 'a', b: 'b_color', c: 'cS2', d: 'dS3', e: 'e' },
            });
        });
    }
    describe('prod version', function () {
        beforeEach(function () {
            mockIsDebugEnabled(true); // it is not possible to enable debug in prod
        });
        testMergeThemeVariables(mergeThemes_1.mergeThemeVariables__PROD);
    });
    describe('dev version, debug disabled', function () {
        beforeEach(function () {
            mockIsDebugEnabled(false);
        });
        testMergeThemeVariables(mergeThemes_1.mergeThemeVariables__DEV);
    });
    describe('dev version, debug enabled', function () {
        beforeEach(function () {
            mockIsDebugEnabled(true);
        });
        testMergeThemeVariables(mergeThemes_1.mergeThemeVariables__DEV);
    });
});
