{"version":3,"sources":["deepmerge.ts"],"names":["isObject","o","Array","isArray","isValid","k","deepmerge","inner","target","source","Object","keys","forEach","sources","filter","Boolean","reduce","acc","src"],"mappings":";;;;;AAAA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC;AAAA,SAAIA,CAAC,KAAK,IAAN,IAAc,OAAOA,CAAP,KAAa,QAA3B,IAAuC,CAACC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAA5C;AAAA,CAAlB;;AACA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAAC,CAAC;AAAA,SAAIA,CAAC,KAAK,WAAN,IAAqBA,CAAC,KAAK,WAA3B,IAA0CA,CAAC,KAAK,aAApD;AAAA,CAAjB,C,CAEA;AACA;AACA;;;AACO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAgB;AACvC,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,MAAD,EAASC,MAAT,EAAoB;AAChCC,IAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAAAP,CAAC,EAAI;AAC/B,UAAID,OAAO,CAACC,CAAD,CAAX,EAAgB;AACd,YAAIL,QAAQ,CAACS,MAAM,CAACJ,CAAD,CAAP,CAAZ,EAAyB;AACvB,cAAI,CAACL,QAAQ,CAACQ,MAAM,CAACH,CAAD,CAAP,CAAb,EAA0B;AACxBG,YAAAA,MAAM,CAACH,CAAD,CAAN,GAAY,EAAZ;AACD;;AAEDE,UAAAA,KAAK,CAACC,MAAM,CAACH,CAAD,CAAP,EAAYI,MAAM,CAACJ,CAAD,CAAlB,CAAL;AACD,SAND,MAMO;AACLG,UAAAA,MAAM,CAACH,CAAD,CAAN,GAAYI,MAAM,CAACJ,CAAD,CAAlB,CADK,CACkB;AACxB;AACF;AACF,KAZD;AAaA,WAAOG,MAAP;AACD,GAfD;;AADuC,oCAAZK,OAAY;AAAZA,IAAAA,OAAY;AAAA;;AAiBvC,SAAOA,OAAO,CAACC,MAAR,CAAeC,OAAf,EAAwBC,MAAxB,CAA+B,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcX,KAAK,CAACU,GAAD,EAAMC,GAAN,CAAnB;AAAA,GAA/B,EAA8D,EAA9D,CAAP;AACD,CAlBM","sourcesContent":["const isObject = o => o !== null && typeof o === 'object' && !Array.isArray(o);\nconst isValid = k => k !== '__proto__' && k !== 'prototype' && k !== 'constructor';\n\n// Heads Up!\n// Changes here need to consider breaking all object references.\n// Merging should result in a themes that are non-mutated and have broken references.\nexport const deepmerge = (...sources) => {\n  const inner = (target, source) => {\n    Object.keys(source).forEach(k => {\n      if (isValid(k)) {\n        if (isObject(source[k])) {\n          if (!isObject(target[k])) {\n            target[k] = {};\n          }\n\n          inner(target[k], source[k]);\n        } else {\n          target[k] = source[k]; // TODO: do deep clone for arrays? We currently do not have any deep arrays in variables\n        }\n      }\n    });\n    return target;\n  };\n  return sources.filter(Boolean).reduce((acc, src) => inner(acc, src), {});\n};\n"],"file":"deepmerge.js"}