"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.mergeThemes = exports.mergeStyles = exports.mergeAnimations = exports.mergeStaticStyles = exports.mergeFontFaces = exports.mergeThemeStyles = exports.mergeThemeVariables = exports.mergeThemeVariables__DEV = exports.mergeThemeVariables__PROD = exports.mergeSiteVariables = exports.mergeSiteVariables__DEV = exports.mergeSiteVariables__PROD = exports.mergeComponentVariables = exports.mergeComponentVariables__DEV = exports.mergeComponentVariables__PROD = exports.mergeComponentStyles = exports.mergeComponentStyles__DEV = exports.mergeComponentStyles__PROD = exports.emptyTheme = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _union2 = _interopRequireDefault(require("lodash/union"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _callable = require("./callable");

var _debugEnabled = require("./debugEnabled");

var _deepmerge = require("./deepmerge");

var _objectKeysToValues = require("./objectKeysToValues");

var _toCompactArray = require("./toCompactArray");

var _withDebugId = require("./withDebugId");

var emptyTheme = {
  siteVariables: {
    fontSizes: {}
  },
  componentVariables: {},
  componentStyles: {},
  fontFaces: [],
  staticStyles: [],
  animations: {}
}; // ----------------------------------------
// Component level merge functions
// ----------------------------------------

/**
 * Merges a single component's styles (keyed by component part) with another component's styles.
 */

exports.emptyTheme = emptyTheme;

var mergeComponentStyles__PROD = function mergeComponentStyles__PROD(stylesA, stylesB) {
  var result = {};

  if (stylesA) {
    Object.keys(stylesA).forEach(function (partName) {
      var slotA = stylesA[partName];
      var slotB = stylesB == null ? void 0 : stylesB[partName]; // if there is no source, merging is a no-op, skip it

      if (typeof slotA === 'undefined' || slotA === null) {
        return;
      } // no target means source doesn't need to merge onto anything
      // just ensure source is callable (prepared format)


      if (typeof slotB === 'undefined' || slotB === null) {
        result[partName] = typeof slotA === 'function' ? slotA : function () {
          return slotA;
        };
        return;
      }

      if (slotA === slotB) {
        result[partName] = typeof slotA === 'function' ? slotA : function () {
          return slotA;
        };
      }
    });
  }

  if (stylesB) {
    Object.keys(stylesB).forEach(function (partName) {
      var slotA = stylesA == null ? void 0 : stylesA[partName];
      var slotB = stylesB[partName]; // if there is no source, merging is a no-op, skip it

      if (typeof slotB === 'undefined' || slotB === null) {
        return;
      } // no target means source doesn't need to merge onto anything
      // just ensure source is callable (prepared format)


      if (typeof slotA === 'undefined' || slotA === null) {
        result[partName] = typeof slotB === 'function' ? slotB : function () {
          return slotB;
        };
        return;
      }

      if (slotA === slotB) {
        return;
      } // We have both target and source, replace with merge fn


      result[partName] = function mergedStyleFunction(styleParam) {
        // originalTarget is always prepared, fn is guaranteed
        return (0, _merge2.default)(typeof slotA === 'function' ? slotA(styleParam) : slotA, typeof slotB === 'function' ? slotB(styleParam) : slotB);
      };
    });
  }

  return result;
};

exports.mergeComponentStyles__PROD = mergeComponentStyles__PROD;

var mergeComponentStyles__DEV = function mergeComponentStyles__DEV(stylesA, stylesB) {
  if (!_debugEnabled.isEnabled) {
    return mergeComponentStyles__PROD(stylesA, stylesB);
  }

  var mergedKeys = [].concat(stylesA ? Object.keys(stylesA) : [], stylesB ? Object.keys(stylesB) : []);
  var result = {};
  mergedKeys.forEach(function (slotName) {
    var slotA = function slotA(styleParam) {
      var _ref = (0, _callable.callable)(stylesA == null ? void 0 : stylesA[slotName])(styleParam) || {},
          _ref$_debug = _ref._debug,
          _debug = _ref$_debug === void 0 ? undefined : _ref$_debug,
          styles = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["_debug"]); // new object required to prevent circular JSON structure error in <Debug />


      return Object.assign({}, styles, {
        _debug: _debug || [{
          styles: Object.assign({}, styles),
          debugId: stylesA._debugId
        }]
      });
    };

    var slotB = function slotB(styleParam) {
      var _ref2 = (0, _callable.callable)(stylesB == null ? void 0 : stylesB[slotName])(styleParam) || {},
          _ref2$_debug = _ref2._debug,
          _debug = _ref2$_debug === void 0 ? undefined : _ref2$_debug,
          styles = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["_debug"]); // new object required to prevent circular JSON structure error in <Debug />


      return Object.assign({}, styles, {
        _debug: _debug || [{
          styles: Object.assign({}, styles),
          debugId: stylesB._debugId
        }]
      });
    };

    if (stylesA != null && stylesA[slotName] && stylesB != null && stylesB[slotName]) {
      // We have both, replace with merge fn
      result[slotName] = function (styleParam) {
        // slot* are always prepared, fn is guaranteed, _debug always exists
        var _slotA = slotA(styleParam),
            debugA = _slotA._debug,
            resolvedStylesA = (0, _objectWithoutPropertiesLoose2.default)(_slotA, ["_debug"]);

        var _slotB = slotB(styleParam),
            debugB = _slotB._debug,
            resolvedStylesB = (0, _objectWithoutPropertiesLoose2.default)(_slotB, ["_debug"]);

        var merged = (0, _merge2.default)(resolvedStylesA, resolvedStylesB);
        merged._debug = debugA.concat(debugB || {
          styles: resolvedStylesB,
          debugId: resolvedStylesB._debugId
        });
        return merged;
      };
    } else if (stylesA != null && stylesA[slotName]) {
      result[slotName] = slotA;
    } else if (stylesB != null && stylesB[slotName]) {
      result[slotName] = slotB;
    }
  });
  return result;
};

exports.mergeComponentStyles__DEV = mergeComponentStyles__DEV;
var mergeComponentStyles = process.env.NODE_ENV === 'production' ? mergeComponentStyles__PROD : mergeComponentStyles__DEV;
/**
 * Merges a single component's variables with another component's variables.
 */

exports.mergeComponentStyles = mergeComponentStyles;

var mergeComponentVariables__PROD = function mergeComponentVariables__PROD() {
  var initial = function initial() {
    return {};
  }; // filtering is required as some arguments can be undefined


  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  var filteredSources = sources.filter(Boolean); // a short circle to avoid calls of deepmerge()

  if (filteredSources.length === 1) {
    return typeof filteredSources[0] === 'function' ? filteredSources[0] : (0, _callable.callable)(filteredSources[0]);
  }

  return filteredSources.reduce(function (acc, next) {
    return function mergeComponentVariables() {
      var accumulatedVariables = acc.apply(void 0, arguments);
      var fn = typeof next === 'function' ? next : (0, _callable.callable)(next);
      var computedComponentVariables = fn.apply(void 0, arguments);
      return (0, _deepmerge.deepmerge)(accumulatedVariables, computedComponentVariables);
    };
  }, initial);
};

exports.mergeComponentVariables__PROD = mergeComponentVariables__PROD;

var mergeComponentVariables__DEV = function mergeComponentVariables__DEV() {
  for (var _len2 = arguments.length, sources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    sources[_key2] = arguments[_key2];
  }

  if (!_debugEnabled.isEnabled) {
    return mergeComponentVariables__PROD.apply(void 0, sources);
  }

  var initial = function initial() {
    return {};
  };

  return sources.reduce(function (acc, next) {
    return function (siteVariables) {
      var _acc = acc(siteVariables),
          _acc$_debug = _acc._debug,
          _debug = _acc$_debug === void 0 ? [] : _acc$_debug,
          accumulatedVariables = (0, _objectWithoutPropertiesLoose2.default)(_acc, ["_debug"]);

      var _ref3 = (0, _callable.callable)(next)(siteVariables) || {},
          _ref3$_debug = _ref3._debug,
          computedDebug = _ref3$_debug === void 0 ? undefined : _ref3$_debug,
          _ref3$_debugId = _ref3._debugId,
          _debugId = _ref3$_debugId === void 0 ? undefined : _ref3$_debugId,
          computedComponentVariables = (0, _objectWithoutPropertiesLoose2.default)(_ref3, ["_debug", "_debugId"]);

      var merged = (0, _deepmerge.deepmerge)(accumulatedVariables, computedComponentVariables);
      merged._debug = _debug.concat(computedDebug || {
        resolved: computedComponentVariables,
        debugId: _debugId,
        input: siteVariables ? siteVariables._invertedKeys && (0, _callable.callable)(next)(siteVariables._invertedKeys) : (0, _callable.callable)(next)()
      });
      return merged;
    };
  }, initial);
};

exports.mergeComponentVariables__DEV = mergeComponentVariables__DEV;
var mergeComponentVariables = process.env.NODE_ENV === 'production' ? mergeComponentVariables__PROD : mergeComponentVariables__DEV; // ----------------------------------------
// Theme level merge functions
// ----------------------------------------

/**
 * Site variables can safely be merged at each Provider in the tree.
 * They are flat objects and do not depend on render-time values, such as props.
 */

exports.mergeComponentVariables = mergeComponentVariables;

var mergeSiteVariables__PROD = function mergeSiteVariables__PROD() {
  var initial = {
    fontSizes: {}
  };

  for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    sources[_key3] = arguments[_key3];
  }

  return _deepmerge.deepmerge.apply(void 0, [initial].concat(sources));
};

exports.mergeSiteVariables__PROD = mergeSiteVariables__PROD;

var mergeSiteVariables__DEV = function mergeSiteVariables__DEV() {
  for (var _len4 = arguments.length, sources = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    sources[_key4] = arguments[_key4];
  }

  if (!_debugEnabled.isEnabled) {
    return mergeSiteVariables__PROD.apply(void 0, sources);
  }

  var initial = {
    fontSizes: {}
  };
  return sources.reduce(function (acc, next) {
    var _acc$_debug2 = acc._debug,
        _debug = _acc$_debug2 === void 0 ? [] : _acc$_debug2,
        accumulatedSiteVariables = (0, _objectWithoutPropertiesLoose2.default)(acc, ["_debug"]);

    var _ref4 = next || {},
        _ref4$_debug = _ref4._debug,
        computedDebug = _ref4$_debug === void 0 ? undefined : _ref4$_debug,
        _ref4$_invertedKeys = _ref4._invertedKeys,
        _invertedKeys = _ref4$_invertedKeys === void 0 ? undefined : _ref4$_invertedKeys,
        _ref4$_debugId = _ref4._debugId,
        _debugId = _ref4$_debugId === void 0 ? undefined : _ref4$_debugId,
        nextSiteVariables = (0, _objectWithoutPropertiesLoose2.default)(_ref4, ["_debug", "_invertedKeys", "_debugId"]);

    var merged = (0, _deepmerge.deepmerge)(Object.assign({}, accumulatedSiteVariables, {
      _invertedKeys: undefined
    }), nextSiteVariables);
    merged._debug = _debug.concat(computedDebug || {
      resolved: nextSiteVariables,
      debugId: _debugId
    });
    merged._invertedKeys = _invertedKeys || (0, _objectKeysToValues.objectKeyToValues)(merged, function (key) {
      return "siteVariables." + key;
    });
    return merged;
  }, initial);
};

exports.mergeSiteVariables__DEV = mergeSiteVariables__DEV;
var mergeSiteVariables = process.env.NODE_ENV === 'production' ? mergeSiteVariables__PROD : mergeSiteVariables__DEV;
/**
 * Component variables can be objects, functions, or an array of these.
 * The functions must be called with the final result of siteVariables, otherwise
 *   the component variable objects would have no ability to apply siteVariables.
 * Therefore, componentVariables must be resolved by the component at render time.
 * We instead pass down call stack of component variable functions to be resolved later.
 */

exports.mergeSiteVariables = mergeSiteVariables;

var mergeThemeVariables__PROD = function mergeThemeVariables__PROD() {
  for (var _len5 = arguments.length, sources = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    sources[_key5] = arguments[_key5];
  }

  var displayNames = _union2.default.apply(void 0, (0, _map2.default)(sources, _keys2.default));

  return displayNames.reduce(function (componentVariables, displayName) {
    componentVariables[displayName] = mergeComponentVariables.apply(void 0, (0, _map2.default)(sources, displayName));
    return componentVariables;
  }, {});
};

exports.mergeThemeVariables__PROD = mergeThemeVariables__PROD;

var mergeThemeVariables__DEV = function mergeThemeVariables__DEV() {
  for (var _len6 = arguments.length, sources = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    sources[_key6] = arguments[_key6];
  }

  if (!_debugEnabled.isEnabled) {
    return mergeThemeVariables__PROD.apply(void 0, sources);
  }

  var displayNames = _union2.default.apply(void 0, (0, _map2.default)(sources, _keys2.default));

  return displayNames.reduce(function (componentVariables, displayName) {
    componentVariables[displayName] = mergeComponentVariables.apply(void 0, (0, _map2.default)(sources, function (source) {
      return source && (0, _withDebugId.withDebugId)(source[displayName], source._debugId);
    }));
    return componentVariables;
  }, {});
};

exports.mergeThemeVariables__DEV = mergeThemeVariables__DEV;
var mergeThemeVariables = process.env.NODE_ENV === 'production' ? mergeThemeVariables__PROD : mergeThemeVariables__DEV;
/**
 * See mergeThemeVariables() description.
 * Component styles adhere to the same pattern as component variables, except
 *   that they return style objects.
 */

exports.mergeThemeVariables = mergeThemeVariables;

var mergeThemeStyles = function mergeThemeStyles() {
  var initial = {};

  for (var _len7 = arguments.length, sources = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    sources[_key7] = arguments[_key7];
  }

  return sources.reduce(function (themeComponentStyles, next) {
    (0, _forEach2.default)(next, function (stylesByPart, displayName) {
      themeComponentStyles[displayName] = mergeComponentStyles(themeComponentStyles[displayName], (0, _withDebugId.withDebugId)(stylesByPart, next._debugId));
    });
    return themeComponentStyles;
  }, initial);
};

exports.mergeThemeStyles = mergeThemeStyles;

var mergeFontFaces = function mergeFontFaces() {
  return _toCompactArray.toCompactArray.apply(void 0, arguments);
};

exports.mergeFontFaces = mergeFontFaces;

var mergeStaticStyles = function mergeStaticStyles() {
  return _toCompactArray.toCompactArray.apply(void 0, arguments);
};

exports.mergeStaticStyles = mergeStaticStyles;

var mergeAnimations = function mergeAnimations() {
  for (var _len8 = arguments.length, sources = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    sources[_key8] = arguments[_key8];
  }

  return Object.assign.apply(Object, [{}].concat(sources));
};

exports.mergeAnimations = mergeAnimations;

var mergeStyles = function mergeStyles() {
  for (var _len9 = arguments.length, sources = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    sources[_key9] = arguments[_key9];
  }

  return function () {
    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
      args[_key10] = arguments[_key10];
    }

    return sources.reduce(function (acc, next) {
      return (0, _merge2.default)(acc, (0, _callable.callable)(next).apply(void 0, args));
    }, {});
  };
};

exports.mergeStyles = mergeStyles;

var mergeThemes = function mergeThemes() {
  for (var _len11 = arguments.length, themes = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
    themes[_key11] = arguments[_key11];
  }

  return themes.reduce(function (acc, next) {
    if (!next) return acc;
    var nextDebugId = next['_debugId'];
    acc.siteVariables = mergeSiteVariables(acc.siteVariables, (0, _withDebugId.withDebugId)(next.siteVariables, nextDebugId));
    acc.componentVariables = mergeThemeVariables(acc.componentVariables, (0, _withDebugId.withDebugId)(next.componentVariables, nextDebugId));
    acc.componentStyles = mergeThemeStyles(acc.componentStyles, (0, _withDebugId.withDebugId)(next.componentStyles, nextDebugId));
    acc.fontFaces = mergeFontFaces.apply(void 0, acc.fontFaces.concat(next.fontFaces || []));
    acc.staticStyles = mergeStaticStyles.apply(void 0, acc.staticStyles.concat(next.staticStyles || []));
    acc.animations = mergeAnimations(acc.animations, next.animations);
    return acc;
  }, // .reduce() will modify "emptyTheme" object, so we should clone it before actual usage
  Object.assign({}, emptyTheme));
};

exports.mergeThemes = mergeThemes;
//# sourceMappingURL=mergeThemes.js.map
