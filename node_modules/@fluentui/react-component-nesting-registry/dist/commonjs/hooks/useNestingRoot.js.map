{"version":3,"sources":["hooks/useNestingRoot.ts"],"names":["registrySet","RefStack","useNestingRoot","React","useState","registry","parentRef","useRef","nestedProps","useMemo","value","getContextRefs","register","unregister","getRefs","useCallback","useEffect","NestedComponent","NestingContext","Provider","isRoot","ref"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAGA,IAAMA,WAAW,GAAG,IAAIC,kBAAJ,EAApB,C,CAEA;;AACA;;AAEO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAA+C;AAAA,wBACxDC,KAAK,CAACC,QAAN,CAAeJ,WAAf,CADwD;AAAA,MACpEK,QADoE;;AAE3E,MAAMC,SAAS,GAAGH,KAAK,CAACI,MAAN,CAAgB,IAAhB,CAAlB;AAEA,MAAMC,WAA+B,GAAGL,KAAK,CAACM,OAAN,CACtC;AAAA,WAAO;AACLC,MAAAA,KAAK,EAAE;AACLC,QAAAA,cAAc,EAAEN,QAAQ,CAACM,cADpB;AAELC,QAAAA,QAAQ,EAAEP,QAAQ,CAACO,QAFd;AAGLC,QAAAA,UAAU,EAAER,QAAQ,CAACQ;AAHhB;AADF,KAAP;AAAA,GADsC,EAQtC,EARsC,CAAxC;AAUA,MAAMC,OAAO,GAAGX,KAAK,CAACY,WAAN,CAAkB,YAAM;AACtC,WAAOV,QAAQ,CAACM,cAAT,CAAwBL,SAAxB,CAAP;AACD,GAFe,EAEb,EAFa,CAAhB;AAIAH,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpBX,IAAAA,QAAQ,CAACO,QAAT,CAAkBN,SAAlB;AAEA,WAAO;AAAA,aAAMD,QAAQ,CAACQ,UAAT,CAAoBP,SAApB,CAAN;AAAA,KAAP;AACD,GAJD,EAIG,EAJH;AAMA,SAAO;AACLW,IAAAA,eAAe,EAAEC,+BAAeC,QAD3B;AAELX,IAAAA,WAAW,EAAXA,WAFK;AAILM,IAAAA,OAAO,EAAPA,OAJK;AAKLM,IAAAA,MAAM,EAAE,IALH;AAMLC,IAAAA,GAAG,EAAEf;AANA,GAAP;AAQD,CAhCM","sourcesContent":["import * as React from 'react';\n\nimport { NestingContext } from '../NestingContext';\nimport { NestedContextProps } from '../types';\nimport { RefStack } from '../utils/RefStack';\nimport { UseNestingHookResult } from './types';\n\nconst registrySet = new RefStack();\n\n// These hooks are not used currently\n/* eslint-disable */\n\nexport const useNestingRoot = <T extends Node>(): UseNestingHookResult<T> => {\n  const [registry] = React.useState(registrySet);\n  const parentRef = React.useRef<T>(null);\n\n  const nestedProps: NestedContextProps = React.useMemo(\n    () => ({\n      value: {\n        getContextRefs: registry.getContextRefs,\n        register: registry.register,\n        unregister: registry.unregister,\n      },\n    }),\n    [],\n  );\n  const getRefs = React.useCallback(() => {\n    return registry.getContextRefs(parentRef as any);\n  }, []);\n\n  React.useEffect(() => {\n    registry.register(parentRef as any);\n\n    return () => registry.unregister(parentRef as any);\n  }, []);\n\n  return {\n    NestedComponent: NestingContext.Provider,\n    nestedProps,\n\n    getRefs,\n    isRoot: true,\n    ref: parentRef,\n  };\n};\n"],"file":"useNestingRoot.js"}