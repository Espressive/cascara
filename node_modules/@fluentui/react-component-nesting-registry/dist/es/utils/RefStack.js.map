{"version":3,"sources":["utils/RefStack.ts"],"names":["RefStack","set","Set","getContextRefs","ref","nodes","Array","from","refId","indexOf","slice","register","add","unregister","delete"],"mappings":"AAEA,WAAaA,QAAb;AAAA;;AAAA,OACUC,GADV,GACgB,IAAIC,GAAJ,EADhB;;AAAA,OAGSC,cAHT,GAG0B,UAACC,GAAD,EAA6B;AACnD,QAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAI,CAACN,GAAhB,CAAd;AACA,QAAMO,KAAK,GAAGH,KAAK,CAACI,OAAN,CAAcL,GAAd,CAAd;AAEA,WAAOC,KAAK,CAACK,KAAN,CAAYF,KAAZ,CAAP;AACD,GARH;;AAAA,OAUSG,QAVT,GAUoB,UAACP,GAAD,EAAwB;AACxC,IAAA,KAAI,CAACH,GAAL,CAASW,GAAT,CAAaR,GAAb;AACD,GAZH;;AAAA,OAcSS,UAdT,GAcsB,UAACT,GAAD,EAAwB;AAC1C,IAAA,KAAI,CAACH,GAAL,CAASa,MAAT,CAAgBV,GAAhB;AACD,GAhBH;AAAA","sourcesContent":["import { NodeRef } from '../types';\n\nexport class RefStack {\n  private set = new Set<NodeRef>();\n\n  public getContextRefs = (ref: NodeRef): NodeRef[] => {\n    const nodes = Array.from(this.set);\n    const refId = nodes.indexOf(ref);\n\n    return nodes.slice(refId);\n  };\n\n  public register = (ref: NodeRef): void => {\n    this.set.add(ref);\n  };\n\n  public unregister = (ref: NodeRef): void => {\n    this.set.delete(ref);\n  };\n}\n"],"file":"RefStack.js"}