{"version":3,"sources":["utils/commonPropTypes.ts"],"names":["customPropTypes","PropTypes","commonPropTypes","createCommon","config","accessibility","as","children","className","color","content","styled","elementType","element","node","string","itemShorthand","nodeContent","styles","oneOfType","object","func","variables","design"],"mappings":"AAEA,OAAO,KAAKA,eAAZ,MAAiC,2BAAjC;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAmDA,OAAO,IAAMC,eAAe,GAAG;AAC7BC,EAAAA,YAAY,EAAE,sBAACC,MAAD,EAAqC;AAAA,QAApCA,MAAoC;AAApCA,MAAAA,MAAoC,GAAP,EAAO;AAAA;;AAAA,kBAS7CA,MAT6C;AAAA,wCAE/CC,aAF+C;AAAA,QAE/CA,aAF+C,sCAE/B,IAF+B;AAAA,6BAG/CC,EAH+C;AAAA,QAG/CA,EAH+C,2BAG1C,IAH0C;AAAA,mCAI/CC,QAJ+C;AAAA,QAI/CA,QAJ+C,iCAIpC,MAJoC;AAAA,oCAK/CC,SAL+C;AAAA,QAK/CA,SAL+C,kCAKnC,IALmC;AAAA,gCAM/CC,KAN+C;AAAA,QAM/CA,KAN+C,8BAMvC,KANuC;AAAA,kCAO/CC,OAP+C;AAAA,QAO/CA,OAP+C,gCAOrC,MAPqC;AAAA,iCAQ/CC,MAR+C;AAAA,QAQ/CA,MAR+C,+BAQtC,IARsC;AAUjD,6BACMN,aAAa,IAAI;AACnBA,MAAAA,aAAa,EAAEL,eAAe,CAACK;AADZ,KADvB,EAIMC,EAAE,IAAI;AACRA,MAAAA,EAAE,EAAEL,SAAS,CAACW;AADN,KAJZ,EAOML,QAAQ,IAAI;AACdA,MAAAA,QAAQ,EAAEA,QAAQ,KAAK,SAAb,GAAyBN,SAAS,CAACY,OAAnC,GAA6CZ,SAAS,CAACa;AADnD,KAPlB,EAUMN,SAAS,IAAI;AACfA,MAAAA,SAAS,EAAEP,SAAS,CAACc;AADN,KAVnB,EAaMN,KAAK,IAAI;AACXA,MAAAA,KAAK,EAAER,SAAS,CAACc;AADN,KAbf,EAgBML,OAAO,IAAI;AACbA,MAAAA,OAAO,EAAEA,OAAO,KAAK,WAAZ,GAA0BV,eAAe,CAACgB,aAA1C,GAA0DhB,eAAe,CAACiB;AADtE,KAhBjB,EAmBMN,MAAM,IAAI;AACZO,MAAAA,MAAM,EAAEjB,SAAS,CAACkB,SAAV,CAAoB,CAAClB,SAAS,CAACmB,MAAX,EAAmBnB,SAAS,CAACoB,IAA7B,CAApB,CADI;AAEZC,MAAAA,SAAS,EAAErB,SAAS,CAACkB,SAAV,CAAoB,CAAClB,SAAS,CAACmB,MAAX,EAAmBnB,SAAS,CAACoB,IAA7B,CAApB,CAFC;AAGZE,MAAAA,MAAM,EAAEvB,eAAe,CAACuB;AAHZ,KAnBhB;AAyBD;AApC4B,CAAxB","sourcesContent":["import { ComponentSlotStyle, ComponentVariablesInput } from '@fluentui/styles';\nimport { ComponentDesignProp } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ReactChildren } from '../types';\n\nexport interface StyledComponentProps<P = any, V = any> {\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle<P, V>;\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n}\n\nexport interface UIComponentProps<P = any, V = any> extends StyledComponentProps<P, V> {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n  design?: ComponentDesignProp;\n}\n\nexport type SizeValue = 'smallest' | 'smaller' | 'small' | 'medium' | 'large' | 'larger' | 'largest';\n\nexport type AlignValue = 'start' | 'end' | 'center' | 'justify';\n\nexport interface ColorComponentProps<TColor = string> {\n  /** A component can have a color. */\n  color?: TColor;\n}\n\nexport interface ContentComponentProps<TContent = React.ReactNode> {\n  /** Shorthand for primary content. */\n  content?: TContent;\n}\n\nexport interface ChildrenComponentProps<TChildren = ReactChildren> {\n  /**\n   *  Content for childrenApi\n   *  @docSiteIgnore\n   */\n  children?: TChildren;\n}\n\nexport interface CreateCommonConfig {\n  accessibility?: boolean;\n  children?: boolean | 'node' | 'element';\n  as?: boolean;\n  className?: boolean;\n  color?: boolean;\n  content?: boolean | 'node' | 'shorthand';\n  styled?: boolean;\n}\n\nexport const commonPropTypes = {\n  createCommon: (config: CreateCommonConfig = {}) => {\n    const {\n      accessibility = true,\n      as = true,\n      children = 'node',\n      className = true,\n      color = false,\n      content = 'node',\n      styled = true,\n    } = config;\n    return {\n      ...(accessibility && {\n        accessibility: customPropTypes.accessibility,\n      }),\n      ...(as && {\n        as: PropTypes.elementType,\n      }),\n      ...(children && {\n        children: children === 'element' ? PropTypes.element : PropTypes.node,\n      }),\n      ...(className && {\n        className: PropTypes.string,\n      }),\n      ...(color && {\n        color: PropTypes.string,\n      }),\n      ...(content && {\n        content: content === 'shorthand' ? customPropTypes.itemShorthand : customPropTypes.nodeContent,\n      }),\n      ...(styled && {\n        styles: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n        variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n        design: customPropTypes.design,\n      }),\n    };\n  },\n};\n"],"file":"commonPropTypes.js"}