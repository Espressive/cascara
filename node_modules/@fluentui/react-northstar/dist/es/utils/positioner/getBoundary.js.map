{"version":3,"sources":["utils/positioner/getBoundary.ts"],"names":["getScrollParent","getBoundary","element","boundary","ownerDocument","documentElement","boundariesNode","nodeName"],"mappings":"AAEA,SAASA,eAAT,QAAgC,mBAAhC;;AAGA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA2CC,QAA3C,EAAkF;AACvF,MAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACzB,WAAOD,OAAO,CAACE,aAAR,CAAsBC,eAA7B;AACD;;AAED,MAAIF,QAAQ,KAAK,cAAjB,EAAiC;AAC/B,QAAIG,cAAc,GAAGN,eAAe,CAACE,OAAD,CAApC;;AAEA,QAAII,cAAc,CAACC,QAAf,KAA4B,MAAhC,EAAwC;AACtCD,MAAAA,cAAc,GAAGJ,OAAO,CAACE,aAAR,CAAsBC,eAAvC;AACD;;AAED,WAAOC,cAAP;AACD;;AAED,SAAOH,QAAP;AACD","sourcesContent":["import * as PopperJs from '@popperjs/core';\n\nimport { getScrollParent } from './getScrollParent';\nimport { Boundary } from './types';\n\n/**\n * Allows to mimic a behavior from V1 of Popper and accept `window` and `scrollParent` as strings.\n */\nexport function getBoundary(element: HTMLElement, boundary: Boundary): PopperJs.Boundary {\n  if (boundary === 'window') {\n    return element.ownerDocument.documentElement;\n  }\n\n  if (boundary === 'scrollParent') {\n    let boundariesNode = getScrollParent(element);\n\n    if (boundariesNode.nodeName === 'BODY') {\n      boundariesNode = element.ownerDocument.documentElement;\n    }\n\n    return boundariesNode as HTMLElement;\n  }\n\n  return boundary;\n}\n"],"file":"getBoundary.js"}