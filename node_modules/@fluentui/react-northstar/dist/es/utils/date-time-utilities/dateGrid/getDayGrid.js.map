{"version":3,"sources":["utils/date-time-utilities/dateGrid/getDayGrid.ts"],"names":["addDays","compareDates","getDateRangeArray","isInDateRangeArray","DAYS_IN_WEEK","getDateRangeTypeToUse","getBoundedDateRange","isRestrictedDate","getDayGrid","options","selectedDate","dateRangeType","firstDayOfWeek","today","minDate","maxDate","weeksToShow","workWeekDays","daysToSelectInDayView","restrictedDates","markedDays","restrictedDateOptions","todaysDate","Date","navigatedDate","date","getFullYear","getMonth","getDate","weeks","getDay","setDate","isAllDaysOfWeekOutOfMonth","selectedDateRangeType","selectedDates","shouldGetWeeks","weekIndex","week","dayIndex","originalDate","getTime","dayInfo","key","toString","isInMonth","isToday","isSelected","isInBounds","isMarked","some","markedDay","push"],"mappings":"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","sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { IDay, IDayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: IDayGridOptions): IDay[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: IDay[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (!!selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: IDay[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: IDay = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some(markedDay => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n"],"file":"getDayGrid.js"}