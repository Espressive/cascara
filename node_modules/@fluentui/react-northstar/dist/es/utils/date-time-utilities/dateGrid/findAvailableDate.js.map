{"version":3,"sources":["utils/date-time-utilities/dateGrid/findAvailableDate.ts"],"names":["isRestrictedDate","isAfterMaxDate","isBeforeMinDate","compareDatePart","addDays","findAvailableDate","options","targetDate","initialDate","direction","restrictedDateOptions","availableDate","undefined"],"mappings":";AAEA,SAASA,gBAAT,QAAiC,oBAAjC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,eAAT,EAA0BC,OAA1B,QAAyC,sBAAzC;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAsD;AAAA,MAC7EC,UAD6E,GACZD,OADY,CAC7EC,UAD6E;AAAA,MACjEC,WADiE,GACZF,OADY,CACjEE,WADiE;AAAA,MACpDC,SADoD,GACZH,OADY,CACpDG,SADoD;AAAA,MACtCC,qBADsC,iCACZJ,OADY;;AAErF,MAAIK,aAAa,GAAGJ,UAApB,CAFqF,CAGrF;;AACA,MAAI,CAACP,gBAAgB,CAACO,UAAD,EAAaG,qBAAb,CAArB,EAA0D;AACxD,WAAOH,UAAP;AACD;;AAED,SACEJ,eAAe,CAACK,WAAD,EAAcG,aAAd,CAAf,KAAgD,CAAhD,IACAX,gBAAgB,CAACW,aAAD,EAAgBD,qBAAhB,CADhB,IAEA,CAACT,cAAc,CAACU,aAAD,EAAgBD,qBAAhB,CAFf,IAGA,CAACR,eAAe,CAACS,aAAD,EAAgBD,qBAAhB,CAJlB,EAKE;AACAC,IAAAA,aAAa,GAAGP,OAAO,CAACO,aAAD,EAAgBF,SAAhB,CAAvB;AACD;;AAED,MAAIN,eAAe,CAACK,WAAD,EAAcG,aAAd,CAAf,KAAgD,CAAhD,IAAqD,CAACX,gBAAgB,CAACW,aAAD,EAAgBD,qBAAhB,CAA1E,EAAkH;AAChH,WAAOC,aAAP;AACD;;AAED,SAAOC,SAAP;AACD,CAtBM","sourcesContent":["import { IAvailableDateOptions } from './dateGrid.types';\n\nimport { isRestrictedDate } from './isRestrictedDate';\n\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport const findAvailableDate = (options: IAvailableDateOptions): Date | undefined => {\n  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n  let availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (\n    compareDatePart(initialDate, availableDate) !== 0 &&\n    isRestrictedDate(availableDate, restrictedDateOptions) &&\n    !isAfterMaxDate(availableDate, restrictedDateOptions) &&\n    !isBeforeMinDate(availableDate, restrictedDateOptions)\n  ) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};\n"],"file":"findAvailableDate.js"}