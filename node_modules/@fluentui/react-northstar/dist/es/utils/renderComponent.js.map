{"version":3,"sources":["utils/renderComponent.tsx"],"names":["FocusZone","getElementType","deprecated_getTelemetry","getTelemetry","getUnhandledProps","unstable_getAccessibility","getAccessibility","unstable_getStyles","getStyles","noopRenderer","emptyTheme","logProviderMissingWarning","renderComponent","config","context","className","displayName","handledProps","props","state","actionHandlers","render","saveDebug","telemetry","isFirstRenderRef","setStart","setEnd","rtl","ElementType","unhandledProps","stateAndProps","accessibility","allDisplayNames","disableAnimations","primaryDisplayName","componentProps","inlineStylesProps","renderer","theme","performance","enableStylesCaching","enableBooleanVariablesCaching","classes","variables","styles","resolvedConfig","focusZone","originalElementType","as","isRtl","element"],"mappings":"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","sourcesContent":["import {\n  AccessibilityActionHandlers,\n  ComponentSlotClasses,\n  FocusZone,\n  getElementType,\n  deprecated_getTelemetry as getTelemetry,\n  getUnhandledProps,\n  ReactAccessibilityBehavior,\n  unstable_getAccessibility as getAccessibility,\n  unstable_getStyles as getStyles,\n  ProviderContextPrepared,\n} from '@fluentui/react-bindings';\nimport { noopRenderer } from '@fluentui/react-northstar-styles-renderer';\nimport {\n  emptyTheme,\n  ComponentSlotStylesResolved,\n  ComponentVariablesObject,\n  DebugData,\n  PropsWithVarsAndStyles,\n  ThemePrepared,\n} from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as React from 'react';\n\nimport { Props } from '../types';\nimport { logProviderMissingWarning } from './providerMissingHandler';\n\nexport interface RenderResultConfig<P> {\n  ElementType: React.ElementType<P>;\n  classes: ComponentSlotClasses;\n  unhandledProps: Props;\n  variables: ComponentVariablesObject;\n  styles: ComponentSlotStylesResolved;\n  accessibility: ReactAccessibilityBehavior;\n  rtl: boolean;\n  theme: ThemePrepared;\n}\n\nexport type RenderComponentCallback<P> = (config: RenderResultConfig<P>) => any;\n\nexport interface RenderConfig<P> {\n  className?: string;\n  displayName: string;\n  handledProps: string[];\n  props: PropsWithVarsAndStyles;\n  state: Record<string, any>;\n  actionHandlers: AccessibilityActionHandlers;\n  render: RenderComponentCallback<P>;\n  saveDebug: (debug: DebugData | null) => void;\n  isFirstRenderRef: React.MutableRefObject<boolean>;\n}\n\nexport const renderComponent = <P extends {}>(\n  config: RenderConfig<P>,\n  context?: ProviderContextPrepared,\n): React.ReactElement<P> => {\n  const { className, displayName, handledProps, props, state, actionHandlers, render, saveDebug = () => {} } = config;\n\n  if (_.isEmpty(context)) {\n    logProviderMissingWarning();\n  }\n\n  const { setStart, setEnd } = getTelemetry(displayName, context.telemetry, config.isFirstRenderRef);\n  const rtl = context.rtl || false;\n\n  setStart();\n\n  const ElementType = getElementType(props) as React.ReactType<P>;\n  const unhandledProps = getUnhandledProps(handledProps, props);\n  const stateAndProps = { ...state, ...props };\n\n  const accessibility: ReactAccessibilityBehavior = getAccessibility(\n    displayName,\n    props.accessibility,\n    stateAndProps,\n    rtl,\n    actionHandlers,\n  );\n  const { classes, variables, styles, theme } = getStyles({\n    allDisplayNames: [displayName],\n    className,\n    disableAnimations: context.disableAnimations || false,\n    primaryDisplayName: displayName,\n    componentProps: stateAndProps,\n    inlineStylesProps: stateAndProps,\n    renderer: context.renderer || noopRenderer,\n    rtl,\n    saveDebug,\n    theme: context.theme || emptyTheme,\n    performance: {\n      ...context.performance,\n      // we cannot enable caching for class components\n      enableStylesCaching: false,\n      enableBooleanVariablesCaching: false,\n    },\n    telemetry: context.telemetry,\n  });\n\n  const resolvedConfig: RenderResultConfig<P> = {\n    ElementType,\n    unhandledProps,\n    classes,\n    variables,\n    styles,\n    accessibility,\n    rtl,\n    theme,\n  };\n\n  if (accessibility.focusZone) {\n    const originalElementType = resolvedConfig.ElementType;\n\n    resolvedConfig.ElementType = FocusZone as any;\n    resolvedConfig.unhandledProps = {\n      ...resolvedConfig.unhandledProps,\n      ...accessibility.focusZone.props,\n    };\n    resolvedConfig.unhandledProps.as = originalElementType;\n    resolvedConfig.unhandledProps.isRtl = resolvedConfig.rtl;\n  }\n\n  const element = render(resolvedConfig);\n  setEnd();\n\n  return element;\n};\n"],"file":"renderComponent.js"}