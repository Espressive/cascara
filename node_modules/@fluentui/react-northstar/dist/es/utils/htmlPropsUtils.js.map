{"version":3,"sources":["utils/htmlPropsUtils.tsx"],"names":["htmlImageProps","htmlInputAttrs","htmlInputEvents","htmlInputProps","partitionHTMLProps","props","options","htmlProps","includeAria","inputProps","restProps","val","prop","possibleAria","test","target"],"mappings":";;AAEA,OAAO,IAAMA,cAAc,GAAG,CAAC,KAAD,EAAQ,QAAR,EAAkB,KAAlB,EAAyB,QAAzB,EAAmC,OAAnC,CAAvB;AA6EP,OAAO,IAAMC,cAAgC,GAAG,CAC9C;AACA,UAF8C,EAG9C,cAH8C,EAI9C,gBAJ8C,EAM9C;AACA,QAP8C,EAQ9C,gBAR8C,EAS9C,cAT8C,EAU9C,aAV8C,EAW9C,WAX8C,EAY9C,SAZ8C,EAa9C,UAb8C,EAc9C,MAd8C,EAe9C,IAf8C,EAgB9C,MAhB8C,EAiB9C,KAjB8C,EAkB9C,WAlB8C,EAmB9C,KAnB8C,EAoB9C,WApB8C,EAqB9C,UArB8C,EAsB9C,MAtB8C,EAuB9C,SAvB8C,EAwB9C,aAxB8C,EAyB9C,UAzB8C,EA0B9C,UA1B8C,EA2B9C,MA3B8C,EA4B9C,MA5B8C,EA6B9C,OA7B8C,CAAzC;AAkCP,OAAO,IAAMC,eAAkC,GAAG,CAChD;AACA;AACA,WAHgD,EAIhD,YAJgD,EAKhD,SALgD,EAOhD;AACA,SARgD,EAShD,QATgD,EAWhD;AACA,UAZgD,EAahD,SAbgD,EAehD;AACA,SAhBgD,EAiBhD,eAjBgD,EAkBhD,QAlBgD,EAmBhD,WAnBgD,EAoBhD,aApBgD,EAqBhD,YArBgD,EAsBhD,aAtBgD,EAuBhD,YAvBgD,EAwBhD,aAxBgD,EAyBhD,QAzBgD,EA0BhD,aA1BgD,EA2BhD,cA3BgD,EA4BhD,cA5BgD,EA6BhD,aA7BgD,EA8BhD,YA9BgD,EA+BhD,aA/BgD,EAgChD,WAhCgD,EAkChD;AACA,UAnCgD,EAqChD;AACA,eAtCgD,EAuChD,YAvCgD,EAwChD,aAxCgD,EAyChD,cAzCgD,CAA3C;AA4CP,OAAO,IAAMC,cAAgC,aAAOF,cAAP,EAA0BC,eAA1B,CAAtC;;AASP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,KADgC,EAEhCC,OAFgC,EAGqB;AAAA,MADrDA,OACqD;AADrDA,IAAAA,OACqD,GADhB,EACgB;AAAA;;AAAA,iBACMA,OADN;AAAA,oCAC7CC,SAD6C;AAAA,MAC7CA,SAD6C,mCACjCJ,cADiC;AAAA,sCACjBK,WADiB;AAAA,MACjBA,WADiB,qCACH,IADG;AAErD,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,WAAUL,KAAV,EAAiB,UAACM,GAAD,EAAMC,IAAN,EAAe;AAC9B,QAAMC,YAAY,GAAGL,WAAW,KAAK,YAAYM,IAAZ,CAAiBF,IAAjB,KAA0BA,IAAI,KAAK,MAAxC,CAAhC;AACA,QAAMG,MAAM,GAAG,UAAWR,SAAX,EAAsBK,IAAtB,KAA+BC,YAA/B,GAA8CJ,UAA9C,GAA2DC,SAA1E;AACAK,IAAAA,MAAM,CAACH,IAAD,CAAN,GAAeD,GAAf;AACD,GAJD;;AAMA,SAAO,CAACF,UAAD,EAAaC,SAAb,CAAP;AACD,CAfM","sourcesContent":["import * as _ from 'lodash';\n\nexport const htmlImageProps = ['alt', 'height', 'src', 'srcSet', 'width'];\n\nexport type HtmlInputEvents =\n  // keyboard\n  | 'onKeyDown'\n  | 'onKeyPress'\n  | 'onKeyUp'\n  | 'onFocus'\n  | 'onBlur'\n\n  // form\n  | 'onChange'\n  | 'onInput'\n\n  // mouse\n  | 'onClick'\n  | 'onContextMenu'\n  | 'onDrag'\n  | 'onDragEnd'\n  | 'onDragEnter'\n  | 'onDragExit'\n  | 'onDragLeave'\n  | 'onDragOver'\n  | 'onDragStart'\n  | 'onDrop'\n  | 'onMouseDown'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onMouseMove'\n  | 'onMouseOut'\n  | 'onMouseOver'\n  | 'onMouseUp'\n\n  // selection\n  | 'onSelect'\n\n  // touch\n  | 'onTouchCancel'\n  | 'onTouchEnd'\n  | 'onTouchMove'\n  | 'onTouchStart';\n\nexport type HtmlInputAttrs =\n  // REACT |\n  | 'selected'\n  | 'defaultValue'\n  | 'defaultChecked'\n\n  // LIMITED HTML PROPS\n  | 'accept'\n  | 'autoCapitalize'\n  | 'autoComplete'\n  | 'autoCorrect'\n  | 'autoFocus'\n  | 'checked'\n  | 'disabled'\n  | 'form'\n  | 'id'\n  | 'list'\n  | 'max'\n  | 'maxLength'\n  | 'min'\n  | 'minLength'\n  | 'multiple'\n  | 'name'\n  | 'pattern'\n  | 'placeholder'\n  | 'readOnly'\n  | 'required'\n  | 'step'\n  | 'type'\n  | 'value';\n\nexport type SupportedIntrinsicInputProps = {\n  [K in HtmlInputProps]?: K extends keyof JSX.IntrinsicElements['input'] ? JSX.IntrinsicElements['input'][K] : any;\n};\n\nexport const htmlInputAttrs: HtmlInputAttrs[] = [\n  // REACT\n  'selected',\n  'defaultValue',\n  'defaultChecked',\n\n  // LIMITED HTML PROPS\n  'accept',\n  'autoCapitalize',\n  'autoComplete',\n  'autoCorrect',\n  'autoFocus',\n  'checked',\n  'disabled',\n  'form',\n  'id',\n  'list',\n  'max',\n  'maxLength',\n  'min',\n  'minLength',\n  'multiple',\n  'name',\n  'pattern',\n  'placeholder',\n  'readOnly',\n  'required',\n  'step',\n  'type',\n  'value',\n];\n\nexport type HtmlInputProps = HtmlInputAttrs | HtmlInputEvents;\n\nexport const htmlInputEvents: HtmlInputEvents[] = [\n  // EVENTS\n  // keyboard\n  'onKeyDown',\n  'onKeyPress',\n  'onKeyUp',\n\n  // focus\n  'onFocus',\n  'onBlur',\n\n  // form\n  'onChange',\n  'onInput',\n\n  // mouse\n  'onClick',\n  'onContextMenu',\n  'onDrag',\n  'onDragEnd',\n  'onDragEnter',\n  'onDragExit',\n  'onDragLeave',\n  'onDragOver',\n  'onDragStart',\n  'onDrop',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n\n  // selection\n  'onSelect',\n\n  // touch\n  'onTouchCancel',\n  'onTouchEnd',\n  'onTouchMove',\n  'onTouchStart',\n];\n\nexport const htmlInputProps: HtmlInputProps[] = [...htmlInputAttrs, ...htmlInputEvents];\n\nexport interface PartitionHTMLPropsOptions {\n  /** An array of html input props */\n  htmlProps?: HtmlInputProps[];\n  /** Includes all input props that starts with \"aria-\" */\n  includeAria?: boolean;\n}\n\n/**\n * Returns props of html input element and restProps.\n * @param props - A ReactElement props object\n * @param options - Options for\n * @returns - 2-element array. First element is props of HTML input element and second element is the other props.\n */\nexport const partitionHTMLProps = (\n  props: { [key: string]: any },\n  options: PartitionHTMLPropsOptions = {},\n): [{ [key: string]: any }, { [key: string]: any }] => {\n  const { htmlProps = htmlInputProps, includeAria = true } = options;\n  const inputProps = {};\n  const restProps = {};\n\n  _.forEach(props, (val, prop) => {\n    const possibleAria = includeAria && (/^aria-.*$/.test(prop) || prop === 'role');\n    const target = _.includes(htmlProps, prop) || possibleAria ? inputProps : restProps;\n    target[prop] = val;\n  });\n\n  return [inputProps, restProps];\n};\n"],"file":"htmlPropsUtils.js"}