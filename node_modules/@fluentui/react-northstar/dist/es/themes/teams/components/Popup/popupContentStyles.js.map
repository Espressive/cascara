{"version":3,"sources":["themes/teams/components/Popup/popupContentStyles.ts"],"names":["getContainerStyles","getPointerStyles","popupContentStyles","root","p","props","v","variables","display","zIndex","pointing","pointerEvents","placement","basePlacement","padding","pointerMargin","autoSize","overflow","pointer","rtl","backgroundColor","borderColor","borderSize","gap","pointerGap","height","pointerHeight","width","pointerWidth","content","background","color","boxShadow","border","borderRadius","transform"],"mappings":"AAIA,SAASA,kBAAT,EAA6BC,gBAA7B,QAAqD,wBAArD;AAEA,OAAO,IAAMC,kBAA+F,GAAG;AAC7GC,EAAAA,IAAI,EAAE;AAAA,QAAUC,CAAV,QAAGC,KAAH;AAAA,QAAwBC,CAAxB,QAAaC,SAAb;AAAA;AACJC,MAAAA,OAAO,EAAE,OADL;AAEJC,MAAAA,MAAM,EAAEH,CAAC,CAACG;AAFN,OAIAL,CAAC,CAACM,QAAF;AACFC,MAAAA,aAAa,EAAE;AADb,OAECX,kBAAkB,CAAC;AACpBY,MAAAA,SAAS,EAAER,CAAC,CAACS,aADO;AAEpBC,MAAAA,OAAO,EAAER,CAAC,CAACS;AAFS,KAAD,CAFnB,CAJA,EAYAX,CAAC,CAACY,QAAF,IAAc;AAChB;AACAR,MAAAA,OAAO,EAAE,MAFO;AAGhBS,MAAAA,QAAQ,EAAE;AAHM,KAZd;AAAA,GADuG;AAoB7GC,EAAAA,OAAO,EAAE;AAAA,QAAUd,CAAV,SAAGC,KAAH;AAAA,QAAwBC,CAAxB,SAAaC,SAAb;AAAA,QAA2BY,GAA3B,SAA2BA,GAA3B;AAAA,WACPlB,gBAAgB,CAAC;AACfmB,MAAAA,eAAe,EAAEd,CAAC,CAACc,eADJ;AAEfC,MAAAA,WAAW,EAAEf,CAAC,CAACe,WAFA;AAGfC,MAAAA,UAAU,EAAEhB,CAAC,CAACgB,UAHC;AAIfC,MAAAA,GAAG,EAAEjB,CAAC,CAACkB,UAJQ;AAKfV,MAAAA,OAAO,EAAER,CAAC,CAACS,aALI;AAMfU,MAAAA,MAAM,EAAEnB,CAAC,CAACoB,aANK;AAOfC,MAAAA,KAAK,EAAErB,CAAC,CAACsB,YAPM;AASfhB,MAAAA,SAAS,EAAER,CAAC,CAACS,aATE;AAUfM,MAAAA,GAAG,EAAHA;AAVe,KAAD,CADT;AAAA,GApBoG;AAkC7GU,EAAAA,OAAO,EAAE;AAAA,QAAUzB,CAAV,SAAGC,KAAH;AAAA,QAAwBC,CAAxB,SAAaC,SAAb;AAAA;AACPC,MAAAA,OAAO,EAAE,OADF;AAEPsB,MAAAA,UAAU,EAAExB,CAAC,CAACc,eAFP;AAGPW,MAAAA,KAAK,EAAEzB,CAAC,CAACyB,KAHF;AAIPC,MAAAA,SAAS,EAAE1B,CAAC,CAAC0B,SAJN;AAMPC,MAAAA,MAAM,EAAK3B,CAAC,CAACgB,UAAP,eAA2BhB,CAAC,CAACe,WAN5B;AAOPa,MAAAA,YAAY,EAAE5B,CAAC,CAAC4B,YAPT;AASPpB,MAAAA,OAAO,EAAER,CAAC,CAACQ,OATJ;AAUPqB,MAAAA,SAAS,EAAE;AAVJ,OAYH/B,CAAC,CAACM,QAAF,IAAc;AAChBC,MAAAA,aAAa,EAAE;AADC,KAZX,EAgBHP,CAAC,CAACY,QAAF,IAAc;AAChBC,MAAAA,QAAQ,EAAE;AADM,KAhBX;AAAA;AAlCoG,CAAxG","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\n\nimport { PopupContentStylesProps } from '../../../../components/Popup/PopupContent';\nimport { PopupContentVariables } from './popupContentVariables';\nimport { getContainerStyles, getPointerStyles } from '../../getPointerStyles';\n\nexport const popupContentStyles: ComponentSlotStylesPrepared<PopupContentStylesProps, PopupContentVariables> = {\n  root: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    display: 'block',\n    zIndex: v.zIndex,\n\n    ...(p.pointing && {\n      pointerEvents: 'none',\n      ...getContainerStyles({\n        placement: p.basePlacement,\n        padding: v.pointerMargin,\n      }),\n    }),\n\n    ...(p.autoSize && {\n      // when autoSize is true, root will have inline style maxWidth and maxHeight set by popper\n      display: 'flex',\n      overflow: 'hidden',\n    }),\n  }),\n\n  pointer: ({ props: p, variables: v, rtl }): ICSSInJSStyle =>\n    getPointerStyles({\n      backgroundColor: v.backgroundColor,\n      borderColor: v.borderColor,\n      borderSize: v.borderSize,\n      gap: v.pointerGap,\n      padding: v.pointerMargin,\n      height: v.pointerHeight,\n      width: v.pointerWidth,\n\n      placement: p.basePlacement,\n      rtl,\n    }),\n\n  content: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    display: 'block',\n    background: v.backgroundColor,\n    color: v.color,\n    boxShadow: v.boxShadow,\n\n    border: `${v.borderSize} solid ${v.borderColor}`,\n    borderRadius: v.borderRadius,\n\n    padding: v.padding,\n    transform: 'rotate(360deg)',\n\n    ...(p.pointing && {\n      pointerEvents: 'all',\n    }),\n\n    ...(p.autoSize && {\n      overflow: 'auto',\n    }),\n  }),\n};\n"],"file":"popupContentStyles.js"}