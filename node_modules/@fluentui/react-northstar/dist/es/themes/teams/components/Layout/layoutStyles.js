import { debugRoot, debugArea, debugGap } from '../../../../styles/debugStyles';

var countTrue = function countTrue(items) {
  return items.filter(Boolean).length;
};

export var layoutStyles = {
  root: function root(_ref) {
    var _Object$assign;

    var props = _ref.props;
    var alignItems = props.alignItems,
        debug = props.debug,
        gap = props.gap,
        justifyItems = props.justifyItems,
        hasMain = props.hasMain,
        mainSize = props.mainSize,
        hasEnd = props.hasEnd,
        endSize = props.endSize,
        hasStart = props.hasStart,
        startSize = props.startSize,
        vertical = props.vertical;
    return Object.assign({}, debug && debugRoot(), (_Object$assign = {
      justifyItems: justifyItems,
      alignItems: alignItems,
      display: 'grid'
    }, _Object$assign[vertical ? 'gridTemplateRows' : 'gridTemplateColumns'] = [// Heads up!
    // IE11 Doesn't support grid-gap, insert virtual columns instead
    hasStart && startSize, gap && hasStart && hasMain && gap, hasMain && mainSize, gap && (hasStart || hasMain) && hasEnd && gap, hasEnd && endSize].filter(Boolean).join(' '), _Object$assign), vertical && {
      gridAutoFlow: 'row',
      msGridColumns: '1fr'
    });
  },
  gap: function gap(_ref2) {
    var props = _ref2.props;
    return Object.assign({}, props.debug && debugGap({
      vertical: props.vertical
    }));
  },
  start: function start(_ref3) {
    var _Object$assign2;

    var p = _ref3.props;
    return Object.assign({}, p.debug && debugArea(), (_Object$assign2 = {
      alignItems: 'center',
      display: 'inline-flex'
    }, _Object$assign2[p.vertical ? 'msGridRow' : 'msGridColumn'] = '1', _Object$assign2));
  },
  main: function main(_ref4) {
    var _Object$assign3;

    var p = _ref4.props;
    return Object.assign({}, p.debug && debugArea(), (_Object$assign3 = {
      alignItems: 'center',
      display: 'grid'
    }, _Object$assign3[p.vertical ? 'msGridRow' : 'msGridColumn'] = countTrue([p.hasStart, p.hasStart && p.gap, p.hasMain]), _Object$assign3));
  },
  end: function end(_ref5) {
    var _Object$assign4;

    var p = _ref5.props;
    return Object.assign({}, p.debug && debugArea(), (_Object$assign4 = {
      alignItems: 'center',
      display: 'inline-flex'
    }, _Object$assign4[p.vertical ? 'msGridRow' : 'msGridColumn'] = countTrue([p.hasStart, p.hasStart && p.gap, p.hasMain && p.gap]), _Object$assign4));
  }
};
//# sourceMappingURL=layoutStyles.js.map
