{"version":3,"sources":["components/Grid/Grid.tsx"],"names":["getElementType","useAccessibility","useStyles","useFluentContext","useTelemetry","useUnhandledProps","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","rtlTextContainer","gridClassName","Grid","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","columns","content","design","rows","styles","variables","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","getAttributes","forElements","propTypes","createCommon","oneOfType","string","number","every","disallow","arrayOf","nodeContent","Object","keys"],"mappings":"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","sourcesContent":["import { Accessibility, GridBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface GridProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available gridBehavior, gridHorizontalBehavior\n   * */\n  accessibility?: Accessibility<GridBehaviorProps>;\n\n  /** The columns of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  columns?: string | number;\n\n  /** The rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  rows?: string | number;\n}\n\nexport const gridClassName = 'ui-grid';\n\nexport type GridStylesProps = Pick<GridProps, 'columns' | 'rows'>;\n\n/**\n * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.\n */\nexport const Grid: ComponentWithAs<'div', GridProps> & FluentComponentStaticProps<GridProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Grid.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, columns, content, design, rows, styles, variables } = props;\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: Grid.displayName,\n\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<GridStylesProps>(Grid.displayName, {\n    className: gridClassName,\n    mapPropsToStyles: () => ({ columns, rows }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Grid.handledProps, props);\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nGrid.displayName = 'Grid';\n\nGrid.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nGrid.handledProps = Object.keys(Grid.propTypes) as any;\n"],"file":"Grid.js"}