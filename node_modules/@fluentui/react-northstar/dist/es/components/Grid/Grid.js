import { getElementType, useAccessibility, useStyles, useFluentContext, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, commonPropTypes, rtlTextContainer } from '../../utils';
export var gridClassName = 'ui-grid';

/**
 * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.
 */
export var Grid = /*#__PURE__*/function () {
  var Grid = function Grid(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(Grid.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        children = props.children,
        className = props.className,
        columns = props.columns,
        content = props.content,
        design = props.design,
        rows = props.rows,
        styles = props.styles,
        variables = props.variables;
    var getA11yProps = useAccessibility(accessibility, {
      debugName: Grid.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(Grid.displayName, {
      className: gridClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          columns: columns,
          rows: rows
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(Grid.handledProps, props);
    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children, content]
    }), unhandledProps)), childrenExist(children) ? children : content));
    setEnd();
    return element;
  };

  Grid.displayName = 'Grid';
  Grid.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    content: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent])]),
    rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
  });
  Grid.handledProps = Object.keys(Grid.propTypes);
  return Grid;
}();
//# sourceMappingURL=Grid.js.map
