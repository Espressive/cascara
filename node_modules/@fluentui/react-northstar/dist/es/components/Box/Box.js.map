{"version":3,"sources":["components/Box/Box.tsx"],"names":["compose","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","useFluentContext","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","boxClassName","Box","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","children","content","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","unhandledProps","handledProps","ElementType","result","unstable_wrapWithFocusZone","getAttributes","forElements","root","propTypes","createCommon","create","Component"],"mappings":"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","sourcesContent":["import {\n  compose,\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  UIComponentProps,\n  ShorthandFactory,\n} from '../../utils';\n\nexport interface BoxProps extends UIComponentProps<BoxProps>, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n}\nexport type BoxStylesProps = {};\n\nexport const boxClassName = 'ui-box';\n\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\nexport const Box = compose<'div', BoxProps, BoxStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables, children, content } = props;\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<BoxStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const result = getA11yProps.unstable_wrapWithFocusZone(\n      <ElementType\n        {...getA11yProps('root', {\n          ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>,\n    );\n\n    setEnd();\n\n    return result;\n  },\n  {\n    className: boxClassName,\n    displayName: 'Box',\n    handledProps: ['accessibility', 'as', 'className', 'children', 'content', 'design', 'styles', 'variables'],\n  },\n) as ComponentWithAs<'div', BoxProps> & { create: ShorthandFactory<BoxProps> };\n\nBox.propTypes = commonPropTypes.createCommon();\nBox.create = createShorthandFactory({ Component: Box });\n"],"file":"Box.js"}