{"version":3,"sources":["components/Avatar/AvatarStatus.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","getElementType","useUnhandledProps","commonPropTypes","createShorthandFactory","createShorthand","customPropTypes","PropTypes","statusBehavior","avatarStatusBehavior","AvatarStatusIcon","statusClassName","avatarStatusClassName","AvatarStatus","props","context","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","defaultProps","element","root","propTypes","createCommon","children","content","string","shorthandAllowingChildren","oneOf","Object","keys","as","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { commonPropTypes, SizeValue, UIComponentProps, createShorthandFactory, createShorthand } from '../../utils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Accessibility, statusBehavior as avatarStatusBehavior, StatusBehaviorProps } from '@fluentui/accessibility';\nimport { AvatarStatusIcon, AvatarStatusIconProps } from './AvatarStatusIcon';\nimport { statusClassName } from '../Status/Status';\n\nexport interface AvatarStatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<StatusBehaviorProps>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<AvatarStatusIconProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type AvatarStatusStylesProps = Required<Pick<AvatarStatusProps, 'color' | 'size' | 'state'>>;\n// update in upcoming breaking change and enable a unit test\nexport const avatarStatusClassName = statusClassName;\n\n/**\n * A AvatarStatus provides a status for the Avatar.\n */\nexport const AvatarStatus: ComponentWithAs<'span', AvatarStatusProps> & FluentComponentStaticProps = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarStatus.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes } = useStyles<AvatarStatusStylesProps>(AvatarStatus.displayName, {\n    className: avatarStatusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarStatus.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarStatus.handledProps, props);\n\n  const iconElement = createShorthand(AvatarStatusIcon, icon, {\n    defaultProps: () => ({\n      state,\n    }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{iconElement}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAvatarStatus.displayName = 'AvatarStatus';\nAvatarStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nAvatarStatus.handledProps = Object.keys(AvatarStatus.propTypes) as any;\nAvatarStatus.defaultProps = {\n  accessibility: avatarStatusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nAvatarStatus.create = createShorthandFactory({ Component: AvatarStatus, mappedProp: 'state' });\n"],"file":"AvatarStatus.js"}