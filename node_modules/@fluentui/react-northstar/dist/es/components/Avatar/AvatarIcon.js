import * as React from 'react';
import { useFluentContext, useTelemetry, useStyles, useAccessibility, getElementType, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import { commonPropTypes, childrenExist } from '../../utils';
export var avatarIconClassName = 'ui-avatar__icon';
/**
 * A AvatarIcon provides a status icon for the Avatar.
 */

export var AvatarIcon = /*#__PURE__*/function () {
  var AvatarIcon = function AvatarIcon(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(AvatarIcon.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var className = props.className,
        children = props.children,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        size = props.size,
        square = props.square,
        content = props.content;

    var _useStyles = useStyles(AvatarIcon.displayName, {
      className: avatarIconClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          size: size,
          square: square
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var getA11Props = useAccessibility(props.accessibility, {
      debugName: AvatarIcon.displayName,
      rtl: context.rtl
    });
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(AvatarIcon.handledProps, props);
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, unhandledProps)), childrenExist(children) ? children : content);
    setEnd();
    return element;
  };

  AvatarIcon.displayName = 'AvatarIcon';
  AvatarIcon.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    square: PropTypes.bool,
    size: customPropTypes.size
  });
  AvatarIcon.handledProps = Object.keys(AvatarIcon.propTypes);
  AvatarIcon.defaultProps = {
    as: 'span'
  };
  AvatarIcon.shorthandConfig = {
    mappedProp: 'content'
  };
  return AvatarIcon;
}();
//# sourceMappingURL=AvatarIcon.js.map
