{"version":3,"sources":["components/Avatar/AvatarLabel.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","rtlTextContainer","labelClassName","avatarlabelClassName","AvatarLabel","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","styles","variables","square","size","circular","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","propTypes","createCommon","bool","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"AACA,SAEEA,cAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,SANF,EAOEC,YAPF,QAQO,0BARP;AASA,OAAO,KAAKC,eAAZ,MAAiC,2BAAjC;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SACEC,aADF,EAKEC,eALF,EAMEC,gBANF,QAQO,aARP;AAWA,SAASC,cAAT,QAA+B,gBAA/B;AAmBA,OAAO,IAAMC,oBAAoB,GAAGD,cAA7B;AAEP;AACA;AACA;;AACA,OAAO,IAAME,WAAN;AAAA,MAAMA,WACiC,GAAG,SADpCA,WACoC,CAAAC,KAAK,EAAI;AACxD,QAAMC,OAAO,GAAGb,gBAAgB,EAAhC;;AADwD,wBAE3BE,YAAY,CAACS,WAAW,CAACG,WAAb,EAA0BD,OAAO,CAACE,SAAlC,CAFe;AAAA,QAEhDC,QAFgD,iBAEhDA,QAFgD;AAAA,QAEtCC,MAFsC,iBAEtCA,MAFsC;;AAGxDD,IAAAA,QAAQ;AAHgD,QAKhDE,aALgD,GAKmDN,KALnD,CAKhDM,aALgD;AAAA,QAKjCC,QALiC,GAKmDP,KALnD,CAKjCO,QALiC;AAAA,QAKvBC,SALuB,GAKmDR,KALnD,CAKvBQ,SALuB;AAAA,QAKZC,OALY,GAKmDT,KALnD,CAKZS,OALY;AAAA,QAKHC,MALG,GAKmDV,KALnD,CAKHU,MALG;AAAA,QAKKC,MALL,GAKmDX,KALnD,CAKKW,MALL;AAAA,QAKaC,SALb,GAKmDZ,KALnD,CAKaY,SALb;AAAA,QAKwBC,MALxB,GAKmDb,KALnD,CAKwBa,MALxB;AAAA,QAKgCC,IALhC,GAKmDd,KALnD,CAKgCc,IALhC;AAAA,QAKsCC,QALtC,GAKmDf,KALnD,CAKsCe,QALtC;AAOxD,QAAMC,WAAW,GAAG7B,gBAAgB,CAACmB,aAAD,EAAgB;AAClDW,MAAAA,SAAS,EAAElB,WAAW,CAACG,WAD2B;AAElDgB,MAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAFqC,KAAhB,CAApC;;AAPwD,qBAYpC7B,SAAS,CAAyBU,WAAW,CAACG,WAArC,EAAkD;AAC7EM,MAAAA,SAAS,EAAEV,oBADkE;AAE7EqB,MAAAA,gBAAgB,EAAE;AAAA,eAAO;AACvBN,UAAAA,MAAM,EAANA,MADuB;AAEvBC,UAAAA,IAAI,EAAJA,IAFuB;AAGvBC,UAAAA,QAAQ,EAARA;AAHuB,SAAP;AAAA,OAF2D;AAO7EK,MAAAA,sBAAsB,EAAE;AAAA,eAAO;AAAEZ,UAAAA,SAAS,EAATA,SAAF;AAAaE,UAAAA,MAAM,EAANA,MAAb;AAAqBC,UAAAA,MAAM,EAANA,MAArB;AAA6BC,UAAAA,SAAS,EAATA;AAA7B,SAAP;AAAA,OAPqD;AAQ7EM,MAAAA,GAAG,EAAEjB,OAAO,CAACiB;AARgE,KAAlD,CAZ2B;AAAA,QAYhDG,OAZgD,cAYhDA,OAZgD;;AAuBxD,QAAMC,WAAW,GAAGrC,cAAc,CAACe,KAAD,CAAlC;AACA,QAAMuB,cAAc,GAAGrC,iBAAiB,CAACa,WAAW,CAACyB,YAAb,EAA2BxB,KAA3B,CAAxC;AAEA,QAAMyB,OAAO,gBACX,oBAAC,WAAD,EACMT,WAAW,CAAC,MAAD;AACbR,MAAAA,SAAS,EAAEa,OAAO,CAACK;AADN,OAEV9B,gBAAgB,CAAC+B,aAAjB,CAA+B;AAAEC,MAAAA,WAAW,EAAE,CAACrB,QAAD;AAAf,KAA/B,CAFU,EAGVgB,cAHU,EADjB,EAOG7B,aAAa,CAACa,QAAD,CAAb,GAA0BA,QAA1B,GAAqCE,OAPxC,CADF;AAYAJ,IAAAA,MAAM;AAEN,WAAOoB,OAAP;AACD,GA1CM;;AA4CP1B,EAAAA,WAAW,CAACG,WAAZ,GAA0B,aAA1B;AAEAH,EAAAA,WAAW,CAAC8B,SAAZ,qBACKlC,eAAe,CAACmC,YAAhB,EADL;AAEEjB,IAAAA,MAAM,EAAErB,SAAS,CAACuC,IAFpB;AAGEjB,IAAAA,IAAI,EAAEvB,eAAe,CAACuB,IAHxB;AAIEC,IAAAA,QAAQ,EAAEvB,SAAS,CAACuC;AAJtB;AAMAhC,EAAAA,WAAW,CAACyB,YAAZ,GAA2BQ,MAAM,CAACC,IAAP,CAAYlC,WAAW,CAAC8B,SAAxB,CAA3B;AAEA9B,EAAAA,WAAW,CAACmC,YAAZ,GAA2B;AACzBC,IAAAA,EAAE,EAAE;AADqB,GAA3B;AAIApC,EAAAA,WAAW,CAACqC,eAAZ,GAA8B;AAC5BC,IAAAA,UAAU,EAAE;AADgB,GAA9B;AA1DO,SAAMtC,WAAN;AAAA","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  SizeValue,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { labelClassName } from '../Label/Label';\n\nexport interface AvatarLabelProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** The AvatarLabel can have a square shape. */\n  square?: boolean;\n\n  /** The AvatarLabel can be circular. */\n  circular?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarLabelStylesProps = Pick<AvatarLabelProps, 'size' | 'square' | 'circular'>;\nexport const avatarlabelClassName = labelClassName;\n\n/**\n * A AvatarLabel allows user to classify content.\n */\nexport const AvatarLabel: ComponentWithAs<'span', AvatarLabelProps> &\n  FluentComponentStaticProps<AvatarLabelProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarLabel.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, styles, variables, square, size, circular } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AvatarLabel.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<AvatarLabelStylesProps>(AvatarLabel.displayName, {\n    className: avatarlabelClassName,\n    mapPropsToStyles: () => ({\n      square,\n      size,\n      circular,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarLabel.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAvatarLabel.displayName = 'AvatarLabel';\n\nAvatarLabel.propTypes = {\n  ...commonPropTypes.createCommon(),\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  circular: PropTypes.bool,\n};\nAvatarLabel.handledProps = Object.keys(AvatarLabel.propTypes) as any;\n\nAvatarLabel.defaultProps = {\n  as: 'span',\n};\n\nAvatarLabel.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"AvatarLabel.js"}