{"version":3,"sources":["components/Avatar/AvatarImage.tsx"],"names":["imageBehavior","getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","PropTypes","React","commonPropTypes","createShorthandFactory","imageClassName","avatarImageClassName","AvatarImage","props","context","displayName","telemetry","setStart","setEnd","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","size","getA11Props","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","result","root","defaultProps","as","propTypes","createCommon","children","content","bool","shorthandConfig","mappedProp","allowsJSX","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { UIComponentProps, commonPropTypes, createShorthandFactory, SizeValue } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { imageClassName } from '../Image/Image';\n\nexport interface AvatarImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** @deprecated An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An Avatarimage can appear circular. */\n  circular?: boolean;\n\n  /** An Avatarimage can take up the width of its container. */\n  fluid?: boolean;\n\n  /** AvatarImage source URL. */\n  src?: string;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarImageStylesProps = Pick<AvatarImageProps, 'avatar' | 'circular' | 'fluid' | 'size'>;\nexport const avatarImageClassName = imageClassName;\n\n/**\n * An AvatarImage is a graphic representation used by Avatar.\n */\nexport const AvatarImage: ComponentWithAs<'img', AvatarImageProps> &\n  FluentComponentStaticProps<AvatarImageProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarImage.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n    size,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AvatarImage.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<AvatarImageStylesProps>(AvatarImage.displayName, {\n    className: avatarImageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarImage.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n};\n\nAvatarImage.displayName = 'AvatarImage';\nAvatarImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior,\n};\n\nAvatarImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nAvatarImage.shorthandConfig = {\n  mappedProp: 'src',\n  allowsJSX: false,\n};\n\nAvatarImage.handledProps = Object.keys(AvatarImage.propTypes) as any;\nAvatarImage.create = createShorthandFactory({ Component: AvatarImage, mappedProp: 'src', allowsJSX: false });\n"],"file":"AvatarImage.js"}