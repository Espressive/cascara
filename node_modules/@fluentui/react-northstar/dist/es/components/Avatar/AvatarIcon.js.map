{"version":3,"sources":["components/Avatar/AvatarIcon.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","getElementType","useUnhandledProps","customPropTypes","PropTypes","commonPropTypes","childrenExist","avatarIconClassName","AvatarIcon","props","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","size","square","content","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","propTypes","createCommon","bool","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  SizeValue,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  childrenExist,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface AvatarIconProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** The avatar icon can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarIconStylesProps = Required<Pick<AvatarIconProps, 'size' | 'square'>>;\nexport const avatarIconClassName = 'ui-avatar__icon';\n\n/**\n * A AvatarIcon provides a status icon for the Avatar.\n */\nexport const AvatarIcon: ComponentWithAs<'span', AvatarIconProps> &\n  FluentComponentStaticProps<AvatarIconProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, size, square, content } = props;\n\n  const { classes } = useStyles<AvatarIconStylesProps>(AvatarIcon.displayName, {\n    className: avatarIconClassName,\n    mapPropsToStyles: () => ({\n      size,\n      square,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAvatarIcon.displayName = 'AvatarIcon';\nAvatarIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n};\nAvatarIcon.handledProps = Object.keys(AvatarIcon.propTypes) as any;\nAvatarIcon.defaultProps = {\n  as: 'span',\n};\n\nAvatarIcon.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"AvatarIcon.js"}