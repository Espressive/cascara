{"version":3,"sources":["components/Tooltip/TooltipContent.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","getBasePlacement","tooltipContentClassName","TooltipContent","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","open","placement","pointing","pointerRef","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","basePlacement","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","pointer","propTypes","createCommon","oneOf","bool","ref","Object","keys","create","Component","mappedProp"],"mappings":"AACA,SAEEA,cAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,SANF,EAOEC,YAPF,QAQO,0BARP;AASA,OAAO,KAAKC,eAAZ,MAAiC,2BAAjC;AAEA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SACEC,aADF,EAEEC,sBAFF,EAMEC,eANF,EAOEC,gBAPF,QAQO,aARP;AAUA,SAASC,gBAAT,QAAsD,wBAAtD;AA0BA,OAAO,IAAMC,uBAAuB,GAAG,qBAAhC;AAEP;AACA;AACA;;AACA,OAAO,IAAMC,cAAN;AAAA,MAAMA,cACoC,GAAG,SADvCA,cACuC,CAAAC,KAAK,EAAI;AAC3D,QAAMC,OAAO,GAAGd,gBAAgB,EAAhC;;AAD2D,wBAE9BE,YAAY,CAACU,cAAc,CAACG,WAAhB,EAA6BD,OAAO,CAACE,SAArC,CAFkB;AAAA,QAEnDC,QAFmD,iBAEnDA,QAFmD;AAAA,QAEzCC,MAFyC,iBAEzCA,MAFyC;;AAG3DD,IAAAA,QAAQ;AAHmD,QAMzDE,aANyD,GAiBvDN,KAjBuD,CAMzDM,aANyD;AAAA,QAOzDC,QAPyD,GAiBvDP,KAjBuD,CAOzDO,QAPyD;AAAA,QAQzDC,SARyD,GAiBvDR,KAjBuD,CAQzDQ,SARyD;AAAA,QASzDC,OATyD,GAiBvDT,KAjBuD,CASzDS,OATyD;AAAA,QAUzDC,MAVyD,GAiBvDV,KAjBuD,CAUzDU,MAVyD;AAAA,QAWzDC,IAXyD,GAiBvDX,KAjBuD,CAWzDW,IAXyD;AAAA,QAYzDC,SAZyD,GAiBvDZ,KAjBuD,CAYzDY,SAZyD;AAAA,QAazDC,QAbyD,GAiBvDb,KAjBuD,CAazDa,QAbyD;AAAA,QAczDC,UAdyD,GAiBvDd,KAjBuD,CAczDc,UAdyD;AAAA,QAezDC,MAfyD,GAiBvDf,KAjBuD,CAezDe,MAfyD;AAAA,QAgBzDC,SAhByD,GAiBvDhB,KAjBuD,CAgBzDgB,SAhByD;AAmB3D,QAAMC,WAAW,GAAG/B,gBAAgB,CAACoB,aAAD,EAAgB;AAClDY,MAAAA,SAAS,EAAEnB,cAAc,CAACG,WADwB;AAElDiB,MAAAA,GAAG,EAAElB,OAAO,CAACkB;AAFqC,KAAhB,CAApC;;AAnB2D,qBAuBvC/B,SAAS,CAA4BW,cAAc,CAACG,WAA3C,EAAwD;AACnFM,MAAAA,SAAS,EAAEV,uBADwE;AAEnFsB,MAAAA,gBAAgB,EAAE;AAAA,eAAO;AACvBC,UAAAA,aAAa,EAAExB,gBAAgB,CAACe,SAAD,EAAYX,OAAO,CAACkB,GAApB,CADR;AAEvBR,UAAAA,IAAI,EAAJA,IAFuB;AAGvBE,UAAAA,QAAQ,EAARA;AAHuB,SAAP;AAAA,OAFiE;AAOnFS,MAAAA,sBAAsB,EAAE;AAAA,eAAO;AAC7Bd,UAAAA,SAAS,EAATA,SAD6B;AAE7BE,UAAAA,MAAM,EAANA,MAF6B;AAG7BK,UAAAA,MAAM,EAANA,MAH6B;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAAA,OAP2D;AAanFG,MAAAA,GAAG,EAAElB,OAAO,CAACkB;AAbsE,KAAxD,CAvB8B;AAAA,QAuBnDI,OAvBmD,cAuBnDA,OAvBmD;;AAuC3D,QAAMC,WAAW,GAAGxC,cAAc,CAACgB,KAAD,CAAlC;AACA,QAAMyB,cAAc,GAAGxC,iBAAiB,CAACc,cAAc,CAAC2B,YAAhB,EAA8B1B,KAA9B,CAAxC;AAEA,QAAM2B,OAAO,gBACX,oBAAC,WAAD,EACMV,WAAW,CAAC,MAAD;AACbT,MAAAA,SAAS,EAAEe,OAAO,CAACK;AADN,OAEVhC,gBAAgB,CAACiC,aAAjB,CAA+B;AAAEC,MAAAA,WAAW,EAAE,CAACvB,QAAD,EAAWE,OAAX;AAAf,KAA/B,CAFU,EAGVgB,cAHU,EADjB,EAOGd,IAAI,IAAIE,QAAR,iBAAoB;AAAK,MAAA,SAAS,EAAEU,OAAO,CAACQ,OAAxB;AAAiC,MAAA,GAAG,EAAEjB;AAAtC,MAPvB,eASE,2BAASG,WAAW,CAAC,SAAD,EAAY;AAAET,MAAAA,SAAS,EAAEe,OAAO,CAACd;AAArB,KAAZ,CAApB,EACGhB,aAAa,CAACc,QAAD,CAAb,GAA0BA,QAA1B,GAAqCE,OADxC,CATF,CADF;AAeAJ,IAAAA,MAAM;AAEN,WAAOsB,OAAP;AACD,GA7DM;;AA+DP5B,EAAAA,cAAc,CAACG,WAAf,GAA6B,gBAA7B;AAEAH,EAAAA,cAAc,CAACiC,SAAf,qBACKrC,eAAe,CAACsC,YAAhB,EADL;AAEErB,IAAAA,SAAS,EAAErB,SAAS,CAAC2C,KAAV,CAAoC,CAC7C,YAD6C,EAE7C,MAF6C,EAG7C,UAH6C,EAI7C,WAJ6C,EAK7C,KAL6C,EAM7C,SAN6C,EAO7C,aAP6C,EAQ7C,OAR6C,EAS7C,WAT6C,EAU7C,YAV6C,EAW7C,QAX6C,EAY7C,cAZ6C,EAa7C,UAb6C,EAc7C,MAd6C,EAe7C,YAf6C,CAApC,CAFb;AAmBErB,IAAAA,QAAQ,EAAEtB,SAAS,CAAC4C,IAnBtB;AAoBErB,IAAAA,UAAU,EAAExB,eAAe,CAAC8C;AApB9B;AAsBArC,EAAAA,cAAc,CAAC2B,YAAf,GAA8BW,MAAM,CAACC,IAAP,CAAYvC,cAAc,CAACiC,SAA3B,CAA9B;AAEAjC,EAAAA,cAAc,CAACwC,MAAf,GAAwB7C,sBAAsB,CAAC;AAAE8C,IAAAA,SAAS,EAAEzC,cAAb;AAA6B0C,IAAAA,UAAU,EAAE;AAAzC,GAAD,CAA9C;AAzFO,SAAM1C,cAAN;AAAA","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PopperJs from '@popperjs/core';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n\nimport { getBasePlacement, PopperChildrenProps } from '../../utils/positioner';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface TooltipContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An actual placement value from Popper. */\n  placement?: PopperChildrenProps['placement'];\n\n  /** Defines whether tooltip is displayed. */\n  open?: boolean;\n\n  /** A tooltip can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /** A ref to a pointer element. */\n  pointerRef?: React.Ref<HTMLDivElement>;\n}\n\nexport type TooltipContentStylesProps = Required<Pick<TooltipContentProps, 'pointing' | 'open'>> & {\n  basePlacement: PopperJs.BasePlacement;\n};\n\nexport const tooltipContentClassName = 'ui-tooltip__content';\n\n/**\n * A TooltipContent contains the content of a Tooltip component.\n */\nexport const TooltipContent: ComponentWithAs<'div', TooltipContentProps> &\n  FluentComponentStaticProps<TooltipContentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TooltipContent.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    open,\n    placement,\n    pointing,\n    pointerRef,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TooltipContent.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TooltipContentStylesProps>(TooltipContent.displayName, {\n    className: tooltipContentClassName,\n    mapPropsToStyles: () => ({\n      basePlacement: getBasePlacement(placement, context.rtl),\n      open,\n      pointing,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {open && pointing && <div className={classes.pointer} ref={pointerRef} />}\n\n      <div {...getA11Props('content', { className: classes.content })}>\n        {childrenExist(children) ? children : content}\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTooltipContent.displayName = 'TooltipContent';\n\nTooltipContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  placement: PropTypes.oneOf<PopperJs.Placement>([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  pointing: PropTypes.bool,\n  pointerRef: customPropTypes.ref,\n};\nTooltipContent.handledProps = Object.keys(TooltipContent.propTypes) as any;\n\nTooltipContent.create = createShorthandFactory({ Component: TooltipContent, mappedProp: 'content' });\n"],"file":"TooltipContent.js"}