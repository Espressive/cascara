import { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';
import * as React from 'react';
import { isBrowser } from '../../utils/isBrowser';
export var PortalBoxContext = /*#__PURE__*/React.createContext(null);
export var usePortalBox = function usePortalBox(options) {
  var className = options.className,
      rtl = options.rtl,
      target = options.target;
  var element = React.useMemo(function () {
    var newElement = isBrowser() ? target.createElement('div') : null; // Element should be attached to DOM during render to make elements that will be rendered
    // inside accessible in effects of child components

    if (newElement) {
      target.body.appendChild(newElement);
    }

    return newElement;
  }, [target]);
  useIsomorphicLayoutEffect(function () {
    if (element) {
      element.setAttribute('class', className);

      if (rtl) {
        element.setAttribute('dir', 'rtl');
      } else {
        element.removeAttribute('dir');
      }
    }
  }, [className, element, rtl]); // This effect should always last as it removes element from HTML tree

  useIsomorphicLayoutEffect(function () {
    return function () {
      if (element) {
        target.body.removeChild(element);
      }
    };
  }, [element, target]);
  return element;
};
//# sourceMappingURL=usePortalBox.js.map
