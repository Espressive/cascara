{"version":3,"sources":["components/Video/Video.tsx"],"names":["Ref","PropTypes","React","videoBehavior","createShorthandFactory","commonPropTypes","getElementType","useStyles","useFluentContext","useUnhandledProps","useTelemetry","useAccessibility","videoClassName","Video","props","context","displayName","telemetry","setStart","setEnd","controls","autoPlay","loop","poster","src","muted","variables","className","design","styles","videoRef","useRef","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","useEffect","current","mapPropsToInlineStyles","classes","element","root","create","Component","mappedProp","propTypes","createCommon","children","content","bool","string","defaultProps","as","Object","keys"],"mappings":"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","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Accessibility, VideoBehaviorProps, videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useStyles,\n  useFluentContext,\n  useUnhandledProps,\n  useTelemetry,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface VideoProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<VideoBehaviorProps>;\n\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nexport const videoClassName = 'ui-video';\n\nexport type VideoStylesProps = Required<Pick<VideoProps, 'variables'>>;\n\n/**\n * A Video provides ability to embed video content.\n */\nexport const Video: ComponentWithAs<'video', VideoProps> & FluentComponentStaticProps<VideoProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Video.displayName, context.telemetry);\n  setStart();\n\n  const { controls, autoPlay, loop, poster, src, muted, variables, className, design, styles } = props;\n  const videoRef = React.useRef<HTMLVideoElement>();\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Video.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Video.displayName,\n  });\n\n  React.useEffect(() => {\n    // this is a workaround for a potential memory leak in Chromium which retains a Detached HTMLVideoElement when <video autoplay> is unmounted\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=969049\n    return () => {\n      if (videoRef.current) {\n        // we want to perform the cleanup on the latest element rendered\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        videoRef.current.src = '';\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (videoRef.current) {\n      videoRef.current.muted = !!muted;\n    }\n  }, [muted]);\n\n  const { classes } = useStyles<VideoStylesProps>(Video.displayName, {\n    className: videoClassName,\n    mapPropsToInlineStyles: () => ({ className, variables, design, styles }),\n  });\n\n  const element = (\n    <Ref innerRef={videoRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          autoPlay,\n          controls,\n          loop,\n          poster,\n          src,\n          ...unhandledProps,\n        })}\n      />\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\nVideo.displayName = 'Video';\n\nVideo.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string,\n};\n\nVideo.defaultProps = {\n  as: 'video',\n  accessibility: videoBehavior,\n  controls: true,\n  autoPlay: false,\n  muted: false,\n};\n\nVideo.handledProps = Object.keys(Video.propTypes) as any;\n"],"file":"Video.js"}