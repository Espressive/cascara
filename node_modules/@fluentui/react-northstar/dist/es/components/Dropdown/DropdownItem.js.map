{"version":3,"sources":["components/Dropdown/DropdownItem.tsx"],"names":["customPropTypes","indicatorBehavior","React","PropTypes","getElementType","useUnhandledProps","useFluentContext","useStyles","useTelemetry","cx","createShorthandFactory","commonPropTypes","Image","Box","dropdownItemClassName","dropdownItemSlotClassNames","main","content","header","image","checkableIndicator","DropdownItem","props","context","displayName","telemetry","setStart","setEnd","active","accessibilityItemProps","className","design","isFromKeyboard","styles","checkable","selected","variables","mapPropsToStyles","hasContent","hasHeader","mapPropsToInlineStyles","rtl","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleClick","e","contentElement","create","defaultProps","headerElement","endMediaElement","accessibility","imageElement","avatar","media","element","root","as","propTypes","createCommon","children","object","bool","itemShorthand","shorthandAllowingChildren","disabled","itemShorthandWithoutJSX","onClick","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport cx from 'classnames';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { ShorthandValue, ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface DropdownItemSlotClassNames {\n  content: string;\n  header: string;\n  image: string;\n  checkableIndicator: string;\n  main: string;\n}\n\nexport interface DropdownItemProps extends UIComponentProps<DropdownItemProps> {\n  /** A dropdown item can be active. */\n  active?: boolean;\n\n  /** Item's accessibility props. */\n  accessibilityItemProps?: any;\n\n  /** Item's content. */\n  content?: ShorthandValue<BoxProps>;\n\n  /** Item can show check indicator if selected. */\n  checkable?: boolean;\n\n  /** A slot for a checkable indicator. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown item can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** Item's header. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Item's image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Indicated whether the item has been set active by keyboard. */\n  isFromKeyboard?: boolean;\n\n  /**\n   * Called on dropdown item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownItemProps>;\n\n  /** A dropdown item can be selected if single selection Dropdown is used. */\n  selected?: boolean;\n}\n\nexport const dropdownItemClassName = 'ui-dropdown__item';\nexport const dropdownItemSlotClassNames: DropdownItemSlotClassNames = {\n  main: `${dropdownItemClassName}__main`,\n  content: `${dropdownItemClassName}__content`,\n  header: `${dropdownItemClassName}__header`,\n  image: `${dropdownItemClassName}__image`,\n  checkableIndicator: `${dropdownItemClassName}__checkable-indicator`,\n};\n\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\nexport const DropdownItem: ComponentWithAs<'li', DropdownItemProps> &\n  FluentComponentStaticProps<DropdownItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownItem.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    active,\n    accessibilityItemProps,\n    className,\n    content,\n    design,\n    header,\n    image,\n    isFromKeyboard,\n    styles,\n    checkable,\n    checkableIndicator,\n    selected,\n    variables,\n  } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles(DropdownItem.displayName, {\n    className: dropdownItemClassName,\n    mapPropsToStyles: () => ({\n      active,\n      isFromKeyboard,\n      selected,\n      hasContent: !!content,\n      hasHeader: !!header,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n  const headerElement = Box.create(header, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.header,\n      styles: resolvedStyles.header,\n    }),\n  });\n  const endMediaElement =\n    selected && checkable\n      ? Box.create(checkableIndicator, {\n          defaultProps: () => ({\n            className: dropdownItemSlotClassNames.checkableIndicator,\n            styles: resolvedStyles.checkableIndicator,\n            accessibility: indicatorBehavior,\n          }),\n        })\n      : null;\n  const imageElement = Box.create(\n    Image.create(image, {\n      defaultProps: () => ({\n        avatar: true,\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n    }),\n    {\n      defaultProps: () => ({\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.media,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType className={classes.root} onClick={handleClick} {...accessibilityItemProps} {...unhandledProps}>\n      {imageElement}\n\n      <div className={cx(dropdownItemSlotClassNames.main, classes.main)}>\n        {headerElement}\n        {contentElement}\n      </div>\n\n      {endMediaElement}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nDropdownItem.displayName = 'DropdownItem';\n\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {},\n};\n\nDropdownItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool,\n};\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes) as any;\n\nDropdownItem.create = createShorthandFactory({ Component: DropdownItem, mappedProp: 'header' });\n"],"file":"DropdownItem.js"}