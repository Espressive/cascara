{"version":3,"sources":["components/Datepicker/DatepickerCalendarCell.tsx"],"names":["datepickerCalendarCellBehavior","getElementType","useAccessibility","useStyles","useFluentContext","useTelemetry","useUnhandledProps","compose","PropTypes","React","commonPropTypes","datepickerCalendarCellClassName","DatepickerCalendarCell","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","className","design","styles","variables","disabled","selected","quiet","today","content","unhandledProps","handledProps","ElementType","getA11yProps","accessibility","debugName","actionHandlers","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","classes","element","root","propTypes","createCommon","children","bool","defaultProps","as"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  datepickerCalendarCellBehavior,\n  DatepickerCalendarCellBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n  compose,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\n\nexport interface DatepickerCalendarCellProps extends UIComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<DatepickerCalendarCellBehaviorProps>;\n\n  /** A cell can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A cell can show that it is currently selected or not. */\n  selected?: boolean;\n\n  /** Denotes that the cell marks today's date. */\n  today?: boolean;\n\n  /** A cell can show that it currently has dimmed styles. */\n  quiet?: boolean;\n}\n\nexport type DatepickerCalendarCellStylesProps = Pick<\n  DatepickerCalendarCellProps,\n  'disabled' | 'selected' | 'quiet' | 'today'\n>;\n\nexport const datepickerCalendarCellClassName = 'ui-datepicker__calendarcell';\n/**\n * A Datepicker cell is used to display calendar grid cells.\n */\nexport const DatepickerCalendarCell = compose<\n  'td',\n  DatepickerCalendarCellProps,\n  DatepickerCalendarCellStylesProps,\n  {},\n  {}\n>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { className, design, styles, variables, disabled, selected, quiet, today, content } = props;\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n    const getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {},\n      mapPropsToBehavior: () => ({\n        selected,\n        disabled,\n        quiet,\n        today,\n      }),\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<DatepickerCalendarCellStylesProps>(DatepickerCalendarCell.displayName, {\n      className: composeOptions.className,\n      mapPropsToStyles: () => ({\n        disabled,\n        selected,\n        quiet,\n        today,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {content}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: datepickerCalendarCellClassName,\n    displayName: 'DatepickerCalendarCell',\n\n    handledProps: [\n      'accessibility',\n      'as',\n      'className',\n      'content',\n      'design',\n      'disabled',\n      'selected',\n      'styles',\n      'variables',\n      'quiet',\n      'today',\n    ],\n  },\n);\n\nDatepickerCalendarCell.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  disabled: PropTypes.bool,\n  selected: PropTypes.bool,\n  quiet: PropTypes.bool,\n  today: PropTypes.bool,\n};\n\nDatepickerCalendarCell.defaultProps = {\n  accessibility: datepickerCalendarCellBehavior,\n  as: 'td',\n};\n"],"file":"DatepickerCalendarCell.js"}