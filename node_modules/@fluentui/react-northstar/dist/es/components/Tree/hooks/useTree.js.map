{"version":3,"sources":["components/Tree/hooks/useTree.ts"],"names":["React","useAutoControlled","flattenTree","useGetItemById","flatTree","callbackRef","useRef","Error","current","itemId","process","env","NODE_ENV","Object","freeze","useCallback","useStableProps","props","stableProps","useEffect","useTree","options","deprecated_initialActiveItemIds","useMemo","deprecated_getInitialActiveItemIds","items","defaultValue","defaultActiveItemIds","value","activeItemIds","initialValue","setActiveItemIdsState","defaultSelectedItemIds","selectedItemIds","setSelectedItemIdsState","visibleItemIds","getItemById","toggleItemActive","e","idToToggle","item","hasSubtree","nextActiveItemIds","isActiveId","indexOf","exclusive","parent","activeSibling","childrenIds","find","id","expandSiblings","focusedItemId","focusedItem","parentItem","siblingsIds","concat","toggleItemSelect","leafs","getLeafNodes","nextSelectedItemIds","selected","nodes","registerItemRef","node","getItemRef","focusItemById","itemRef","HTMLElement","focus","firstElementChild","searchByFirstChar","startIndex","endIndex","char","i","itemFirstChar","textContent","trim","charAt","toLowerCase","getToFocusIDByFirstCharacter","idToStartSearch","starIndex","length","toFocusIndex","key","result","forEach","expanded","push","rootId","traverseDown","child"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useAutoControlled } from '@fluentui/react-bindings';\nimport { ObjectShorthandCollection } from '../../../types';\nimport { TreeItemProps } from '../TreeItem';\nimport { FlatTreeItem, flattenTree, FlatTree } from './flattenTree';\nimport * as _ from 'lodash';\n\nexport type GetItemById = (id: string) => FlatTreeItem;\n\n/**\n * This hook returns a stable `getItemById()` function that will lookup in latest `flatTree`.\n * This is used to have stable callbacks that can be passed to React's Context.\n */\nfunction useGetItemById(flatTree: FlatTree): GetItemById {\n  // An exception is thrown there to ensure that a proper callback will assigned to ref\n  const callbackRef = React.useRef<GetItemById>(() => {\n    throw new Error('Callback is not assigned yet');\n  });\n\n  // We are assigning a callback during render as it can be used during render and in event handlers. In dev mode we\n  // are freezing objects to prevent their mutations\n  callbackRef.current = itemId =>\n    process.env.NODE_ENV === 'production' ? flatTree[itemId] : Object.freeze(flatTree[itemId]);\n\n  return React.useCallback<GetItemById>((...args) => {\n    return callbackRef.current(...args);\n  }, []);\n}\n\nfunction useStableProps<P>(props: P) {\n  const stableProps = React.useRef<P>(props);\n\n  React.useEffect(() => {\n    stableProps.current = props;\n  });\n\n  return stableProps;\n}\n\nexport interface UseTreeOptions {\n  /** Shorthand array of props for Tree. */\n  items?: ObjectShorthandCollection<TreeItemProps>;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Ids of selected leaf items. */\n  selectedItemIds?: string[];\n  /** Initial selectedItemIds value. */\n  defaultSelectedItemIds?: string[];\n}\n\nexport interface UseTreeResult {\n  /** An object with key being id of each tree item, and value being information of each tree item */\n  flatTree: FlatTree;\n\n  /** Access information of a tree item */\n  getItemById: GetItemById;\n\n  /** Ids of expanded items. */\n  activeItemIds: string[];\n\n  /** Ids of visible items */\n  visibleItemIds: string[];\n\n  /** register ref to a tree item, should be used in callback ref on tree item */\n  registerItemRef: (id: string, node: HTMLElement) => void;\n\n  /** get ref to a tree item by its id */\n  getItemRef: (id: string) => HTMLElement;\n\n  /** update the state of tree when a tree item is expanded/collapsed */\n  toggleItemActive: (e: React.SyntheticEvent, idToToggle: string) => void;\n\n  /** set focus on a tree item by its id. Useful for keyboard navigation */\n  focusItemById: (id: string) => void;\n\n  /** update the state of tree when it is needed to expand all siblings of a tree item, for example on '*' keydown */\n  expandSiblings: (e: React.KeyboardEvent, focusedItemId: string) => void;\n\n  /** update the state of tree when a tree item is selected/unselected */\n  toggleItemSelect: (e: React.SyntheticEvent, idToToggle: string) => void;\n\n  /**\n   * When a-z/A-Z key is pressed on a tree item, move focus to the next visible tree node with content that starts with the typed char.\n   * Search wraps to first matching node if a matching is not found among the nodes that follow the focused node.\n   * Focus stays when no matching is found among all visible nodes.\n   */\n  getToFocusIDByFirstCharacter: (e: React.KeyboardEvent, idToToggle: string) => string;\n}\n\nexport function useTree(options: UseTreeOptions): UseTreeResult {\n  // We need this because we want to handle `expanded` prop on `items`, should be deprecated and removed\n  const deprecated_initialActiveItemIds = React.useMemo(\n    () => deprecated_getInitialActiveItemIds(options.items),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [], // initialValue only needs to be computed on mount\n  );\n\n  const [activeItemIds, setActiveItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: options.defaultActiveItemIds,\n    value: options.activeItemIds,\n    initialValue: deprecated_initialActiveItemIds, // will become []\n  });\n\n  // selectedItemIds is only valid for leaf nodes.\n  // For non-leaf nodes, their 'selected' states are defered from all their descendents\n  const [selectedItemIds, setSelectedItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: options.defaultSelectedItemIds,\n    value: options.selectedItemIds,\n    initialValue: [],\n  });\n\n  // We want to set `visibleItemIds` to simplify rendering later\n  const { flatTree, visibleItemIds } = React.useMemo(() => flattenTree(options.items, activeItemIds, selectedItemIds), [\n    activeItemIds,\n    options.items,\n    selectedItemIds,\n  ]);\n\n  const getItemById = useGetItemById(flatTree);\n\n  const stableProps = useStableProps(options);\n\n  const toggleItemActive = React.useCallback(\n    (e: React.SyntheticEvent, idToToggle: string) => {\n      const item = getItemById(idToToggle);\n      if (!item || !item.hasSubtree) {\n        // leaf node does not have the concept of active/inactive\n        return;\n      }\n\n      setActiveItemIdsState(activeItemIds => {\n        let nextActiveItemIds: string[];\n        const isActiveId = activeItemIds.indexOf(idToToggle) !== -1;\n\n        if (isActiveId) {\n          nextActiveItemIds = _.without(activeItemIds, idToToggle);\n        } else {\n          nextActiveItemIds = [...activeItemIds, idToToggle];\n\n          if (options.exclusive) {\n            // remove active siblings, if any, from activeItemIds\n            const parent = getItemById(idToToggle)?.parent;\n            const activeSibling = getItemById(parent)?.childrenIds?.find(\n              id => id !== idToToggle && nextActiveItemIds.indexOf(id) >= 0,\n            );\n            if (activeSibling != null) {\n              nextActiveItemIds = _.without(nextActiveItemIds, activeSibling);\n            }\n          }\n        }\n\n        _.invoke(stableProps.current, 'onActiveItemIdsChange', e, {\n          ...stableProps.current,\n          activeItemIds: nextActiveItemIds,\n        });\n\n        return nextActiveItemIds;\n      });\n    },\n    [getItemById, options.exclusive, setActiveItemIdsState, stableProps],\n  );\n\n  const expandSiblings = React.useCallback(\n    (e: React.KeyboardEvent, focusedItemId: string) => {\n      if (options.exclusive) {\n        return;\n      }\n\n      const focusedItem = getItemById(focusedItemId);\n      if (!focusedItem) {\n        return;\n      }\n\n      const parentItem = getItemById(focusedItem?.parent);\n      const siblingsIds = parentItem?.childrenIds;\n\n      if (!siblingsIds) {\n        return;\n      }\n\n      setActiveItemIdsState(activeItemIds => {\n        const nextActiveItemIds = _.uniq(activeItemIds.concat(siblingsIds));\n        _.invoke(stableProps.current, 'onActiveItemIdsChange', e, {\n          ...stableProps.current,\n          activeItemIds: nextActiveItemIds,\n        });\n        return nextActiveItemIds;\n      });\n    },\n    [getItemById, options.exclusive, setActiveItemIdsState, stableProps],\n  );\n\n  const toggleItemSelect = React.useCallback(\n    (e: React.SyntheticEvent, idToToggle: string) => {\n      const item = getItemById(idToToggle);\n      if (!item) {\n        return;\n      }\n      const leafs = getLeafNodes(getItemById, idToToggle);\n\n      setSelectedItemIdsState(selectedItemIds => {\n        const nextSelectedItemIds =\n          item.selected === true\n            ? _.without(selectedItemIds, ...leafs) // remove all leaves from selected\n            : _.uniq(selectedItemIds.concat(leafs)); // add all leaves to selected\n        _.invoke(stableProps.current, 'onSelectedItemIdsChange', e, {\n          ...stableProps.current,\n          selectedItemIds: nextSelectedItemIds,\n        });\n        return nextSelectedItemIds;\n      });\n    },\n    [getItemById, setSelectedItemIdsState, stableProps],\n  );\n\n  // Maintains stable collection of refs to avoid unnecessary React context updates\n  const nodes = React.useRef<Record<string, HTMLElement>>({});\n  const registerItemRef = React.useCallback((id: string, node: HTMLElement) => {\n    nodes.current[id] = node;\n  }, []);\n  const getItemRef = React.useCallback((id): HTMLElement => nodes.current[id], []);\n\n  // can be used for keyboard navigation ===\n  const focusItemById = React.useCallback(\n    (id: string) => {\n      const itemRef = getItemRef(id);\n\n      if (itemRef instanceof HTMLElement) {\n        if (getItemById(id)?.hasSubtree) {\n          itemRef.focus();\n        } else {\n          // when node is leaf, need to focus on the inner treeTitle\n          (itemRef.firstElementChild as HTMLElement)?.focus();\n        }\n      }\n    },\n    [getItemById, getItemRef],\n  );\n\n  const searchByFirstChar = React.useCallback(\n    (startIndex: number, endIndex: number, char: string) => {\n      for (let i = startIndex; i < endIndex; ++i) {\n        // get first charater of tree node using the same way aria does (https://www.w3.org/TR/wai-aria-practices-1.1/examples/treeview/treeview-2/js/treeitemLinks.js)\n        const itemFirstChar = getItemRef(visibleItemIds[i])?.textContent?.trim()?.charAt(0)?.toLowerCase();\n        if (itemFirstChar === char.toLowerCase()) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    [getItemRef, visibleItemIds],\n  );\n\n  const getToFocusIDByFirstCharacter = React.useCallback(\n    (e: React.KeyboardEvent, idToStartSearch: string) => {\n      // Get start index for search\n      let starIndex = visibleItemIds.indexOf(idToStartSearch) + 1;\n      if (starIndex === visibleItemIds.length) {\n        starIndex = 0;\n      }\n\n      // Check following nodes in tree\n      let toFocusIndex = searchByFirstChar(starIndex, visibleItemIds.length, e.key);\n      // If not found in following nodes, check from beginning\n      if (toFocusIndex === -1) {\n        toFocusIndex = searchByFirstChar(0, starIndex - 1, e.key);\n      }\n\n      if (toFocusIndex === -1) {\n        return idToStartSearch;\n      }\n\n      return visibleItemIds[toFocusIndex];\n    },\n    [searchByFirstChar, visibleItemIds],\n  );\n\n  return {\n    flatTree,\n    getItemById,\n    activeItemIds,\n    visibleItemIds,\n    registerItemRef,\n    getItemRef,\n    toggleItemActive,\n    focusItemById,\n    expandSiblings,\n    toggleItemSelect,\n    getToFocusIDByFirstCharacter,\n  };\n}\n\nfunction deprecated_getInitialActiveItemIds(items?: ObjectShorthandCollection<TreeItemProps>) {\n  if (!items) {\n    return [];\n  }\n\n  let result = [];\n  items.forEach(item => {\n    if (item.expanded) {\n      result.push(item.id);\n    }\n\n    if (item.items) {\n      result = result.concat(\n        deprecated_getInitialActiveItemIds(item.items as ObjectShorthandCollection<TreeItemProps>),\n      );\n    }\n  });\n  return result;\n}\n\nfunction getLeafNodes(getItemById: (id: string) => FlatTreeItem, rootId: string) {\n  const leafs = [];\n  const traverseDown = id => {\n    if (getItemById(id)?.childrenIds) {\n      getItemById(id)?.childrenIds.forEach(child => {\n        traverseDown(child);\n      });\n    } else {\n      leafs.push(id);\n    }\n  };\n  traverseDown(rootId);\n  return leafs;\n}\n"],"file":"useTree.js"}