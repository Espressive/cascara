{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["treeTitleBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useFluentContext","useTelemetry","Box","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","shouldPreventDefaultOnKeyDown","TreeContext","treeTitleClassName","treeTitleSlotClassNames","indicator","TreeTitle","props","context","displayName","telemetry","setStart","setEnd","useContext","focusItemById","toggleItemActive","toggleItemSelect","accessibility","id","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","selectionIndicator","disabled","selected","selectable","expanded","indeterminate","getA11Props","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","focusParent","parent","mapPropsToBehavior","rtl","mapPropsToStyles","showIndicator","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","selectionIndicatorOverrideProps","predefinedProps","onClick","selectIndicator","create","defaultProps","as","overrideProps","element","root","getAttributes","forElements","propTypes","createCommon","string","bool","number","func","shorthandAllowingChildren","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Box, BoxProps } from '../Box/Box';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n  shouldPreventDefaultOnKeyDown,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { TreeContext } from './context';\n\nexport interface TreeTitleSlotClassNames {\n  indicator: string;\n}\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Internal usage only -  Id needed to identify this item inside the Tree, passed down from TreeItem */\n  id?: string;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** A selection indicator can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** Whether or not tree title is selectable. */\n  selectable?: boolean;\n\n  /** For selectable parents define if all nested children are checked */\n  indeterminate?: boolean;\n\n  /** The id of the parent tree title, if any. */\n  parent?: string;\n}\n\nexport type TreeTitleStylesProps = Pick<\n  TreeTitleProps,\n  'selected' | 'selectable' | 'disabled' | 'indeterminate' | 'level'\n> & {\n  showIndicator: boolean;\n};\n\nexport const treeTitleClassName = 'ui-tree__title';\n\nexport const treeTitleSlotClassNames = {\n  indicator: `${treeTitleClassName}__selection-indicator`,\n};\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport const TreeTitle: ComponentWithAs<'a', TreeTitleProps> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n  const { focusItemById, toggleItemActive, toggleItemSelect } = React.useContext(TreeContext);\n  const {\n    accessibility,\n    id,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n    selectionIndicator,\n    disabled,\n    selected,\n    selectable,\n    expanded,\n    indeterminate,\n  } = props;\n\n  const getA11Props = useAccessibility<TreeTitleBehaviorProps>(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        if (shouldPreventDefaultOnKeyDown(e)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n        handleClick(e);\n      },\n      focusParent: e => {\n        // allow bubbling up to parent treeItem\n        focusItemById(props.parent);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n      selected,\n      selectable,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: treeTitleClassName,\n    mapPropsToStyles: () => ({\n      selected,\n      disabled,\n      selectable,\n      indeterminate,\n      level,\n      showIndicator: selectable && ((hasSubtree && expanded) || selected || indeterminate),\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n\n  const handleClick = e => {\n    if (hasSubtree) {\n      toggleItemActive(e, id);\n    } else {\n      toggleItemSelect(e, id);\n    }\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const selectionIndicatorOverrideProps = (predefinedProps: BoxProps) => ({\n    onClick: (e: React.SyntheticEvent) => {\n      e.stopPropagation(); // otherwise onClick on title will also be executed\n      if (selectable) {\n        toggleItemSelect(e, id);\n      }\n\n      _.invoke(predefinedProps, 'onClick', e);\n    },\n  });\n\n  const selectIndicator = Box.create(selectionIndicator, {\n    defaultProps: () => ({\n      as: 'span',\n      selected,\n      ...getA11Props('indicator', {\n        className: treeTitleSlotClassNames.indicator,\n        styles: resolvedStyles.selectionIndicator,\n      }),\n    }),\n    overrideProps: selectionIndicatorOverrideProps,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      {selectIndicator}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  id: PropTypes.string,\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  treeSize: PropTypes.number,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  indeterminate: PropTypes.bool,\n  parent: PropTypes.string,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  selectionIndicator: {},\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n"],"file":"TreeTitle.js"}