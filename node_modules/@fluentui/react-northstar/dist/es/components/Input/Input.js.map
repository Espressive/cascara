{"version":3,"sources":["components/Input/Input.tsx"],"names":["inputBehavior","handleRef","Ref","customPropTypes","React","PropTypes","partitionHTMLProps","commonPropTypes","createShorthandFactory","createShorthand","getOrGenerateIdFromShorthand","Box","useAutoControlled","getElementType","useUnhandledProps","useTelemetry","useFluentContext","useStyles","useAccessibility","compose","ExclamationCircleIcon","CheckmarkCircleIcon","CloseIcon","InputLabel","FormFieldBaseContext","inputClassName","inputSlotClassNames","input","icon","Input","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","className","type","wrapper","disabled","fluid","inverted","inline","clearable","iconPosition","design","styles","variables","required","successIndicator","error","errorIndicator","showSuccessIndicator","label","labelPosition","inputRef","useRef","useContext","labelId","inputId","current","id","ElementType","unhandledProps","handledProps","htmlInputProps","restProps","defaultValue","value","initialValue","setValue","hasValue","length","isShowSuccessIndicatorUndefined","requiredAndSuccessful","hasIcon","mapPropsToStyles","mapPropsToInlineStyles","rtl","unstable_props","classes","resolvedStyles","getA11yProps","accessibility","debugName","actionHandlers","clear","e","stopPropagation","nativeEvent","handleOnClear","mapPropsToBehavior","handleIconOverrides","predefinedProps","onClick","focus","handleChange","newValue","computeIcon","labelElement","slots","defaultProps","htmlFor","inputElement","create","children","control","as","onChange","overrideProps","inputContainer","element","root","propTypes","createCommon","content","bool","oneOfType","string","arrayOf","itemShorthand","oneOf","shorthandAllowingChildren","func","number","wrapperShorthand","Label","Component"],"mappings":"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","sourcesContent":["import { Accessibility, inputBehavior, InputBehaviorProps } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  partitionHTMLProps,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  ShorthandFactory,\n  createShorthand,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { ShorthandValue, ComponentEventHandler } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  useAutoControlled,\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useFluentContext,\n  useStyles,\n  useAccessibility,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { ExclamationCircleIcon, CheckmarkCircleIcon, CloseIcon } from '@fluentui/react-icons-northstar';\nimport { InputLabel, InputLabelProps, LabelPosition } from './InputLabel';\nimport { FormFieldBaseContext } from '../Form/utils/formFieldBaseContext';\n\nexport interface InputProps extends UIComponentProps, ChildrenComponentProps, SupportedIntrinsicInputProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<InputBehaviorProps>;\n\n  /** A property that will change the icon on the input and clear the input on click on Cancel. */\n  clearable?: boolean;\n\n  /** The default value of the input. */\n  defaultValue?: string | string[];\n\n  /** An Input can be disabled. */\n  disabled?: boolean;\n\n  /** An input can take the width of its container. */\n  fluid?: boolean;\n\n  /** Optional Icon to display inside the Input. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An Input with icon can format the icon to appear at the start or at the end of the input field. */\n  iconPosition?: 'start' | 'end';\n\n  /** An input can be used inline with text. */\n  inline?: boolean;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onChange?: ComponentEventHandler<InputProps & { value: string }>;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** (DEPRECATED) Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The value of the input. */\n  value?: string | number;\n\n  /** A label for the input. */\n  label?: ShorthandValue<InputLabelProps>;\n\n  /** Poisition for the label */\n  labelPosition?: LabelPosition;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n\n  /** Input can be required to be valid. */\n  required?: boolean;\n\n  /** Input can have error state */\n  error?: boolean;\n\n  /** Input can have error indicator when error is true */\n  errorIndicator?: ShorthandValue<BoxProps>;\n\n  /** Optional Icon to display inside the Input if required and fulfilled. */\n  successIndicator?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the successIndicator should be visible. */\n  showSuccessIndicator?: boolean;\n}\n\nexport interface InputSlotClassNames {\n  input: string;\n  icon: string;\n}\n\nexport const inputClassName = 'ui-input';\n\nexport type InputStylesProps = Required<\n  Pick<\n    InputProps,\n    'fluid' | 'inverted' | 'inline' | 'disabled' | 'clearable' | 'iconPosition' | 'error' | 'labelPosition'\n  > & {\n    hasIcon: boolean;\n    hasValue: boolean;\n    requiredAndSuccessful: boolean;\n  }\n>;\n\nexport const inputSlotClassNames: InputSlotClassNames = {\n  input: `${inputClassName}__input`,\n  icon: `${inputClassName}__icon`,\n};\n\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\nexport const Input = compose<'input', InputProps, InputStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n    const {\n      className,\n      input,\n      type,\n      wrapper,\n      disabled,\n      fluid,\n      inverted,\n      inline,\n      clearable,\n      icon,\n      iconPosition,\n      design,\n      styles,\n      variables,\n      required,\n      successIndicator,\n      error,\n      errorIndicator,\n      showSuccessIndicator,\n      label,\n      labelPosition,\n    } = props;\n\n    const inputRef = React.useRef<HTMLInputElement>();\n\n    const { labelId } = React.useContext(FormFieldBaseContext);\n    const inputId = React.useRef<string>();\n    inputId.current = props.id || getOrGenerateIdFromShorthand('ui-input-', '', inputId.current);\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n    const [value, setValue] = useAutoControlled({\n      defaultValue: props.defaultValue,\n      value: props.value as string,\n      initialValue: '',\n    });\n    const hasValue: boolean = !!value && (value as string)?.length !== 0;\n\n    const isShowSuccessIndicatorUndefined = typeof showSuccessIndicator === 'undefined';\n\n    const requiredAndSuccessful = isShowSuccessIndicatorUndefined\n      ? ((required && hasValue) || showSuccessIndicator) && !error\n      : showSuccessIndicator;\n\n    const hasIcon = !!icon || showSuccessIndicator || (required && isShowSuccessIndicatorUndefined) || !_.isNil(error);\n\n    const { classes, styles: resolvedStyles } = useStyles<InputStylesProps>(composeOptions.displayName, {\n      className: inputClassName,\n      mapPropsToStyles: () => ({\n        fluid,\n        inverted,\n        inline,\n        disabled,\n        clearable,\n        hasIcon,\n        requiredAndSuccessful,\n        iconPosition,\n        hasValue,\n        labelPosition,\n        error,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<InputBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        clear: e => {\n          if (clearable && value !== '') {\n            e.stopPropagation();\n            e.nativeEvent && e.nativeEvent.stopPropagation();\n            handleOnClear(e);\n          }\n        },\n      },\n      mapPropsToBehavior: () => ({\n        disabled,\n        required,\n        error,\n      }),\n      rtl: context.rtl,\n    });\n\n    const handleIconOverrides = predefinedProps => ({\n      onClick: (e: React.MouseEvent) => {\n        if (!disabled) {\n          handleOnClear(e);\n          inputRef.current.focus();\n        }\n\n        _.invoke(predefinedProps, 'onClick', e, props);\n      },\n    });\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) {\n        return;\n      }\n\n      const newValue = _.get(e, 'target.value');\n\n      _.invoke(props, 'onChange', e, { ...props, value: newValue });\n\n      setValue(newValue);\n    };\n\n    const handleOnClear = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (clearable) {\n        _.invoke(props, 'onChange', e, { ...props, value: '' });\n        setValue('');\n      }\n    };\n\n    const computeIcon = (): ShorthandValue<BoxProps> => {\n      if (clearable && (value as string)?.length !== 0) {\n        return <CloseIcon outline />;\n      }\n      if (requiredAndSuccessful) {\n        return successIndicator;\n      }\n      if (error) {\n        return errorIndicator;\n      }\n      return icon || null;\n    };\n\n    const labelElement = createShorthand(composeOptions.slots.label, label, {\n      defaultProps: () => ({\n        labelPosition,\n        label,\n        required,\n        htmlFor: inputId.current,\n        hasValue,\n        id: labelId,\n      }),\n    });\n\n    const inputElement = Box.create(\n      {},\n      {\n        defaultProps: () => ({\n          children: (\n            <>\n              <Ref\n                innerRef={(inputElement: HTMLElement) => {\n                  handleRef(inputRef, inputElement);\n                  handleRef(props.inputRef, inputElement);\n                  handleRef(ref, inputElement);\n                }}\n              >\n                {createShorthand(composeOptions.slots.control, input || type, {\n                  defaultProps: () =>\n                    getA11yProps('input', {\n                      ...htmlInputProps,\n                      as: 'input',\n                      disabled,\n                      type,\n                      required,\n                      value: value || '',\n                      id: inputId.current,\n                      className: inputSlotClassNames.input,\n                      styles: resolvedStyles.input,\n                      onChange: handleChange,\n                    }),\n                })}\n              </Ref>\n              {createShorthand(composeOptions.slots.icon, computeIcon(), {\n                defaultProps: () =>\n                  getA11yProps('icon', {\n                    className: inputSlotClassNames.icon,\n                    styles: resolvedStyles.icon,\n                  }),\n                overrideProps: handleIconOverrides,\n              })}\n            </>\n          ),\n          styles: resolvedStyles.inputContainer,\n        }),\n      },\n    );\n\n    const element = Box.create(wrapper, {\n      defaultProps: () =>\n        getA11yProps('root', {\n          className: classes.root,\n          children: (\n            <>\n              {labelElement}\n              {inputElement}\n            </>\n          ),\n          styles: resolvedStyles.root,\n          ...restProps,\n        }),\n      overrideProps: {\n        as: (wrapper && (wrapper as any).as) || ElementType,\n      },\n    });\n    setEnd();\n    return element;\n  },\n  {\n    className: inputClassName,\n    displayName: 'Input',\n    slots: {\n      control: Box,\n      icon: Box,\n      label: InputLabel,\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'design',\n      'styles',\n      'variables',\n      'clearable',\n      'defaultValue',\n      'disabled',\n      'fluid',\n      'icon',\n      'iconPosition',\n      'input',\n      'inputRef',\n      'inline',\n      'inverted',\n      'onChange',\n      'type',\n      'value',\n      'wrapper',\n      'required',\n      'successIndicator',\n      'error',\n      'errorIndicator',\n      'showSuccessIndicator',\n      'label',\n      'labelPosition',\n    ],\n  },\n) as ComponentWithAs<'input', InputProps> & {\n  create: ShorthandFactory<InputProps>;\n  Label: typeof InputLabel;\n};\n\nInput.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  clearable: PropTypes.bool,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  disabled: PropTypes.bool,\n  fluid: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf<LabelPosition>(['inline', 'above', 'inside']),\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  wrapper: customPropTypes.wrapperShorthand,\n  required: PropTypes.bool,\n  successIndicator: customPropTypes.shorthandAllowingChildren,\n  error: PropTypes.bool,\n  errorIndicator: customPropTypes.shorthandAllowingChildren,\n  showSuccessIndicator: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  accessibility: inputBehavior,\n  type: 'text',\n  wrapper: {},\n  iconPosition: 'end',\n  errorIndicator: <ExclamationCircleIcon />,\n  successIndicator: <CheckmarkCircleIcon outline />,\n};\n\nInput.Label = InputLabel;\n\nInput.create = createShorthandFactory({ Component: Input });\n"],"file":"Input.js"}