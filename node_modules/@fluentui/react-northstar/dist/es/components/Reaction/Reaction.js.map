{"version":3,"sources":["components/Reaction/Reaction.tsx"],"names":["customPropTypes","React","childrenExist","commonPropTypes","rtlTextContainer","createShorthandFactory","Box","ReactionGroup","useTelemetry","useFluentContext","getElementType","useUnhandledProps","useAccessibility","useStyles","reactionClassName","reactionSlotClassNames","icon","content","Reaction","props","context","displayName","telemetry","setStart","setEnd","children","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","hasContent","mapPropsToInlineStyles","classes","resolvedStyles","element","root","getAttributes","forElements","create","defaultProps","propTypes","createCommon","shorthandAllowingChildren","as","Object","keys","Group","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  ContentComponentProps,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ReactionGroup } from './ReactionGroup';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface ReactionSlotClassNames {\n  icon: string;\n  content: string;\n}\n\nexport interface ReactionProps\n  extends UIComponentProps<ReactionProps>,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A reaction can have icon for the indicator of the reaction. */\n  icon?: ShorthandValue<BoxProps>;\n}\n\nexport type ReactionStylesProps = {\n  hasContent: boolean;\n};\n\nexport const reactionClassName = 'ui-reaction';\nexport const reactionSlotClassNames: ReactionSlotClassNames = {\n  icon: `${reactionClassName}__icon`,\n  content: `${reactionClassName}__content`,\n};\n\n/**\n * A Reaction indicates user's emotion or perception.\n * Used to display user's reaction for entity in Chat (e.g. message).\n */\nexport const Reaction: ComponentWithAs<'span', ReactionProps> &\n  FluentComponentStaticProps<ReactionProps> & {\n    Group: typeof ReactionGroup;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Reaction.displayName, context.telemetry);\n  setStart();\n  const { children, icon, content, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Reaction.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Reaction.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<ReactionStylesProps>(Reaction.displayName, {\n    className: reactionClassName,\n    mapPropsToStyles: () => ({\n      hasContent: !!content,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? (\n        children\n      ) : (\n        <>\n          {Box.create(icon, {\n            defaultProps: () =>\n              getA11yProps('icon', {\n                className: reactionSlotClassNames.icon,\n                styles: resolvedStyles.icon,\n              }),\n          })}\n          {Box.create(content, {\n            defaultProps: () =>\n              getA11yProps('content', {\n                className: reactionSlotClassNames.content,\n                styles: resolvedStyles.content,\n              }),\n          })}\n        </>\n      )}\n    </ElementType>\n  );\n\n  setEnd();\n  return element;\n};\n\nReaction.displayName = 'Reaction';\n\nReaction.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n  }),\n  icon: customPropTypes.shorthandAllowingChildren,\n};\n\nReaction.defaultProps = {\n  as: 'span',\n};\n\nReaction.handledProps = Object.keys(Reaction.propTypes) as any;\n\nReaction.Group = ReactionGroup;\n\nReaction.create = createShorthandFactory({ Component: Reaction, mappedProp: 'content' });\n"],"file":"Reaction.js"}