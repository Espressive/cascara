{"version":3,"sources":["components/Segment/Segment.tsx"],"names":["React","PropTypes","childrenExist","commonPropTypes","rtlTextContainer","createShorthandFactory","Box","useTelemetry","getElementType","useAccessibility","useFluentContext","useUnhandledProps","useStyles","segmentClassName","Segment","props","context","displayName","telemetry","setStart","setEnd","children","content","color","inverted","disabled","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","unstable_wrapWithFocusZone","root","getAttributes","forElements","create","propTypes","createCommon","bool","Object","keys","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ColorComponentProps,\n  createShorthandFactory,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface SegmentProps\n  extends UIComponentProps<SegmentProps>,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An segment can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted?: boolean;\n}\n\nexport type SegmentStylesProps = Required<Pick<SegmentProps, 'color' | 'inverted' | 'disabled'>>;\n\nexport const segmentClassName = 'ui-segment';\n\n/**\n * A Segment visually groups related content.\n */\nexport const Segment: ComponentWithAs<'div', SegmentProps> & FluentComponentStaticProps<SegmentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Segment.displayName, context.telemetry);\n  setStart();\n  const { children, content, color, inverted, disabled, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Segment.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Segment.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<SegmentStylesProps>(Segment.displayName, {\n    className: segmentClassName,\n    mapPropsToStyles: () => ({\n      color,\n      inverted,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : Box.create(content)}\n    </ElementType>,\n  );\n\n  setEnd();\n  return element;\n};\n\nSegment.displayName = 'Segment';\n\nSegment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n    color: true,\n  }),\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n};\nSegment.handledProps = Object.keys(Segment.propTypes) as any;\n\nSegment.create = createShorthandFactory({\n  Component: Segment,\n});\n"],"file":"Segment.js"}