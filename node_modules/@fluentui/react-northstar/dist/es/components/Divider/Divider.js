import { useTelemetry, useAccessibility, getElementType, useFluentContext, useUnhandledProps, useStyles } from '@fluentui/react-bindings';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, createShorthand } from '../../utils';
import { DividerContent } from './DividerContent';
export var dividerClassName = 'ui-divider';
/**
 * A Divider visually segments content.
 */

export var Divider = /*#__PURE__*/function () {
  var Divider = function Divider(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(Divider.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var children = props.children,
        color = props.color,
        fitted = props.fitted,
        size = props.size,
        important = props.important,
        vertical = props.vertical,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        accessibility = props.accessibility;
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(Divider.handledProps, props);
    var getA11yProps = useAccessibility(accessibility, {
      debugName: Divider.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(Divider.displayName, {
      className: dividerClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          hasContent: childrenExist(children) || !!props.content,
          color: color,
          fitted: fitted,
          size: size,
          important: important,
          vertical: vertical
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var content = createShorthand(DividerContent, props.content, {});
    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), childrenExist(children) ? children : content);
    setEnd();
    return element;
  };

  Divider.displayName = 'Divider';
  Divider.propTypes = Object.assign({}, commonPropTypes.createCommon({
    color: true
  }), {
    fitted: PropTypes.bool,
    size: PropTypes.number,
    important: PropTypes.bool,
    vertical: PropTypes.bool
  });
  Divider.defaultProps = {
    size: 0
  };
  Divider.Content = DividerContent;
  Divider.handledProps = Object.keys(Divider.propTypes);
  Divider.create = createShorthandFactory({
    Component: Divider,
    mappedProp: 'content'
  });
  return Divider;
}();
//# sourceMappingURL=Divider.js.map
