{"version":3,"sources":["components/Image/Image.tsx"],"names":["imageBehavior","getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","PropTypes","React","createShorthandFactory","commonPropTypes","imageClassName","Image","props","context","displayName","telemetry","setStart","setEnd","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","getA11Props","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","result","root","defaultProps","as","propTypes","createCommon","children","content","bool","Object","keys","create","Component","mappedProp","allowsJSX"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface ImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An image can appear circular. */\n  circular?: boolean;\n\n  /** An image can take up the width of its container. */\n  fluid?: boolean;\n\n  /** Image source URL. */\n  src?: string;\n}\n\nexport type ImageStylesProps = Pick<ImageProps, 'avatar' | 'circular' | 'fluid'>;\nexport const imageClassName = 'ui-image';\n\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\nexport const Image: ComponentWithAs<'img', ImageProps> & FluentComponentStaticProps<ImageProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Image.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Image.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ImageStylesProps>(Image.displayName, {\n    className: imageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Image.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n};\n\nImage.displayName = 'Image';\nImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior,\n};\n\nImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nImage.handledProps = Object.keys(Image.propTypes) as any;\n\nImage.create = createShorthandFactory({ Component: Image, mappedProp: 'src', allowsJSX: false });\n"],"file":"Image.js"}