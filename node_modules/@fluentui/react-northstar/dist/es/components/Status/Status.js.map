{"version":3,"sources":["components/Status/Status.tsx"],"names":["statusBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","useFluentContext","customPropTypes","PropTypes","React","createShorthandFactory","commonPropTypes","Box","statusClassName","Status","props","context","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","resolvedStyles","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","create","defaultProps","as","element","root","propTypes","createCommon","children","content","string","shorthandAllowingChildren","oneOf","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, statusBehavior, StatusBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface StatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<StatusBehaviorProps>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type StatusStylesProps = Pick<StatusProps, 'color' | 'size' | 'state'>;\nexport const statusClassName = 'ui-status';\n\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\nexport const Status: ComponentWithAs<'span', StatusProps> & FluentComponentStaticProps = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Status.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes, styles: resolvedStyles } = useStyles<StatusStylesProps>(Status.displayName, {\n    className: statusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Status.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Status.handledProps, props);\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        styles: resolvedStyles.icon,\n        as: 'span',\n      }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{iconElement}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nStatus.displayName = 'Status';\nStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nStatus.handledProps = Object.keys(Status.propTypes) as any;\nStatus.defaultProps = {\n  accessibility: statusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nStatus.create = createShorthandFactory({ Component: Status, mappedProp: 'state' });\n"],"file":"Status.js"}