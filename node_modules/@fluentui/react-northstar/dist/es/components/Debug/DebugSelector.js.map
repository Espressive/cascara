{"version":3,"sources":["components/Debug/DebugSelector.tsx"],"names":["PropTypes","React","EventListener","isBrowser","FiberNavigator","DebugRect","INITIAL_STATE","fiberNav","DebugSelector","state","debugDOMNode","domNode","fromDOMNode","console","error","props","filter","setCurrentFiberNav","setState","prevState","__fiber","onHover","handleMouseMove","e","target","handleMouseLeave","handleDOMNodeClick","preventDefault","stopPropagation","onSelect","render","active","mountDocument","renderLabel","showBackground","showClassName","showCropMarks","showElement","body","Component","defaultProps","window","document","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { EventListener } from '@fluentui/react-component-event-listener';\n\nimport { isBrowser } from '../../utils';\n\nimport { FiberNavigator } from './FiberNavigator';\nimport { DebugRect } from './DebugRect';\n\nexport type DebugSelectorProps = {\n  /** Existing document the popup should add listeners. */\n  mountDocument?: Document;\n  onSelect?: (fiberNav: FiberNavigator) => void;\n  onHover?: (fiberNav: FiberNavigator) => void;\n  renderLabel?: (fiberNav: FiberNavigator) => string;\n  showBackground?: boolean;\n  showClassName?: boolean;\n  showCropMarks?: boolean;\n  showElement?: boolean;\n  filter?: (fiberNav: FiberNavigator) => FiberNavigator | null;\n  active?: boolean;\n};\n\nexport type DebugSelectorState = {\n  fiberNav: FiberNavigator;\n};\n\nconst INITIAL_STATE: DebugSelectorState = {\n  fiberNav: null,\n};\n\n// TODO: This is a copy and trim-down of Debug.tsx\n//       Cleanup and use in Debug.tsx before merge:\n//         - Make hotkey invocation generic, or take prop for active state\n//           since Debug uses ctrl + 'd' and DebugSelector uses ctrl + 'c' in react-builder\n//\nexport class DebugSelector extends React.Component<DebugSelectorProps, DebugSelectorState> {\n  state = INITIAL_STATE;\n\n  static defaultProps = {\n    active: false,\n    filter: fiberNav => fiberNav,\n    // eslint-disable-next-line no-undef\n    mountDocument: isBrowser() ? window.document : null,\n  };\n\n  static propTypes = {\n    mountDocument: PropTypes.object.isRequired,\n  };\n\n  debugDOMNode = domNode => {\n    let fiberNav = FiberNavigator.fromDOMNode(domNode);\n\n    if (!fiberNav) {\n      // eslint-disable-next-line no-console\n      console.error('No fiber for dom node', domNode);\n      return;\n    }\n\n    fiberNav = this.props.filter(fiberNav);\n\n    this.setCurrentFiberNav(fiberNav);\n  };\n\n  setCurrentFiberNav = (fiberNav: FiberNavigator | null) => {\n    this.setState(prevState => {\n      if (fiberNav?.__fiber !== prevState.fiberNav?.__fiber) {\n        this.props.onHover?.(fiberNav);\n        return { fiberNav };\n      }\n      return null;\n    });\n  };\n\n  handleMouseMove = e => {\n    this.debugDOMNode(e.target);\n  };\n\n  handleMouseLeave = e => {\n    this.setCurrentFiberNav(null);\n  };\n\n  handleDOMNodeClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.props.onSelect?.(this.state.fiberNav);\n  };\n\n  render() {\n    const {\n      active,\n      mountDocument,\n      renderLabel,\n      showBackground,\n      showClassName,\n      showCropMarks,\n      showElement,\n    } = this.props;\n    const { fiberNav } = this.state;\n\n    return (\n      <>\n        {active && <EventListener listener={this.handleMouseMove} target={mountDocument.body} type=\"mousemove\" />}\n        {active && <EventListener listener={this.handleMouseLeave} target={mountDocument.body} type=\"mouseleave\" />}\n        {active && fiberNav && fiberNav.domNode && (\n          <EventListener listener={this.handleDOMNodeClick} target={fiberNav.domNode} type=\"click\" />\n        )}\n        {active && fiberNav && (\n          <DebugRect\n            showBackground={showBackground}\n            showClassName={showClassName}\n            showElement={showElement}\n            showCropMarks={showCropMarks}\n            fiberNav={fiberNav}\n            renderLabel={renderLabel}\n          />\n        )}\n      </>\n    );\n  }\n}\n"],"file":"DebugSelector.js"}