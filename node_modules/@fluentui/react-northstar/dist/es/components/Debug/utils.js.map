{"version":3,"sources":["components/Debug/utils.ts"],"names":["includes","source","target","indexOf","find","data","key","search","value","isOverridden","overrides","undefined","filterR","result","Object","keys","forEach","filter","reduce","obj","getValues","predicate","arr","removeNulls","o","k","val","length"],"mappings":";;;;AAEA;AACA;AACA;AACA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAiBC,MAAjB;AAAA,SACtB,SAAUD,MAAV,EAAkBE,OAAlB,CAA0B,SAAUD,MAAV,CAA1B,MAAiD,CAAC,CAD5B;AAAA,CAAjB;AAGP;AACA;AACA;;AACA,OAAO,IAAME,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAeC,GAAf,EAA4BC,MAA5B,EAAwD;AAC1E,MAAMC,KAAK,GAAGH,IAAI,CAACC,GAAD,CAAlB;AACA,SACEC,MAAM,KAAK,EAAX,KACCP,QAAQ,CAACM,GAAD,EAAMC,MAAN,CAAR,IAA0B,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,CAAC,OAAQA,KAAR,CAA9B,IAAgDR,QAAQ,CAACQ,KAAD,EAAQD,MAAR,CADnF,CADF;AAID,CANM;AAQP;AACA;AACA;;AACA,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACJ,IAAD,EAAeC,GAAf,EAA4BI,SAA5B,EAA2D;AACrF,SAAO,OAAOL,IAAI,CAACC,GAAD,CAAX,KAAqB,QAArB,IAAiC,CAAC,CAACI,SAAnC,IAAgDA,SAAS,CAACJ,GAAD,CAAT,KAAmB,IAAnE,IAA2EI,SAAS,CAACJ,GAAD,CAAT,KAAmBK,SAArG;AACD,CAFM;AAIP;AACA;AACA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACL,MAAD,EAAiBF,IAAjB,EAA2C;AACzD,MAAIQ,MAAM,GAAG,KAAb;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,OAAlB,CAA0B,UAAAV,GAAG,EAAI;AAC/B,QAAME,KAAK,GAAGH,IAAI,CAACC,GAAD,CAAlB;;AAEA,QAAIF,IAAI,CAACC,IAAD,EAAOC,GAAP,EAAYC,MAAZ,CAAR,EAA6B;AAC3BM,MAAAA,MAAM,GAAG,IAAT;AACD,KAL8B,CAO/B;;;AACA,QAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6BI,OAAO,CAACL,MAAD,EAASC,KAAT,CAAxC,EAAyD;AACvDK,MAAAA,MAAM,GAAG,IAAT;AACD;AACF,GAXD;AAaA,SAAOA,MAAP;AACD,CAjBD;AAmBA;AACA;AACA;;;AACA,OAAO,IAAMI,MAAM,GAAG,SAATA,MAAS,CAACZ,IAAD,EAAeG,KAAf,EAAiC;AACrD,SAAOM,MAAM,CAACC,IAAP,CAAYV,IAAZ,EACJY,MADI,CACG,UAAAX,GAAG,EAAI;AACb,QAAIF,IAAI,CAACC,IAAD,EAAOC,GAAP,EAAYE,KAAZ,CAAR,EAA4B;AAC1B,aAAO,IAAP;AACD,KAHY,CAKb;;;AACA,QAAI,OAAOH,IAAI,CAACC,GAAD,CAAX,KAAqB,QAArB,IAAiCD,IAAI,CAACC,GAAD,CAAJ,KAAc,IAAnD,EAAyD;AACvD,aAAOM,OAAO,CAACJ,KAAD,EAAQH,IAAI,CAACC,GAAD,CAAZ,CAAd;AACD;;AAED,WAAO,KAAP;AACD,GAZI,EAaJY,MAbI,CAaG,UAACC,GAAD,EAAMb,GAAN,EAAc;AACpBa,IAAAA,GAAG,CAACb,GAAD,CAAH,GAAWD,IAAI,CAACC,GAAD,CAAf;AACA,WAAOa,GAAP;AACD,GAhBI,EAgBF,EAhBE,CAAP;AAiBD,CAlBM;AAoBP;AACA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACZ,KAAD,EAAaa,SAAb,EAA+D;AACtF,MAAI,OAAQb,KAAR,CAAJ,EAAoB;AAClB,WAAO,EAAP;AACD;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIa,SAAS,CAACb,KAAD,CAAb,EAAsB;AACpB,aAAO,CAACA,KAAD,CAAP;AACD;AACF;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIc,GAAa,GAAG,EAApB;AACAR,IAAAA,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,OAAnB,CAA2B,UAAAV,GAAG,EAAI;AAChCgB,MAAAA,GAAG,GAAG,QAASA,GAAT,EAAcF,SAAS,CAACZ,KAAK,CAACF,GAAD,CAAN,EAAae,SAAb,CAAvB,CAAN;AACD,KAFD;AAGA,WAAOC,GAAP;AACD;;AAED,SAAO,EAAP;AACD,CApBM;AAsBP;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAiB;AAC1C,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,KAAK,IAAnC,EAAyC;AACvC,WAAOA,CAAP;AACD;;AACD,MAAMX,MAAM,GAAG,EAAf;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYS,CAAZ,EAAeR,OAAf,CAAuB,UAAAS,CAAC,EAAI;AAC1B,QAAI,CAACD,CAAC,CAACC,CAAD,CAAF,IAAS,OAAOD,CAAC,CAACC,CAAD,CAAR,KAAgB,QAA7B,EAAuC;AACrC,UAAID,CAAC,CAACC,CAAD,CAAL,EAAU;AACRZ,QAAAA,MAAM,CAACY,CAAD,CAAN,GAAYD,CAAC,CAACC,CAAD,CAAb,CADQ,CACU;AACnB;AACF,KAJD,MAIO;AACL;AACA,UAAMC,GAAG,GAAGH,WAAW,CAACC,CAAC,CAACC,CAAD,CAAF,CAAvB;;AAEA,UAAI,OAAOC,GAAP,KAAe,QAAf,IAA2BA,GAAG,IAAI,IAAlC,IAA0CZ,MAAM,CAACC,IAAP,CAAYW,GAAZ,EAAiBC,MAAjB,GAA0B,CAAxE,EAA2E;AACzEd,QAAAA,MAAM,CAACY,CAAD,CAAN,GAAYC,GAAZ;AACD;AACF;AACF,GAbD;AAeA,SAAOb,MAAP;AACD,CAtBM","sourcesContent":["import * as _ from 'lodash';\n\n/**\n * Check whether source includes target ignoring case.\n */\nexport const includes = (source: string, target: string): boolean =>\n  _.toLower(source).indexOf(_.toLower(target)) !== -1;\n\n/**\n * Checks whether the key or the value of data[key] contains the search string.\n */\nexport const find = (data: object, key: string, search: string): boolean => {\n  const value = data[key];\n  return (\n    search !== '' &&\n    (includes(key, search) || (typeof value !== 'object' && !_.isNil(value) && includes(value, search)))\n  );\n};\n\n/**\n * Checks if the data[key] is primitive and override in the overrides object.\n */\nexport const isOverridden = (data: object, key: string, overrides: object): boolean => {\n  return typeof data[key] !== 'object' && !!overrides && overrides[key] !== null && overrides[key] !== undefined;\n};\n\n/**\n * Helper recursive function for the filter method.\n */\nconst filterR = (search: string, data: object): boolean => {\n  let result = false;\n\n  Object.keys(data).forEach(key => {\n    const value = data[key];\n\n    if (find(data, key, search)) {\n      result = true;\n    }\n\n    // If the value is object invoke again\n    if (typeof value === 'object' && filterR(search, value)) {\n      result = true;\n    }\n  });\n\n  return result;\n};\n\n/**\n * Filters the data for the value string (if it appears in the key or value). Considers nested objects.\n */\nexport const filter = (data: object, value: string) => {\n  return Object.keys(data)\n    .filter(key => {\n      if (find(data, key, value)) {\n        return true;\n      }\n\n      // if the value is object invoke again\n      if (typeof data[key] === 'object' && data[key] !== null) {\n        return filterR(value, data[key]);\n      }\n\n      return false;\n    })\n    .reduce((obj, key) => {\n      obj[key] = data[key];\n      return obj;\n    }, {});\n};\n\n/**\n * Returns array of values that matches the predicate. Considers nested objects.\n */\nexport const getValues = (value: any, predicate: (str: string) => boolean): string[] => {\n  if (_.isNil(value)) {\n    return [];\n  }\n\n  if (typeof value === 'string') {\n    if (predicate(value)) {\n      return [value];\n    }\n  }\n\n  if (typeof value === 'object') {\n    let arr: string[] = [];\n    Object.keys(value).forEach(key => {\n      arr = _.concat(arr, getValues(value[key], predicate));\n    });\n    return arr;\n  }\n\n  return [];\n};\n\n/**\n * Removes null values from an object. Considers nested objects.\n */\nexport const removeNulls = (o: any): any => {\n  if (typeof o !== 'object' && o !== null) {\n    return o;\n  }\n  const result = {};\n\n  Object.keys(o).forEach(k => {\n    if (!o[k] || typeof o[k] !== 'object') {\n      if (o[k]) {\n        result[k] = o[k]; // If not null or not an object, copy value\n      }\n    } else {\n      // The property is an object\n      const val = removeNulls(o[k]);\n\n      if (typeof val === 'object' && val != null && Object.keys(val).length > 0) {\n        result[k] = val;\n      }\n    }\n  });\n\n  return result;\n};\n"],"file":"utils.js"}