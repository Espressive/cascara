import { Accessibility, TextAreaBehaviorProps } from '@fluentui/accessibility';
import { ComponentEventHandler, FluentComponentStaticProps } from '../../types';
import { UIComponentProps, ChildrenComponentProps } from '../../utils';
import { ComponentWithAs } from '@fluentui/react-bindings';
export interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility<TextAreaBehaviorProps>;
    /** The default value of the text area. */
    defaultValue?: string;
    /**
     * Called on change.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All props.
     */
    onChange?: ComponentEventHandler<TextAreaProps>;
    /** The value of the text area. */
    value?: string;
    /** The text area becomes read-only. */
    disabled?: boolean;
    /** An input can have inverted colors. */
    inverted?: boolean;
    /** A textarea can be resized. */
    resize?: 'none' | 'both' | 'horizontal' | 'vertical';
    /** A textarea can take the width of its container. */
    fluid?: boolean;
    /** A text area can have error state. */
    error?: boolean;
}
export declare type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled' | 'error'>>;
export declare const textAreaClassName = "ui-textarea";
/**
 * A TextArea is a multi-line plan-text editing control.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.
 * When using maxlength attribute, provide the information about max length in label for screen reader.
 * @accessibilityIssues
 * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)
 * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)
 */
export declare const TextArea: ComponentWithAs<'textarea', TextAreaProps> & FluentComponentStaticProps<TextAreaProps>;
