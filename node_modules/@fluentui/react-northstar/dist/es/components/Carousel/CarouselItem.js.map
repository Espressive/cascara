{"version":3,"sources":["components/Carousel/CarouselItem.tsx"],"names":["React","PropTypes","carouselItemBehavior","commonPropTypes","childrenExist","createShorthandFactory","screenReaderContainerStyles","useAccessibility","useTelemetry","useFluentContext","getElementType","useUnhandledProps","useStyles","carouselItemClassName","carouselItemSlotClassNames","itemPositionText","CarouselItem","props","context","displayName","telemetry","setStart","setEnd","unhandledProps","handledProps","accessibility","navigation","active","children","content","className","design","styles","variables","ElementType","getA11yProps","debugName","actionHandlers","arrowKeysNavigationStopPropagation","e","currentTarget","target","stopPropagation","mapPropsToBehavior","mapPropsToInlineStyles","rtl","classes","element","root","propTypes","createCommon","bool","string","defaultProps","Object","keys","create","Component","mappedProp"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,SAASC,oBAAT,QAA+E,yBAA/E;AAEA,SACEC,eADF,EAGEC,aAHF,EAIEC,sBAJF,QAOO,aAPP;AASA,SAASC,2BAAT,QAA4C,sDAA5C;AAEA,SAEEC,gBAFF,EAGEC,YAHF,EAIEC,gBAJF,EAKEC,cALF,EAMEC,iBANF,EAOEC,SAPF,QAQO,0BARP;AAmCA,OAAO,IAAMC,qBAAqB,GAAG,mBAA9B;AACP,OAAO,IAAMC,0BAAsD,GAAG;AACpEC,EAAAA,gBAAgB,EAAKF,qBAAL;AADoD,CAA/D;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,YAAN;AAAA,MAAMA,YACkC,GAAG,SADrCA,YACqC,CAAAC,KAAK,EAAI;AACzD,QAAMC,OAAO,GAAGT,gBAAgB,EAAhC;;AADyD,wBAE5BD,YAAY,CAACQ,YAAY,CAACG,WAAd,EAA2BD,OAAO,CAACE,SAAnC,CAFgB;AAAA,QAEjDC,QAFiD,iBAEjDA,QAFiD;AAAA,QAEvCC,MAFuC,iBAEvCA,MAFuC;;AAGzDD,IAAAA,QAAQ;AACR,QAAME,cAAc,GAAGZ,iBAAiB,CAACK,YAAY,CAACQ,YAAd,EAA4BP,KAA5B,CAAxC;AAJyD,QAMvDQ,aANuD,GAgBrDR,KAhBqD,CAMvDQ,aANuD;AAAA,QAOvDC,UAPuD,GAgBrDT,KAhBqD,CAOvDS,UAPuD;AAAA,QAQvDC,MARuD,GAgBrDV,KAhBqD,CAQvDU,MARuD;AAAA,QASvDC,QATuD,GAgBrDX,KAhBqD,CASvDW,QATuD;AAAA,QAUvDb,gBAVuD,GAgBrDE,KAhBqD,CAUvDF,gBAVuD;AAAA,QAWvDc,OAXuD,GAgBrDZ,KAhBqD,CAWvDY,OAXuD;AAAA,QAYvDC,SAZuD,GAgBrDb,KAhBqD,CAYvDa,SAZuD;AAAA,QAavDC,MAbuD,GAgBrDd,KAhBqD,CAavDc,MAbuD;AAAA,QAcvDC,MAduD,GAgBrDf,KAhBqD,CAcvDe,MAduD;AAAA,QAevDC,SAfuD,GAgBrDhB,KAhBqD,CAevDgB,SAfuD;AAiBzD,QAAMC,WAAW,GAAGxB,cAAc,CAACO,KAAD,CAAlC;AACA,QAAMkB,YAAY,GAAG5B,gBAAgB,CAA4BkB,aAA5B,EAA2C;AAC9EW,MAAAA,SAAS,EAAEpB,YAAY,CAACG,WADsD;AAE9EkB,MAAAA,cAAc,EAAE;AACdC,QAAAA,kCAAkC,EAAE,4CAAAC,CAAC,EAAI;AACvC;AACA,cAAIA,CAAC,CAACC,aAAF,KAAoBD,CAAC,CAACE,MAA1B,EAAkC;AAChCF,YAAAA,CAAC,CAACG,eAAF;AACD;AACF;AANa,OAF8D;AAU9EC,MAAAA,kBAAkB,EAAE;AAAA,eAAO;AACzBjB,UAAAA,UAAU,EAAVA,UADyB;AAEzBC,UAAAA,MAAM,EAANA;AAFyB,SAAP;AAAA;AAV0D,KAA3C,CAArC;;AAlByD,qBAkCrCf,SAAS,CAA0BI,YAAY,CAACG,WAAvC,EAAoD;AAC/EW,MAAAA,SAAS,EAAEjB,qBADoE;AAE/E+B,MAAAA,sBAAsB,EAAE;AAAA,eAAO;AAC7Bd,UAAAA,SAAS,EAATA,SAD6B;AAE7BC,UAAAA,MAAM,EAANA,MAF6B;AAG7BC,UAAAA,MAAM,EAANA,MAH6B;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAAA,OAFuD;AAQ/EY,MAAAA,GAAG,EAAE3B,OAAO,CAAC2B;AARkE,KAApD,CAlC4B;AAAA,QAkCjDC,OAlCiD,cAkCjDA,OAlCiD;;AA6CzD,QAAMC,OAAO,gBACX,oBAAC,WAAD,EACMZ,YAAY,CAAC,MAAD;AACdL,MAAAA,SAAS,EAAEgB,OAAO,CAACE;AADL,OAEXzB,cAFW,EADlB,EAMGnB,aAAa,CAACwB,QAAD,CAAb,GAA0BA,QAA1B,GAAqCC,OANxC,eAOE;AAAK,MAAA,SAAS,EAAEf,0BAA0B,CAACC,gBAA3C;AAA6D,MAAA,KAAK,EAAET;AAApE,OACGS,gBADH,CAPF,CADF;AAcAO,IAAAA,MAAM;AAEN,WAAOyB,OAAP;AACD,GA/DM;;AAiEP/B,EAAAA,YAAY,CAACG,WAAb,GAA2B,cAA3B;AAEAH,EAAAA,YAAY,CAACiC,SAAb,qBACK9C,eAAe,CAAC+C,YAAhB,EADL;AAEEvB,IAAAA,MAAM,EAAE1B,SAAS,CAACkD,IAFpB;AAGEzB,IAAAA,UAAU,EAAEzB,SAAS,CAACkD,IAHxB;AAIEpC,IAAAA,gBAAgB,EAAEd,SAAS,CAACmD;AAJ9B;AAOApC,EAAAA,YAAY,CAACqC,YAAb,GAA4B;AAC1B5B,IAAAA,aAAa,EAAEvB;AADW,GAA5B;AAIAc,EAAAA,YAAY,CAACQ,YAAb,GAA4B8B,MAAM,CAACC,IAAP,CAAYvC,YAAY,CAACiC,SAAzB,CAA5B;AAEAjC,EAAAA,YAAY,CAACwC,MAAb,GAAsBnD,sBAAsB,CAAC;AAAEoD,IAAAA,SAAS,EAAEzC,YAAb;AAA2B0C,IAAAA,UAAU,EAAE;AAAvC,GAAD,CAA5C;AAhFO,SAAM1C,YAAN;AAAA","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior, CarouselItemBehaviorProps, Accessibility } from '@fluentui/accessibility';\n\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  useAccessibility,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface CarouselItemSlotClassNames {\n  itemPositionText: string;\n}\n\nexport interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CarouselItemBehaviorProps>;\n\n  /** Whether or not the item is in view or not. */\n  active?: boolean;\n\n  /**\n   * Text to be added in the DOM that will specify item position. To be picked\n   * up by screen readers.\n   */\n  itemPositionText?: string;\n\n  /** Whether or not navigation exists in carousel. */\n  navigation?: boolean;\n}\n\nexport type CarouselItemStylesProps = never;\n\nexport const carouselItemClassName = 'ui-carousel__item';\nexport const carouselItemSlotClassNames: CarouselItemSlotClassNames = {\n  itemPositionText: `${carouselItemClassName}__itemPositionText`,\n};\n\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\nexport const CarouselItem: ComponentWithAs<'div', CarouselItemProps> &\n  FluentComponentStaticProps<CarouselItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CarouselItem.displayName, context.telemetry);\n  setStart();\n  const unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);\n  const {\n    accessibility,\n    navigation,\n    active,\n    children,\n    itemPositionText,\n    content,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const getA11yProps = useAccessibility<CarouselItemBehaviorProps>(accessibility, {\n    debugName: CarouselItem.displayName,\n    actionHandlers: {\n      arrowKeysNavigationStopPropagation: e => {\n        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n        if (e.currentTarget !== e.target) {\n          e.stopPropagation();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      navigation,\n      active,\n    }),\n  });\n\n  const { classes } = useStyles<CarouselItemStylesProps>(CarouselItem.displayName, {\n    className: carouselItemClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      <div className={carouselItemSlotClassNames.itemPositionText} style={screenReaderContainerStyles}>\n        {itemPositionText}\n      </div>\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nCarouselItem.displayName = 'CarouselItem';\n\nCarouselItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  navigation: PropTypes.bool,\n  itemPositionText: PropTypes.string,\n};\n\nCarouselItem.defaultProps = {\n  accessibility: carouselItemBehavior,\n};\n\nCarouselItem.handledProps = Object.keys(CarouselItem.propTypes) as any;\n\nCarouselItem.create = createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });\n"],"file":"CarouselItem.js"}