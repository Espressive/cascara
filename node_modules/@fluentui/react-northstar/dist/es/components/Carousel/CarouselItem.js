import * as React from 'react';
import * as PropTypes from 'prop-types';
import { carouselItemBehavior } from '@fluentui/accessibility';
import { commonPropTypes, childrenExist, createShorthandFactory } from '../../utils';
import { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';
import { useAccessibility, useTelemetry, useFluentContext, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';
export var carouselItemClassName = 'ui-carousel__item';
export var carouselItemSlotClassNames = {
  itemPositionText: carouselItemClassName + "__itemPositionText"
};
/**
 * A Carousel displays data organised as a gallery.
 *
 * @accessibility
 * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.
 */

export var CarouselItem = /*#__PURE__*/function () {
  var CarouselItem = function CarouselItem(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(CarouselItem.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);
    var accessibility = props.accessibility,
        navigation = props.navigation,
        active = props.active,
        children = props.children,
        itemPositionText = props.itemPositionText,
        content = props.content,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var ElementType = getElementType(props);
    var getA11yProps = useAccessibility(accessibility, {
      debugName: CarouselItem.displayName,
      actionHandlers: {
        arrowKeysNavigationStopPropagation: function arrowKeysNavigationStopPropagation(e) {
          // let event propagate, when it was invoke on the element where arrow keys should rotate carousel
          if (e.currentTarget !== e.target) {
            e.stopPropagation();
          }
        }
      },
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          navigation: navigation,
          active: active
        };
      }
    });

    var _useStyles = useStyles(CarouselItem.displayName, {
      className: carouselItemClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, unhandledProps)), childrenExist(children) ? children : content, /*#__PURE__*/React.createElement("div", {
      className: carouselItemSlotClassNames.itemPositionText,
      style: screenReaderContainerStyles
    }, itemPositionText));
    setEnd();
    return element;
  };

  CarouselItem.displayName = 'CarouselItem';
  CarouselItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    active: PropTypes.bool,
    navigation: PropTypes.bool,
    itemPositionText: PropTypes.string
  });
  CarouselItem.defaultProps = {
    accessibility: carouselItemBehavior
  };
  CarouselItem.handledProps = Object.keys(CarouselItem.propTypes);
  CarouselItem.create = createShorthandFactory({
    Component: CarouselItem,
    mappedProp: 'content'
  });
  return CarouselItem;
}();
//# sourceMappingURL=CarouselItem.js.map
