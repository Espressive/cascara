import _extends from "@babel/runtime/helpers/esm/extends";
import _invoke from "lodash/invoke";
import { buttonBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { getElementType, useFluentContext, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import { Box } from '../Box/Box';
export var carouselPaddleClassName = 'ui-carousel__paddle';
export var carouselPaddleSlotClassNames = {
  content: carouselPaddleClassName + "__content"
};
/**
 * A CarouselPaddle allows users to customize the paddles inside the Carousel component.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */

export var CarouselPaddle = /*#__PURE__*/function () {
  var CarouselPaddle = function CarouselPaddle(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(CarouselPaddle.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        as = props.as,
        children = props.children,
        className = props.className,
        content = props.content,
        disabled = props.disabled,
        design = props.design,
        hidden = props.hidden,
        next = props.next,
        previous = props.previous,
        styles = props.styles,
        variables = props.variables;
    var hasChildren = childrenExist(children);
    var getA11Props = useAccessibility(accessibility, {
      debugName: CarouselPaddle.displayName,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          as: String(as),
          disabled: disabled
        };
      },
      actionHandlers: {
        performClick: function performClick(event) {
          event.preventDefault();
          handleClick(event);
        }
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(CarouselPaddle.displayName, {
      className: carouselPaddleClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          disabled: disabled,
          hidden: hidden,
          next: next,
          previous: previous
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes,
        resolvedStyles = _useStyles.styles;

    var unhandledProps = useUnhandledProps(CarouselPaddle.handledProps, props);
    var ElementType = getElementType(props);

    var handleClick = function handleClick(e) {
      if (disabled) {
        e.preventDefault();
        return;
      }

      _invoke(props, 'onClick', e, props);
    };

    var result = /*#__PURE__*/React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
      forElements: [children]
    }), getA11Props('root', Object.assign({
      onClick: handleClick,
      disabled: disabled,
      className: classes.root
    }, unhandledProps))), hasChildren ? children : Box.create(content, {
      defaultProps: function defaultProps() {
        return getA11Props('content', {
          as: 'span',
          className: carouselPaddleSlotClassNames.content,
          styles: resolvedStyles.content
        });
      }
    }));
    setEnd();
    return result;
  };

  CarouselPaddle.defaultProps = {
    as: 'button',
    accessibility: buttonBehavior,
    content: {}
  };
  CarouselPaddle.displayName = 'CarouselPaddle';
  CarouselPaddle.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: 'shorthand'
  }), {
    disabled: PropTypes.bool,
    hidden: PropTypes.bool,
    onClick: PropTypes.func,
    next: customPropTypes.every([customPropTypes.disallow(['previous']), PropTypes.bool]),
    previous: customPropTypes.every([customPropTypes.disallow(['next']), PropTypes.bool])
  });
  CarouselPaddle.handledProps = Object.keys(CarouselPaddle.propTypes);
  CarouselPaddle.create = createShorthandFactory({
    Component: CarouselPaddle,
    mappedProp: 'content'
  });
  return CarouselPaddle;
}();
//# sourceMappingURL=CarouselPaddle.js.map
