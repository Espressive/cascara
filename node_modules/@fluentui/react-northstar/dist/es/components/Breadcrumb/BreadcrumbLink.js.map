{"version":3,"sources":["components/Breadcrumb/BreadcrumbLink.tsx"],"names":["React","compose","useFluentContext","useTelemetry","useAccessibility","useStyles","useUnhandledProps","getElementType","childrenExist","commonPropTypes","useBreadcrumbContext","breadcrumbLinkClassName","BreadcrumbLink","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","children","content","className","design","styles","variables","size","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","classes","unhandledProps","handledProps","ElementType","result","root","defaultProps","as","propTypes","createCommon"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  compose,\n  useFluentContext,\n  useTelemetry,\n  useAccessibility,\n  useStyles,\n  useUnhandledProps,\n  getElementType,\n  childrenExist,\n} from '@fluentui/react-bindings';\nimport { commonPropTypes, UIComponentProps, ContentComponentProps, ChildrenComponentProps } from '../../utils';\n\nimport { Accessibility } from '@fluentui/accessibility';\nimport { useBreadcrumbContext, BreadcrumbSizeValues } from './breadcrumbContext';\n\nexport interface BreadcrumbLinkProps\n  extends UIComponentProps<BreadcrumbLinkProps>,\n    ContentComponentProps,\n    ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n}\n\nexport type BreadcrumbLinkStylesProps = { size: BreadcrumbSizeValues };\n\nexport const breadcrumbLinkClassName = 'ui-breadcrumb__link';\n\n/**\n * An BreadcrumbLink represents a anchor to be used inside the Breadcrumb\n */\nexport const BreadcrumbLink = compose<'a', BreadcrumbLinkProps, BreadcrumbLinkStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n    const { accessibility, children, content, className, design, styles, variables } = props;\n    const { size } = useBreadcrumbContext();\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<BreadcrumbLinkStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToStyles: () => ({\n        size,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const result = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n\n    setEnd();\n\n    return result;\n  },\n  {\n    className: breadcrumbLinkClassName,\n    displayName: 'BreadcrumbLink',\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables'],\n  },\n);\n\nBreadcrumbLink.defaultProps = {\n  as: 'a',\n};\n\nBreadcrumbLink.propTypes = commonPropTypes.createCommon();\n"],"file":"BreadcrumbLink.js"}