import _extends from "@babel/runtime/helpers/esm/extends";
import _invoke from "lodash/invoke";
import _get from "lodash/get";
import _toNumber from "lodash/toNumber";
import { sliderBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStateManager, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';
import { handleRef, Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import { createSliderManager } from '@fluentui/state';
import cx from 'classnames';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { commonPropTypes, partitionHTMLProps, setWhatInputSource, createShorthandFactory } from '../../utils';
import { Box } from '../Box/Box';

var processInputValues = function processInputValues(p) {
  var min = _toNumber(p.min);

  var max = _toNumber(p.max);

  var value = _toNumber(p.value);

  if (isNaN(min)) min = Number(Slider.defaultProps.min);
  if (isNaN(max)) max = Number(Slider.defaultProps.max);
  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));
  var valueAsPercentage = 100 * (value - min) / (max - min) + "%";
  return {
    min: min,
    max: max,
    value: value,
    valueAsPercentage: valueAsPercentage
  };
};

export var sliderClassName = 'ui-slider';
export var sliderSlotClassNames = {
  input: sliderClassName + "__input",
  inputWrapper: sliderClassName + "__input-wrapper",
  rail: sliderClassName + "__rail",
  thumb: sliderClassName + "__thumb",
  track: sliderClassName + "__track"
};
/**
 * A Slider represents an input that allows user to choose a value from within a specific range.
 *
 * @accessibility
 * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.
 * @accessibilityIssues
 * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)
 * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)
 */

export var Slider = /*#__PURE__*/function () {
  var Slider = function Slider(props) {
    var _ref;

    var context = useFluentContext();

    var _useTelemetry = useTelemetry(Slider.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        min = props.min,
        max = props.max,
        value = props.value,
        getA11yValueMessageOnChange = props.getA11yValueMessageOnChange,
        defaultValue = props.defaultValue,
        input = props.input,
        userInputRef = props.inputRef,
        step = props.step,
        className = props.className,
        styles = props.styles,
        variables = props.variables,
        design = props.design,
        fluid = props.fluid,
        vertical = props.vertical,
        disabled = props.disabled;
    var inputRef = React.useRef();

    var _useStateManager = useStateManager(createSliderManager, {
      mapPropsToInitialState: function mapPropsToInitialState() {
        return {
          value: defaultValue
        };
      },
      mapPropsToState: function mapPropsToState() {
        return {
          value: value
        };
      }
    }),
        state = _useStateManager.state,
        actions = _useStateManager.actions;

    var _processInputValues = processInputValues({
      min: min,
      max: max,
      value: state.value || ''
    }),
        numericMin = _processInputValues.min,
        numericMax = _processInputValues.max,
        numericValue = _processInputValues.value,
        valueAsPercentage = _processInputValues.valueAsPercentage;

    var getA11Props = useAccessibility(accessibility, {
      debugName: Slider.displayName,
      rtl: context.rtl,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          disabled: disabled,
          getA11yValueMessageOnChange: getA11yValueMessageOnChange,
          max: numericMax,
          min: numericMax,
          value: numericValue,
          vertical: vertical
        };
      }
    });

    var _useStyles = useStyles(Slider.displayName, {
      className: sliderClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          fluid: fluid,
          vertical: vertical,
          disabled: disabled
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          styles: styles,
          variables: variables,
          design: design
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes,
        resolvedStyles = _useStyles.styles;

    var handleInputOverrides = function handleInputOverrides() {
      return {
        onChange: function onChange(e) {
          var value = _get(e, 'target.value');

          _invoke(props, 'onChange', e, Object.assign({}, props, {
            value: value
          }));

          actions.change(value);
        },
        onMouseDown: function onMouseDown(e) {
          setWhatInputSource(context.target, 'mouse');

          _invoke(props, 'onMouseDown', e, props);
        }
      };
    };

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(Slider.handledProps, props);

    var _partitionHTMLProps = partitionHTMLProps(unhandledProps),
        htmlInputProps = _partitionHTMLProps[0],
        restProps = _partitionHTMLProps[1];

    var type = 'range'; // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes

    var inputElement = Box.create(input || type, {
      defaultProps: function defaultProps() {
        return getA11Props('input', Object.assign({}, htmlInputProps, {
          as: 'input',
          className: sliderSlotClassNames.input,
          min: numericMin,
          max: numericMax,
          step: step,
          styles: resolvedStyles.input,
          type: type,
          value: numericValue
        }));
      },
      overrideProps: handleInputOverrides
    });
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, restProps)), /*#__PURE__*/React.createElement("div", getA11Props('inputWrapper', {
      className: cx(sliderSlotClassNames.inputWrapper, classes.inputWrapper)
    }), /*#__PURE__*/React.createElement("span", getA11Props('rail', {
      className: cx(sliderSlotClassNames.rail, classes.rail)
    })), /*#__PURE__*/React.createElement("span", _extends({}, getA11Props('track', {
      className: cx(sliderSlotClassNames.track, classes.track)
    }), {
      style: {
        width: valueAsPercentage
      }
    })), /*#__PURE__*/React.createElement(Ref, {
      innerRef: function innerRef(inputElement) {
        handleRef(inputRef, inputElement);
        handleRef(userInputRef, inputElement);
      }
    }, inputElement), /*#__PURE__*/React.createElement("span", _extends({}, getA11Props('thumb', {
      className: cx(sliderSlotClassNames.thumb, classes.thumb)
    }), {
      style: (_ref = {}, _ref[context.rtl ? 'right' : 'left'] = valueAsPercentage, _ref)
    }))));
    setEnd();
    return element;
  };

  Slider.displayName = 'Slider';
  Slider.defaultProps = {
    accessibility: sliderBehavior,
    getA11yValueMessageOnChange: function getA11yValueMessageOnChange(_ref2) {
      var value = _ref2.value;
      return String(value);
    },
    max: 100,
    min: 0,
    step: 1
  };
  Slider.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    fluid: PropTypes.bool,
    getA11yValueMessageOnChange: PropTypes.func,
    input: customPropTypes.itemShorthand,
    inputRef: customPropTypes.ref,
    max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    onChange: PropTypes.func,
    step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    vertical: PropTypes.bool
  });
  Slider.handledProps = Object.keys(Slider.propTypes);
  Slider.create = createShorthandFactory({
    Component: Slider,
    mappedProp: 'value'
  });
  return Slider;
}();
//# sourceMappingURL=Slider.js.map
