import * as React from 'react';
import { useFluentContext, useTelemetry, useStyles, useAccessibility, useUnhandledProps, getElementType, childrenExist, useContextSelectors } from '@fluentui/react-bindings';
import * as PropTypes from 'prop-types';
import { commonPropTypes, rtlTextContainer } from '../../utils';
import { MenuContext } from './menuContext';
export var menuItemContentClassName = 'ui-menu__itemcontent';
/**
 * A MenuItemContent allows a user to have a dedicated component that can be targeted from the theme.
 */

export var MenuItemContent = /*#__PURE__*/function () {
  var MenuItemContent = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(MenuItemContent.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var parentProps = useContextSelectors(MenuContext, {
      vertical: function vertical(v) {
        return v.vertical;
      }
    }); // TODO: we should improve typings for the useContextSelectors

    var className = props.className,
        children = props.children,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        content = props.content,
        hasMenu = props.hasMenu,
        hasIcon = props.hasIcon,
        vertical = props.vertical,
        inSubmenu = props.inSubmenu;

    var _useStyles = useStyles(MenuItemContent.displayName, {
      className: menuItemContentClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          hasMenu: hasMenu,
          hasIcon: hasIcon,
          vertical: vertical || parentProps.vertical,
          inSubmenu: inSubmenu
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var getA11Props = useAccessibility(props.accessibility, {
      debugName: MenuItemContent.displayName,
      rtl: context.rtl
    });
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(MenuItemContent.handledProps, props);
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children, content]
    }), {
      ref: ref
    }, unhandledProps)), childrenExist(children) ? children : content);
    setEnd();
    return element;
  });
  MenuItemContent.displayName = 'MenuItemContent';
  MenuItemContent.defaultProps = {
    as: 'span'
  };
  MenuItemContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    hasIcon: PropTypes.bool,
    hasMenu: PropTypes.bool,
    vertical: PropTypes.bool,
    inSubmenu: PropTypes.bool
  });
  MenuItemContent.shorthandConfig = {
    mappedProp: 'content'
  };
  MenuItemContent.handledProps = Object.keys(MenuItemContent.propTypes);
  return MenuItemContent;
}();
//# sourceMappingURL=MenuItemContent.js.map
