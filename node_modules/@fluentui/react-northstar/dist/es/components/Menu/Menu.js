import _map from "lodash/map";
import _filter from "lodash/filter";
import _invoke from "lodash/invoke";
import _values from "lodash/values";
import { menuBehavior } from '@fluentui/accessibility';
import { getElementType, mergeVariablesOverrides, useAccessibility, useFluentContext, useAutoControlled, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthand, createShorthandFactory, commonPropTypes, getKindProp, rtlTextContainer } from '../../utils';
import { MenuItem } from './MenuItem';
import { MenuDivider } from './MenuDivider';
import { MenuItemIcon } from './MenuItemIcon';
import { MenuItemContent } from './MenuItemContent';
import { MenuItemIndicator } from './MenuItemIndicator';
import { MenuItemWrapper } from './MenuItemWrapper';
import { MenuContextProvider } from './menuContext';
import { Ref } from '@fluentui/react-component-ref';
export var menuClassName = 'ui-menu';

function useActualProps(props) {
  var actualProps = React.useRef(props);
  React.useEffect(function () {
    actualProps.current = props;
  });
  return actualProps;
}

function useSlotProps(slotName, slotsProps) {
  var slotProps = slotsProps[slotName];
  return React.useMemo(function () {
    return slotProps;
  }, // `slotProps` has a stable order of keys so an amount of dependencies will not change between renders
  // eslint-disable-next-line react-hooks/exhaustive-deps
  _values(slotProps));
}
/**
 * A Menu is a component that offers a grouped list of choices to the user.
 *
 * @accessibility
 * Implements ARIA [Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu), [Toolbar](https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar) or [Tabs](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) design pattern, depending on the behavior used.
 * @accessibilityIssues
 * [JAWS - navigation instruction for menubar](https://github.com/FreedomScientific/VFO-standards-support/issues/203)
 * [JAWS - navigation instruction for menu with aria-orientation="horizontal"](https://github.com/FreedomScientific/VFO-standards-support/issues/204)
 * [JAWS [VC] doesn't narrate menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/324)
 * [JAWS [app mode] focus moves to second menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/325)
 * [Enter into a tablist JAWS narrates: To switch pages, press Control+PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/337)
 * 51114083 VoiceOver+Web narrate wrong position in menu / total count of menu items, when pseudo element ::after or ::before is used
 */


export var Menu = /*#__PURE__*/function () {
  var Menu = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(Menu.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var iconOnly = props.iconOnly,
        items = props.items,
        pills = props.pills,
        pointing = props.pointing,
        primary = props.primary,
        underlined = props.underlined,
        vertical = props.vertical,
        submenu = props.submenu,
        children = props.children,
        variables = props.variables,
        styles = props.styles,
        fluid = props.fluid,
        className = props.className,
        design = props.design,
        secondary = props.secondary,
        accessibility = props.accessibility;
    var ElementType = getElementType(props);
    var slotProps = {
      divider: {
        inSubmenu: props.submenu,
        pills: props.pills,
        pointing: props.pointing,
        primary: props.primary,
        secondary: props.secondary,
        vertical: props.vertical
      },
      item: {
        iconOnly: props.iconOnly,
        indicator: props.indicator,
        inSubmenu: props.submenu,
        pills: props.pills,
        pointing: props.pointing,
        primary: props.primary,
        secondary: props.secondary,
        vertical: props.vertical,
        underlined: props.underlined
      }
    };
    var itemProps = useSlotProps('item', slotProps);
    var dividerProps = useSlotProps('divider', slotProps);
    var unhandledProps = useUnhandledProps(Menu.handledProps, props);
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: Menu.displayName,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          vertical: vertical
        };
      },
      rtl: context.rtl
    });
    var actualProps = useActualProps(props);

    var _useStyles = useStyles(Menu.displayName, {
      className: menuClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          iconOnly: iconOnly,
          fluid: fluid,
          pointing: pointing,
          pills: pills,
          primary: primary,
          underlined: underlined,
          vertical: vertical,
          secondary: secondary,
          submenu: submenu
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl,
      unstable_props: props
    }),
        classes = _useStyles.classes;

    var _useAutoControlled = useAutoControlled({
      defaultValue: props.defaultActiveIndex,
      value: props.activeIndex,
      initialValue: undefined
    }),
        activeIndex = _useAutoControlled[0],
        setIndex = _useAutoControlled[1];

    var setActiveIndex = React.useCallback(function (e, activeIndex) {
      _invoke(actualProps.current, 'onActiveIndexChange', e, Object.assign({}, actualProps.current, {
        activeIndex: activeIndex
      }));

      setIndex(activeIndex);
    }, [actualProps, setIndex]);
    var handleClick = React.useCallback(function (e, itemProps) {
      var index = itemProps.index;
      setActiveIndex(e, index);

      _invoke(actualProps.current, 'onItemClick', e, itemProps);
    }, [actualProps, setActiveIndex]);
    var handleSelect = React.useCallback(function (e, index) {
      setActiveIndex(e, index);
    }, [setActiveIndex]);

    var handleItemOverrides = function handleItemOverrides(predefinedProps) {
      return {
        onActiveChanged: function onActiveChanged(e, props) {
          var index = props.index,
              active = props.active;

          if (active) {
            setActiveIndex(e, index);
          } else if (activeIndex === index) {
            setActiveIndex(e, null);
          }

          _invoke(predefinedProps, 'onActiveChanged', e, props);
        },
        variables: mergeVariablesOverrides(variables, predefinedProps.variables)
      };
    };

    var handleDividerOverrides = function handleDividerOverrides(predefinedProps) {
      return {
        variables: mergeVariablesOverrides(variables, predefinedProps.variables)
      };
    };

    var renderItems = function renderItems() {
      var itemsCount = _filter(items, function (item) {
        return getKindProp(item, 'item') !== 'divider';
      }).length;

      var itemPosition = 0;
      return _map(items, function (item, index) {
        var kind = getKindProp(item, 'item');

        if (kind === 'divider') {
          return createShorthand(MenuDivider, item, {
            defaultProps: function defaultProps() {
              return getA11yProps('divider', {});
            },
            overrideProps: handleDividerOverrides
          });
        }

        itemPosition++;
        return createShorthand(MenuItem, item, {
          defaultProps: function defaultProps() {
            return getA11yProps('item', {
              index: index,
              itemPosition: itemPosition,
              itemsCount: itemsCount
            });
          },
          overrideProps: handleItemOverrides
        });
      });
    };

    var childBehaviors = accessibility && accessibility(props).childBehaviors;
    var childProps = {
      activeIndex: +activeIndex,
      onItemClick: handleClick,
      onItemSelect: handleSelect,
      vertical: vertical,
      variables: variables,
      slotProps: {
        item: itemProps,
        divider: dividerProps
      },
      behaviors: {
        item: childBehaviors == null ? void 0 : childBehaviors.item,
        divider: childBehaviors == null ? void 0 : childBehaviors.divider
      }
    };
    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), /*#__PURE__*/React.createElement(MenuContextProvider, {
      value: childProps
    }, childrenExist(children) ? children : renderItems())));
    var wrappedElement = ref ? /*#__PURE__*/React.createElement(Ref, {
      innerRef: ref
    }, element) : element;
    setEnd();
    return wrappedElement;
  });
  Menu.displayName = 'Menu';
  Menu.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    defaultActiveIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    fluid: PropTypes.bool,
    iconOnly: PropTypes.bool,
    items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),
    onItemClick: PropTypes.func,
    onActiveIndexChange: PropTypes.func,
    pills: PropTypes.bool,
    pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]),
    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
    underlined: PropTypes.bool,
    vertical: PropTypes.bool,
    submenu: PropTypes.bool,
    indicator: customPropTypes.shorthandAllowingChildren
  });
  Menu.handledProps = Object.keys(Menu.propTypes);
  Menu.defaultProps = {
    as: 'ul',
    accessibility: menuBehavior
  };
  Menu.Item = MenuItem;
  Menu.ItemIcon = MenuItemIcon;
  Menu.ItemContent = MenuItemContent;
  Menu.ItemWrapper = MenuItemWrapper;
  Menu.ItemIndicator = MenuItemIndicator;
  Menu.Divider = MenuDivider;
  Menu.create = createShorthandFactory({
    Component: Menu,
    mappedArrayProp: 'items'
  });
  Menu.shorthandConfig = {
    mappedArrayProp: 'items'
  };
  return Menu;
}();
//# sourceMappingURL=Menu.js.map
