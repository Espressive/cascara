import * as React from 'react';
import { useFluentContext, useTelemetry, useStyles, useAccessibility, getElementType, useUnhandledProps, childrenExist } from '@fluentui/react-bindings';
import * as PropTypes from 'prop-types';
import { commonPropTypes } from '../../utils';
export var menuItemIconClassName = 'ui-menu__itemicon';
/**
 * A MenuItemIcon allows a user to have a dedicated component that can be targeted from the theme.
 */

export var MenuItemIcon = /*#__PURE__*/function () {
  var MenuItemIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(MenuItemIcon.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var className = props.className,
        children = props.children,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        content = props.content,
        hasContent = props.hasContent,
        iconOnly = props.iconOnly;

    var _useStyles = useStyles(MenuItemIcon.displayName, {
      className: menuItemIconClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          hasContent: hasContent,
          iconOnly: iconOnly
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var getA11Props = useAccessibility(props.accessibility, {
      debugName: MenuItemIcon.displayName,
      rtl: context.rtl
    });
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(MenuItemIcon.handledProps, props);
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root,
      ref: ref
    }, unhandledProps)), childrenExist(children) ? children : content);
    setEnd();
    return element;
  });
  MenuItemIcon.displayName = 'MenuItemIcon';
  MenuItemIcon.defaultProps = {
    as: 'span'
  };
  MenuItemIcon.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    hasContent: PropTypes.bool,
    iconOnly: PropTypes.bool
  });
  MenuItemIcon.handledProps = Object.keys(MenuItemIcon.propTypes);
  MenuItemIcon.shorthandConfig = {
    mappedProp: 'content'
  };
  return MenuItemIcon;
}();
//# sourceMappingURL=MenuItemIcon.js.map
