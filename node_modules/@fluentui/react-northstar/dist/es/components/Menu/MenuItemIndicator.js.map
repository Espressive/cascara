{"version":3,"sources":["components/Menu/MenuItemIndicator.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","getElementType","useUnhandledProps","childrenExist","indicatorBehavior","PropTypes","commonPropTypes","menuItemIndicatorClassName","MenuItemIndicator","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","content","iconOnly","vertical","inSubmenu","active","primary","underlined","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","defaultProps","as","propTypes","createCommon","bool","Object","keys","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ForwardRefWithAs,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  childrenExist,\n} from '@fluentui/react-bindings';\nimport { Accessibility, indicatorBehavior, IndicatorBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport { ChildrenComponentProps, commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface MenuItemIndicatorProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<IndicatorBehaviorProps>;\n\n  /** Indicates if the parent menu item may have just icons. */\n  iconOnly?: boolean;\n\n  /** Indicates whether the parent menu item is inside vertical menu. */\n  vertical?: boolean;\n\n  /** Indicates whether the parent menu item is part of submenu. */\n  inSubmenu?: boolean;\n\n  /** Indicates whether the parent menu item is active. */\n  active?: boolean;\n\n  /** Indicates whether the parent menu item is primary. */\n  primary?: boolean;\n\n  /** Indicates whether the parent menu item is underlined. */\n  underlined?: boolean;\n}\n\nexport type MenuItemIndicatorStylesProps = Pick<\n  MenuItemIndicatorProps,\n  'iconOnly' | 'vertical' | 'inSubmenu' | 'active' | 'primary' | 'underlined'\n>;\n\nexport const menuItemIndicatorClassName = 'ui-menu__itemindicator';\n\n/**\n * A MenuItemIndicator allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemIndicator = (React.forwardRef<HTMLSpanElement, MenuItemIndicatorProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(MenuItemIndicator.displayName, context.telemetry);\n  setStart();\n\n  const {\n    className,\n    children,\n    design,\n    styles,\n    variables,\n    content,\n    iconOnly,\n    vertical,\n    inSubmenu,\n    active,\n    primary,\n    underlined,\n  } = props;\n\n  const { classes } = useStyles<MenuItemIndicatorStylesProps>(MenuItemIndicator.displayName, {\n    className: menuItemIndicatorClassName,\n    mapPropsToStyles: () => ({\n      iconOnly,\n      vertical,\n      inSubmenu,\n      active,\n      primary,\n      underlined,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: MenuItemIndicator.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(MenuItemIndicator.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, MenuItemIndicatorProps> &\n  FluentComponentStaticProps<MenuItemIndicatorProps>;\n\nMenuItemIndicator.displayName = 'MenuItemIndicator';\n\nMenuItemIndicator.defaultProps = {\n  as: 'span',\n  accessibility: indicatorBehavior,\n};\n\nMenuItemIndicator.propTypes = {\n  ...commonPropTypes.createCommon(),\n  iconOnly: PropTypes.bool,\n  vertical: PropTypes.bool,\n  inSubmenu: PropTypes.bool,\n  active: PropTypes.bool,\n  primary: PropTypes.bool,\n  underlined: PropTypes.bool,\n};\n\nMenuItemIndicator.handledProps = Object.keys(MenuItemIndicator.propTypes) as any;\n\nMenuItemIndicator.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"MenuItemIndicator.js"}