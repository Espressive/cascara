import _has from "lodash/has";
import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { Image } from '../Image/Image';
import { Box } from '../Box/Box';
export var labelClassName = 'ui-label';
/**
 * A Label allows user to classify content.
 */

export var Label = /*#__PURE__*/function () {
  var Label = function Label(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(Label.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        children = props.children,
        className = props.className,
        circular = props.circular,
        color = props.color,
        content = props.content,
        icon = props.icon,
        iconPosition = props.iconPosition,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        image = props.image,
        imagePosition = props.imagePosition;
    var getA11Props = useAccessibility(accessibility, {
      debugName: Label.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(Label.displayName, {
      className: labelClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          hasActionableIcon: _has(icon, 'onClick'),
          hasImage: !!image,
          hasIcon: !!icon,
          circular: circular,
          color: color,
          imagePosition: imagePosition,
          iconPosition: iconPosition
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes,
        resolvedStyles = _useStyles.styles;

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(Label.handledProps, props);

    if (childrenExist(children)) {
      var _element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
        className: classes.root
      }, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps)), children);

      setEnd();
      return _element;
    }

    var imageElement = Image.create(image, {
      defaultProps: function defaultProps() {
        return {
          styles: resolvedStyles.image
        };
      }
    });
    var iconElement = Box.create(icon, {
      defaultProps: function defaultProps() {
        return {
          styles: resolvedStyles.icon
        };
      }
    });
    var contentElement = Box.create(content, {
      defaultProps: function defaultProps() {
        return {
          styles: resolvedStyles.content
        };
      }
    });
    var startImage = imagePosition === 'start' && imageElement;
    var startIcon = iconPosition === 'start' && iconElement;
    var endIcon = iconPosition === 'end' && iconElement;
    var endImage = imagePosition === 'end' && imageElement;
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, unhandledProps)), startImage, startIcon, contentElement, endIcon, endImage);
    setEnd();
    return element;
  };

  Label.displayName = 'Label';
  Label.propTypes = Object.assign({}, commonPropTypes.createCommon({
    color: true,
    content: 'shorthand'
  }), {
    circular: PropTypes.bool,
    icon: customPropTypes.shorthandAllowingChildren,
    iconPosition: PropTypes.oneOf(['start', 'end']),
    image: customPropTypes.itemShorthandWithoutJSX,
    imagePosition: PropTypes.oneOf(['start', 'end']),
    fluid: PropTypes.bool
  });
  Label.handledProps = Object.keys(Label.propTypes);
  Label.defaultProps = {
    as: 'span',
    imagePosition: 'start',
    iconPosition: 'end'
  };
  Label.create = createShorthandFactory({
    Component: Label,
    mappedProp: 'content'
  });
  return Label;
}();
//# sourceMappingURL=Label.js.map
