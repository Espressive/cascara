{"version":3,"sources":["components/Form/utils/formFieldBase.tsx"],"names":["formFieldBehavior","customPropTypes","PropTypes","React","commonPropTypes","getOrGenerateIdFromShorthand","createShorthand","Box","getElementType","useUnhandledProps","useTelemetry","useAccessibility","useFluentContext","compose","useStyles","FormLabel","FormMessage","FormFieldBaseProvider","formFieldBaseClassName","_FormFieldBase","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","message","inline","errorMessage","control","label","className","design","styles","variables","slotProps","resolveSlotProps","ElementType","unhandledProps","handledProps","messageId","useRef","current","labelId","mapPropsToInlineStyles","rtl","unstable_props","classes","getA11yProps","accessibility","debugName","mapPropsToBehavior","hasErrorMessage","childProps","useMemo","element","root","slots","defaultProps","id","error","shorthandConfig","mappedProp","propTypes","createCommon","children","bool","itemShorthand"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponentProps, commonPropTypes, getOrGenerateIdFromShorthand, createShorthand } from '../../../utils';\nimport { ShorthandValue } from '../../../types';\nimport { Box, BoxProps } from '../../Box/Box';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useAccessibility,\n  useFluentContext,\n  compose,\n  useStyles,\n} from '@fluentui/react-bindings';\nimport { FormLabel, FormLabelProps } from '../FormLabel';\nimport { FormMessage, FormMessageProps } from '../FormMessage';\nimport { FormFieldBaseValue, FormFieldBaseProvider } from './formFieldBaseContext';\n\nexport interface FormFieldBaseProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<FormLabelProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<FormMessageProps>;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<FormMessageProps>;\n}\n\nexport const formFieldBaseClassName = 'ui-form__field__base';\nexport type FormFieldBaseStylesProps = never;\n\n/**\n * A FormFiedBase represents a Form element containing a label and an input.\n */\nexport const _FormFieldBase = compose<'div', FormFieldBaseProps, {}, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { message, inline, errorMessage, control, label, className, design, styles, variables } = props;\n\n    const slotProps = composeOptions.resolveSlotProps<FormFieldBaseProps>(props);\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const messageId = React.useRef<string>();\n    messageId.current = getOrGenerateIdFromShorthand('error-message-', errorMessage || message, messageId.current);\n    const labelId = React.useRef<string>();\n    labelId.current = getOrGenerateIdFromShorthand('form-label-', label, labelId.current);\n\n    const { classes } = useStyles<FormFieldBaseStylesProps>(_FormFieldBase.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: () => ({\n        hasErrorMessage: !!errorMessage,\n        messageId: messageId.current,\n        labelId: labelId.current,\n      }),\n      rtl: context.rtl,\n    });\n\n    const childProps: FormFieldBaseValue = React.useMemo(\n      () => ({\n        labelId: labelId.current,\n      }),\n      // TODO: create hooks for id to avoid disbaling esling for accessing the value of refs\n      // eslint-disable-next-line\n      [labelId.current],\n    );\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n        })}\n      >\n        {createShorthand(composeOptions.slots.label, label, {\n          defaultProps: () =>\n            getA11yProps('label', {\n              id: labelId.current,\n              inline,\n              ...slotProps.label,\n            }),\n        })}\n        {/**\n         * When there's a message for the input the labelId and messageId should be consistent in the\n         * aria-labelledby attribute (aria-labelledby=\"labelID messageID\") therefore we need to pass it down\n         * for components like input that are generating its own label internally\n         */}\n        <FormFieldBaseProvider value={childProps}>\n          {createShorthand(composeOptions.slots.control, control || {}, {\n            defaultProps: () =>\n              getA11yProps('control', {\n                error: !!errorMessage || null,\n                ref,\n                ...unhandledProps,\n                ...slotProps.control,\n              }),\n          })}\n        </FormFieldBaseProvider>\n        {createShorthand(composeOptions.slots.message, errorMessage || message, {\n          defaultProps: () =>\n            getA11yProps('message', {\n              id: messageId.current,\n              ...slotProps.message,\n            }),\n        })}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: formFieldBaseClassName,\n    displayName: 'FormFieldBase',\n    slots: {\n      label: FormLabel,\n      message: FormMessage,\n      control: Box,\n    },\n    handledProps: [\n      'as',\n      'accessibility',\n      'className',\n      'variables',\n      'design',\n      'styles',\n      'inline',\n      'errorMessage',\n      'message',\n    ],\n    shorthandConfig: {\n      mappedProp: 'control',\n    },\n  },\n);\n\n_FormFieldBase.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  inline: PropTypes.bool,\n  message: customPropTypes.itemShorthand,\n  errorMessage: customPropTypes.itemShorthand,\n};\n\n_FormFieldBase.defaultProps = {\n  accessibility: formFieldBehavior,\n};\n"],"file":"formFieldBase.js"}