{"version":3,"sources":["components/Accordion/AccordionContent.tsx"],"names":["accordionContentBehavior","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","useTelemetry","useFluentContext","getElementType","useAccessibility","useUnhandledProps","useStyles","accordionContentClassName","AccordionContent","props","context","displayName","telemetry","setStart","setEnd","children","content","accordionTitleId","active","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","mapPropsToBehavior","rtl","handleClick","e","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","onClick","getAttributes","forElements","shorthandConfig","mappedProp","propTypes","createCommon","string","bool","func","defaultProps","as","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { accordionContentBehavior, Accessibility, AccordionContentBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\n\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useAccessibility,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionContentBehaviorProps>;\n\n  /** Id of the title it belongs to. */\n  accordionTitleId?: string;\n\n  /** Whether or not the content is visible. */\n  active?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionContentProps>;\n}\n\nexport const accordionContentClassName = 'ui-accordion__content';\n\nexport type AccordionContentStylesProps = Required<Pick<AccordionContentProps, 'active'>>;\n\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\nexport const AccordionContent: ComponentWithAs<'dd', AccordionContentProps> &\n  FluentComponentStaticProps<AccordionContentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AccordionContent.displayName, context.telemetry);\n\n  setStart();\n  const { children, content, accordionTitleId, active, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: AccordionContent.displayName,\n    mapPropsToBehavior: () => ({\n      accordionTitleId,\n    }),\n    rtl: context.rtl,\n  });\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const { classes } = useStyles<AccordionContentStylesProps>(AccordionContent.displayName, {\n    className: accordionContentClassName,\n    mapPropsToStyles: () => ({\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAccordionContent.displayName = 'AccordionContent';\n\nAccordionContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  accordionTitleId: PropTypes.string,\n  active: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nAccordionContent.defaultProps = {\n  accessibility: accordionContentBehavior,\n  as: 'dd',\n};\n\nAccordionContent.handledProps = Object.keys(AccordionContent.propTypes) as any;\n\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content',\n});\n"],"file":"AccordionContent.js"}