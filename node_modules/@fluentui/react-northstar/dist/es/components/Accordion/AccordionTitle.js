import _extends from "@babel/runtime/helpers/esm/extends";
import _noop from "lodash/noop";
import _invoke from "lodash/invoke";
import { accordionTitleBehavior } from '@fluentui/accessibility';
import { Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { Box } from '../Box/Box';
import { getElementType, useTelemetry, useFluentContext, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';
export var accordionTitleClassName = 'ui-accordion__title';
export var accordionTitleSlotClassNames = {
  contentWrapper: accordionTitleClassName + "__content-wrapper"
};

/**
 * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.
 */
export var AccordionTitle = /*#__PURE__*/function () {
  var AccordionTitle = function AccordionTitle(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(AccordionTitle.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var contentRef = props.contentRef,
        children = props.children,
        content = props.content,
        indicator = props.indicator,
        contentWrapper = props.contentWrapper,
        disabled = props.disabled,
        accessibility = props.accessibility,
        canBeCollapsed = props.canBeCollapsed,
        as = props.as,
        active = props.active,
        accordionContentId = props.accordionContentId,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);
    var getA11yProps = useAccessibility(accessibility, {
      debugName: AccordionTitle.displayName,
      actionHandlers: {
        performClick: function performClick(e) {
          e.preventDefault();
          e.stopPropagation();
          handleClick(e);
        }
      },
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          hasContent: !!content,
          canBeCollapsed: canBeCollapsed,
          as: String(as),
          active: active,
          disabled: disabled,
          accordionContentId: accordionContentId
        };
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(AccordionTitle.displayName, {
      className: accordionTitleClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          disabled: disabled,
          content: !!content,
          active: active
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes,
        resolvedStyles = _useStyles.styles;

    var handleClick = function handleClick(e) {
      if (!disabled) {
        _invoke(props, 'onClick', e, props);
      }
    };

    var handleFocus = function handleFocus(e) {
      e.stopPropagation();

      _invoke(props, 'onFocus', e, props);
    };

    var handleWrapperOverrides = function handleWrapperOverrides(predefinedProps) {
      return {
        onFocus: function onFocus(e) {
          handleFocus(e);

          _invoke(predefinedProps, 'onFocus', e, props);
        },
        onClick: function onClick(e) {
          handleClick(e);

          _invoke(predefinedProps, 'onClick', e, props);
        }
      };
    };

    var contentWrapperElement = /*#__PURE__*/React.createElement(Ref, {
      innerRef: contentRef
    }, Box.create(contentWrapper, {
      defaultProps: function defaultProps() {
        return getA11yProps('content', {
          className: accordionTitleSlotClassNames.contentWrapper,
          styles: resolvedStyles.contentWrapper
        });
      },
      overrideProps: function overrideProps(predefinedProps) {
        return Object.assign({
          children: /*#__PURE__*/React.createElement(React.Fragment, null, Box.create(indicator, {
            defaultProps: function defaultProps() {
              return getA11yProps('indicator', {
                styles: resolvedStyles.indicator
              });
            }
          }), Box.create(content, {
            defaultProps: function defaultProps() {
              return {
                styles: resolvedStyles.content
              };
            }
          }))
        }, handleWrapperOverrides(predefinedProps));
      }
    }));
    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
      forElements: [children]
    }), getA11yProps('root', Object.assign({
      className: classes.root
    }, unhandledProps))), childrenExist(children) ? children : contentWrapperElement);
    setEnd();
    return element;
  };

  AccordionTitle.displayName = 'AccordionTitle';
  AccordionTitle.shorthandConfig = {
    mappedProp: 'content'
  };
  AccordionTitle.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: 'shorthand'
  }), {
    accordionContentId: PropTypes.string,
    active: PropTypes.bool,
    contentRef: customPropTypes.ref,
    contentWrapper: customPropTypes.wrapperShorthand,
    canBeCollapsed: PropTypes.bool,
    disabled: PropTypes.bool,
    index: PropTypes.number,
    onClick: PropTypes.func,
    indicator: customPropTypes.shorthandAllowingChildren
  });
  AccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes);
  AccordionTitle.defaultProps = {
    accessibility: accordionTitleBehavior,
    as: 'dt',
    contentRef: _noop,
    indicator: {},
    contentWrapper: {}
  };
  AccordionTitle.create = createShorthandFactory({
    Component: AccordionTitle,
    mappedProp: 'content'
  });
  return AccordionTitle;
}();
//# sourceMappingURL=AccordionTitle.js.map
