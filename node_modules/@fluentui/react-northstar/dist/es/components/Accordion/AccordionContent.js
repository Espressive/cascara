import _extends from "@babel/runtime/helpers/esm/extends";
import _invoke from "lodash/invoke";
import { accordionContentBehavior } from '@fluentui/accessibility';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { useTelemetry, useFluentContext, getElementType, useAccessibility, useUnhandledProps, useStyles } from '@fluentui/react-bindings';
export var accordionContentClassName = 'ui-accordion__content';

/**
 * An AccordionContent displays content hosted in an Accordion.
 */
export var AccordionContent = /*#__PURE__*/function () {
  var AccordionContent = function AccordionContent(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(AccordionContent.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var children = props.children,
        content = props.content,
        accordionTitleId = props.accordionTitleId,
        active = props.active,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);
    var getA11yProps = useAccessibility(props.accessibility, {
      debugName: AccordionContent.displayName,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          accordionTitleId: accordionTitleId
        };
      },
      rtl: context.rtl
    });

    var handleClick = function handleClick(e) {
      _invoke(props, 'onClick', e, props);
    };

    var _useStyles = useStyles(AccordionContent.displayName, {
      className: accordionContentClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          active: active
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({
      className: classes.root,
      onClick: handleClick
    }, unhandledProps)), rtlTextContainer.getAttributes({
      forElements: [children, content]
    })), childrenExist(children) ? children : content);
    setEnd();
    return element;
  };

  AccordionContent.displayName = 'AccordionContent';
  AccordionContent.shorthandConfig = {
    mappedProp: 'content'
  };
  AccordionContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    accordionTitleId: PropTypes.string,
    active: PropTypes.bool,
    onClick: PropTypes.func
  });
  AccordionContent.defaultProps = {
    accessibility: accordionContentBehavior,
    as: 'dd'
  };
  AccordionContent.handledProps = Object.keys(AccordionContent.propTypes);
  AccordionContent.create = createShorthandFactory({
    Component: AccordionContent,
    mappedProp: 'content'
  });
  return AccordionContent;
}();
//# sourceMappingURL=AccordionContent.js.map
