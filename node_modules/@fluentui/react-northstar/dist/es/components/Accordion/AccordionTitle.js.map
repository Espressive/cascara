{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["accordionTitleBehavior","Ref","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","Box","getElementType","useTelemetry","useFluentContext","useUnhandledProps","useAccessibility","useStyles","accordionTitleClassName","accordionTitleSlotClassNames","contentWrapper","AccordionTitle","props","context","displayName","telemetry","setStart","setEnd","contentRef","children","content","indicator","disabled","accessibility","canBeCollapsed","as","active","accordionContentId","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","mapPropsToBehavior","hasContent","String","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleFocus","handleWrapperOverrides","predefinedProps","onFocus","onClick","contentWrapperElement","create","defaultProps","overrideProps","element","getAttributes","forElements","root","shorthandConfig","mappedProp","propTypes","createCommon","string","bool","ref","wrapperShorthand","index","number","func","shorthandAllowingChildren","Object","keys","Component"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, Accessibility, AccordionTitleBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionTitleBehaviorProps>;\n\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nexport const accordionTitleClassName = 'ui-accordion__title';\nexport const accordionTitleSlotClassNames: AccordionTitleSlotClassNames = {\n  contentWrapper: `${accordionTitleClassName}__content-wrapper`,\n};\n\nexport type AccordionTitleStylesProps = Required<Pick<AccordionTitleProps, 'disabled' | 'active'>> & {\n  content: boolean;\n};\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport const AccordionTitle: ComponentWithAs<'dt', AccordionTitleProps> &\n  FluentComponentStaticProps<AccordionTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AccordionTitle.displayName, context.telemetry);\n  setStart();\n  const {\n    contentRef,\n    children,\n    content,\n    indicator,\n    contentWrapper,\n    disabled,\n    accessibility,\n    canBeCollapsed,\n    as,\n    active,\n    accordionContentId,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n\n  const getA11yProps = useAccessibility<AccordionTitleBehaviorProps>(accessibility, {\n    debugName: AccordionTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasContent: !!content,\n      canBeCollapsed,\n      as: String(as),\n      active,\n      disabled,\n      accordionContentId,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<AccordionTitleStylesProps>(AccordionTitle.displayName, {\n    className: accordionTitleClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      content: !!content,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (!disabled) {\n      _.invoke(props, 'onClick', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleWrapperOverrides = predefinedProps => ({\n    onFocus: (e: React.FocusEvent) => {\n      handleFocus(e);\n      _.invoke(predefinedProps, 'onFocus', e, props);\n    },\n    onClick: (e: React.MouseEvent) => {\n      handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, props);\n    },\n  });\n\n  const contentWrapperElement = (\n    <Ref innerRef={contentRef}>\n      {Box.create(contentWrapper, {\n        defaultProps: () =>\n          getA11yProps('content', {\n            className: accordionTitleSlotClassNames.contentWrapper,\n            styles: resolvedStyles.contentWrapper,\n          }),\n        overrideProps: predefinedProps => ({\n          children: (\n            <>\n              {Box.create(indicator, {\n                defaultProps: () =>\n                  getA11yProps('indicator', {\n                    styles: resolvedStyles.indicator,\n                  }),\n              })}\n              {Box.create(content, {\n                defaultProps: () => ({\n                  styles: resolvedStyles.content,\n                }),\n              })}\n            </>\n          ),\n          ...handleWrapperOverrides(predefinedProps),\n        }),\n      })}\n    </Ref>\n  );\n\n  const element = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : contentWrapperElement}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nAccordionTitle.displayName = 'AccordionTitle';\n\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionTitle.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren,\n};\n\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes) as any;\n\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'dt',\n  contentRef: _.noop,\n  indicator: {},\n  contentWrapper: {},\n};\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n"],"file":"AccordionTitle.js"}