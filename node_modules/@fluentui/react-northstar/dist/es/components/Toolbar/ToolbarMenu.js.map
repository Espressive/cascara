{"version":3,"sources":["components/Toolbar/ToolbarMenu.tsx"],"names":["toolbarMenuBehavior","toolbarMenuItemCheckboxBehavior","compose","getElementType","mergeVariablesOverrides","useUnhandledProps","useFluentContext","useAccessibility","useStyles","useTelemetry","Ref","customPropTypes","PropTypes","React","createShorthand","commonPropTypes","childrenExist","ToolbarMenuRadioGroup","ToolbarMenuDivider","ToolbarMenuItem","ToolbarVariablesContext","ToolbarVariablesProvider","toolbarMenuClassName","ToolbarMenu","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","children","design","items","styles","variables","parentVariables","useContext","mergedVariables","slotProps","resolveSlotProps","getA11yProps","debugName","actionHandlers","performClick","e","rtl","mapPropsToInlineStyles","unstable_props","classes","handleItemOverrides","predefinedProps","onClick","itemProps","menuOpen","menu","handleRadioGroupOverrides","onItemClick","renderItems","item","kind","slots","divider","defaultProps","group","overrideProps","toggle","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","submenuIndicator","inSubmenu","submenu","shorthandConfig","mappedArrayProp","propTypes","createCommon","collectionShorthandWithKindProp","func","bool","shorthandAllowingChildren","as"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuBehavior,\n  toolbarMenuItemCheckboxBehavior,\n  ToolbarMenuBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  createShorthand,\n  commonPropTypes,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n} from '../../utils';\n\nimport { ComponentEventHandler, ShorthandCollection, ShorthandValue } from '../../types';\n\nimport { ToolbarMenuRadioGroup, ToolbarMenuRadioGroupProps } from './ToolbarMenuRadioGroup';\nimport { ToolbarMenuDivider } from './ToolbarMenuDivider';\nimport { ToolbarMenuItem, ToolbarMenuItemProps } from './ToolbarMenuItem';\nimport { BoxProps } from '../Box/Box';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarDividerProps } from './ToolbarDivider';\nimport { ToolbarItemProps } from './ToolbarItem';\n\nexport type ToolbarMenuItemShorthandKinds = {\n  divider: ToolbarDividerProps;\n  item: ToolbarItemProps;\n  toggle: ToolbarItemProps;\n};\n\nexport interface ToolbarMenuProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuBehaviorProps>;\n\n  /** Shorthand array of props for ToolbarMenu. */\n  items?: ShorthandCollection<ToolbarMenuItemProps, ToolbarMenuItemShorthandKinds>;\n\n  /**\n   * Called on item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /** Indicates whether the menu is submenu. */\n  submenu?: boolean;\n\n  /** Shorthand for the submenu indicator. */\n  submenuIndicator?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuStylesProps = never;\nexport const toolbarMenuClassName = 'ui-toolbar__menu';\n\n/**\n * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.\n *\n * @accessibility\n * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.\n */\nexport const ToolbarMenu = compose<'ul', ToolbarMenuProps, ToolbarMenuStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, children, design, items, styles, variables } = props;\n\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n    const slotProps = composeOptions.resolveSlotProps<ToolbarMenuProps>(props);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: e => {\n          _.invoke(props, 'onClick', e, props);\n        },\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarMenuStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergedVariables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const handleItemOverrides = predefinedProps => ({\n      onClick: (e, itemProps) => {\n        _.invoke(predefinedProps, 'onClick', e, itemProps);\n        _.invoke(props, 'onItemClick', e, {\n          ...itemProps,\n          menuOpen: !!itemProps.menu,\n        });\n      },\n    });\n\n    const handleRadioGroupOverrides = (predefinedProps: ToolbarMenuRadioGroupProps) => ({\n      onItemClick: (e, itemProps) => {\n        _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n        _.invoke(props, 'onItemClick', e, itemProps);\n      },\n    });\n\n    const renderItems = () => {\n      return _.map(items, item => {\n        const kind = _.get(item, 'kind', 'item');\n\n        switch (kind) {\n          case 'divider':\n            return createShorthand(composeOptions.slots.divider, item, {\n              defaultProps: () => slotProps.divider,\n            });\n\n          case 'group':\n            return createShorthand(composeOptions.slots.group, item, {\n              defaultProps: () => slotProps.group,\n              overrideProps: handleRadioGroupOverrides,\n            });\n\n          case 'toggle':\n            return createShorthand(composeOptions.slots.toggle, item, {\n              defaultProps: () => slotProps.toggle,\n              overrideProps: handleItemOverrides,\n            });\n\n          default:\n            return createShorthand(composeOptions.slots.item, item, {\n              defaultProps: () => slotProps.item,\n              overrideProps: handleItemOverrides,\n            });\n        }\n      });\n    };\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = getA11yProps.unstable_wrapWithFocusZone(\n      <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })}>\n        <ToolbarVariablesProvider value={mergedVariables}>\n          {childrenExist(children) ? children : renderItems()}\n        </ToolbarVariablesProvider>\n      </ElementType>,\n    );\n    setEnd();\n\n    // TODO: As ElementType is wrapped with FocusZone which doesn't ref forwarding we have to use Ref\n    return ref ? <Ref innerRef={ref}>{element}</Ref> : element;\n  },\n  {\n    displayName: 'ToolbarMenu',\n    className: toolbarMenuClassName,\n\n    slots: {\n      item: ToolbarMenuItem,\n      divider: ToolbarMenuDivider,\n      group: ToolbarMenuRadioGroup,\n      toggle: ToolbarMenuItem,\n    },\n    slotProps: props => ({\n      item: {\n        submenuIndicator: props.submenuIndicator,\n        inSubmenu: props.submenu,\n      },\n      toggle: {\n        accessibility: toolbarMenuItemCheckboxBehavior,\n      },\n    }),\n\n    shorthandConfig: {\n      mappedArrayProp: 'items',\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'items',\n      'onItemClick',\n      'styles',\n      'submenu',\n      'submenuIndicator',\n      'variables',\n    ],\n  },\n);\n\nToolbarMenu.propTypes = {\n  ...commonPropTypes.createCommon(),\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n  onItemClick: PropTypes.func,\n  submenu: PropTypes.bool,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n};\nToolbarMenu.defaultProps = {\n  accessibility: toolbarMenuBehavior,\n  as: 'ul',\n};\n"],"file":"ToolbarMenu.js"}