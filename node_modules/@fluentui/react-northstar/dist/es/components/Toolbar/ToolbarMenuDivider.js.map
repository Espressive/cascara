{"version":3,"sources":["components/Toolbar/ToolbarMenuDivider.tsx"],"names":["toolbarMenuDividerBehavior","getElementType","mergeVariablesOverrides","useUnhandledProps","useAccessibility","useStyles","useFluentContext","useTelemetry","compose","React","commonPropTypes","ToolbarVariablesContext","toolbarMenuDividerClassName","ToolbarMenuDivider","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","useContext","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","ElementType","unhandledProps","handledProps","element","root","shorthandConfig","mappedProp","propTypes","createCommon","defaultProps","as"],"mappings":"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","sourcesContent":["import { Accessibility, toolbarMenuDividerBehavior, ToolbarMenuDividerBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { ChildrenComponentProps, ContentComponentProps, UIComponentProps, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuDividerBehaviorProps>;\n}\n\nexport type ToolbarMenuDividerStylesProps = never;\nexport const toolbarMenuDividerClassName = 'ui-toolbar__menudivider';\n\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\nexport const ToolbarMenuDivider = compose<'li', ToolbarMenuDividerProps, ToolbarMenuDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarMenuDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root, ref })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarMenuDividerClassName,\n    displayName: 'ToolbarMenuDivider',\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables'],\n  },\n) as ComponentWithAs<'li', ToolbarMenuDividerProps>;\n\nToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\nToolbarMenuDivider.defaultProps = {\n  as: 'li',\n  accessibility: toolbarMenuDividerBehavior,\n};\n"],"file":"ToolbarMenuDivider.js"}