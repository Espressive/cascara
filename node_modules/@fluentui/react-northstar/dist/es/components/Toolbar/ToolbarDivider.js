import { getElementType, mergeVariablesOverrides, useUnhandledProps, useAccessibility, useStyles, useFluentContext, useTelemetry, compose } from '@fluentui/react-bindings';
import * as React from 'react';
import { commonPropTypes } from '../../utils';
import { ToolbarVariablesContext } from './toolbarVariablesContext';
export var toolbarDividerClassName = 'ui-toolbar__divider';
/**
 * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.
 */

export var ToolbarDivider = /*#__PURE__*/function () {
  var ToolbarDivider = compose(function (props, ref, composeOptions) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var parentVariables = React.useContext(ToolbarVariablesContext);
    var getA11yProps = useAccessibility(accessibility, {
      debugName: composeOptions.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(composeOptions.displayName, {
      className: composeOptions.className,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: mergeVariablesOverrides(parentVariables, variables)
        };
      },
      rtl: context.rtl,
      composeOptions: composeOptions,
      unstable_props: props
    }),
        classes = _useStyles.classes;

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);
    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      ref: ref
    }, unhandledProps, {
      className: classes.root
    })));
    setEnd();
    return element;
  }, {
    displayName: 'ToolbarDivider',
    className: toolbarDividerClassName,
    shorthandConfig: {
      mappedProp: 'content'
    },
    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design']
  });
  ToolbarDivider.propTypes = commonPropTypes.createCommon();
  return ToolbarDivider;
}();
//# sourceMappingURL=ToolbarDivider.js.map
