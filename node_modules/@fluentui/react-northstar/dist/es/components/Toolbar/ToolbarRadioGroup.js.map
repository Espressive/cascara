{"version":3,"sources":["components/Toolbar/ToolbarRadioGroup.tsx"],"names":["toolbarRadioGroupBehavior","toolbarRadioGroupItemBehavior","compose","getElementType","mergeVariablesOverrides","useUnhandledProps","useAccessibility","useStyles","useFluentContext","useTelemetry","Ref","customPropTypes","PropTypes","React","createShorthand","childrenExist","commonPropTypes","ToolbarDivider","ToolbarItem","ToolbarVariablesContext","ToolbarVariablesProvider","toolbarRadioGroupClassName","ToolbarRadioGroup","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","activeIndex","children","className","design","items","variables","styles","itemRefs","slotProps","resolveSlotProps","parentVariables","useContext","mergedVariables","getA11yProps","debugName","actionHandlers","nextItem","event","setFocusedItem","prevItem","rtl","mapPropsToInlineStyles","unstable_props","classes","direction","filteredRadioItems","item","index","currentItem","disabled","currentFocusedIndex","current","tabIndex","itemsLength","length","nextIndex","nextItemToFocus","focus","target","activeElement","stopPropagation","preventDefault","renderItems","kind","createRef","slots","divider","defaultProps","toolbarItem","active","key","ElementType","unhandledProps","handledProps","element","root","shorthandConfig","mappedProp","propTypes","createCommon","number","collectionShorthandWithKindProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarRadioGroupBehavior,\n  toolbarRadioGroupItemBehavior,\n  ToolbarRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthand,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ShorthandCollection } from '../../types';\nimport { ToolbarDivider, ToolbarDividerProps } from './ToolbarDivider';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarRadioGroupItemShorthandKinds = {\n  divider: ToolbarDividerProps;\n  item: ToolbarItemProps;\n};\n\nexport interface ToolbarRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarRadioGroup. */\n  items?: ShorthandCollection<ToolbarItemProps, ToolbarRadioGroupItemShorthandKinds>;\n}\n\nexport type ToolbarRadioGroupStylesProps = never;\nexport const toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\nexport const ToolbarRadioGroup = compose<'div', ToolbarRadioGroupProps, ToolbarRadioGroupStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, activeIndex, children, className, design, items, variables, styles } = props;\n    const itemRefs: React.RefObject<HTMLElement>[] = [];\n\n    const slotProps = composeOptions.resolveSlotProps(props);\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        nextItem: event => setFocusedItem(event, 1),\n        prevItem: event => setFocusedItem(event, -1),\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarRadioGroupStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({ className, design, styles, variables: mergedVariables }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const setFocusedItem = (event: React.KeyboardEvent, direction) => {\n      // filter items which are not disabled\n      const filteredRadioItems: React.RefObject<HTMLElement>[] = _.filter(itemRefs, (item, index) => {\n        const currentItem = items[index] as ToolbarItemProps;\n        return currentItem && !currentItem.disabled;\n      });\n\n      // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n      const currentFocusedIndex =\n        _.findIndex(filteredRadioItems, (item: React.RefObject<HTMLElement>) => {\n          return item.current.tabIndex === 0;\n        }) || 0;\n\n      const itemsLength = filteredRadioItems.length;\n      let nextIndex = currentFocusedIndex + direction;\n\n      if (nextIndex >= itemsLength) {\n        nextIndex = 0;\n      }\n\n      if (nextIndex < 0) {\n        nextIndex = itemsLength - 1;\n      }\n\n      const nextItemToFocus = filteredRadioItems[nextIndex].current;\n      if (nextItemToFocus) {\n        nextItemToFocus.focus();\n      }\n\n      if (context.target.activeElement === nextItemToFocus) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n    };\n\n    const renderItems = () => {\n      return _.map(items, (item, index) => {\n        const kind = _.get(item, 'kind', 'item');\n\n        const ref = React.createRef<HTMLElement>();\n        itemRefs[index] = ref;\n\n        if (kind === 'divider') {\n          return createShorthand(composeOptions.slots.divider, item, {\n            defaultProps: () => slotProps.divider,\n          });\n        }\n\n        const toolbarItem = createShorthand(composeOptions.slots.item, item, {\n          defaultProps: () => ({\n            ...slotProps.item,\n            active: activeIndex === index,\n          }),\n        });\n\n        return (\n          <Ref innerRef={ref} key={toolbarItem.key}>\n            {toolbarItem}\n          </Ref>\n        );\n      });\n    };\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          ...unhandledProps,\n          className: classes.root,\n          ref,\n        })}\n      >\n        <ToolbarVariablesProvider value={mergedVariables}>\n          {childrenExist(children) ? children : renderItems()}\n        </ToolbarVariablesProvider>\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarRadioGroupClassName,\n    displayName: 'ToolbarRadioGroup',\n\n    slots: {\n      item: ToolbarItem,\n      divider: ToolbarDivider,\n    },\n    slotProps: () => ({\n      item: {\n        accessibility: toolbarRadioGroupItemBehavior,\n      },\n    }),\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'styles',\n      'variables',\n\n      'activeIndex',\n      'items',\n    ],\n  },\n);\n\nToolbarRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n};\nToolbarRadioGroup.defaultProps = {\n  accessibility: toolbarRadioGroupBehavior,\n};\n"],"file":"ToolbarRadioGroup.js"}