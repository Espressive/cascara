{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["getElementType","mergeVariablesOverrides","useUnhandledProps","useAccessibility","useStyles","useFluentContext","useTelemetry","compose","React","commonPropTypes","ToolbarVariablesContext","toolbarDividerClassName","ToolbarDivider","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","useContext","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","ElementType","unhandledProps","handledProps","element","root","shorthandConfig","mappedProp","propTypes","createCommon"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  compose,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { ChildrenComponentProps, ContentComponentProps, UIComponentProps, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\nexport const toolbarDividerClassName = 'ui-toolbar__divider';\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nexport const ToolbarDivider = compose<'div', ToolbarDividerProps, ToolbarDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ref, ...unhandledProps, className: classes.root })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    displayName: 'ToolbarDivider',\n    className: toolbarDividerClassName,\n\n    shorthandConfig: {\n      mappedProp: 'content',\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design'],\n  },\n);\n\nToolbarDivider.propTypes = commonPropTypes.createCommon();\n"],"file":"ToolbarDivider.js"}