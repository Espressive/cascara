import _map from "lodash/map";
import _invoke from "lodash/invoke";
import { toolbarMenuRadioGroupBehavior, toolbarMenuItemRadioBehavior } from '@fluentui/accessibility';
import { compose, mergeVariablesOverrides, getElementType, useUnhandledProps, useAccessibility, useStyles, useFluentContext, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { createShorthand, commonPropTypes } from '../../utils';
import { ToolbarMenuItem } from './ToolbarMenuItem';
import { ToolbarMenuRadioGroupWrapper } from './ToolbarMenuRadioGroupWrapper';
import { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';
export var toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars

/**
 * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.
 */

export var ToolbarMenuRadioGroup = /*#__PURE__*/function () {
  var ToolbarMenuRadioGroup = compose(function (props, ref, composeOptions) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        activeIndex = props.activeIndex,
        className = props.className,
        design = props.design,
        items = props.items,
        styles = props.styles,
        variables = props.variables,
        wrapper = props.wrapper;
    var slotProps = composeOptions.resolveSlotProps(props);
    var parentVariables = React.useContext(ToolbarVariablesContext);
    var mergedVariables = mergeVariablesOverrides(parentVariables, variables);
    var getA11yProps = useAccessibility(accessibility, {
      debugName: composeOptions.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(composeOptions.displayName, {
      className: composeOptions.className,
      composeOptions: composeOptions,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: mergedVariables
        };
      },
      rtl: context.rtl,
      unstable_props: props
    }),
        classes = _useStyles.classes;

    var handleItemOverrides = function handleItemOverrides(predefinedProps) {
      return {
        onClick: function onClick(e, itemProps) {
          _invoke(predefinedProps, 'onClick', e, itemProps);

          _invoke(props, 'onItemClick', e, itemProps);
        },
        wrapper: null
      };
    };

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);
    var content = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
      className: classes.root,
      ref: ref
    })), /*#__PURE__*/React.createElement(ToolbarVariablesProvider, {
      value: mergedVariables
    }, _map(items, function (item, index) {
      return createShorthand(ToolbarMenuItem, item, {
        defaultProps: function defaultProps() {
          return {
            accessibility: toolbarMenuItemRadioBehavior,
            as: 'li',
            active: activeIndex === index,
            index: index
          };
        },
        overrideProps: handleItemOverrides
      });
    })));
    var element = createShorthand(composeOptions.slots.wrapper, wrapper, {
      defaultProps: function defaultProps() {
        return getA11yProps('wrapper', slotProps.wrapper || {});
      },
      overrideProps: {
        children: content
      }
    });
    setEnd();
    return element;
  }, {
    className: toolbarMenuRadioGroupClassName,
    displayName: 'ToolbarMenuRadioGroup',
    slots: {
      wrapper: ToolbarMenuRadioGroupWrapper
    },
    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'activeIndex', 'items', 'onItemClick', 'wrapper']
  });
  ToolbarMenuRadioGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    activeIndex: PropTypes.number,
    items: customPropTypes.collectionShorthand,
    onItemClick: PropTypes.func,
    wrapper: customPropTypes.itemShorthand
  });
  ToolbarMenuRadioGroup.defaultProps = {
    as: 'ul',
    accessibility: toolbarMenuRadioGroupBehavior,
    wrapper: {}
  };
  return ToolbarMenuRadioGroup;
}();
//# sourceMappingURL=ToolbarMenuRadioGroup.js.map
