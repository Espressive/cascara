import _get from "lodash/get";
import _map from "lodash/map";
import _invoke from "lodash/invoke";
import { toolbarMenuBehavior, toolbarMenuItemCheckboxBehavior } from '@fluentui/accessibility';
import { compose, getElementType, mergeVariablesOverrides, useUnhandledProps, useFluentContext, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import { Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { createShorthand, commonPropTypes, childrenExist } from '../../utils';
import { ToolbarMenuRadioGroup } from './ToolbarMenuRadioGroup';
import { ToolbarMenuDivider } from './ToolbarMenuDivider';
import { ToolbarMenuItem } from './ToolbarMenuItem';
import { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';
export var toolbarMenuClassName = 'ui-toolbar__menu';
/**
 * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.
 *
 * @accessibility
 * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.
 */

export var ToolbarMenu = /*#__PURE__*/function () {
  var ToolbarMenu = compose(function (props, ref, composeOptions) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        className = props.className,
        children = props.children,
        design = props.design,
        items = props.items,
        styles = props.styles,
        variables = props.variables;
    var parentVariables = React.useContext(ToolbarVariablesContext);
    var mergedVariables = mergeVariablesOverrides(parentVariables, variables);
    var slotProps = composeOptions.resolveSlotProps(props);
    var getA11yProps = useAccessibility(accessibility, {
      debugName: composeOptions.displayName,
      actionHandlers: {
        performClick: function performClick(e) {
          _invoke(props, 'onClick', e, props);
        }
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(composeOptions.displayName, {
      className: composeOptions.className,
      composeOptions: composeOptions,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: mergedVariables
        };
      },
      rtl: context.rtl,
      unstable_props: props
    }),
        classes = _useStyles.classes;

    var handleItemOverrides = function handleItemOverrides(predefinedProps) {
      return {
        onClick: function onClick(e, itemProps) {
          _invoke(predefinedProps, 'onClick', e, itemProps);

          _invoke(props, 'onItemClick', e, Object.assign({}, itemProps, {
            menuOpen: !!itemProps.menu
          }));
        }
      };
    };

    var handleRadioGroupOverrides = function handleRadioGroupOverrides(predefinedProps) {
      return {
        onItemClick: function onItemClick(e, itemProps) {
          _invoke(predefinedProps, 'onItemClick', e, itemProps);

          _invoke(props, 'onItemClick', e, itemProps);
        }
      };
    };

    var renderItems = function renderItems() {
      return _map(items, function (item) {
        var kind = _get(item, 'kind', 'item');

        switch (kind) {
          case 'divider':
            return createShorthand(composeOptions.slots.divider, item, {
              defaultProps: function defaultProps() {
                return slotProps.divider;
              }
            });

          case 'group':
            return createShorthand(composeOptions.slots.group, item, {
              defaultProps: function defaultProps() {
                return slotProps.group;
              },
              overrideProps: handleRadioGroupOverrides
            });

          case 'toggle':
            return createShorthand(composeOptions.slots.toggle, item, {
              defaultProps: function defaultProps() {
                return slotProps.toggle;
              },
              overrideProps: handleItemOverrides
            });

          default:
            return createShorthand(composeOptions.slots.item, item, {
              defaultProps: function defaultProps() {
                return slotProps.item;
              },
              overrideProps: handleItemOverrides
            });
        }
      });
    };

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);
    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
      className: classes.root
    })), /*#__PURE__*/React.createElement(ToolbarVariablesProvider, {
      value: mergedVariables
    }, childrenExist(children) ? children : renderItems())));
    setEnd(); // TODO: As ElementType is wrapped with FocusZone which doesn't ref forwarding we have to use Ref

    return ref ? /*#__PURE__*/React.createElement(Ref, {
      innerRef: ref
    }, element) : element;
  }, {
    displayName: 'ToolbarMenu',
    className: toolbarMenuClassName,
    slots: {
      item: ToolbarMenuItem,
      divider: ToolbarMenuDivider,
      group: ToolbarMenuRadioGroup,
      toggle: ToolbarMenuItem
    },
    slotProps: function slotProps(props) {
      return {
        item: {
          submenuIndicator: props.submenuIndicator,
          inSubmenu: props.submenu
        },
        toggle: {
          accessibility: toolbarMenuItemCheckboxBehavior
        }
      };
    },
    shorthandConfig: {
      mappedArrayProp: 'items'
    },
    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'items', 'onItemClick', 'styles', 'submenu', 'submenuIndicator', 'variables']
  });
  ToolbarMenu.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),
    onItemClick: PropTypes.func,
    submenu: PropTypes.bool,
    submenuIndicator: customPropTypes.shorthandAllowingChildren
  });
  ToolbarMenu.defaultProps = {
    accessibility: toolbarMenuBehavior,
    as: 'ul'
  };
  return ToolbarMenu;
}();
//# sourceMappingURL=ToolbarMenu.js.map
