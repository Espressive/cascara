import _extends from "@babel/runtime/helpers/esm/extends";
import _invoke from "lodash/invoke";
import { buttonBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
export var splitButtonToggleClassName = 'ui-splitbutton__toggle';
/**
 * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */

export var SplitButtonToggle = /*#__PURE__*/function () {
  var SplitButtonToggle = function SplitButtonToggle(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(SplitButtonToggle.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        as = props.as,
        children = props.children,
        content = props.content,
        disabled = props.disabled,
        primary = props.primary,
        className = props.className,
        size = props.size,
        styles = props.styles,
        variables = props.variables,
        design = props.design;
    var hasChildren = childrenExist(children);
    var getA11Props = useAccessibility(accessibility, {
      debugName: SplitButtonToggle.displayName,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          as: String(as),
          disabled: disabled
        };
      },
      actionHandlers: {
        performClick: function performClick(event) {
          event.preventDefault();
          handleClick(event);
        }
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(SplitButtonToggle.displayName, {
      className: splitButtonToggleClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          primary: primary,
          disabled: disabled,
          size: size
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);
    var ElementType = getElementType(props);

    var handleClick = function handleClick(e) {
      if (disabled) {
        e.preventDefault();
        return;
      }

      _invoke(props, 'onClick', e, props);
    };

    var result = /*#__PURE__*/React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
      forElements: [children]
    }), getA11Props('root', Object.assign({
      onClick: handleClick,
      disabled: disabled,
      className: classes.root
    }, unhandledProps))), hasChildren ? children : content);
    setEnd();
    return result;
  };

  SplitButtonToggle.defaultProps = {
    as: 'button',
    accessibility: buttonBehavior
  };
  SplitButtonToggle.displayName = 'SplitButtonToggle';
  SplitButtonToggle.propTypes = Object.assign({}, commonPropTypes.createCommon({}), {
    disabled: PropTypes.bool,
    onClick: PropTypes.func,
    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
    size: customPropTypes.size
  });
  SplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes);
  SplitButtonToggle.create = createShorthandFactory({
    Component: SplitButtonToggle,
    mappedProp: 'content'
  });
  return SplitButtonToggle;
}();
//# sourceMappingURL=SplitButtonToggle.js.map
