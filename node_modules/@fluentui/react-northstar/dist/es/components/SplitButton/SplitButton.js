import _invoke from "lodash/invoke";
import { splitButtonBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { ALIGNMENTS, POSITIONS, AUTOSIZES } from '../../utils/positioner';
import { isFromKeyboard as checkIsFromKeyboard, commonPropTypes, createShorthand, createShorthandFactory } from '../../utils';
import { SplitButtonToggle } from './SplitButtonToggle';
import { Button } from '../Button/Button';
import { MenuButton } from '../MenuButton/MenuButton';
import { Ref } from '@fluentui/react-component-ref';
import { useTelemetry, useAutoControlled, useAccessibility, getElementType, useFluentContext, useUnhandledProps, useStyles } from '@fluentui/react-bindings';
export var splitButtonClassName = 'ui-splitbutton';

/**
 * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.
 */
export var SplitButton = /*#__PURE__*/function () {
  var SplitButton = function SplitButton(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(SplitButton.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var button = props.button,
        disabled = props.disabled,
        menu = props.menu,
        primary = props.primary,
        secondary = props.secondary,
        toggleButton = props.toggleButton,
        size = props.size,
        position = props.position,
        align = props.align,
        flipBoundary = props.flipBoundary,
        overflowBoundary = props.overflowBoundary,
        popperRef = props.popperRef,
        positionFixed = props.positionFixed,
        offset = props.offset,
        unstable_disableTether = props.unstable_disableTether,
        unstable_pinned = props.unstable_pinned,
        autoSize = props.autoSize,
        className = props.className,
        design = props.design,
        styles = props.styles,
        accessibility = props.accessibility,
        variables = props.variables;
    var targetRef = React.useRef();
    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(SplitButton.handledProps, props);

    var _useAutoControlled = useAutoControlled({
      defaultValue: props.defaultOpen,
      value: props.open,
      initialValue: false
    }),
        open = _useAutoControlled[0],
        setOpen = _useAutoControlled[1];

    var _React$useState = React.useState(false),
        isFromKeyboard = _React$useState[0],
        setIsFromKeyboard = _React$useState[1];

    var getA11yProps = useAccessibility(accessibility, {
      debugName: SplitButton.displayName,
      mapPropsToBehavior: function mapPropsToBehavior() {
        return {
          open: open
        };
      },
      rtl: context.rtl
    });

    var _useStyles = useStyles(SplitButton.displayName, {
      className: splitButtonClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          isFromKeyboard: isFromKeyboard,
          size: size
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes,
        resolvedStyles = _useStyles.styles;

    var handleMenuButtonOverrides = function handleMenuButtonOverrides(predefinedProps) {
      return {
        onMenuItemClick: function onMenuItemClick(e, menuItemProps) {
          setOpen(false);

          _invoke(props, 'onOpenChange', e, Object.assign({}, props, {
            open: false
          }));

          _invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);

          _invoke(props, 'onMenuItemClick', e, menuItemProps);
        },
        onOpenChange: function onOpenChange(e, popupProps) {
          e.stopPropagation();
          setOpen(popupProps.open);

          _invoke(props, 'onOpenChange', e, Object.assign({}, props, {
            open: popupProps.open
          }));
        }
      };
    };

    var handleMenuButtonTriggerOverrides = function handleMenuButtonTriggerOverrides(predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          _invoke(predefinedProps, 'onClick', e, buttonProps);

          _invoke(props, 'onMainButtonClick', e, buttonProps);
        },
        onFocus: function onFocus(e, buttonProps) {
          _invoke(predefinedProps, 'onFocus', e, buttonProps);

          setIsFromKeyboard(checkIsFromKeyboard());
        }
      };
    };

    var element = /*#__PURE__*/React.createElement(Ref, {
      innerRef: targetRef
    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
      className: classes.root
    }, unhandledProps)), MenuButton.create({}, {
      defaultProps: function defaultProps() {
        return getA11yProps('menuButton', {
          menu: menu,
          on: [],
          open: open,
          trigger: createShorthand(Button, button, {
            defaultProps: function defaultProps() {
              return {
                styles: resolvedStyles.menuButton,
                primary: primary,
                secondary: secondary,
                disabled: disabled
              };
            },
            overrideProps: handleMenuButtonTriggerOverrides
          }),
          target: targetRef.current,
          position: position,
          align: align,
          flipBoundary: flipBoundary,
          overflowBoundary: overflowBoundary,
          popperRef: popperRef,
          positionFixed: positionFixed,
          offset: offset,
          unstable_disableTether: unstable_disableTether,
          unstable_pinned: unstable_pinned,
          autoSize: autoSize
        });
      },
      overrideProps: handleMenuButtonOverrides
    }), SplitButtonToggle.create(toggleButton, {
      defaultProps: function defaultProps() {
        return getA11yProps('toggleButton', {
          disabled: disabled,
          primary: primary,
          secondary: secondary,
          size: size
        });
      },
      overrideProps: function overrideProps(predefinedProps) {
        return {
          onClick: function onClick(e, buttonProps) {
            _invoke(predefinedProps, 'onClick', e, buttonProps);

            setOpen(function (isOpen) {
              var open = !isOpen;

              _invoke(props, 'onOpenChange', e, Object.assign({}, props, {
                open: open
              }));

              return open;
            });
          }
        };
      }
    })));
    setEnd();
    return element;
  };

  SplitButton.displayName = 'SplitButton';
  SplitButton.Toggle = SplitButtonToggle;
  SplitButton.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    button: customPropTypes.itemShorthand,
    defaultOpen: PropTypes.bool,
    menu: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),
    onMainButtonClick: PropTypes.func,
    onMenuItemClick: PropTypes.func,
    onOpenChange: PropTypes.func,
    open: PropTypes.bool,
    size: customPropTypes.size,
    popperRef: customPropTypes.ref,
    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
    toggleButton: customPropTypes.itemShorthand,
    position: PropTypes.oneOf(POSITIONS),
    align: PropTypes.oneOf(ALIGNMENTS),
    flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
    overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
    positionFixed: PropTypes.bool,
    offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),
    unstable_disableTether: PropTypes.oneOf([true, false, 'all']),
    unstable_pinned: PropTypes.bool,
    autoSize: PropTypes.oneOf(AUTOSIZES)
  });
  SplitButton.defaultProps = {
    accessibility: splitButtonBehavior,
    toggleButton: {},
    position: 'below',
    align: 'start'
  };
  SplitButton.handledProps = Object.keys(SplitButton.propTypes);
  SplitButton.create = createShorthandFactory({
    Component: SplitButton
  });
  return SplitButton;
}();
//# sourceMappingURL=SplitButton.js.map
