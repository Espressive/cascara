{"version":3,"sources":["components/SplitButton/SplitButtonToggle.tsx"],"names":["buttonBehavior","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","getElementType","useAccessibility","useFluentContext","useStyles","useTelemetry","useUnhandledProps","splitButtonToggleClassName","SplitButtonToggle","props","context","displayName","telemetry","setStart","setEnd","accessibility","as","children","content","disabled","primary","className","size","styles","variables","design","hasChildren","getA11Props","debugName","mapPropsToBehavior","String","actionHandlers","performClick","event","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","unhandledProps","handledProps","ElementType","e","result","getAttributes","forElements","onClick","root","defaultProps","propTypes","createCommon","bool","func","every","disallow","secondary","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  SizeValue,\n} from '../../utils';\n\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\n\nexport interface SplitButtonToggleProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A split button toggle can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<SplitButtonToggleProps>;\n\n  /** A split button toggle can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A split button toggle can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A split button toggle can be sized */\n  size?: SizeValue;\n}\n\nexport type SplitButtonToggleStylesProps = Pick<SplitButtonToggleProps, 'primary' | 'disabled' | 'size'>;\nexport const splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport const SplitButtonToggle: ComponentWithAs<'button', SplitButtonToggleProps> &\n  FluentComponentStaticProps<SplitButtonToggleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(SplitButtonToggle.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, as, children, content, disabled, primary, className, size, styles, variables, design } = props;\n\n  const hasChildren = childrenExist(children);\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: SplitButtonToggle.displayName,\n    mapPropsToBehavior: () => ({\n      as: String(as),\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<SplitButtonToggleStylesProps>(SplitButtonToggle.displayName, {\n    className: splitButtonToggleClassName,\n    mapPropsToStyles: () => ({\n      primary,\n      disabled,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11Props('root', {\n        onClick: handleClick,\n        disabled,\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n};\n\nSplitButtonToggle.displayName = 'SplitButtonToggle';\n\nSplitButtonToggle.propTypes = {\n  ...commonPropTypes.createCommon({}),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n};\n\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes) as any;\n\nSplitButtonToggle.create = createShorthandFactory({ Component: SplitButtonToggle, mappedProp: 'content' });\n"],"file":"SplitButtonToggle.js"}