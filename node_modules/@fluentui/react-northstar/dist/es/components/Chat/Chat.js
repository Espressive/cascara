import _map from "lodash/map";
import { chatBehavior } from '@fluentui/accessibility';
import { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';
import { ChatDensityContextProvider, defaultChatDensity } from './chatDensityContext';
import { ChatItem } from './ChatItem';
import { ChatMessage } from './ChatMessage';
import { ChatMessageDetails } from './ChatMessageDetails';
import { ChatMessageHeader } from './ChatMessageHeader';
import { ChatMessageReadStatus } from './ChatMessageReadStatus';
export var chatClassName = 'ui-chat';
export var chatSlotClassNames = {
  item: chatClassName + "__item"
};
/**
 * A Chat displays messages from a conversation between multiple users.
 */

export var Chat = /*#__PURE__*/function () {
  var Chat = function Chat(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(Chat.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        children = props.children,
        className = props.className,
        density = props.density,
        design = props.design,
        items = props.items,
        styles = props.styles,
        variables = props.variables;
    var getA11Props = useAccessibility(accessibility, {
      debugName: Chat.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(Chat.displayName, {
      className: chatClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          density: density
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(Chat.handledProps, props);
    var element = getA11Props.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), /*#__PURE__*/React.createElement(ChatDensityContextProvider, {
      value: density
    }, childrenExist(children) ? children : _map(items, function (item) {
      return ChatItem.create(item, {
        defaultProps: function defaultProps() {
          return {
            className: chatSlotClassNames.item
          };
        }
      });
    }))));
    setEnd();
    return element;
  };

  Chat.displayName = 'Chat';
  Chat.defaultProps = {
    accessibility: chatBehavior,
    as: 'ul',
    density: defaultChatDensity
  };
  Chat.propTypes = Object.assign({}, commonPropTypes.createCommon({
    content: false
  }), {
    items: PropTypes.arrayOf(customPropTypes.itemShorthand),
    density: PropTypes.oneOf(['comfy', 'compact'])
  });
  Chat.handledProps = Object.keys(Chat.propTypes);
  Chat.Item = ChatItem;
  Chat.Message = ChatMessage;
  Chat.MessageHeader = ChatMessageHeader;
  Chat.MessageDetails = ChatMessageDetails;
  Chat.MessageReadStatus = ChatMessageReadStatus;
  Chat.create = createShorthandFactory({
    Component: Chat
  });
  return Chat;
}();
//# sourceMappingURL=Chat.js.map
