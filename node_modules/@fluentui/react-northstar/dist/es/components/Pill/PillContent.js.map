{"version":3,"sources":["components/Pill/PillContent.tsx"],"names":["React","PropTypes","getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","childrenExist","commonPropTypes","rtlTextContainer","pillContentClassName","PillContent","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","styles","variables","size","actionable","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","propTypes","createCommon","bool","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  SizeValue,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface PillContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /**\n   * A Pill can be sized.\n   */\n  size?: Extract<SizeValue, 'smaller' | 'small' | 'medium'>;\n\n  /**\n   * A Pill can be actionable.\n   */\n  actionable?: boolean;\n}\n\nexport type PillContentStylesProps = Required<Pick<PillContentProps, 'size' | 'actionable'>>;\nexport const pillContentClassName = 'ui-pillcontent';\n\n/**\n * A PillContent allows user to classify content.\n */\nexport const PillContent: ComponentWithAs<'span', PillContentProps> &\n  FluentComponentStaticProps<PillContentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(PillContent.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, styles, variables, size, actionable } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: PillContent.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<PillContentStylesProps>(PillContent.displayName, {\n    className: pillContentClassName,\n    mapPropsToStyles: () => ({ size, actionable }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(PillContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nPillContent.displayName = 'PillContent';\n\nPillContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  actionable: PropTypes.bool,\n};\n\nPillContent.handledProps = Object.keys(PillContent.propTypes) as any;\n\nPillContent.defaultProps = {\n  as: 'span',\n};\n\nPillContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"PillContent.js"}