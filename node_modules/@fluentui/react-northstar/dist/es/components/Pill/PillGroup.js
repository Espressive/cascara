import * as React from 'react';
import { PillGroupBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';
import { commonPropTypes, rtlTextContainer } from '../../utils';
import { PillsContextProvider } from './pillContext';
export var pillGroupClassName = 'ui-pills';
/**
 * A PillGroup can be used as container for Pill.
 */

export var PillGroup = /*#__PURE__*/function () {
  var PillGroup = function PillGroup(props) {
    var _getA11Props$unstable;

    var context = useFluentContext();

    var _useTelemetry = useTelemetry(PillGroup.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        children = props.children,
        className = props.className,
        design = props.design,
        styles = props.styles,
        variables = props.variables;
    var getA11Props = useAccessibility(accessibility, {
      debugName: PillGroup.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(PillGroup.displayName, {
      className: pillGroupClassName,
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(PillGroup.handledProps, props);
    var pillBehavior = (_getA11Props$unstable = getA11Props.unstable_behaviorDefinition().childBehaviors) == null ? void 0 : _getA11Props$unstable.pill;
    var childProps = React.useMemo(function () {
      return {
        pillBehavior: pillBehavior
      };
    }, [pillBehavior]);
    var element = getA11Props.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), /*#__PURE__*/React.createElement(PillsContextProvider, {
      value: childProps
    }, children)));
    setEnd();
    return element;
  };

  PillGroup.displayName = 'PillGroup';
  PillGroup.propTypes = commonPropTypes.createCommon();
  PillGroup.defaultProps = {
    accessibility: PillGroupBehavior
  };
  PillGroup.handledProps = Object.keys(PillGroup.propTypes);
  PillGroup.shorthandConfig = {
    mappedProp: 'content'
  };
  return PillGroup;
}();
//# sourceMappingURL=PillGroup.js.map
