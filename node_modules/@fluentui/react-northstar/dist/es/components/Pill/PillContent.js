import * as React from 'react';
import * as PropTypes from 'prop-types';
import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';
import { childrenExist, commonPropTypes, rtlTextContainer } from '../../utils';
export var pillContentClassName = 'ui-pillcontent';
/**
 * A PillContent allows user to classify content.
 */

export var PillContent = /*#__PURE__*/function () {
  var PillContent = function PillContent(props) {
    var context = useFluentContext();

    var _useTelemetry = useTelemetry(PillContent.displayName, context.telemetry),
        setStart = _useTelemetry.setStart,
        setEnd = _useTelemetry.setEnd;

    setStart();
    var accessibility = props.accessibility,
        children = props.children,
        className = props.className,
        content = props.content,
        design = props.design,
        styles = props.styles,
        variables = props.variables,
        size = props.size,
        actionable = props.actionable;
    var getA11Props = useAccessibility(accessibility, {
      debugName: PillContent.displayName,
      rtl: context.rtl
    });

    var _useStyles = useStyles(PillContent.displayName, {
      className: pillContentClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          size: size,
          actionable: actionable
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var ElementType = getElementType(props);
    var unhandledProps = useUnhandledProps(PillContent.handledProps, props);
    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), childrenExist(children) ? children : content);
    setEnd();
    return element;
  };

  PillContent.displayName = 'PillContent';
  PillContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
    actionable: PropTypes.bool
  });
  PillContent.handledProps = Object.keys(PillContent.propTypes);
  PillContent.defaultProps = {
    as: 'span'
  };
  PillContent.shorthandConfig = {
    mappedProp: 'content'
  };
  return PillContent;
}();
//# sourceMappingURL=PillContent.js.map
