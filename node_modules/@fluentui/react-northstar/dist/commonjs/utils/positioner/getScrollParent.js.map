{"version":3,"sources":["utils/positioner/getScrollParent.ts"],"names":["getParentNode","node","nodeName","parentNode","host","getStyleComputedProperty","nodeType","window","ownerDocument","defaultView","getComputedStyle","getScrollParent","document","body","overflow","overflowX","overflowY","test"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAoC;AAC/D,MAAIA,IAAI,CAACC,QAAL,KAAkB,MAAtB,EAA8B,OAAOD,IAAP;AAC9B,SAAOA,IAAI,CAACE,UAAL,IAAoBF,IAAD,CAAcG,IAAxC;AACD,CAHM;AAKP;AACA;AACA;AACA;AACA;;;;;AACA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACJ,IAAD,EAAqD;AACpF,MAAIA,IAAI,CAACK,QAAL,KAAkB,CAAtB,EAAyB,OAAO,EAAP;AAEzB,MAAMC,MAAM,GAAGN,IAAI,CAACO,aAAL,CAAmBC,WAAlC;AACA,SAAOF,MAAM,CAACG,gBAAP,CAAwBT,IAAxB,EAA8B,IAA9B,CAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACO,IAAMU,eAAe,GAAG,SAAlBA,eAAkB,CAACV,IAAD,EAA+C;AAC5E;AACA,MAAME,UAAU,GAAGF,IAAI,IAAID,aAAa,CAACC,IAAD,CAAxC,CAF4E,CAG5E;;AACA,MAAI,CAACE,UAAL,EAAiB,OAAOS,QAAQ,CAACC,IAAhB;;AAEjB,UAAQV,UAAU,CAACD,QAAnB;AACE,SAAK,MAAL;AACA,SAAK,MAAL;AACE,aAAOC,UAAU,CAACK,aAAX,CAAyBK,IAAhC;;AACF,SAAK,WAAL;AACE,aAASV,UAAF,CAAsCU,IAA7C;AALJ,GAN4E,CAc5E;;;AAd4E,8BAejCR,wBAAwB,CAACF,UAAD,CAfS;AAAA,MAepEW,QAfoE,yBAepEA,QAfoE;AAAA,MAe1DC,SAf0D,yBAe1DA,SAf0D;AAAA,MAe/CC,SAf+C,yBAe/CA,SAf+C;;AAgB5E,MAAI,wBAAwBC,IAAxB,CAA6BH,QAAQ,GAAGE,SAAX,GAAuBD,SAApD,CAAJ,EAAoE,OAAOZ,UAAP;AAEpE,SAAOQ,eAAe,CAACR,UAAD,CAAtB;AACD,CAnBM","sourcesContent":["/**\n * Returns the parent node or the host of the node argument.\n * @param node - DOM node.\n * @returns - parent DOM node.\n */\nexport const getParentNode = (node: HTMLElement): HTMLElement => {\n  if (node.nodeName === 'HTML') return node;\n  return node.parentNode || (node as any).host;\n};\n\n/**\n * Returns CSS styles of the given node.\n * @param node - DOM node.\n * @returns - CSS styles.\n */\nconst getStyleComputedProperty = (node: HTMLElement): Partial<CSSStyleDeclaration> => {\n  if (node.nodeType !== 1) return {};\n\n  const window = node.ownerDocument.defaultView;\n  return window.getComputedStyle(node, null);\n};\n\n/**\n * Returns the first scrollable parent of the given element.\n * @param node - DOM node.\n * @returns - the first scrollable parent.\n */\nexport const getScrollParent = (node: Document | HTMLElement): HTMLElement => {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  const parentNode = node && getParentNode(node as HTMLElement);\n  // eslint-disable-next-line\n  if (!parentNode) return document.body;\n\n  switch (parentNode.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return parentNode.ownerDocument.body;\n    case '#document':\n      return ((parentNode as unknown) as Document).body;\n  }\n\n  // If any of the overflow props is defined for the node then we return it as the parent\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(parentNode);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) return parentNode;\n\n  return getScrollParent(parentNode);\n};\n"],"file":"getScrollParent.js"}