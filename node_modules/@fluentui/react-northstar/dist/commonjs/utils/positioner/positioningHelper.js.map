{"version":3,"sources":["utils/positioner/positioningHelper.ts"],"names":["PlacementParts","getPositionMap","rtl","above","top","below","bottom","before","right","left","after","getAlignmentMap","start","end","center","shouldAlignToCenter","p","a","positionedVertically","alignedVertically","getPlacement","align","position","alignment","computedPosition","computedAlignment","stringifiedAlignment","applyRtlToOffset","offset","undefined","Array","isArray","param"],"mappings":";;;;IAGKA,c;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAUL,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD;AAAA,SAAqD;AAC1EC,IAAAA,KAAK,EAAEH,cAAc,CAACI,GADoD;AAE1EC,IAAAA,KAAK,EAAEL,cAAc,CAACM,MAFoD;AAG1EC,IAAAA,MAAM,EAAEL,GAAG,GAAGF,cAAc,CAACQ,KAAlB,GAA0BR,cAAc,CAACS,IAHsB;AAI1EC,IAAAA,KAAK,EAAER,GAAG,GAAGF,cAAc,CAACS,IAAlB,GAAyBT,cAAc,CAACQ;AAJwB,GAArD;AAAA,CAAvB;;AAOA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACT,GAAD;AAAA,SAAsD;AAC5EU,IAAAA,KAAK,EAAEV,GAAG,GAAGF,cAAc,CAACa,GAAlB,GAAwBb,cAAc,CAACY,KAD2B;AAE5EC,IAAAA,GAAG,EAAEX,GAAG,GAAGF,cAAc,CAACY,KAAlB,GAA0BZ,cAAc,CAACa,GAF2B;AAG5ET,IAAAA,GAAG,EAAEJ,cAAc,CAACY,KAHwD;AAI5EN,IAAAA,MAAM,EAAEN,cAAc,CAACa,GAJqD;AAK5EC,IAAAA,MAAM,EAAEd,cAAc,CAACc;AALqD,GAAtD;AAAA,CAAxB;;AAQA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,CAAD,EAAcC,CAAd,EAA+B;AACzD,MAAMC,oBAAoB,GAAGF,CAAC,KAAK,OAAN,IAAiBA,CAAC,KAAK,OAApD;AACA,MAAMG,iBAAiB,GAAGF,CAAC,KAAK,KAAN,IAAeA,CAAC,KAAK,QAA/C;AAEA,SAAQC,oBAAoB,IAAIC,iBAAzB,IAAgD,CAACD,oBAAD,IAAyB,CAACC,iBAAjF;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAmBC,QAAnB,EAAuCpB,GAAvC,EAA4E;AACtG,MAAMqB,SAAoB,GAAGR,mBAAmB,CAACO,QAAD,EAAWD,KAAX,CAAnB,GAAuC,QAAvC,GAAkDA,KAA/E;AACA,MAAMG,gBAAgB,GAAGvB,cAAc,CAACC,GAAD,CAAd,CAAoBoB,QAApB,CAAzB;AACA,MAAMG,iBAAiB,GAAGd,eAAe,CAACT,GAAD,CAAf,CAAqBqB,SAArB,CAA1B;AACA,MAAMG,oBAAoB,GAAGD,iBAAiB,UAAQA,iBAAtD;AAEA,cAAUD,gBAAV,GAA6BE,oBAA7B;AACD,CAPM;;;;AASA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAAoD;AAClF,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOC,SAAP;AACD;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzBA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAC,CAAzB;AAEA,WAAOA,MAAP;AACD;;AAED,SAAQ,UAACI,KAAD;AAAA,WAAgCL,gBAAgB,CAACC,MAAM,CAACI,KAAD,CAAP,CAAhD;AAAA,GAAR;AACD,CAZM","sourcesContent":["import * as PopperJs from '@popperjs/core';\nimport { Alignment, Offset, OffsetFunction, OffsetFunctionParam, Position } from './types';\n\nenum PlacementParts {\n  top = 'top',\n  bottom = 'bottom',\n  start = 'start',\n  end = 'end',\n  left = 'left',\n  right = 'right',\n  center = '',\n}\n\nconst getPositionMap = (rtl: boolean): Record<Position, PlacementParts> => ({\n  above: PlacementParts.top,\n  below: PlacementParts.bottom,\n  before: rtl ? PlacementParts.right : PlacementParts.left,\n  after: rtl ? PlacementParts.left : PlacementParts.right,\n});\n\nconst getAlignmentMap = (rtl: boolean): Record<Alignment, PlacementParts> => ({\n  start: rtl ? PlacementParts.end : PlacementParts.start,\n  end: rtl ? PlacementParts.start : PlacementParts.end,\n  top: PlacementParts.start,\n  bottom: PlacementParts.end,\n  center: PlacementParts.center,\n});\n\nconst shouldAlignToCenter = (p: Position, a: Alignment) => {\n  const positionedVertically = p === 'above' || p === 'below';\n  const alignedVertically = a === 'top' || a === 'bottom';\n\n  return (positionedVertically && alignedVertically) || (!positionedVertically && !alignedVertically);\n};\n\n/**\n * | position | alignment | placement       | placement RTL\n * -----------------------------------------------------------------\n * | above    | start     |  top-start      |  top-end\n * | above    | center    |  top            |  top\n * | above    | end       |  top-end        |  top-start\n * | below    | start     |  bottom-start   |  bottom-end\n * | below    | center    |  bottom         |  bottom\n * | below    | end       |  bottom-end     |  bottom-start\n * | before   | top       |  left-start     |  right-start\n * | before   | center    |  left           |  right\n * | before   | bottom    |  left-end       |  right-end\n * | after    | top       |  right-start    |  left-start\n * | after    | center    |  right          |  left\n * | after    | bottom    |  right-end      |  left-end\n */\nexport const getPlacement = (align: Alignment, position: Position, rtl: boolean): PopperJs.Placement => {\n  const alignment: Alignment = shouldAlignToCenter(position, align) ? 'center' : align;\n  const computedPosition = getPositionMap(rtl)[position];\n  const computedAlignment = getAlignmentMap(rtl)[alignment];\n  const stringifiedAlignment = computedAlignment && `-${computedAlignment}`;\n\n  return `${computedPosition}${stringifiedAlignment}` as PopperJs.Placement;\n};\n\nexport const applyRtlToOffset = (offset: Offset | undefined): Offset | undefined => {\n  if (typeof offset === 'undefined') {\n    return undefined;\n  }\n\n  if (Array.isArray(offset)) {\n    offset[0] = offset[0] * -1;\n\n    return offset;\n  }\n\n  return ((param: OffsetFunctionParam) => applyRtlToOffset(offset(param))) as OffsetFunction;\n};\n"],"file":"positioningHelper.js"}