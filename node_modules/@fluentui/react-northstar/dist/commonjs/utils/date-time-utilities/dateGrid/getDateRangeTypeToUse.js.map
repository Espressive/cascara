{"version":3,"sources":["utils/date-time-utilities/dateGrid/getDateRangeTypeToUse.ts"],"names":["getDateRangeTypeToUse","dateRangeType","workWeekDays","firstDayOfWeek","DateRangeType","WorkWeek","length","Week"],"mappings":";;;;;AAAA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,aADmC,EAEnCC,YAFmC,EAGnCC,cAHmC,EAIjB;AAClB,MAAID,YAAY,IAAID,aAAa,KAAKG,0BAAcC,QAApD,EAA8D;AAC5D,QAAI,CAAC,gCAAaH,YAAb,EAA2B,IAA3B,EAAiCC,cAAjC,CAAD,IAAqDD,YAAY,CAACI,MAAb,KAAwB,CAAjF,EAAoF;AAClF,aAAOF,0BAAcG,IAArB;AACD;AACF;;AAED,SAAON,aAAP;AACD,CAZM","sourcesContent":["import { DateRangeType, DayOfWeek } from '../dateValues/dateValues';\nimport { isContiguous } from './isContiguous';\n/**\n * Return corrected date range type, given `dateRangeType` and list of working days.\n * For non-contiguous working days and working week range type, returns general week range type.\n * For other cases returns input date range type.\n * @param dateRangeType - input type of range\n * @param workWeekDays - list of working days in a week\n */\nexport const getDateRangeTypeToUse = (\n  dateRangeType: DateRangeType,\n  workWeekDays: DayOfWeek[] | undefined,\n  firstDayOfWeek: DayOfWeek,\n): DateRangeType => {\n  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {\n      return DateRangeType.Week;\n    }\n  }\n\n  return dateRangeType;\n};\n"],"file":"getDateRangeTypeToUse.js"}