{"version":3,"sources":["utils/date-time-utilities/dateGrid/findAvailableDate.ts"],"names":["findAvailableDate","options","targetDate","initialDate","direction","restrictedDateOptions","availableDate","undefined"],"mappings":";;;;;;;;;AAEA;;AAEA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAsD;AAAA,MAC7EC,UAD6E,GACZD,OADY,CAC7EC,UAD6E;AAAA,MACjEC,WADiE,GACZF,OADY,CACjEE,WADiE;AAAA,MACpDC,SADoD,GACZH,OADY,CACpDG,SADoD;AAAA,MACtCC,qBADsC,+CACZJ,OADY;AAErF,MAAIK,aAAa,GAAGJ,UAApB,CAFqF,CAGrF;;AACA,MAAI,CAAC,wCAAiBA,UAAjB,EAA6BG,qBAA7B,CAAL,EAA0D;AACxD,WAAOH,UAAP;AACD;;AAED,SACE,+BAAgBC,WAAhB,EAA6BG,aAA7B,MAAgD,CAAhD,IACA,wCAAiBA,aAAjB,EAAgCD,qBAAhC,CADA,IAEA,CAAC,oCAAeC,aAAf,EAA8BD,qBAA9B,CAFD,IAGA,CAAC,sCAAgBC,aAAhB,EAA+BD,qBAA/B,CAJH,EAKE;AACAC,IAAAA,aAAa,GAAG,uBAAQA,aAAR,EAAuBF,SAAvB,CAAhB;AACD;;AAED,MAAI,+BAAgBD,WAAhB,EAA6BG,aAA7B,MAAgD,CAAhD,IAAqD,CAAC,wCAAiBA,aAAjB,EAAgCD,qBAAhC,CAA1D,EAAkH;AAChH,WAAOC,aAAP;AACD;;AAED,SAAOC,SAAP;AACD,CAtBM","sourcesContent":["import { IAvailableDateOptions } from './dateGrid.types';\n\nimport { isRestrictedDate } from './isRestrictedDate';\n\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport const findAvailableDate = (options: IAvailableDateOptions): Date | undefined => {\n  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n  let availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (\n    compareDatePart(initialDate, availableDate) !== 0 &&\n    isRestrictedDate(availableDate, restrictedDateOptions) &&\n    !isAfterMaxDate(availableDate, restrictedDateOptions) &&\n    !isBeforeMinDate(availableDate, restrictedDateOptions)\n  ) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};\n"],"file":"findAvailableDate.js"}