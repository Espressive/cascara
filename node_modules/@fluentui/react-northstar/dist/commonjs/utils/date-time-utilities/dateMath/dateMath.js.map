{"version":3,"sources":["utils/date-time-utilities/dateMath/dateMath.ts"],"names":["addDays","date","days","result","Date","getTime","setDate","getDate","addWeeks","weeks","TimeConstants","DaysInOneWeek","addMonths","months","newMonth","getMonth","setMonth","MonthInOneYear","addYears","years","setFullYear","getFullYear","getMonthStart","getMonthEnd","getYearStart","getYearEnd","month","compareDates","date1","date2","compareDatePart","getDatePartHashValue","getDateRangeArray","dateRangeType","firstDayOfWeek","workWeekDays","daysToSelectInDayView","datesArray","startDate","endDate","DayOfWeek","Monday","Tuesday","Wednesday","Thursday","Friday","Math","max","DateRangeType","Day","getDatePart","Week","WorkWeek","getStartDateOfWeek","Month","Error","nextDate","push","indexOf","getDay","isInDateRangeArray","dateRange","dateInRange","getWeekNumbersInMonth","weeksInMonth","firstWeekOfYear","navigatedDate","selectedYear","selectedMonth","dayOfMonth","fistDayOfMonth","endOfFirstWeek","adjustWeekDay","endOfWeekRange","weeksArray","i","getWeekNumber","fourDayWeek","FirstWeekOfYear","FirstFullWeek","getWeekOfYearFullDays","FirstFourDayWeek","getFirstDayWeekOfYear","daysOffset","getEndDateOfWeek","lastDayOfWeek","numberOfFullDays","dayOfYear","getDayOfYear","num","lastDayOfPrevYear","MonthOfYear","December","daysInYear","num2","num3","floor","dateWeekDay","Sunday","year","daysUntilDate","daysInMonth"],"mappings":"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","sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  }\n  if (!date1 || !date2) {\n    return false;\n  }\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray: Date[] = [];\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error(`Unexpected object: ${dateRangeType}`);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"],"file":"dateMath.js"}