{"version":3,"sources":["utils/factories.ts"],"names":["mappedProps","iframe","img","input","createShorthandFactory","Component","mappedProp","mappedArrayProp","allowsJSX","ReactIs","isValidElementType","Error","value","options","createShorthandInternal","valIsNoop","render","valIsPrimitive","valIsPropsObject","valIsArray","valIsReactElement","React","isValidElement","process","env","NODE_ENV","displayName","console","error","join","defaultProps","usersProps","overrideProps","props","mappedHTMLProps","as","className","mergedClassesNames","split","style","styles","generateKey","key","elementKey","isNullKey","kind","children","undefined","createElement","createShorthand","shorthandConfig","fluentComposeConfig"],"mappings":"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","sourcesContent":["import { mergeStyles } from '@fluentui/styles';\nimport { ComponentWithAs, ComposePreparedOptions, ShorthandConfig } from '@fluentui/react-bindings';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nimport { ShorthandValue, Props, PropsOf, ShorthandRenderFunction } from '../types';\n\ntype HTMLTag = 'iframe' | 'img' | 'input';\ntype ShorthandProp = 'children' | 'src' | 'type';\n\ninterface CreateShorthandOptions<P> {\n  /** Default props object */\n  defaultProps?: () => Partial<Props<P>>;\n\n  /** Override props object or function (called with regular props) */\n  overrideProps?: Partial<Props<P>> | ((props: P) => Partial<Props<P>>);\n\n  /** Whether or not automatic key generation is allowed */\n  generateKey?: boolean;\n\n  /** Override the default render implementation. */\n  render?: ShorthandRenderFunction<P>;\n}\n\n// It's only necessary to map props that don't use 'children' as value ('children' is the default)\nconst mappedProps: { [key in HTMLTag]: ShorthandProp } = {\n  iframe: 'src',\n  img: 'src',\n  input: 'type',\n};\n\nexport type ShorthandFactory<P> = (\n  value: ShorthandValue<P>,\n  options?: CreateShorthandOptions<P>,\n) => React.ReactElement | null | undefined;\n\n// ============================================================\n// Factory Creators\n// ============================================================\n\n/**\n * @param config - Options passed to factory\n * @returns A shorthand factory function waiting for `val` and `defaultProps`.\n */\nexport function createShorthandFactory<TStringElement extends keyof JSX.IntrinsicElements, P>(config: {\n  /** A ReactClass or string */\n  Component: TStringElement;\n  /** A function that maps a primitive value to the Component props */\n  mappedProp?: keyof PropsOf<TStringElement>;\n  /** A function that maps an array value to the Component props */\n  mappedArrayProp?: keyof PropsOf<TStringElement>;\n  /** Indicates if factory supports React Elements */\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<TFunctionComponent extends React.FunctionComponent, P>(config: {\n  Component: TFunctionComponent;\n  mappedProp?: keyof PropsOf<TFunctionComponent>;\n  mappedArrayProp?: keyof PropsOf<TFunctionComponent>;\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<TInstance extends React.Component, P>(config: {\n  Component: { new (...args: any[]): TInstance };\n  mappedProp?: keyof PropsOf<TInstance>;\n  mappedArrayProp?: keyof PropsOf<TInstance>;\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<P>({ Component, mappedProp, mappedArrayProp, allowsJSX }) {\n  if (!ReactIs.isValidElementType(Component)) {\n    throw new Error('createShorthandFactory() Component must be a string or function.');\n  }\n\n  return (value, options: CreateShorthandOptions<P>) =>\n    createShorthandInternal({\n      allowsJSX,\n      Component,\n      mappedProp,\n      mappedArrayProp,\n      value,\n      options,\n    });\n}\n\n// ============================================================\n// Factories\n// ============================================================\n\nexport function createShorthandInternal<P>({\n  Component,\n  mappedProp,\n  mappedArrayProp,\n  value,\n  options = {},\n  allowsJSX = true,\n}: {\n  Component: React.ElementType<P>;\n  mappedProp?: string;\n  mappedArrayProp?: string;\n  allowsJSX?: boolean;\n  value?: ShorthandValue<P>;\n  options?: CreateShorthandOptions<P>;\n}) {\n  if (!ReactIs.isValidElementType(Component)) {\n    throw new Error('createShorthand() Component must be a string or function.');\n  }\n\n  // short circuit noop values\n  const valIsNoop = _.isNil(value) || typeof value === 'boolean';\n  if (valIsNoop && !options.render) return null;\n\n  const valIsPrimitive = typeof value === 'string' || typeof value === 'number';\n  const valIsPropsObject = _.isPlainObject(value);\n  const valIsArray = _.isArray(value);\n  const valIsReactElement = React.isValidElement(value);\n\n  // unhandled type warning\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = typeof Component === 'string' ? Component : Component.displayName;\n\n    if (!valIsPrimitive && !valIsPropsObject && !valIsArray && !valIsReactElement && !valIsNoop) {\n      /* eslint-disable-next-line no-console */\n      console.error(\n        [\n          `The shorthand prop for \"${displayName}\" component was passed a JSX element but this slot only supports string|number|object|array|ReactElements.`,\n          ' Use null|undefined|boolean for none.',\n          ` Received: ${value}`,\n        ].join(''),\n      );\n    }\n\n    if (!allowsJSX && valIsReactElement) {\n      /* eslint-disable-next-line no-console */\n      console.error(\n        [\n          `The shorthand prop for \"${displayName}\" component was passed a JSX element but this slot only supports string|number|object|array.`,\n          ' Use null|undefined|boolean for none.',\n          ` Received: ${value}`,\n        ].join(''),\n      );\n    }\n  }\n\n  // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n  const defaultProps = options.defaultProps ? options.defaultProps() || ({} as Props<P>) : ({} as Props<P>);\n\n  // User's props\n  const usersProps =\n    (valIsReactElement && ({} as Props<P>)) || (valIsPropsObject && (value as Props<P>)) || ({} as Props<P>);\n\n  // Override props\n  const overrideProps: Props<P> =\n    typeof options.overrideProps === 'function'\n      ? (options.overrideProps({ ...defaultProps, ...usersProps }) as Props<P>)\n      : (options.overrideProps as Props<P>) || ({} as Props<P>);\n\n  // Merge props\n  const props: Props<P> = { ...defaultProps, ...usersProps, ...overrideProps };\n\n  const mappedHTMLProps = mappedProps[overrideProps.as || defaultProps.as];\n\n  // Map prop for primitive value\n  if (valIsPrimitive || valIsReactElement) {\n    (props as any)[mappedHTMLProps || mappedProp || 'children'] = value;\n  }\n\n  // Map prop for array value\n  if (valIsArray) {\n    (props as any)[mappedHTMLProps || mappedArrayProp || 'children'] = value;\n  }\n\n  // Merge className\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    const mergedClassesNames = cx(defaultProps.className, overrideProps.className, usersProps.className);\n    (props as any).className = _.uniq(mergedClassesNames.split(' ')).join(' ');\n  }\n\n  // Merge style\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    (props as any).style = { ...defaultProps.style, ...usersProps.style, ...overrideProps.style };\n  }\n\n  // Merge styles\n  if (defaultProps.styles || overrideProps.styles || usersProps.styles) {\n    (props as any).styles = mergeStyles(defaultProps.styles, usersProps.styles, overrideProps.styles);\n  }\n\n  // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n  const { generateKey = true } = options;\n\n  // Use key or generate key\n  if (generateKey && _.isNil(props.key)) {\n    if (valIsPrimitive) {\n      // use string/number shorthand values as the key\n      (props as any).key = value;\n    }\n\n    if (valIsReactElement) {\n      // use the key from React Element\n      const elementKey = (value as React.ReactElement).key;\n      // <div /> - key is not passed as will be `null`\n      // <div key={null} /> - key is passed as `null` and will be stringified\n      const isNullKey = elementKey === null;\n\n      if (!isNullKey) {\n        (props as any).key = elementKey;\n      }\n    }\n  }\n\n  // Remove the kind prop from the props object\n  delete props.kind;\n\n  // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n  const { render } = options;\n  if (render) {\n    return render(Component, props);\n  }\n\n  if (typeof props.children === 'function') {\n    return props.children(Component, { ...props, children: undefined });\n  }\n\n  if (!allowsJSX && valIsReactElement) {\n    return null;\n  }\n\n  // Create ReactElements from built up props\n  if (valIsPrimitive || valIsPropsObject || valIsArray || valIsReactElement) {\n    return React.createElement(Component, props);\n  }\n\n  return null;\n}\n\nexport function createShorthand<TFunctionComponent extends React.FunctionComponent>(\n  Component: TFunctionComponent & {\n    shorthandConfig?: ShorthandConfig<PropsOf<TFunctionComponent>>;\n    fluentComposeConfig?: ComposePreparedOptions<PropsOf<TFunctionComponent>>;\n  },\n  value?: ShorthandValue<PropsOf<TFunctionComponent>>,\n  options?: CreateShorthandOptions<PropsOf<TFunctionComponent>>,\n): React.ReactElement;\nexport function createShorthand<TInstance extends React.Component>(\n  Component: { new (...args: any[]): TInstance } & {\n    shorthandConfig?: ShorthandConfig<PropsOf<TInstance>>;\n    fluentComposeConfig?: ComposePreparedOptions<PropsOf<TInstance>>;\n  },\n  value?: ShorthandValue<PropsOf<TInstance>>,\n  options?: CreateShorthandOptions<PropsOf<TInstance>>,\n): React.ReactElement;\nexport function createShorthand<E extends keyof JSX.IntrinsicElements, P>(\n  Component: ComponentWithAs<E, P> & {\n    shorthandConfig?: ShorthandConfig<P>;\n    fluentComposeConfig?: ComposePreparedOptions<P>;\n  },\n  value?: ShorthandValue<P>,\n  options?: CreateShorthandOptions<P>,\n): React.ReactElement;\nexport function createShorthand<TElementType extends React.ElementType>(\n  Component: TElementType & {\n    shorthandConfig?: ShorthandConfig<PropsOf<TElementType>>;\n    fluentComposeConfig?: ComposePreparedOptions<PropsOf<TElementType>>;\n  },\n  value?: ShorthandValue<PropsOf<TElementType>>,\n  options?: CreateShorthandOptions<PropsOf<TElementType>>,\n): React.ReactElement;\nexport function createShorthand<P>(Component, value?, options?) {\n  const { mappedProp = 'children', allowsJSX = true, mappedArrayProp } =\n    Component.shorthandConfig || Component.fluentComposeConfig?.shorthandConfig || {};\n\n  return createShorthandInternal<P>({\n    Component,\n    mappedProp,\n    allowsJSX,\n    mappedArrayProp,\n    value,\n    options: options || {},\n  });\n}\n"],"file":"factories.js"}