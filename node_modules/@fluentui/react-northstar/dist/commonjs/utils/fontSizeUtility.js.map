{"version":3,"sources":["utils/fontSizeUtility.ts"],"names":["DEFAULT_REM_SIZE_IN_PX","_documentRemSize","getDocumentRemSize","getFontSizeValue","getComputedStyle","document","documentElement","fontSize","e","size","parseFloat","round","n","pxToRem","valueInPx","baseRemSize","remSize","convertedValueInRems"],"mappings":";;;;;AAAA;;AAEA,IAAMA,sBAAsB,GAAG,EAA/B;AAEA,IAAIC,gBAA+B,GAAG,IAAtC;;AAEO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAc;AAC9C,MAAI,2BAAJ,EAAiB;AACf,QAAI;AACF;AACA,aAAOC,gBAAgB,CAACC,gBAAgB,CAACC,QAAQ,CAACC,eAAV,CAAhB,CAA2CC,QAA5C,CAAhB,IAAyEP,sBAAhF;AACD,KAHD,CAGE,OAAOQ,CAAP,EAAU;AACV,aAAOR,sBAAP;AACD;AACF;;AAED,SAAOA,sBAAP;AACD,CAXM;;;;AAaP,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACM,IAAD,EAAyC;AAChE,SAAQA,IAAI,IAAIC,UAAU,CAACD,IAAD,CAAnB,IAA8B,IAArC;AACD,CAFD,C,CAIA;;;AACO,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACC,CAAD;AAAA,SAAe,CAAEA,CAAC,GAAG,KAAJ,IAAaA,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,CAAC,GAA5B,CAAD,IAAsC,CAAvC,IAA4C,KAA3D;AAAA,CAAd;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD,EAAoBC,WAApB,EAAqD;AAC1E,MAAI,CAACA,WAAD,IAAgB,CAACd,gBAArB,EAAuC;AACrC;AACA;AACA;AACAA,IAAAA,gBAAgB,GAAGC,kBAAkB,EAArC;AACD;;AAED,MAAMc,OAAO,GAAGD,WAAW,IAAId,gBAAf,IAAmCD,sBAAnD;AACA,MAAMiB,oBAAoB,GAAGH,SAAS,GAAGE,OAAzC;AAEA,SAAUL,KAAK,CAACM,oBAAD,CAAf;AACD,CAZM","sourcesContent":["import { isBrowser } from './isBrowser';\n\nconst DEFAULT_REM_SIZE_IN_PX = 16;\n\nlet _documentRemSize: number | null = null;\n\nexport const getDocumentRemSize = (): number => {\n  if (isBrowser()) {\n    try {\n      // eslint-disable-next-line no-undef\n      return getFontSizeValue(getComputedStyle(document.documentElement).fontSize) || DEFAULT_REM_SIZE_IN_PX;\n    } catch (e) {\n      return DEFAULT_REM_SIZE_IN_PX;\n    }\n  }\n\n  return DEFAULT_REM_SIZE_IN_PX;\n};\n\nconst getFontSizeValue = (size?: string | null): number | null => {\n  return (size && parseFloat(size)) || null;\n};\n\n// A replacement for a Lodash's one, way more faster on our cases as handles specific scenario\nexport const round = (n: number) => ((n * 10000 + (n > 0 ? 0.5 : -0.5)) << 0) / 10000;\n\n/**\n * Converts the provided px size to rem based on the default font size of 16px unless\n * the HTML font size has been previously defined with setHTMLFontSize().\n * @param valueInPx - The px value to convert to rem.\n * @param baseRemSize - Rem size to use for conversions. Optional - document's font size will be taken otherwise.\n * @example\n * ```\n * // Returns '1rem' for default document font size (16px).\n * pxToRem(16)\n *\n * // Returns '2rem'.\n * pxToRem(32, 16)\n * ```\n * @returns The value converted to the rem.\n */\nexport const pxToRem = (valueInPx: number, baseRemSize?: number): string => {\n  if (!baseRemSize && !_documentRemSize) {\n    // there is no way how to reset the cached value\n    // invalidating the cache is not possible as resetting cached value won't trigger recalculation of site variables,\n    // for which originally computed values will stay unchanged\n    _documentRemSize = getDocumentRemSize();\n  }\n\n  const remSize = baseRemSize || _documentRemSize || DEFAULT_REM_SIZE_IN_PX;\n  const convertedValueInRems = valueInPx / remSize;\n\n  return `${round(convertedValueInRems)}rem`;\n};\n"],"file":"fontSizeUtility.js"}