{"version":3,"sources":["themes/teams/getBorderFocusStyles.ts"],"names":["defaultColor","getBorderFocusStyles","args","sv","variables","borderWidth","borderRadius","focusInnerBorderColor","focusOuterBorderColor","borderPadding","defaultPreudoStyles","content","position","borderStyle","pointerEvents","borderPaddingTop","top","borderPaddingBottom","bottom","borderPaddingLeft","left","borderPaddingRight","right","outline","borderColor","zIndex","zIndexes","foreground"],"mappings":";;;;AAmBA,IAAMA,YAAY,GAAG,aAArB;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAiF;AACnH,MAAMC,EAAE,GAAGD,IAAI,CAACE,SAAhB;AADmH,0BAQ/GF,IAR+G,CAGjHG,WAHiH;AAAA,MAGjHA,WAHiH,kCAGnGF,EAAE,CAACE,WAHgG;AAAA,2BAQ/GH,IAR+G,CAIjHI,YAJiH;AAAA,MAIjHA,YAJiH,mCAIlGH,EAAE,CAACG,YAJ+F;AAAA,8BAQ/GJ,IAR+G,CAKjHK,qBALiH;AAAA,MAKjHA,qBALiH,sCAKzFJ,EAAE,CAACI,qBAAH,IAA4BP,YAL6D;AAAA,8BAQ/GE,IAR+G,CAMjHM,qBANiH;AAAA,MAMjHA,qBANiH,sCAMzFL,EAAE,CAACK,qBAAH,IAA4BR,YAN6D;AAAA,MAOjHS,aAPiH,GAQ/GP,IAR+G,CAOjHO,aAPiH;AASnH,MAAMC,mBAAwC,GAAG;AAC/CC,IAAAA,OAAO,EAAE,IADsC;AAE/CC,IAAAA,QAAQ,EAAE,UAFqC;AAG/CC,IAAAA,WAAW,EAAE,OAHkC;AAI/CC,IAAAA,aAAa,EAAE,MAJgC;AAK/CT,IAAAA,WAAW,EAAXA,WAL+C;AAM/CC,IAAAA,YAAY,EAAZA;AAN+C,GAAjD;AAQA,MAAMS,gBAAgB,GAAG,CAACN,aAAD,oBAACA,aAAD,CAAkCO,GAAlC,KAAyCP,aAAlE;AACA,MAAMQ,mBAAmB,GAAG,CAACR,aAAD,oBAACA,aAAD,CAAkCS,MAAlC,KAA4CT,aAAxE;AACA,MAAMU,iBAAiB,GAAG,CAACV,aAAD,oBAACA,aAAD,CAAkCW,IAAlC,KAA0CX,aAApE;AACA,MAAMY,kBAAkB,GAAG,CAACZ,aAAD,oBAACA,aAAD,CAAkCa,KAAlC,KAA2Cb,aAAtE;AACA,SAAO;AACL,cAAU;AACRc,MAAAA,OAAO,EAAE;AADD,KADL;AAIL,sBAAkB;AAChBC,MAAAA,WAAW,EAAE,aADG;AAEhB,mCACKd,mBADL;AAEEe,QAAAA,MAAM,EAAEtB,EAAE,CAACuB,QAAH,CAAYC,UAFtB;AAGEH,QAAAA,WAAW,EAAEjB,qBAHf;AAIES,QAAAA,GAAG,EAAEP,aAAa,IAAI,IAAjB,GAAwB,GAAxB,SAAkCM,gBAJzC;AAKEG,QAAAA,MAAM,EAAET,aAAa,IAAI,IAAjB,GAAwB,GAAxB,SAAkCQ,mBAL5C;AAMEG,QAAAA,IAAI,EAAEX,aAAa,IAAI,IAAjB,GAAwB,GAAxB,SAAkCU,iBAN1C;AAOEG,QAAAA,KAAK,EAAEb,aAAa,IAAI,IAAjB,GAAwB,GAAxB,SAAkCY;AAP3C,QAFgB;AAWhB,kCACKX,mBADL;AAEEe,QAAAA,MAAM,EAAEtB,EAAE,CAACuB,QAAH,CAAYC,UAFtB;AAGEH,QAAAA,WAAW,EAAEhB,qBAHf;AAIEQ,QAAAA,GAAG,EAAEP,aAAa,IAAI,IAAjB,SAA4BJ,WAA5B,mBAA0DU,gBAA1D,WAAgFV,WAAhF,MAJP;AAKEa,QAAAA,MAAM,EAAET,aAAa,IAAI,IAAjB,SAA4BJ,WAA5B,mBAA0DY,mBAA1D,WAAmFZ,WAAnF,MALV;AAMEe,QAAAA,IAAI,EAAEX,aAAa,IAAI,IAAjB,SAA4BJ,WAA5B,mBAA0Dc,iBAA1D,WAAiFd,WAAjF,MANR;AAOEiB,QAAAA,KAAK,EAAEb,aAAa,IAAI,IAAjB,SAA4BJ,WAA5B,mBAA0DgB,kBAA1D,WAAkFhB,WAAlF;AAPT;AAXgB;AAJb,GAAP;AA0BD,CA/CM","sourcesContent":["import { ICSSInJSStyle, SiteVariablesPrepared } from '@fluentui/styles';\nimport * as React from 'react';\n\ntype CSSBorderStyles = Pick<React.CSSProperties, 'borderWidth' | 'borderRadius'>;\ntype BorderPadding = Record<'top' | 'bottom' | 'left' | 'right', string>;\ntype BorderFocusStyles = CSSBorderStyles & {\n  variables?:\n    | SiteVariablesPrepared\n    | {\n        borderWidth: string;\n        borderRadius: string;\n        focusInnerBorderColor: string;\n        focusOuterBorderColor: string;\n        zIndexes: { foreground: string };\n      };\n  focusInnerBorderColor?: string;\n  focusOuterBorderColor?: string;\n  borderPadding?: string | BorderPadding;\n};\nconst defaultColor = 'transparent';\n/**\n * Returns style object that can be used for styling components on focus state.\n * NOTE: the element where this is used needs to have relative positioning so that the\n * pseudo elements created on focus can be properly positioned.\n */\nexport const getBorderFocusStyles = (args: BorderFocusStyles): Record<':focus' | ':focus-visible', ICSSInJSStyle> => {\n  const sv = args.variables;\n  const {\n    borderWidth = sv.borderWidth,\n    borderRadius = sv.borderRadius,\n    focusInnerBorderColor = sv.focusInnerBorderColor || defaultColor,\n    focusOuterBorderColor = sv.focusOuterBorderColor || defaultColor,\n    borderPadding,\n  } = args;\n  const defaultPreudoStyles: React.CSSProperties = {\n    content: '\"\"',\n    position: 'absolute',\n    borderStyle: 'solid',\n    pointerEvents: 'none',\n    borderWidth,\n    borderRadius,\n  };\n  const borderPaddingTop = (borderPadding as BorderPadding)?.top || borderPadding;\n  const borderPaddingBottom = (borderPadding as BorderPadding)?.bottom || borderPadding;\n  const borderPaddingLeft = (borderPadding as BorderPadding)?.left || borderPadding;\n  const borderPaddingRight = (borderPadding as BorderPadding)?.right || borderPadding;\n  return {\n    ':focus': {\n      outline: 'none',\n    },\n    ':focus-visible': {\n      borderColor: 'transparent',\n      ':before': {\n        ...defaultPreudoStyles,\n        zIndex: sv.zIndexes.foreground,\n        borderColor: focusInnerBorderColor,\n        top: borderPadding == null ? '0' : `-${borderPaddingTop}`,\n        bottom: borderPadding == null ? '0' : `-${borderPaddingBottom}`,\n        left: borderPadding == null ? '0' : `-${borderPaddingLeft}`,\n        right: borderPadding == null ? '0' : `-${borderPaddingRight}`,\n      },\n      ':after': {\n        ...defaultPreudoStyles,\n        zIndex: sv.zIndexes.foreground,\n        borderColor: focusOuterBorderColor,\n        top: borderPadding == null ? `-${borderWidth}` : `calc(0px - ${borderPaddingTop} - ${borderWidth})`,\n        bottom: borderPadding == null ? `-${borderWidth}` : `calc(0px - ${borderPaddingBottom} - ${borderWidth})`,\n        left: borderPadding == null ? `-${borderWidth}` : `calc(0px - ${borderPaddingLeft} - ${borderWidth})`,\n        right: borderPadding == null ? `-${borderWidth}` : `calc(0px - ${borderPaddingRight} - ${borderWidth})`,\n      },\n    },\n  };\n};\n"],"file":"getBorderFocusStyles.js"}