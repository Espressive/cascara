{"version":3,"sources":["themes/teams/components/Embed/embedStyles.ts"],"names":["embedStyles","root","v","variables","siteVariables","theme","borderFocusStyles","display","verticalAlign","position","cursor","width","height","outline","embedSlotClassNames","control","borderColor","focusBorderColor","opacity","zIndex","p","props","color","controlColor","padding","borderRadius","backgroundColor","controlBackgroundColor","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","controlBackgroundSize","backgroundPositionX","active","pointerEvents","transition","left","top","transform","iframe","iframeLoaded"],"mappings":";;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEO,IAAMA,WAA0E,GAAG;AACxFC,EAAAA,IAAI,EAAE,oBAA+D;AAAA;;AAAA,QAAjDC,CAAiD,QAA5DC,SAA4D;AAAA,QAArCC,aAAqC,QAA9CC,KAA8C,CAArCD,aAAqC;AACnE,QAAME,iBAAiB,GAAG,gDAAqB;AAAEH,MAAAA,SAAS,EAAEC;AAAb,KAArB,CAA1B;AAEA;AACEG,MAAAA,OAAO,EAAE,cADX;AAEEC,MAAAA,aAAa,EAAE,QAFjB;AAGEC,MAAAA,QAAQ,EAAE,UAHZ;AAIEC,MAAAA,MAAM,EAAE,SAJV;AAKEC,MAAAA,KAAK,EAAET,CAAC,CAACS,KALX;AAMEC,MAAAA,MAAM,EAAEV,CAAC,CAACU,MAAF,IAAY,MANtB;AAOEC,MAAAA,OAAO,EAAE;AAPX,OASKP,iBAAiB,CAAC,QAAD,CATtB;AAUE,mEACSQ,2BAAoBC,OAD7B;AAEIC,QAAAA,WAAW,EAAEd,CAAC,CAACe,gBAFnB;AAGIC,QAAAA,OAAO,EAAE;AAHb,SAIOZ,iBAAiB,CAAC,gBAAD,CAJxB,iBAVF;AAkBE,6CACSQ,2BAAoBC,OAD7B,IACyC;AACrCG,QAAAA,OAAO,EAAE,CAD4B;AAErCC,QAAAA,MAAM,EAAEjB,CAAC,CAACiB;AAF2B,OADzC;AAlBF;AAyBD,GA7BuF;AA8BxFJ,EAAAA,OAAO,EAAE;AAAA,QAAUK,CAAV,SAAGC,KAAH;AAAA,QAAwBnB,CAAxB,SAAaC,SAAb;AAAA;AACPQ,MAAAA,KAAK,EAAE,oBAAQ,EAAR,CADA;AAEPC,MAAAA,MAAM,EAAE,oBAAQ,EAAR,CAFD;AAGPU,MAAAA,KAAK,EAAEpB,CAAC,CAACqB,YAHF;AAKPC,MAAAA,OAAO,EAAE,oBAAQ,CAAR,CALF;AAMPC,MAAAA,YAAY,EAAE,KANP;AAQPC,MAAAA,eAAe,EAAExB,CAAC,CAACyB,sBARZ;AASPC,MAAAA,eAAe,EAAE,wCAAiB1B,CAAC,CAACqB,YAAnB,CATV;AAUPM,MAAAA,gBAAgB,EAAE,WAVX;AAWPC,MAAAA,kBAAkB,EAAE,QAXb;AAYPC,MAAAA,cAAc,EAAE7B,CAAC,CAAC8B,qBAZX;AAaPC,MAAAA,mBAAmB,EAAE,oBAAQ,EAAR;AAbd,OAeHb,CAAC,CAACc,MAAF,IAAY;AACdN,MAAAA,eAAe,EAAE,0CAAkB1B,CAAC,CAACqB,YAApB;AADH,KAfT;AAmBPL,MAAAA,OAAO,EAAEE,CAAC,CAACc,MAAF,GAAW,CAAX,GAAe,CAnBjB;AAoBPC,MAAAA,aAAa,EAAE,MApBR;AAqBPC,MAAAA,UAAU,EAAE,0BArBL;AAuBPC,MAAAA,IAAI,EAAE,KAvBC;AAwBP5B,MAAAA,QAAQ,EAAE,UAxBH;AAyBP6B,MAAAA,GAAG,EAAE,KAzBE;AA0BPC,MAAAA,SAAS,EAAE;AA1BJ;AAAA,GA9B+E;AA0DxFC,EAAAA,MAAM,EAAE;AAAA,QAAUpB,CAAV,SAAGC,KAAH;AAAA;AACNd,MAAAA,OAAO,EAAE;AADH,OAEF,CAACa,CAAC,CAACqB,YAAH,IAAmB;AAAElC,MAAAA,OAAO,EAAE;AAAX,KAFjB;AAAA;AA1DgF,CAAnF","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { pxToRem } from '../../../../utils';\nimport { EmbedStylesProps, embedSlotClassNames } from '../../../../components/Embed/Embed';\nimport { EmbedVariables } from './embedVariables';\nimport { getBorderFocusStyles } from '../../getBorderFocusStyles';\nimport { playIndicatorUrl } from './playIndicatorUrl';\nimport { pauseIndicatorUrl } from './pauseIndicatorUrl';\n\nexport const embedStyles: ComponentSlotStylesPrepared<EmbedStylesProps, EmbedVariables> = {\n  root: ({ variables: v, theme: { siteVariables } }): ICSSInJSStyle => {\n    const borderFocusStyles = getBorderFocusStyles({ variables: siteVariables });\n\n    return {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      position: 'relative',\n      cursor: 'pointer',\n      width: v.width,\n      height: v.height || 'auto',\n      outline: 0,\n\n      ...borderFocusStyles[':focus'],\n      ':focus-visible': {\n        [`& .${embedSlotClassNames.control}`]: {\n          borderColor: v.focusBorderColor,\n          opacity: 1,\n          ...borderFocusStyles[':focus-visible'],\n        },\n      },\n\n      ':hover': {\n        [`& .${embedSlotClassNames.control}`]: {\n          opacity: 1,\n          zIndex: v.zIndex,\n        },\n      },\n    };\n  },\n  control: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    width: pxToRem(48),\n    height: pxToRem(48),\n    color: v.controlColor,\n\n    padding: pxToRem(4),\n    borderRadius: '50%',\n\n    backgroundColor: v.controlBackgroundColor,\n    backgroundImage: playIndicatorUrl(v.controlColor),\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    backgroundSize: v.controlBackgroundSize,\n    backgroundPositionX: pxToRem(12),\n\n    ...(p.active && {\n      backgroundImage: pauseIndicatorUrl(v.controlColor),\n    }),\n\n    opacity: p.active ? 0 : 1,\n    pointerEvents: 'none',\n    transition: 'opacity .22s ease-in-out',\n\n    left: '50%',\n    position: 'absolute',\n    top: '50%',\n    transform: 'translate(-50%, -50%)',\n  }),\n  iframe: ({ props: p }): ICSSInJSStyle => ({\n    display: 'block',\n    ...(!p.iframeLoaded && { display: 'none' }),\n  }),\n} as ComponentSlotStylesPrepared<EmbedStylesProps, EmbedVariables>;\n"],"file":"embedStyles.js"}