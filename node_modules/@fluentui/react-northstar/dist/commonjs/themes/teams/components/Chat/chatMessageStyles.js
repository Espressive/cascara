"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.chatMessageStyles = void 0;

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _chatDensityContext = require("../../../../components/Chat/chatDensityContext");

var _ChatMessage = require("../../../../components/Chat/ChatMessage");

var _utils = require("../../../../utils");

var _getBorderFocusStyles = require("../../getBorderFocusStyles");

var _chatMessageStylesComfy = require("./chatMessageStylesComfy");

var _chatMessageStylesCompact = require("./chatMessageStylesCompact");

var displayActionMenu = function displayActionMenu(overlayZIndex) {
  return {
    // we need higher zIndex for the action menu in order to be displayed above the focus border of the chat message
    zIndex: overlayZIndex,
    overflow: 'visible',
    // opacity should always be preferred over visibility in order to avoid accessibility bugs in
    // JAWS behavior on Windows
    opacity: 1,
    width: 'auto'
  };
};

var chatMessageDensityStyles = {
  comfy: _chatMessageStylesComfy.chatMessageStylesComfy,
  compact: _chatMessageStylesCompact.chatMessageStylesCompact
};

var getChatMessageDensityStyles = function getChatMessageDensityStyles(density) {
  if (density === void 0) {
    density = _chatDensityContext.defaultChatDensity;
  }

  return chatMessageDensityStyles[density];
};

var chatMessageStyles = {
  root: function root(componentStyleFunctionParam) {
    var _hover, _ref, _getChatMessageDensit, _getChatMessageDensit2;

    var p = componentStyleFunctionParam.props,
        v = componentStyleFunctionParam.variables,
        siteVariables = componentStyleFunctionParam.theme.siteVariables;
    return Object.assign({
      borderRadius: v.borderRadius,
      color: v.color,
      display: 'inline-block',
      outline: 0,
      position: 'relative',
      wordBreak: 'break-word',
      wordWrap: 'break-word'
    }, (0, _getBorderFocusStyles.getBorderFocusStyles)({
      borderRadius: 'inherit',
      variables: siteVariables
    }), (0, _isNil2.default)(v.showActionMenu) && p.hasActionMenu && Object.assign({
      ':hover': (_hover = {}, _hover["> ." + _ChatMessage.chatMessageSlotClassNames.actionMenu] = displayActionMenu(v.overlayZIndex), _hover)
    }, p.showActionMenu && (_ref = {}, _ref["> ." + _ChatMessage.chatMessageSlotClassNames.actionMenu] = displayActionMenu(v.overlayZIndex), _ref)), (_getChatMessageDensit = (_getChatMessageDensit2 = getChatMessageDensityStyles(p.density)).root) == null ? void 0 : _getChatMessageDensit.call(_getChatMessageDensit2, componentStyleFunctionParam));
  },
  actionMenu: function actionMenu(_ref2) {
    var p = _ref2.props,
        v = _ref2.variables;
    var defaultShowActionMenu = p.hasActionMenu && (p.focused || p.showActionMenu);
    var showActionMenu = (0, _isNil2.default)(v.showActionMenu) ? defaultShowActionMenu : v.showActionMenu;
    return Object.assign({
      backgroundColor: v.backgroundColor,
      border: '1px solid',
      borderColor: v.reactionGroupBorderColor,
      borderRadius: v.borderRadius,
      boxShadow: v.actionMenuBoxShadow,
      '[data-popper-escaped]': {
        opacity: 0
      },
      zIndex: -1,
      overflow: 'hidden',
      opacity: 0,
      width: 0
    }, showActionMenu && displayActionMenu(v.overlayZIndex));
  },
  author: function author(componentStyleFunctionParam) {
    var _getChatMessageDensit3, _getChatMessageDensit4;

    var p = componentStyleFunctionParam.props;
    return (_getChatMessageDensit3 = (_getChatMessageDensit4 = getChatMessageDensityStyles(p.density)).author) == null ? void 0 : _getChatMessageDensit3.call(_getChatMessageDensit4, componentStyleFunctionParam);
  },
  compactBody: function compactBody(componentStyleFunctionParam) {
    var _getChatMessageDensit5, _getChatMessageDensit6;

    var p = componentStyleFunctionParam.props;
    return (_getChatMessageDensit5 = (_getChatMessageDensit6 = getChatMessageDensityStyles(p.density)).compactBody) == null ? void 0 : _getChatMessageDensit5.call(_getChatMessageDensit6, componentStyleFunctionParam);
  },
  timestamp: function timestamp(componentStyleFunctionParam) {
    var _getChatMessageDensit7, _getChatMessageDensit8;

    var p = componentStyleFunctionParam.props,
        v = componentStyleFunctionParam.variables;
    return Object.assign({
      color: v.timestampColor
    }, (_getChatMessageDensit7 = (_getChatMessageDensit8 = getChatMessageDensityStyles(p.density)).timestamp) == null ? void 0 : _getChatMessageDensit7.call(_getChatMessageDensit8, componentStyleFunctionParam));
  },
  content: function content(componentStyleFunctionParam) {
    var _getChatMessageDensit9, _getChatMessageDensit10;

    var p = componentStyleFunctionParam.props,
        v = componentStyleFunctionParam.variables;
    return Object.assign({
      color: v.contentColor,
      display: 'block',
      '& a': {
        outline: 'none',
        color: p.mine ? v.linkColorMine : v.linkColor,
        ':focus': {
          textDecoration: 'underline'
        }
      }
    }, (_getChatMessageDensit9 = (_getChatMessageDensit10 = getChatMessageDensityStyles(p.density)).content) == null ? void 0 : _getChatMessageDensit9.call(_getChatMessageDensit10, componentStyleFunctionParam));
  },
  badge: function badge(componentStyleFunctionParam) {
    var _getChatMessageDensit11, _getChatMessageDensit12;

    var p = componentStyleFunctionParam.props,
        v = componentStyleFunctionParam.variables;
    return Object.assign({
      backgroundColor: v.hasMention ? v.hasMentionNubbinColor : v.isImportantColor,
      borderRadius: '50%',
      boxShadow: v.badgeShadow,
      color: v.badgeTextColor,
      height: 'auto',
      padding: (0, _utils.pxToRem)(4),
      width: 'auto',
      zIndex: v.zIndex,
      '& > :first-child': {
        display: 'inline-flex'
      }
    }, (_getChatMessageDensit11 = (_getChatMessageDensit12 = getChatMessageDensityStyles(p.density)).badge) == null ? void 0 : _getChatMessageDensit11.call(_getChatMessageDensit12, componentStyleFunctionParam));
  },
  reactionGroup: function reactionGroup(componentStyleFunctionParam) {
    var _getChatMessageDensit13, _getChatMessageDensit14;

    var p = componentStyleFunctionParam.props;
    return (_getChatMessageDensit13 = (_getChatMessageDensit14 = getChatMessageDensityStyles(p.density)).reactionGroup) == null ? void 0 : _getChatMessageDensit13.call(_getChatMessageDensit14, componentStyleFunctionParam);
  }
};
exports.chatMessageStyles = chatMessageStyles;
//# sourceMappingURL=chatMessageStyles.js.map
