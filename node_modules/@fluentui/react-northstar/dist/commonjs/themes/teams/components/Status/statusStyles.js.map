{"version":3,"sources":["themes/teams/components/Status/statusStyles.ts"],"names":["getBackgroundColor","state","variables","successBackgroundColor","infoBackgroundColor","warningBackgroundColor","errorBackgroundColor","defaultBackgroundColor","getTextColor","successTextColor","infoTextColor","warningTextColor","errorTextColor","defaultTextColor","sizeToPxValue","smallest","smaller","small","medium","large","larger","largest","getSizeStyles","sizeInPx","borderWidth","borderColor","sizeInRem","height","width","statusStyles","root","props","color","size","display","alignItems","justifyContent","verticalAlign","borderRadius","borderStyle","backgroundColor","icon","v","iconSize"],"mappings":"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","sourcesContent":["import { pxToRem, SizeValue } from '../../../../utils';\nimport { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { StatusStylesProps } from '../../../../components/Status/Status';\nimport { StatusVariables } from './statusVariables';\n\nconst getBackgroundColor = (state: string, variables: StatusVariables) => {\n  switch (state) {\n    case 'success':\n      return variables.successBackgroundColor;\n    case 'info':\n      return variables.infoBackgroundColor;\n    case 'warning':\n      return variables.warningBackgroundColor;\n    case 'error':\n      return variables.errorBackgroundColor;\n    case 'unknown':\n    default:\n      return variables.defaultBackgroundColor;\n  }\n};\n\nconst getTextColor = (state: string, variables: StatusVariables) => {\n  switch (state) {\n    case 'success':\n      return variables.successTextColor;\n    case 'info':\n      return variables.infoTextColor;\n    case 'warning':\n      return variables.warningTextColor;\n    case 'error':\n      return variables.errorTextColor;\n    case 'unknown':\n    default:\n      return variables.defaultTextColor;\n  }\n};\n\nconst sizeToPxValue: Record<SizeValue, number> = {\n  smallest: 6,\n  smaller: 10,\n  small: 10,\n  medium: 10,\n  large: 10,\n  larger: 16,\n  largest: 0,\n};\n\nexport const getSizeStyles = (sizeInPx: number, variables: StatusVariables) => {\n  const borderWidth = (variables.borderColor && variables.borderWidth) || 0;\n  const sizeInRem = pxToRem(sizeInPx + 2 * borderWidth);\n\n  return {\n    height: sizeInRem,\n    width: sizeInRem,\n  };\n};\n\nexport const statusStyles: ComponentSlotStylesPrepared<StatusStylesProps, StatusVariables> = {\n  root: ({ props: { color, size, state }, variables }): ICSSInJSStyle => {\n    return {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      ...getSizeStyles(sizeToPxValue[size], variables),\n      verticalAlign: 'middle',\n      borderRadius: '9999px',\n      ...(variables.borderColor && {\n        borderColor: variables.borderColor,\n        borderWidth: pxToRem(variables.borderWidth),\n        borderStyle: 'solid',\n      }),\n      backgroundColor: color || getBackgroundColor(state, variables),\n    };\n  },\n\n  icon: ({ props: { state }, variables: v }): ICSSInJSStyle => ({\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: v.iconSize,\n    height: v.iconSize,\n    color: getTextColor(state, v),\n    '& > :first-child': {\n      height: '100%',\n      width: '100%',\n      '& svg': {\n        height: '100%',\n        width: '100%',\n      },\n    },\n  }),\n};\n"],"file":"statusStyles.js"}