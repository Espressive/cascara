{"version":3,"sources":["themes/teams/components/SvgIcon/svgIconStyles.ts"],"names":["getPaddedStyle","padding","getBorderedStyles","boxShadowColor","boxShadow","getIconSize","size","v","modifiedSizes","large","x","xx","sizeModifier","getXSpacingStyles","xSpacing","horizontalSpace","marginLeft","marginRight","svgIconStyles","root","p","props","variables","speak","verticalAlign","circular","borderRadius","disabled","color","disabledColor","display","bordered","borderColor","backgroundColor","outlinePart","outline","filledPart","svg","rotate","rtl","iconSizeInRems","width","height","fill","transform","svgFlippingInRtl","config","redPath","redColor"],"mappings":"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","sourcesContent":["import { callable, ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { SvgIconXSpacing, SvgIconProps } from '@fluentui/react-icons-northstar';\n\nimport { pxToRem, SizeValue } from '../../../../utils';\nimport { SvgIconVariables } from './svgIconVariables';\n\nexport type SvgIconStylesProps = Pick<\n  SvgIconProps,\n  'bordered' | 'circular' | 'disabled' | 'outline' | 'rotate' | 'size' | 'xSpacing'\n>;\n\nconst getPaddedStyle = (): ICSSInJSStyle => ({\n  padding: pxToRem(4),\n});\n\nconst getBorderedStyles = (boxShadowColor: string): ICSSInJSStyle => {\n  return {\n    ...getPaddedStyle(),\n\n    boxShadow: `0 0 0 .05rem ${boxShadowColor} inset`,\n  };\n};\n\nconst getIconSize = (size: SizeValue, v: SvgIconVariables): string => {\n  const modifiedSizes = {\n    large: {\n      x: 24,\n      xx: 28,\n    },\n  };\n\n  return v.sizeModifier && modifiedSizes[size] && modifiedSizes[size][v.sizeModifier]\n    ? pxToRem(modifiedSizes[size][v.sizeModifier])\n    : v[`${size}Size`];\n};\n\nconst getXSpacingStyles = (xSpacing: SvgIconXSpacing, horizontalSpace: string): ICSSInJSStyle => {\n  switch (xSpacing) {\n    case 'none':\n      return { marginLeft: 0, marginRight: 0 };\n    case 'before':\n      return { marginLeft: horizontalSpace, marginRight: 0 };\n    case 'after':\n      return { marginLeft: 0, marginRight: horizontalSpace };\n    case 'both':\n      return { marginLeft: horizontalSpace, marginRight: horizontalSpace };\n  }\n};\n\nexport const svgIconStyles: ComponentSlotStylesPrepared<SvgIconStylesProps, SvgIconVariables> = {\n  root: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    speak: 'none',\n    verticalAlign: 'middle',\n\n    ...getXSpacingStyles(p.xSpacing, v.horizontalSpace),\n\n    ...(p.circular && { ...getPaddedStyle(), borderRadius: '50%' }),\n    ...(p.disabled && {\n      color: v.disabledColor,\n    }),\n    display: 'inline-block',\n\n    ...((p.bordered || v.borderColor) && getBorderedStyles(v.borderColor || v.color || 'currentColor')),\n\n    backgroundColor: v.backgroundColor,\n  }),\n\n  outlinePart: ({ props: p }): ICSSInJSStyle => {\n    return {\n      display: 'none',\n\n      ...(p.outline && {\n        display: 'block',\n      }),\n    };\n  },\n\n  filledPart: ({ props: p }): ICSSInJSStyle => {\n    return {\n      ...(p.outline && {\n        display: 'none',\n      }),\n    };\n  },\n\n  svg: ({ props: { size, disabled, rotate }, variables: v, rtl }): ICSSInJSStyle => {\n    const iconSizeInRems = getIconSize(size, v);\n\n    return {\n      display: 'block',\n      width: iconSizeInRems,\n      height: iconSizeInRems,\n      fill: v.color || 'currentColor',\n\n      ...(disabled && {\n        fill: v.disabledColor,\n      }),\n\n      // Manual flipping to make it compatible with Emotion and Fela in the same time\n      transform: `rotate(${rotate}deg) /* @noflip */`,\n      ...(rtl && {\n        transform: `rotate(${-1 * rotate}deg) /* @noflip */`,\n      }),\n    };\n  },\n\n  svgFlippingInRtl: config => {\n    const { props, rtl } = config;\n    return {\n      ...callable(svgIconStyles.svg)(config),\n      ...(rtl && {\n        transform: `scaleX(-1) rotate(${props.rotate}deg) /* @noflip */`,\n      }),\n    };\n  },\n\n  redPath: ({ variables: v }) => ({\n    fill: v.redColor,\n  }),\n};\n"],"file":"svgIconStyles.js"}