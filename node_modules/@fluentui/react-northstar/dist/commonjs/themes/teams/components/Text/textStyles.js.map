{"version":3,"sources":["themes/teams/components/Text/textStyles.ts"],"names":["textStyles","root","p","props","v","variables","colors","colorScheme","color","foreground","atMention","atMentionOtherColor","truncated","overflow","textOverflow","whiteSpace","disabled","disabledColor","error","errorColor","success","successColor","temporary","fontStyle","align","display","textAlign","weight","fontWeight","fontWeightLight","fontWeightSemilight","fontWeightRegular","fontWeightSemibold","fontWeightBold","size","fontSize","fontSizeSmallest","lineHeight","fontLineHeightSmallest","fontSizeSmaller","fontLineHeightSmaller","fontSizeSmall","fontLineHeightSmall","fontSizeMedium","fontLineHeightMedium","fontSizeLarge","fontLineHeightLarge","fontSizeLarger","fontLineHeightLarger","fontSizeLargest","fontLineHeightLargest","atMentionMeColor","atMentionMeFontWeight","timestamp","timestampColor","important","importantColor","importantWeight"],"mappings":"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","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { TextVariables } from './textVariables';\nimport { TextStylesProps } from '../../../../components/Text/Text';\nimport { getColorSchemeKey } from '../../colors';\nimport { translateAlignProp } from '../../../../styles/translateAlignProp';\n\nexport const textStyles: ComponentSlotStylesPrepared<TextStylesProps, TextVariables> = {\n  root: ({ props: p, variables: v }): ICSSInJSStyle => {\n    const colors = v.colorScheme[getColorSchemeKey(p.color)];\n    return {\n      ...(p.color && { color: colors.foreground }),\n      ...(p.atMention === true && { color: v.atMentionOtherColor }),\n      ...(p.truncated && { overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }),\n      ...(p.disabled && { color: v.disabledColor }),\n      ...(p.error && { color: v.errorColor }),\n      ...(p.success && { color: v.successColor }),\n      ...(p.temporary && { fontStyle: 'italic' }),\n      ...(p.align && { display: 'block', textAlign: translateAlignProp(p.align) }), // textAlign makes sense only for block elements\n\n      ...(p.weight === 'light' && { fontWeight: v.fontWeightLight }),\n      ...(p.weight === 'semilight' && { fontWeight: v.fontWeightSemilight }),\n      ...(p.weight === 'regular' && { fontWeight: v.fontWeightRegular }),\n      ...(p.weight === 'semibold' && { fontWeight: v.fontWeightSemibold }),\n      ...(p.weight === 'bold' && { fontWeight: v.fontWeightBold }),\n\n      ...(p.size === 'smallest' && {\n        fontSize: v.fontSizeSmallest,\n        lineHeight: v.fontLineHeightSmallest,\n      }),\n      ...(p.size === 'smaller' && {\n        fontSize: v.fontSizeSmaller,\n        lineHeight: v.fontLineHeightSmaller,\n      }),\n      ...(p.size === 'small' && {\n        fontSize: v.fontSizeSmall,\n        lineHeight: v.fontLineHeightSmall,\n      }),\n      ...(p.size === 'medium' && {\n        fontSize: v.fontSizeMedium,\n        lineHeight: v.fontLineHeightMedium,\n      }),\n      ...(p.size === 'large' && {\n        fontSize: v.fontSizeLarge,\n        lineHeight: v.fontLineHeightLarge,\n      }),\n      ...(p.size === 'larger' && {\n        fontSize: v.fontSizeLarger,\n        lineHeight: v.fontLineHeightLarger,\n      }),\n      ...(p.size === 'largest' && {\n        fontSize: v.fontSizeLargest,\n        lineHeight: v.fontLineHeightLargest,\n      }),\n      ...(p.atMention === 'me' && {\n        color: v.atMentionMeColor,\n        fontWeight: v.atMentionMeFontWeight,\n      }),\n      ...(p.timestamp && {\n        color: v.timestampColor,\n      }),\n      ...(p.important && {\n        color: v.importantColor,\n        fontWeight: v.importantWeight,\n      }),\n    };\n  },\n};\n"],"file":"textStyles.js"}