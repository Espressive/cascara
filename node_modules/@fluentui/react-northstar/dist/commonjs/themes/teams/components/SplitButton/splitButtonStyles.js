"use strict";

exports.__esModule = true;
exports.splitButtonStyles = void 0;

var _getBorderFocusStyles = require("../../getBorderFocusStyles");

var splitButtonStyles = {
  menuButton: function menuButton(_ref) {
    var p = _ref.props,
        v = _ref.variables;
    return Object.assign({
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0,
      borderRightWidth: 0,
      padding: v.padding,
      minWidth: v.minWidth
    }, p.size === 'small' && {
      height: v.smallDimension,
      padding: v.smallPadding,
      minWidth: v.smallMinWidth,
      boxShadow: v.smallBoxShadow
    }, {
      ':focus-visible': {
        borderRightWidth: 0,
        ':before': {
          borderRightWidth: 0
        },
        ':after': {
          borderRightWidth: 0
        }
      },
      ':active': {
        animationName: 'unset',
        animationDuration: 'unset'
      }
    });
  },
  root: function root(_ref2) {
    var p = _ref2.props,
        v = _ref2.variables,
        siteVariables = _ref2.theme.siteVariables;
    var borderFocusStyles = (0, _getBorderFocusStyles.getBorderFocusStyles)({
      variables: {
        borderRadius: v.focusBorderRadius,
        borderWidth: v.focusBorderWidth,
        focusInnerBorderColor: v.focusInnerBorderColor,
        focusOuterBorderColor: v.focusOuterBorderColor,
        zIndexes: {
          foreground: v.focusBorderZIndex
        }
      }
    });
    return {
      borderRadius: v.borderRadius,
      position: 'relative',
      whiteSpace: 'nowrap',
      display: 'inline-block',
      width: 'fit-content',
      ':focus-within': Object.assign({
        boxShadow: 'none'
      }, p.isFromKeyboard && Object.assign({}, borderFocusStyles[':focus-visible']))
    };
  }
};
exports.splitButtonStyles = splitButtonStyles;
//# sourceMappingURL=splitButtonStyles.js.map
