{"version":3,"sources":["themes/teams/components/Chat/chatMessageStyles.ts"],"names":["displayActionMenu","overlayZIndex","zIndex","overflow","opacity","width","chatMessageDensityStyles","comfy","chatMessageStylesComfy","compact","chatMessageStylesCompact","getChatMessageDensityStyles","density","defaultChatDensity","chatMessageStyles","root","componentStyleFunctionParam","p","props","v","variables","siteVariables","theme","borderRadius","color","display","outline","position","wordBreak","wordWrap","showActionMenu","hasActionMenu","chatMessageSlotClassNames","actionMenu","defaultShowActionMenu","focused","backgroundColor","border","borderColor","reactionGroupBorderColor","boxShadow","actionMenuBoxShadow","author","compactBody","timestamp","timestampColor","content","contentColor","mine","linkColorMine","linkColor","textDecoration","badge","hasMention","hasMentionNubbinColor","isImportantColor","badgeShadow","badgeTextColor","height","padding","reactionGroup"],"mappings":"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","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { isNil } from 'lodash';\n\nimport { ChatDensity, defaultChatDensity } from '../../../../components/Chat/chatDensityContext';\nimport { chatMessageSlotClassNames, ChatMessageStylesProps } from '../../../../components/Chat/ChatMessage';\nimport { pxToRem } from '../../../../utils';\nimport { getBorderFocusStyles } from '../../getBorderFocusStyles';\nimport { chatMessageStylesComfy } from './chatMessageStylesComfy';\nimport { chatMessageStylesCompact } from './chatMessageStylesCompact';\nimport { ChatMessageVariables } from './chatMessageVariables';\n\nconst displayActionMenu = (overlayZIndex: ICSSInJSStyle['zIndex']): ICSSInJSStyle => ({\n  // we need higher zIndex for the action menu in order to be displayed above the focus border of the chat message\n  zIndex: overlayZIndex,\n  overflow: 'visible',\n  // opacity should always be preferred over visibility in order to avoid accessibility bugs in\n  // JAWS behavior on Windows\n  opacity: 1,\n  width: 'auto',\n});\n\nconst chatMessageDensityStyles: Record<\n  ChatDensity,\n  ComponentSlotStylesPrepared<ChatMessageStylesProps, ChatMessageVariables>\n> = {\n  comfy: chatMessageStylesComfy,\n  compact: chatMessageStylesCompact,\n};\n\nconst getChatMessageDensityStyles = (density: ChatDensity = defaultChatDensity) => chatMessageDensityStyles[density];\n\nexport const chatMessageStyles: ComponentSlotStylesPrepared<ChatMessageStylesProps, ChatMessageVariables> = {\n  root: (componentStyleFunctionParam): ICSSInJSStyle => {\n    const {\n      props: p,\n      variables: v,\n      theme: { siteVariables },\n    } = componentStyleFunctionParam;\n    return {\n      borderRadius: v.borderRadius,\n      color: v.color,\n      display: 'inline-block',\n      outline: 0,\n      position: 'relative',\n      wordBreak: 'break-word',\n      wordWrap: 'break-word',\n\n      ...getBorderFocusStyles({ borderRadius: 'inherit', variables: siteVariables }),\n\n      // ActionMenu's appearance can be controlled by the value of showActionMenu variable - in this\n      // case this variable will serve the single source of truth on whether actions menu should be shown.\n      // Otherwise, if the variable is not provided, the default appearance logic will be used for actions menu.\n      ...(isNil(v.showActionMenu) &&\n        p.hasActionMenu && {\n          ':hover': {\n            [`> .${chatMessageSlotClassNames.actionMenu}`]: displayActionMenu(v.overlayZIndex),\n          },\n          ...(p.showActionMenu && {\n            [`> .${chatMessageSlotClassNames.actionMenu}`]: displayActionMenu(v.overlayZIndex),\n          }),\n        }),\n\n      ...getChatMessageDensityStyles(p.density).root?.(componentStyleFunctionParam),\n    };\n  },\n\n  actionMenu: ({ props: p, variables: v }): ICSSInJSStyle => {\n    const defaultShowActionMenu = p.hasActionMenu && (p.focused || p.showActionMenu);\n    const showActionMenu = isNil(v.showActionMenu) ? defaultShowActionMenu : v.showActionMenu;\n\n    return {\n      backgroundColor: v.backgroundColor,\n      border: '1px solid',\n      borderColor: v.reactionGroupBorderColor,\n      borderRadius: v.borderRadius,\n      boxShadow: v.actionMenuBoxShadow,\n      '[data-popper-escaped]': { opacity: 0 },\n\n      zIndex: -1,\n      overflow: 'hidden',\n      opacity: 0,\n      width: 0,\n      ...(showActionMenu && displayActionMenu(v.overlayZIndex)),\n    };\n  },\n\n  author: (componentStyleFunctionParam): ICSSInJSStyle => {\n    const { props: p } = componentStyleFunctionParam;\n    return getChatMessageDensityStyles(p.density).author?.(componentStyleFunctionParam);\n  },\n\n  compactBody: (componentStyleFunctionParam): ICSSInJSStyle => {\n    const { props: p } = componentStyleFunctionParam;\n    return getChatMessageDensityStyles(p.density).compactBody?.(componentStyleFunctionParam);\n  },\n\n  timestamp: (componentStyleFunctionParam): ICSSInJSStyle => {\n    const { props: p, variables: v } = componentStyleFunctionParam;\n    return {\n      color: v.timestampColor,\n      ...getChatMessageDensityStyles(p.density).timestamp?.(componentStyleFunctionParam),\n    };\n  },\n\n  content: (componentStyleFunctionParam): ICSSInJSStyle => {\n    const { props: p, variables: v } = componentStyleFunctionParam;\n    return {\n      color: v.contentColor,\n      display: 'block',\n      '& a': {\n        outline: 'none',\n        color: p.mine ? v.linkColorMine : v.linkColor,\n        ':focus': {\n          textDecoration: 'underline',\n        },\n      },\n      ...getChatMessageDensityStyles(p.density).content?.(componentStyleFunctionParam),\n    };\n  },\n\n  badge: (componentStyleFunctionParam): ICSSInJSStyle => {\n    const { props: p, variables: v } = componentStyleFunctionParam;\n    return {\n      backgroundColor: v.hasMention ? v.hasMentionNubbinColor : v.isImportantColor,\n      borderRadius: '50%',\n      boxShadow: v.badgeShadow,\n      color: v.badgeTextColor,\n      height: 'auto',\n      padding: pxToRem(4),\n      width: 'auto',\n      zIndex: v.zIndex,\n      '& > :first-child': { display: 'inline-flex' },\n      ...getChatMessageDensityStyles(p.density).badge?.(componentStyleFunctionParam),\n    };\n  },\n\n  reactionGroup: (componentStyleFunctionParam): ICSSInJSStyle => {\n    const { props: p } = componentStyleFunctionParam;\n    return getChatMessageDensityStyles(p.density).reactionGroup?.(componentStyleFunctionParam);\n  },\n};\n"],"file":"chatMessageStyles.js"}