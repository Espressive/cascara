"use strict";

exports.__esModule = true;
exports.getBorderFocusStyles = void 0;
var defaultColor = 'transparent';
/**
 * Returns style object that can be used for styling components on focus state.
 * NOTE: the element where this is used needs to have relative positioning so that the
 * pseudo elements created on focus can be properly positioned.
 */

var getBorderFocusStyles = function getBorderFocusStyles(args) {
  var sv = args.variables;
  var _args$borderWidth = args.borderWidth,
      borderWidth = _args$borderWidth === void 0 ? sv.borderWidth : _args$borderWidth,
      _args$borderRadius = args.borderRadius,
      borderRadius = _args$borderRadius === void 0 ? sv.borderRadius : _args$borderRadius,
      _args$focusInnerBorde = args.focusInnerBorderColor,
      focusInnerBorderColor = _args$focusInnerBorde === void 0 ? sv.focusInnerBorderColor || defaultColor : _args$focusInnerBorde,
      _args$focusOuterBorde = args.focusOuterBorderColor,
      focusOuterBorderColor = _args$focusOuterBorde === void 0 ? sv.focusOuterBorderColor || defaultColor : _args$focusOuterBorde,
      borderPadding = args.borderPadding;
  var defaultPreudoStyles = {
    content: '""',
    position: 'absolute',
    borderStyle: 'solid',
    pointerEvents: 'none',
    borderWidth: borderWidth,
    borderRadius: borderRadius
  };
  var borderPaddingTop = (borderPadding == null ? void 0 : borderPadding.top) || borderPadding;
  var borderPaddingBottom = (borderPadding == null ? void 0 : borderPadding.bottom) || borderPadding;
  var borderPaddingLeft = (borderPadding == null ? void 0 : borderPadding.left) || borderPadding;
  var borderPaddingRight = (borderPadding == null ? void 0 : borderPadding.right) || borderPadding;
  return {
    ':focus': {
      outline: 'none'
    },
    ':focus-visible': {
      borderColor: 'transparent',
      ':before': Object.assign({}, defaultPreudoStyles, {
        zIndex: sv.zIndexes.foreground,
        borderColor: focusInnerBorderColor,
        top: borderPadding == null ? '0' : "-" + borderPaddingTop,
        bottom: borderPadding == null ? '0' : "-" + borderPaddingBottom,
        left: borderPadding == null ? '0' : "-" + borderPaddingLeft,
        right: borderPadding == null ? '0' : "-" + borderPaddingRight
      }),
      ':after': Object.assign({}, defaultPreudoStyles, {
        zIndex: sv.zIndexes.foreground,
        borderColor: focusOuterBorderColor,
        top: borderPadding == null ? "-" + borderWidth : "calc(0px - " + borderPaddingTop + " - " + borderWidth + ")",
        bottom: borderPadding == null ? "-" + borderWidth : "calc(0px - " + borderPaddingBottom + " - " + borderWidth + ")",
        left: borderPadding == null ? "-" + borderWidth : "calc(0px - " + borderPaddingLeft + " - " + borderWidth + ")",
        right: borderPadding == null ? "-" + borderWidth : "calc(0px - " + borderPaddingRight + " - " + borderWidth + ")"
      })
    }
  };
};

exports.getBorderFocusStyles = getBorderFocusStyles;
//# sourceMappingURL=getBorderFocusStyles.js.map
