{"version":3,"sources":["components/Segment/Segment.tsx"],"names":["segmentClassName","Segment","props","context","displayName","telemetry","setStart","setEnd","children","content","color","inverted","disabled","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","Box","create","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ColorComponentProps,\n  createShorthandFactory,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface SegmentProps\n  extends UIComponentProps<SegmentProps>,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An segment can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted?: boolean;\n}\n\nexport type SegmentStylesProps = Required<Pick<SegmentProps, 'color' | 'inverted' | 'disabled'>>;\n\nexport const segmentClassName = 'ui-segment';\n\n/**\n * A Segment visually groups related content.\n */\nexport const Segment: ComponentWithAs<'div', SegmentProps> & FluentComponentStaticProps<SegmentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Segment.displayName, context.telemetry);\n  setStart();\n  const { children, content, color, inverted, disabled, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Segment.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Segment.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<SegmentStylesProps>(Segment.displayName, {\n    className: segmentClassName,\n    mapPropsToStyles: () => ({\n      color,\n      inverted,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : Box.create(content)}\n    </ElementType>,\n  );\n\n  setEnd();\n  return element;\n};\n\nSegment.displayName = 'Segment';\n\nSegment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n    color: true,\n  }),\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n};\nSegment.handledProps = Object.keys(Segment.propTypes) as any;\n\nSegment.create = createShorthandFactory({\n  Component: Segment,\n});\n"],"file":"Segment.js"}