"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.Segment = exports.segmentClassName = void 0;

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _reactBindings = require("@fluentui/react-bindings");

var segmentClassName = 'ui-segment';
/**
 * A Segment visually groups related content.
 */

exports.segmentClassName = segmentClassName;

var Segment = function Segment(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Segment.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      content = props.content,
      color = props.color,
      inverted = props.inverted,
      disabled = props.disabled,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Segment.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Segment.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Segment.displayName, {
    className: segmentClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        color: color,
        inverted: inverted,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), unhandledProps)), (0, _utils.childrenExist)(children) ? children : _Box.Box.create(content)));
  setEnd();
  return element;
};

exports.Segment = Segment;
Segment.displayName = 'Segment';
Segment.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: 'shorthand',
  color: true
}), {
  disabled: PropTypes.bool,
  inverted: PropTypes.bool
});
Segment.handledProps = Object.keys(Segment.propTypes);
Segment.create = (0, _utils.createShorthandFactory)({
  Component: Segment
});
//# sourceMappingURL=Segment.js.map
