{"version":3,"sources":["components/Form/FormFieldCustom.tsx"],"names":["formFieldCustomClassName","FormFieldCustom","props","context","displayName","telemetry","setStart","setEnd","children","required","type","className","design","styles","variables","inline","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","propTypes","commonPropTypes","createCommon","content","id","PropTypes","string","bool","name","Object","keys","defaultProps","formFieldBehavior"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useFluentContext,\n  useStyles,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldCustomProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n}\n\nexport const formFieldCustomClassName = 'ui-form__fieldcustom';\n\nexport type FormFieldCustomStylesProps = Required<Pick<FormFieldCustomProps, 'type' | 'inline' | 'required'>>;\n\n/**\n * A FormFieldCustom represents a Form element containing a label and an input.\n */\nexport const FormFieldCustom: React.FC<FormFieldCustomProps> &\n  FluentComponentStaticProps<FormFieldCustomProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormFieldCustom.displayName, context.telemetry);\n  setStart();\n\n  const { children, required, type, className, design, styles, variables, inline } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormFieldCustom.handledProps, props);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormFieldCustom.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<FormFieldCustomStylesProps>(FormFieldCustom.displayName, {\n    className: formFieldCustomClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nFormFieldCustom.displayName = 'FormFieldCustom';\n\nFormFieldCustom.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n    children: false,\n  }),\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n};\n\nFormFieldCustom.handledProps = Object.keys(FormFieldCustom.propTypes) as any;\n\nFormFieldCustom.defaultProps = {\n  accessibility: formFieldBehavior,\n};\n"],"file":"FormFieldCustom.js"}