{"version":3,"sources":["components/Form/utils/formFieldBase.tsx"],"names":["formFieldBaseClassName","_FormFieldBase","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","message","inline","errorMessage","control","label","className","design","styles","variables","slotProps","resolveSlotProps","ElementType","unhandledProps","handledProps","messageId","React","useRef","current","labelId","mapPropsToInlineStyles","rtl","unstable_props","classes","getA11yProps","accessibility","debugName","mapPropsToBehavior","hasErrorMessage","childProps","useMemo","element","root","slots","defaultProps","id","error","FormLabel","FormMessage","Box","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","children","PropTypes","bool","customPropTypes","itemShorthand","formFieldBehavior"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponentProps, commonPropTypes, getOrGenerateIdFromShorthand, createShorthand } from '../../../utils';\nimport { ShorthandValue } from '../../../types';\nimport { Box, BoxProps } from '../../Box/Box';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useAccessibility,\n  useFluentContext,\n  compose,\n  useStyles,\n} from '@fluentui/react-bindings';\nimport { FormLabel, FormLabelProps } from '../FormLabel';\nimport { FormMessage, FormMessageProps } from '../FormMessage';\nimport { FormFieldBaseValue, FormFieldBaseProvider } from './formFieldBaseContext';\n\nexport interface FormFieldBaseProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<FormLabelProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<FormMessageProps>;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<FormMessageProps>;\n}\n\nexport const formFieldBaseClassName = 'ui-form__field__base';\nexport type FormFieldBaseStylesProps = never;\n\n/**\n * A FormFiedBase represents a Form element containing a label and an input.\n */\nexport const _FormFieldBase = compose<'div', FormFieldBaseProps, {}, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { message, inline, errorMessage, control, label, className, design, styles, variables } = props;\n\n    const slotProps = composeOptions.resolveSlotProps<FormFieldBaseProps>(props);\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const messageId = React.useRef<string>();\n    messageId.current = getOrGenerateIdFromShorthand('error-message-', errorMessage || message, messageId.current);\n    const labelId = React.useRef<string>();\n    labelId.current = getOrGenerateIdFromShorthand('form-label-', label, labelId.current);\n\n    const { classes } = useStyles<FormFieldBaseStylesProps>(_FormFieldBase.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: () => ({\n        hasErrorMessage: !!errorMessage,\n        messageId: messageId.current,\n        labelId: labelId.current,\n      }),\n      rtl: context.rtl,\n    });\n\n    const childProps: FormFieldBaseValue = React.useMemo(\n      () => ({\n        labelId: labelId.current,\n      }),\n      // TODO: create hooks for id to avoid disbaling esling for accessing the value of refs\n      // eslint-disable-next-line\n      [labelId.current],\n    );\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n        })}\n      >\n        {createShorthand(composeOptions.slots.label, label, {\n          defaultProps: () =>\n            getA11yProps('label', {\n              id: labelId.current,\n              inline,\n              ...slotProps.label,\n            }),\n        })}\n        {/**\n         * When there's a message for the input the labelId and messageId should be consistent in the\n         * aria-labelledby attribute (aria-labelledby=\"labelID messageID\") therefore we need to pass it down\n         * for components like input that are generating its own label internally\n         */}\n        <FormFieldBaseProvider value={childProps}>\n          {createShorthand(composeOptions.slots.control, control || {}, {\n            defaultProps: () =>\n              getA11yProps('control', {\n                error: !!errorMessage || null,\n                ref,\n                ...unhandledProps,\n                ...slotProps.control,\n              }),\n          })}\n        </FormFieldBaseProvider>\n        {createShorthand(composeOptions.slots.message, errorMessage || message, {\n          defaultProps: () =>\n            getA11yProps('message', {\n              id: messageId.current,\n              ...slotProps.message,\n            }),\n        })}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: formFieldBaseClassName,\n    displayName: 'FormFieldBase',\n    slots: {\n      label: FormLabel,\n      message: FormMessage,\n      control: Box,\n    },\n    handledProps: [\n      'as',\n      'accessibility',\n      'className',\n      'variables',\n      'design',\n      'styles',\n      'inline',\n      'errorMessage',\n      'message',\n    ],\n    shorthandConfig: {\n      mappedProp: 'control',\n    },\n  },\n);\n\n_FormFieldBase.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  inline: PropTypes.bool,\n  message: customPropTypes.itemShorthand,\n  errorMessage: customPropTypes.itemShorthand,\n};\n\n_FormFieldBase.defaultProps = {\n  accessibility: formFieldBehavior,\n};\n"],"file":"formFieldBase.js"}