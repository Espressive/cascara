"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Form = exports.formClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _FormField = require("./FormField");

var _reactBindings = require("@fluentui/react-bindings");

var formClassName = 'ui-form';
exports.formClassName = formClassName;

/**
 * A Form is used to collect, oprionally validate, and submit the user input, in a structured way.
 */
var Form = function Form(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Form.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      action = props.action,
      children = props.children,
      accessibility = props.accessibility;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Form.handledProps, props);

  var _useStyles = (0, _reactBindings.useStyles)(Form.displayName, {
    className: formClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Form.displayName,
    rtl: context.rtl
  });

  var handleSubmit = function handleSubmit(e) {
    var action = props.action; // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()
    // method.

    if (!action) (0, _invoke2.default)(e, 'preventDefault');

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _invoke2.default.apply(void 0, [props, 'onSubmit', e, props].concat(args));
  };

  var renderFields = function renderFields() {
    var fields = props.fields;
    return (0, _map2.default)(fields, function (field) {
      return _FormField.FormField.create(field);
    });
  };

  var element = /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({}, getA11yProps('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), unhandledProps)), {
    action: action,
    onSubmit: handleSubmit
  }), (0, _utils.childrenExist)(children) ? children : renderFields());
  setEnd();
  return element;
};

exports.Form = Form;
Form.displayName = 'Form';
Form.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  action: PropTypes.string,
  fields: customPropTypes.collectionShorthand,
  onSubmit: PropTypes.func
});
Form.defaultProps = {
  as: 'form'
};
Form.handledProps = Object.keys(Form.propTypes);
Form.create = (0, _utils.createShorthandFactory)({
  Component: Form
});
//# sourceMappingURL=Form.js.map
