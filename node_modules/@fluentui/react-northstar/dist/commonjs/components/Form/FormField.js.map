{"version":3,"sources":["components/Form/FormField.tsx"],"names":["formFieldClassName","formFieldMessageClassName","FormField","props","context","displayName","telemetry","setStart","setEnd","children","control","id","label","message","name","required","type","className","design","styles","variables","inline","errorMessage","ElementType","unhandledProps","handledProps","messageId","React","useRef","current","labelId","getA11yProps","accessibility","debugName","mapPropsToBehavior","hasErrorMessage","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","labelElement","Text","create","defaultProps","as","htmlFor","messageElement","controlElement","Box","error","shouldControlAppearFirst","content","element","root","propTypes","commonPropTypes","createCommon","customPropTypes","shorthandAllowingChildren","PropTypes","string","bool","itemShorthand","Object","keys","formFieldBehavior","Input","Component","mappedProp"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AASA;;AACA;;AACA;;AACA;;AA+CO,IAAMA,kBAAkB,GAAG,gBAA3B;;AACA,IAAMC,yBAAyB,GAAG,yBAAlC;;;AAMP;AACA;AACA;AACO,IAAMC,SAA8F,GAAG,SAAjGA,SAAiG,CAAAC,KAAK,EAAI;AACrH,MAAMC,OAAO,GAAG,sCAAhB;;AADqH,sBAExF,iCAAaF,SAAS,CAACG,WAAvB,EAAoCD,OAAO,CAACE,SAA5C,CAFwF;AAAA,MAE7GC,QAF6G,iBAE7GA,QAF6G;AAAA,MAEnGC,MAFmG,iBAEnGA,MAFmG;;AAGrHD,EAAAA,QAAQ;AAH6G,MAMnHE,QANmH,GAoBjHN,KApBiH,CAMnHM,QANmH;AAAA,MAOnHC,OAPmH,GAoBjHP,KApBiH,CAOnHO,OAPmH;AAAA,MAQnHC,EARmH,GAoBjHR,KApBiH,CAQnHQ,EARmH;AAAA,MASnHC,KATmH,GAoBjHT,KApBiH,CASnHS,KATmH;AAAA,MAUnHC,OAVmH,GAoBjHV,KApBiH,CAUnHU,OAVmH;AAAA,MAWnHC,IAXmH,GAoBjHX,KApBiH,CAWnHW,IAXmH;AAAA,MAYnHC,QAZmH,GAoBjHZ,KApBiH,CAYnHY,QAZmH;AAAA,MAanHC,IAbmH,GAoBjHb,KApBiH,CAanHa,IAbmH;AAAA,MAcnHC,SAdmH,GAoBjHd,KApBiH,CAcnHc,SAdmH;AAAA,MAenHC,MAfmH,GAoBjHf,KApBiH,CAenHe,MAfmH;AAAA,MAgBnHC,MAhBmH,GAoBjHhB,KApBiH,CAgBnHgB,MAhBmH;AAAA,MAiBnHC,SAjBmH,GAoBjHjB,KApBiH,CAiBnHiB,SAjBmH;AAAA,MAkBnHC,MAlBmH,GAoBjHlB,KApBiH,CAkBnHkB,MAlBmH;AAAA,MAmBnHC,YAnBmH,GAoBjHnB,KApBiH,CAmBnHmB,YAnBmH;AAsBrH,MAAMC,WAAW,GAAG,mCAAepB,KAAf,CAApB;AACA,MAAMqB,cAAc,GAAG,sCAAkBtB,SAAS,CAACuB,YAA5B,EAA0CtB,KAA1C,CAAvB;AACA,MAAMuB,SAAS,GAAGC,KAAK,CAACC,MAAN,EAAlB;AACAF,EAAAA,SAAS,CAACG,OAAV,GAAoB,yCAA6B,gBAA7B,EAA+ChB,OAAO,IAAIS,YAA1D,EAAwEI,SAAS,CAACG,OAAlF,CAApB;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACC,MAAN,EAAhB;AACAE,EAAAA,OAAO,CAACD,OAAR,GAAkB,yCAA6B,aAA7B,EAA4ClB,EAA5C,EAAgDmB,OAAO,CAACD,OAAxD,CAAlB;AAEA,MAAME,YAAY,GAAG,qCAAyC5B,KAAK,CAAC6B,aAA/C,EAA8D;AACjFC,IAAAA,SAAS,EAAE/B,SAAS,CAACG,WAD4D;AAEjF6B,IAAAA,kBAAkB,EAAE;AAAA,aAAO;AACzBC,QAAAA,eAAe,EAAE,CAAC,CAACb,YADM;AAEzBI,QAAAA,SAAS,EAAEA,SAAS,CAACG,OAFI;AAGzBC,QAAAA,OAAO,EAAEA,OAAO,CAACD;AAHQ,OAAP;AAAA,KAF6D;AAOjFO,IAAAA,GAAG,EAAEhC,OAAO,CAACgC;AAPoE,GAA9D,CAArB;;AA7BqH,mBAuCzE,8BAAgClC,SAAS,CAACG,WAA1C,EAAuD;AACjGY,IAAAA,SAAS,EAAEjB,kBADsF;AAEjGqC,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBrB,QAAAA,IAAI,EAAJA,IADuB;AAEvBK,QAAAA,MAAM,EAANA,MAFuB;AAGvBN,QAAAA,QAAQ,EAARA,QAHuB;AAIvBoB,QAAAA,eAAe,EAAE,CAAC,CAACb;AAJI,OAAP;AAAA,KAF+E;AAQjGgB,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BrB,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KARyE;AAcjGgB,IAAAA,GAAG,EAAEhC,OAAO,CAACgC;AAdoF,GAAvD,CAvCyE;AAAA,MAuC7GG,OAvC6G,cAuC7GA,OAvC6G;AAAA,MAuC5FC,cAvC4F,cAuCpGrB,MAvCoG;;AAwDrH,MAAMsB,YAAY,GAAGC,WAAKC,MAAL,CAAY/B,KAAZ,EAAmB;AACtCgC,IAAAA,YAAY,EAAE;AAAA,aACZb,YAAY,CAAC,OAAD,EAAU;AACpBc,QAAAA,EAAE,EAAE,OADgB;AAEpBC,QAAAA,OAAO,EAAEnC,EAFW;AAGpBA,QAAAA,EAAE,EAAEmB,OAAO,CAACD,OAHQ;AAIpBV,QAAAA,MAAM,EAAEqB,cAAc,CAAC5B;AAJH,OAAV,CADA;AAAA;AADwB,GAAnB,CAArB;;AAUA,MAAMmC,cAAc,GAAGL,WAAKC,MAAL,CAAYrB,YAAY,IAAIT,OAA5B,EAAqC;AAC1D+B,IAAAA,YAAY,EAAE;AAAA,aACZb,YAAY,CAAC,SAAD,EAAY;AACtBd,QAAAA,SAAS,EAAEhB,yBADW;AAEtBU,QAAAA,EAAE,EAAEe,SAAS,CAACG,OAFQ;AAGtBV,QAAAA,MAAM,EAAEqB,cAAc,CAAC3B;AAHD,OAAZ,CADA;AAAA;AAD4C,GAArC,CAAvB;;AASA,MAAMmC,cAAc,GAAGC,SAAIN,MAAJ,CAAWjC,OAAO,IAAI,EAAtB,EAA0B;AAC/CkC,IAAAA,YAAY,EAAE;AAAA,aACZb,YAAY,CAAC,SAAD,EAAY;AACtBhB,QAAAA,QAAQ,EAARA,QADsB;AAEtBD,QAAAA,IAAI,EAAJA,IAFsB;AAGtBH,QAAAA,EAAE,EAAFA,EAHsB;AAItBK,QAAAA,IAAI,EAAJA,IAJsB;AAKtBkC,QAAAA,KAAK,EAAE,CAAC,CAAC5B,YAAF,IAAkB,IALH;AAMtBH,QAAAA,MAAM,EAAEqB,cAAc,CAAC9B;AAND,OAAZ,CADA;AAAA;AADiC,GAA1B,CAAvB;;AAYA,MAAMyC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrC,WAAOnC,IAAI,KAAKA,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,OAArC,CAAX;AACD,GAFD;;AAIA,MAAMoC,OAAO,gBACX,0CACGD,wBAAwB,MAAMH,cADjC,EAEGP,YAFH,EAGG,CAACU,wBAAwB,EAAzB,IAA+BH,cAHlC,EAIGD,cAJH,CADF;AASA,MAAMM,OAAO,gBACX,oBAAC,WAAD,EACMtB,YAAY,CAAC,MAAD;AACdd,IAAAA,SAAS,EAAEsB,OAAO,CAACe;AADL,KAEX9B,cAFW,EADlB,EAMG,0BAAcf,QAAd,IAA0BA,QAA1B,GAAqC2C,OANxC,CADF;AAUA5C,EAAAA,MAAM;AACN,SAAO6C,OAAP;AACD,CAhHM;;;AAkHPnD,SAAS,CAACG,WAAV,GAAwB,WAAxB;AAEAH,SAAS,CAACqD,SAAV,qBACKC,uBAAgBC,YAAhB,CAA6B;AAC9BL,EAAAA,OAAO,EAAE;AADqB,CAA7B,CADL;AAIE1C,EAAAA,OAAO,EAAEgD,eAAe,CAACC,yBAJ3B;AAKEhD,EAAAA,EAAE,EAAEiD,SAAS,CAACC,MALhB;AAMExC,EAAAA,MAAM,EAAEuC,SAAS,CAACE,IANpB;AAOElD,EAAAA,KAAK,EAAE8C,eAAe,CAACK,aAPzB;AAQElD,EAAAA,OAAO,EAAE6C,eAAe,CAACK,aAR3B;AASEjD,EAAAA,IAAI,EAAE8C,SAAS,CAACC,MATlB;AAUE9C,EAAAA,QAAQ,EAAE6C,SAAS,CAACE,IAVtB;AAWE9C,EAAAA,IAAI,EAAE4C,SAAS,CAACC,MAXlB;AAYEvC,EAAAA,YAAY,EAAEoC,eAAe,CAACC;AAZhC;AAeAzD,SAAS,CAACuB,YAAV,GAAyBuC,MAAM,CAACC,IAAP,CAAY/D,SAAS,CAACqD,SAAtB,CAAzB;AAEArD,SAAS,CAAC0C,YAAV,GAAyB;AACvBZ,EAAAA,aAAa,EAAEkC,gCADQ;AAEvBxD,EAAAA,OAAO,EAAE;AAAEmC,IAAAA,EAAE,EAAEsB;AAAN;AAFc,CAAzB;AAKAjE,SAAS,CAACyC,MAAV,GAAmB,mCAAuB;AAAEyB,EAAAA,SAAS,EAAElE,SAAb;AAAwBmE,EAAAA,UAAU,EAAE;AAApC,CAAvB,CAAnB","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Text, TextProps } from '../Text/Text';\nimport { Input } from '../Input/Input';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /**\n   * @deprecated\n   * A control for the form field.\n   */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<TextProps>;\n}\n\nexport const formFieldClassName = 'ui-form__field';\nexport const formFieldMessageClassName = 'ui-form__field__message';\n\nexport type FormFieldStylesProps = Required<Pick<FormFieldProps, 'type' | 'inline' | 'required'>> & {\n  hasErrorMessage: boolean;\n};\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport const FormField: ComponentWithAs<'div', FormFieldProps> & FluentComponentStaticProps<FormFieldProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormField.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    control,\n    id,\n    label,\n    message,\n    name,\n    required,\n    type,\n    className,\n    design,\n    styles,\n    variables,\n    inline,\n    errorMessage,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormField.handledProps, props);\n  const messageId = React.useRef<string>();\n  messageId.current = getOrGenerateIdFromShorthand('error-message-', message || errorMessage, messageId.current);\n  const labelId = React.useRef<string>();\n  labelId.current = getOrGenerateIdFromShorthand('form-label-', id, labelId.current);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormField.displayName,\n    mapPropsToBehavior: () => ({\n      hasErrorMessage: !!errorMessage,\n      messageId: messageId.current,\n      labelId: labelId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<FormFieldStylesProps>(FormField.displayName, {\n    className: formFieldClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n      hasErrorMessage: !!errorMessage,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11yProps('label', {\n        as: 'label',\n        htmlFor: id,\n        id: labelId.current,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const messageElement = Text.create(errorMessage || message, {\n    defaultProps: () =>\n      getA11yProps('message', {\n        className: formFieldMessageClassName,\n        id: messageId.current,\n        styles: resolvedStyles.message,\n      }),\n  });\n\n  const controlElement = Box.create(control || {}, {\n    defaultProps: () =>\n      getA11yProps('control', {\n        required,\n        name,\n        id,\n        type,\n        error: !!errorMessage || null,\n        styles: resolvedStyles.control,\n      }),\n  });\n\n  const shouldControlAppearFirst = () => {\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n\n  const content = (\n    <>\n      {shouldControlAppearFirst() && controlElement}\n      {labelElement}\n      {!shouldControlAppearFirst() && controlElement}\n      {messageElement}\n    </>\n  );\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nFormField.displayName = 'FormField';\n\nFormField.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  control: customPropTypes.shorthandAllowingChildren,\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  message: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  errorMessage: customPropTypes.shorthandAllowingChildren,\n};\n\nFormField.handledProps = Object.keys(FormField.propTypes) as any;\n\nFormField.defaultProps = {\n  accessibility: formFieldBehavior,\n  control: { as: Input },\n};\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n"],"file":"FormField.js"}