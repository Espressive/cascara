"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.RadioGroupItem = exports.radioGroupItemSlotClassNames = exports.radioGroupItemClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _reactBindings = require("@fluentui/react-bindings");

var _reactIconsNorthstar = require("@fluentui/react-icons-northstar");

var radioGroupItemClassName = 'ui-radiogroup__item';
exports.radioGroupItemClassName = radioGroupItemClassName;
var radioGroupItemSlotClassNames = {
  indicator: radioGroupItemClassName + "__indicator",
  label: radioGroupItemClassName + "__label"
};
exports.radioGroupItemSlotClassNames = radioGroupItemSlotClassNames;

/**
 * A RadioGroupItem represents single input element within a RadioGroup.
 *
 * @accessibility
 * Radio items need to be grouped to correctly handle accessibility.
 */
var RadioGroupItem = function RadioGroupItem(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(RadioGroupItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var label = props.label,
      checkedIndicator = props.checkedIndicator,
      indicator = props.indicator,
      disabled = props.disabled,
      vertical = props.vertical,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      shouldFocus = props.shouldFocus;
  var elementRef = React.useRef();
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(RadioGroupItem.handledProps, props);

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultChecked,
    value: props.checked,
    initialValue: false
  }),
      checked = _useAutoControlled[0],
      setChecked = _useAutoControlled[1];

  var prevChecked = React.useRef(checked);

  var handleClick = function handleClick(e) {
    (0, _invoke2.default)(props, 'onClick', e, props);
    setChecked(function (prevChecked) {
      return !prevChecked;
    });
  }; // This behavior is not conformant with native input radio, it was added to avoid breaking change
  // and it should be fixed to be conformant with native, only calling onChange when item is clicked (checked will always be true)


  React.useEffect(function () {
    if (prevChecked.current !== checked) {
      (0, _invoke2.default)(props, 'onChange', undefined, Object.assign({}, props, {
        checked: checked
      }));
      prevChecked.current = checked;
    }
  });
  React.useEffect(function () {
    if (checked && shouldFocus) elementRef.current.focus();
  }, [checked, shouldFocus]);

  var _useStyles = (0, _reactBindings.useStyles)(RadioGroupItem.displayName, {
    className: radioGroupItemClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        vertical: vertical,
        disabled: disabled,
        checked: checked
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: RadioGroupItem.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        if ((0, _utils.shouldPreventDefaultOnKeyDown)(e)) {
          e.preventDefault();
        }

        handleClick(e);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        checked: checked,
        disabled: disabled
      };
    },
    rtl: context.rtl
  });

  var handleChange = function handleChange(e) {
    // RadioGroupItem component doesn't present any `input` component in markup, however all of our
    // components should handle events transparently.
    (0, _invoke2.default)(props, 'onChange', e, Object.assign({}, props, {
      checked: checked
    }));
  };

  var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: elementRef
  }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    onClick: handleClick,
    onChange: handleChange
  }, unhandledProps)), _Box.Box.create(checked ? checkedIndicator : indicator, {
    defaultProps: function defaultProps() {
      return {
        className: radioGroupItemSlotClassNames.indicator,
        styles: resolvedStyles.indicator
      };
    }
  }), _Box.Box.create(label, {
    defaultProps: function defaultProps() {
      return {
        as: 'span',
        className: radioGroupItemSlotClassNames.label,
        styles: resolvedStyles.label
      };
    }
  }))));
  setEnd();
  return element;
};

exports.RadioGroupItem = RadioGroupItem;
RadioGroupItem.displayName = 'RadioGroupItem';
RadioGroupItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  checked: PropTypes.bool,
  defaultChecked: PropTypes.bool,
  disabled: PropTypes.bool,
  indicator: customPropTypes.shorthandAllowingChildren,
  checkedIndicator: customPropTypes.shorthandAllowingChildren,
  label: customPropTypes.itemShorthand,
  name: PropTypes.string,
  onClick: PropTypes.func,
  onChange: PropTypes.func,
  shouldFocus: PropTypes.bool,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vertical: PropTypes.bool
});
RadioGroupItem.defaultProps = {
  accessibility: _accessibility.radioGroupItemBehavior,
  indicator: /*#__PURE__*/React.createElement(_reactIconsNorthstar.RadioButtonIcon, {
    outline: true
  }),
  checkedIndicator: /*#__PURE__*/React.createElement(_reactIconsNorthstar.RadioButtonIcon, null)
};
RadioGroupItem.handledProps = Object.keys(RadioGroupItem.propTypes);
RadioGroupItem.create = (0, _utils.createShorthandFactory)({
  Component: RadioGroupItem,
  mappedProp: 'label'
});
//# sourceMappingURL=RadioGroupItem.js.map
