"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Debug = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _accessibility = require("@fluentui/accessibility");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactComponentEventListener = require("@fluentui/react-component-event-listener");

var _utils = require("../../utils");

var _styles = require("@fluentui/styles");

var _DebugPanel = require("./DebugPanel");

var _FiberNavigator = require("./FiberNavigator");

var _DebugRect = require("./DebugRect");

var INITIAL_STATE = {
  fiberNav: null,
  selectedFiberNav: null,
  isSelecting: false
};

var Debug = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(Debug, _React$Component);

  function Debug(p, s) {
    var _this;

    _this = _React$Component.call(this, p, s) || this;
    _this.state = INITIAL_STATE;

    _this.debugReactComponent = function (r) {
      if (!r) {
        console.error("No React component selected. Please select a Fluent UI component from the React's Component panel.");
        return;
      }

      if (!r._reactInternalFiber) {
        console.error('React does not provide data for debugging for this component. Try selecting some Fluent UI component.');
        return;
      }

      if (!r.fluentUIDebug) {
        console.error('Not a debuggable component. Try selecting some Fluent UI component.');
        return;
      }

      var fiberNav = _FiberNavigator.FiberNavigator.fromFiber(r._reactInternalFiber);

      _this.setState({
        fiberNav: fiberNav,
        isSelecting: false,
        selectedFiberNav: null
      });
    };

    _this.debugDOMNode = function (domNode) {
      var fiberNav = _FiberNavigator.FiberNavigator.fromDOMNode(domNode);

      if (!fiberNav) {
        console.error('No fiber for dom node', domNode);
        return;
      }

      fiberNav = fiberNav.findOwner(function (fiber) {
        return fiber.fluentUIDebug;
      });

      if (fiberNav !== _this.state.fiberNav) {
        _this.setState({
          fiberNav: fiberNav
        });
      }
    };

    _this.handleKeyDown = function (e) {
      var code = (0, _accessibility.getCode)(e);

      switch (code) {
        case _accessibility.keyboardKey.Escape:
          _this.stopSelecting();

          break;

        case _accessibility.keyboardKey.d:
          if (e.altKey && e.shiftKey) {
            _this.startSelecting();
          }

          break;
      }
    };

    _this.handleMouseMove = function (e) {
      _this.debugDOMNode(e.target);
    };

    _this.handleDOMNodeClick = function (e) {
      e.preventDefault();
      e.stopPropagation();

      _this.setState({
        isSelecting: false
      });
    };

    _this.startSelecting = function () {
      var isSelecting = !_this.state.isSelecting;

      _this.setState(Object.assign({}, !isSelecting && INITIAL_STATE, {
        isSelecting: isSelecting
      }));
    };

    _this.stopSelecting = function () {
      _this.setState(INITIAL_STATE);
    };

    _this.selectFiber = function (selectedFiberNav) {
      return _this.setState({
        selectedFiberNav: selectedFiberNav
      });
    };

    _this.changeFiber = function (fiberNav) {
      return _this.setState({
        fiberNav: fiberNav
      });
    };

    _this.positionRight = function () {
      return _this.setState({
        debugPanelPosition: 'right'
      });
    };

    _this.positionLeft = function () {
      return _this.setState({
        debugPanelPosition: 'left'
      });
    };

    _this.close = function () {
      return _this.setState(INITIAL_STATE);
    };

    if (process.env.NODE_ENV !== 'production' && _styles.isDebugEnabled && (0, _utils.isBrowser)()) {
      // eslint-disable-next-line no-undef
      window.openDebugPanel = function () {
        // eslint-disable-next-line no-undef
        _this.debugReactComponent(window.$r);
      };
    }

    return _this;
  }

  var _proto = Debug.prototype;

  _proto.render = function render() {
    var mountDocument = this.props.mountDocument;
    var _this$state = this.state,
        fiberNav = _this$state.fiberNav,
        selectedFiberNav = _this$state.selectedFiberNav,
        isSelecting = _this$state.isSelecting,
        debugPanelPosition = _this$state.debugPanelPosition;

    if (process.env.NODE_ENV !== 'production' && _styles.isDebugEnabled) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactComponentEventListener.EventListener, {
        listener: this.handleKeyDown,
        target: mountDocument.body,
        type: "keydown"
      }), isSelecting && /*#__PURE__*/React.createElement(_reactComponentEventListener.EventListener, {
        listener: this.handleMouseMove,
        target: mountDocument.body,
        type: "mousemove"
      }), isSelecting && fiberNav && fiberNav.domNode && /*#__PURE__*/React.createElement(_reactComponentEventListener.EventListener, {
        listener: this.handleDOMNodeClick,
        target: fiberNav.domNode,
        type: "click"
      }), isSelecting && fiberNav && /*#__PURE__*/React.createElement(_DebugRect.DebugRect, {
        fiberNav: fiberNav
      }), selectedFiberNav && /*#__PURE__*/React.createElement(_DebugRect.DebugRect, {
        fiberNav: selectedFiberNav
      }), !isSelecting && fiberNav && fiberNav.instance && /*#__PURE__*/React.createElement(_DebugPanel.DebugPanel, {
        fiberNav: fiberNav,
        onActivateDebugSelectorClick: this.startSelecting,
        onClose: this.close // TODO: Integrate CSS in JS Styles for Host Components (DOM nodes)
        // cssStyles={stylesForNode(domNode)}
        ,
        debugData: fiberNav.fluentUIDebug,
        position: debugPanelPosition || 'right',
        onPositionLeft: this.positionLeft,
        onPositionRight: this.positionRight,
        onFiberChanged: this.changeFiber,
        onFiberSelected: this.selectFiber
      }));
    }

    return null;
  };

  return Debug;
}(React.Component);

exports.Debug = Debug;
Debug.defaultProps = {
  // eslint-disable-next-line no-undef
  mountDocument: (0, _utils.isBrowser)() ? window.document : null
};
Debug.propTypes = {
  mountDocument: PropTypes.object.isRequired
};
//# sourceMappingURL=Debug.js.map
