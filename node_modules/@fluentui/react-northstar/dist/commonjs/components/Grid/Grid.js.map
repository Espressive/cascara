{"version":3,"sources":["components/Grid/Grid.tsx"],"names":["gridClassName","Grid","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","columns","content","design","rows","styles","variables","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","oneOfType","string","number","customPropTypes","every","disallow","arrayOf","nodeContent","Object","keys"],"mappings":"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","sourcesContent":["import { Accessibility, GridBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface GridProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available gridBehavior, gridHorizontalBehavior\n   * */\n  accessibility?: Accessibility<GridBehaviorProps>;\n\n  /** The columns of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  columns?: string | number;\n\n  /** The rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  rows?: string | number;\n}\n\nexport const gridClassName = 'ui-grid';\n\nexport type GridStylesProps = Pick<GridProps, 'columns' | 'rows'>;\n\n/**\n * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.\n */\nexport const Grid: ComponentWithAs<'div', GridProps> & FluentComponentStaticProps<GridProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Grid.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, columns, content, design, rows, styles, variables } = props;\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: Grid.displayName,\n\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<GridStylesProps>(Grid.displayName, {\n    className: gridClassName,\n    mapPropsToStyles: () => ({ columns, rows }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Grid.handledProps, props);\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nGrid.displayName = 'Grid';\n\nGrid.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nGrid.handledProps = Object.keys(Grid.propTypes) as any;\n"],"file":"Grid.js"}