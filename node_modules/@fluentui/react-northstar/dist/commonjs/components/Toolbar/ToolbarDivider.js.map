{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["toolbarDividerClassName","ToolbarDivider","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","React","useContext","ToolbarVariablesContext","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","ElementType","unhandledProps","handledProps","element","root","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon"],"mappings":";;;;;;;AACA;;AAUA;;AAEA;;AACA;;AAUO,IAAMA,uBAAuB,GAAG,qBAAhC;AAEP;AACA;AACA;;;AACO,IAAMC,cAAc,GAAG,4BAC5B,UAACC,KAAD,EAAQC,GAAR,EAAaC,cAAb,EAAgC;AAC9B,MAAMC,OAAO,GAAG,sCAAhB;;AAD8B,sBAED,iCAAaD,cAAc,CAACE,WAA5B,EAAyCD,OAAO,CAACE,SAAjD,CAFC;AAAA,MAEtBC,QAFsB,iBAEtBA,QAFsB;AAAA,MAEZC,MAFY,iBAEZA,MAFY;;AAG9BD,EAAAA,QAAQ;AAHsB,MAKtBE,aALsB,GAKkCR,KALlC,CAKtBQ,aALsB;AAAA,MAKPC,SALO,GAKkCT,KALlC,CAKPS,SALO;AAAA,MAKIC,MALJ,GAKkCV,KALlC,CAKIU,MALJ;AAAA,MAKYC,MALZ,GAKkCX,KALlC,CAKYW,MALZ;AAAA,MAKoBC,SALpB,GAKkCZ,KALlC,CAKoBY,SALpB;AAM9B,MAAMC,eAAe,GAAGC,KAAK,CAACC,UAAN,CAAiBC,gDAAjB,CAAxB;AAEA,MAAMC,YAAY,GAAG,qCAAiBT,aAAjB,EAAgC;AACnDU,IAAAA,SAAS,EAAEhB,cAAc,CAACE,WADyB;AAEnDe,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAFsC,GAAhC,CAArB;;AAR8B,mBAYV,8BAAqCjB,cAAc,CAACE,WAApD,EAAiE;AACnFK,IAAAA,SAAS,EAAEP,cAAc,CAACO,SADyD;AAEnFW,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BX,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAAE,4CAAwBC,eAAxB,EAAyCD,SAAzC;AAJkB,OAAP;AAAA,KAF2D;AAQnFO,IAAAA,GAAG,EAAEhB,OAAO,CAACgB,GARsE;AASnFjB,IAAAA,cAAc,EAAdA,cATmF;AAUnFmB,IAAAA,cAAc,EAAErB;AAVmE,GAAjE,CAZU;AAAA,MAYtBsB,OAZsB,cAYtBA,OAZsB;;AAyB9B,MAAMC,WAAW,GAAG,mCAAevB,KAAf,CAApB;AACA,MAAMwB,cAAc,GAAG,sCAAkBtB,cAAc,CAACuB,YAAjC,EAA+CzB,KAA/C,CAAvB;AAEA,MAAM0B,OAAO,gBAAG,oBAAC,WAAD,EAAiBT,YAAY,CAAC,MAAD;AAAWhB,IAAAA,GAAG,EAAHA;AAAX,KAAmBuB,cAAnB;AAAmCf,IAAAA,SAAS,EAAEa,OAAO,CAACK;AAAtD,KAA7B,CAAhB;AACApB,EAAAA,MAAM;AAEN,SAAOmB,OAAP;AACD,CAjC2B,EAkC5B;AACEtB,EAAAA,WAAW,EAAE,gBADf;AAEEK,EAAAA,SAAS,EAAEX,uBAFb;AAIE8B,EAAAA,eAAe,EAAE;AACfC,IAAAA,UAAU,EAAE;AADG,GAJnB;AAOEJ,EAAAA,YAAY,EAAE,CAAC,eAAD,EAAkB,IAAlB,EAAwB,UAAxB,EAAoC,WAApC,EAAiD,SAAjD,EAA4D,QAA5D,EAAsE,WAAtE,EAAmF,QAAnF;AAPhB,CAlC4B,CAAvB;;AA6CP1B,cAAc,CAAC+B,SAAf,GAA2BC,uBAAgBC,YAAhB,EAA3B","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  compose,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { ChildrenComponentProps, ContentComponentProps, UIComponentProps, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\nexport const toolbarDividerClassName = 'ui-toolbar__divider';\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nexport const ToolbarDivider = compose<'div', ToolbarDividerProps, ToolbarDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ref, ...unhandledProps, className: classes.root })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    displayName: 'ToolbarDivider',\n    className: toolbarDividerClassName,\n\n    shorthandConfig: {\n      mappedProp: 'content',\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design'],\n  },\n);\n\nToolbarDivider.propTypes = commonPropTypes.createCommon();\n"],"file":"ToolbarDivider.js"}