{"version":3,"sources":["components/Toolbar/ToolbarCustomItem.tsx"],"names":["toolbarCustomItemClassName","ToolbarCustomItem","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","fitted","focusable","styles","variables","parentVariables","React","useContext","ToolbarVariablesContext","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","classes","ElementType","unhandledProps","handledProps","handleBlur","e","handleFocus","element","IS_FOCUSABLE_ATTRIBUTE","root","onBlur","onFocus","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","PropTypes","oneOfType","bool","oneOf","func"],"mappings":"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","sourcesContent":["import { Accessibility, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ComponentEventHandler } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarCustomItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A custom item can remove element padding, vertically or horizontally. */\n  fitted?: boolean | 'horizontally' | 'vertically';\n\n  /** A custom item can be focused. */\n  focusable?: boolean;\n\n  /** A custom item can't be actionable. */\n  onClick?: never;\n\n  /**\n   * Called after user's focus. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ToolbarCustomItemProps>;\n\n  /**\n   * Called after item blur. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ToolbarCustomItemProps>;\n}\n\nexport type ToolbarCustomItemStylesProps = Required<Pick<ToolbarCustomItemProps, 'fitted'>>;\nexport const toolbarCustomItemClassName = 'ui-toolbar__customitem';\n\n/**\n * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.\n */\nexport const ToolbarCustomItem = compose<'div', ToolbarCustomItemProps, ToolbarCustomItemStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, children, className, content, design, fitted, focusable, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarCustomItemStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToStyles: () => ({ fitted }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const handleBlur = (e: React.SyntheticEvent) => {\n      if (focusable) {\n        _.invoke(props, 'onBlur', e, props);\n      }\n    };\n\n    const handleFocus = (e: React.SyntheticEvent) => {\n      if (focusable) {\n        _.invoke(props, 'onFocus', e, props);\n      }\n    };\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          [IS_FOCUSABLE_ATTRIBUTE]: focusable,\n          ...unhandledProps,\n          className: classes.root,\n          onBlur: handleBlur,\n          onFocus: handleFocus,\n          ref,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarCustomItemClassName,\n    displayName: 'ToolbarCustomItem',\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'fitted',\n      'focusable',\n      'onBlur',\n      'onFocus',\n      'styles',\n      'variables',\n    ],\n  },\n);\n\nToolbarCustomItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'horizontally' | 'vertically'>(['horizontally', 'vertically']),\n  ]),\n  focusable: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n};\n"],"file":"ToolbarCustomItem.js"}