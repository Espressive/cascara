"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.ToolbarMenuDivider = exports.toolbarMenuDividerClassName = void 0;

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _toolbarVariablesContext = require("./toolbarVariablesContext");

var toolbarMenuDividerClassName = 'ui-toolbar__menudivider';
/**
 * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.
 */

exports.toolbarMenuDividerClassName = toolbarMenuDividerClassName;
var ToolbarMenuDivider = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    composeOptions: composeOptions,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: (0, _reactBindings.mergeVariablesOverrides)(parentVariables, variables)
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root,
    ref: ref
  })));
  setEnd();
  return element;
}, {
  className: toolbarMenuDividerClassName,
  displayName: 'ToolbarMenuDivider',
  shorthandConfig: {
    mappedProp: 'content'
  },
  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables']
});
exports.ToolbarMenuDivider = ToolbarMenuDivider;
ToolbarMenuDivider.propTypes = _utils.commonPropTypes.createCommon();
ToolbarMenuDivider.defaultProps = {
  as: 'li',
  accessibility: _accessibility.toolbarMenuDividerBehavior
};
//# sourceMappingURL=ToolbarMenuDivider.js.map
