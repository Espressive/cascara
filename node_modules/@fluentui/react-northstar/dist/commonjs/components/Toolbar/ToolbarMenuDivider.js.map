{"version":3,"sources":["components/Toolbar/ToolbarMenuDivider.tsx"],"names":["toolbarMenuDividerClassName","ToolbarMenuDivider","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","React","useContext","ToolbarVariablesContext","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","ElementType","unhandledProps","handledProps","element","root","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","defaultProps","as","toolbarMenuDividerBehavior"],"mappings":";;;;;;;AAAA;;AACA;;AAWA;;AAEA;;AACA;;AAUO,IAAMA,2BAA2B,GAAG,yBAApC;AAEP;AACA;AACA;;;AACO,IAAMC,kBAAkB,GAAG,4BAChC,UAACC,KAAD,EAAQC,GAAR,EAAaC,cAAb,EAAgC;AAC9B,MAAMC,OAAO,GAAG,sCAAhB;;AAD8B,sBAED,iCAAaD,cAAc,CAACE,WAA5B,EAAyCD,OAAO,CAACE,SAAjD,CAFC;AAAA,MAEtBC,QAFsB,iBAEtBA,QAFsB;AAAA,MAEZC,MAFY,iBAEZA,MAFY;;AAG9BD,EAAAA,QAAQ;AAHsB,MAKtBE,aALsB,GAKkCR,KALlC,CAKtBQ,aALsB;AAAA,MAKPC,SALO,GAKkCT,KALlC,CAKPS,SALO;AAAA,MAKIC,MALJ,GAKkCV,KALlC,CAKIU,MALJ;AAAA,MAKYC,MALZ,GAKkCX,KALlC,CAKYW,MALZ;AAAA,MAKoBC,SALpB,GAKkCZ,KALlC,CAKoBY,SALpB;AAM9B,MAAMC,eAAe,GAAGC,KAAK,CAACC,UAAN,CAAiBC,gDAAjB,CAAxB;AAEA,MAAMC,YAAY,GAAG,qCAAiBT,aAAjB,EAAgC;AACnDU,IAAAA,SAAS,EAAEhB,cAAc,CAACE,WADyB;AAEnDe,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAFsC,GAAhC,CAArB;;AAR8B,mBAYV,8BAAyCjB,cAAc,CAACE,WAAxD,EAAqE;AACvFK,IAAAA,SAAS,EAAEP,cAAc,CAACO,SAD6D;AAEvFP,IAAAA,cAAc,EAAdA,cAFuF;AAGvFkB,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BX,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAAE,4CAAwBC,eAAxB,EAAyCD,SAAzC;AAJkB,OAAP;AAAA,KAH+D;AASvFO,IAAAA,GAAG,EAAEhB,OAAO,CAACgB,GAT0E;AAUvFE,IAAAA,cAAc,EAAErB;AAVuE,GAArE,CAZU;AAAA,MAYtBsB,OAZsB,cAYtBA,OAZsB;;AAyB9B,MAAMC,WAAW,GAAG,mCAAevB,KAAf,CAApB;AACA,MAAMwB,cAAc,GAAG,sCAAkBtB,cAAc,CAACuB,YAAjC,EAA+CzB,KAA/C,CAAvB;AAEA,MAAM0B,OAAO,gBAAG,oBAAC,WAAD,EAAiBT,YAAY,CAAC,MAAD,oBAAcO,cAAd;AAA8Bf,IAAAA,SAAS,EAAEa,OAAO,CAACK,IAAjD;AAAuD1B,IAAAA,GAAG,EAAHA;AAAvD,KAA7B,CAAhB;AACAM,EAAAA,MAAM;AAEN,SAAOmB,OAAP;AACD,CAjC+B,EAkChC;AACEjB,EAAAA,SAAS,EAAEX,2BADb;AAEEM,EAAAA,WAAW,EAAE,oBAFf;AAIEwB,EAAAA,eAAe,EAAE;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAJnB;AAKEJ,EAAAA,YAAY,EAAE,CAAC,eAAD,EAAkB,IAAlB,EAAwB,UAAxB,EAAoC,WAApC,EAAiD,SAAjD,EAA4D,QAA5D,EAAsE,QAAtE,EAAgF,WAAhF;AALhB,CAlCgC,CAA3B;;AA2CP1B,kBAAkB,CAAC+B,SAAnB,GAA+BC,uBAAgBC,YAAhB,EAA/B;AACAjC,kBAAkB,CAACkC,YAAnB,GAAkC;AAChCC,EAAAA,EAAE,EAAE,IAD4B;AAEhC1B,EAAAA,aAAa,EAAE2B;AAFiB,CAAlC","sourcesContent":["import { Accessibility, toolbarMenuDividerBehavior, ToolbarMenuDividerBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { ChildrenComponentProps, ContentComponentProps, UIComponentProps, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuDividerBehaviorProps>;\n}\n\nexport type ToolbarMenuDividerStylesProps = never;\nexport const toolbarMenuDividerClassName = 'ui-toolbar__menudivider';\n\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\nexport const ToolbarMenuDivider = compose<'li', ToolbarMenuDividerProps, ToolbarMenuDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarMenuDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root, ref })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarMenuDividerClassName,\n    displayName: 'ToolbarMenuDivider',\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables'],\n  },\n) as ComponentWithAs<'li', ToolbarMenuDividerProps>;\n\nToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\nToolbarMenuDivider.defaultProps = {\n  as: 'li',\n  accessibility: toolbarMenuDividerBehavior,\n};\n"],"file":"ToolbarMenuDivider.js"}