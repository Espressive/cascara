{"version":3,"sources":["components/Toolbar/ToolbarRadioGroup.tsx"],"names":["toolbarRadioGroupClassName","ToolbarRadioGroup","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","activeIndex","children","className","design","items","variables","styles","itemRefs","slotProps","resolveSlotProps","parentVariables","React","useContext","ToolbarVariablesContext","mergedVariables","getA11yProps","debugName","actionHandlers","nextItem","event","setFocusedItem","prevItem","rtl","mapPropsToInlineStyles","unstable_props","classes","direction","filteredRadioItems","item","index","currentItem","disabled","currentFocusedIndex","current","tabIndex","itemsLength","length","nextIndex","nextItemToFocus","focus","target","activeElement","stopPropagation","preventDefault","renderItems","kind","createRef","slots","divider","defaultProps","toolbarItem","active","key","ElementType","unhandledProps","handledProps","element","root","ToolbarItem","ToolbarDivider","toolbarRadioGroupItemBehavior","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","PropTypes","number","customPropTypes","collectionShorthandWithKindProp","toolbarRadioGroupBehavior"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarRadioGroupBehavior,\n  toolbarRadioGroupItemBehavior,\n  ToolbarRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthand,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ShorthandCollection } from '../../types';\nimport { ToolbarDivider, ToolbarDividerProps } from './ToolbarDivider';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarRadioGroupItemShorthandKinds = {\n  divider: ToolbarDividerProps;\n  item: ToolbarItemProps;\n};\n\nexport interface ToolbarRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarRadioGroup. */\n  items?: ShorthandCollection<ToolbarItemProps, ToolbarRadioGroupItemShorthandKinds>;\n}\n\nexport type ToolbarRadioGroupStylesProps = never;\nexport const toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\nexport const ToolbarRadioGroup = compose<'div', ToolbarRadioGroupProps, ToolbarRadioGroupStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, activeIndex, children, className, design, items, variables, styles } = props;\n    const itemRefs: React.RefObject<HTMLElement>[] = [];\n\n    const slotProps = composeOptions.resolveSlotProps(props);\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        nextItem: event => setFocusedItem(event, 1),\n        prevItem: event => setFocusedItem(event, -1),\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarRadioGroupStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({ className, design, styles, variables: mergedVariables }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const setFocusedItem = (event: React.KeyboardEvent, direction) => {\n      // filter items which are not disabled\n      const filteredRadioItems: React.RefObject<HTMLElement>[] = _.filter(itemRefs, (item, index) => {\n        const currentItem = items[index] as ToolbarItemProps;\n        return currentItem && !currentItem.disabled;\n      });\n\n      // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n      const currentFocusedIndex =\n        _.findIndex(filteredRadioItems, (item: React.RefObject<HTMLElement>) => {\n          return item.current.tabIndex === 0;\n        }) || 0;\n\n      const itemsLength = filteredRadioItems.length;\n      let nextIndex = currentFocusedIndex + direction;\n\n      if (nextIndex >= itemsLength) {\n        nextIndex = 0;\n      }\n\n      if (nextIndex < 0) {\n        nextIndex = itemsLength - 1;\n      }\n\n      const nextItemToFocus = filteredRadioItems[nextIndex].current;\n      if (nextItemToFocus) {\n        nextItemToFocus.focus();\n      }\n\n      if (context.target.activeElement === nextItemToFocus) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n    };\n\n    const renderItems = () => {\n      return _.map(items, (item, index) => {\n        const kind = _.get(item, 'kind', 'item');\n\n        const ref = React.createRef<HTMLElement>();\n        itemRefs[index] = ref;\n\n        if (kind === 'divider') {\n          return createShorthand(composeOptions.slots.divider, item, {\n            defaultProps: () => slotProps.divider,\n          });\n        }\n\n        const toolbarItem = createShorthand(composeOptions.slots.item, item, {\n          defaultProps: () => ({\n            ...slotProps.item,\n            active: activeIndex === index,\n          }),\n        });\n\n        return (\n          <Ref innerRef={ref} key={toolbarItem.key}>\n            {toolbarItem}\n          </Ref>\n        );\n      });\n    };\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          ...unhandledProps,\n          className: classes.root,\n          ref,\n        })}\n      >\n        <ToolbarVariablesProvider value={mergedVariables}>\n          {childrenExist(children) ? children : renderItems()}\n        </ToolbarVariablesProvider>\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarRadioGroupClassName,\n    displayName: 'ToolbarRadioGroup',\n\n    slots: {\n      item: ToolbarItem,\n      divider: ToolbarDivider,\n    },\n    slotProps: () => ({\n      item: {\n        accessibility: toolbarRadioGroupItemBehavior,\n      },\n    }),\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'styles',\n      'variables',\n\n      'activeIndex',\n      'items',\n    ],\n  },\n);\n\nToolbarRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n};\nToolbarRadioGroup.defaultProps = {\n  accessibility: toolbarRadioGroupBehavior,\n};\n"],"file":"ToolbarRadioGroup.js"}