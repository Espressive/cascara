"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ToolbarMenuRadioGroup = exports.toolbarMenuRadioGroupClassName = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _ToolbarMenuItem = require("./ToolbarMenuItem");

var _ToolbarMenuRadioGroupWrapper = require("./ToolbarMenuRadioGroupWrapper");

var _toolbarVariablesContext = require("./toolbarVariablesContext");

var toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars

/**
 * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.
 */

exports.toolbarMenuRadioGroupClassName = toolbarMenuRadioGroupClassName;
var ToolbarMenuRadioGroup = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      activeIndex = props.activeIndex,
      className = props.className,
      design = props.design,
      items = props.items,
      styles = props.styles,
      variables = props.variables,
      wrapper = props.wrapper;
  var slotProps = composeOptions.resolveSlotProps(props);
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var mergedVariables = (0, _reactBindings.mergeVariablesOverrides)(parentVariables, variables);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    composeOptions: composeOptions,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var handleItemOverrides = function handleItemOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, itemProps) {
        (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);
        (0, _invoke2.default)(props, 'onItemClick', e, itemProps);
      },
      wrapper: null
    };
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var content = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root,
    ref: ref
  })), /*#__PURE__*/React.createElement(_toolbarVariablesContext.ToolbarVariablesProvider, {
    value: mergedVariables
  }, (0, _map2.default)(items, function (item, index) {
    return (0, _utils.createShorthand)(_ToolbarMenuItem.ToolbarMenuItem, item, {
      defaultProps: function defaultProps() {
        return {
          accessibility: _accessibility.toolbarMenuItemRadioBehavior,
          as: 'li',
          active: activeIndex === index,
          index: index
        };
      },
      overrideProps: handleItemOverrides
    });
  })));
  var element = (0, _utils.createShorthand)(composeOptions.slots.wrapper, wrapper, {
    defaultProps: function defaultProps() {
      return getA11yProps('wrapper', slotProps.wrapper || {});
    },
    overrideProps: {
      children: content
    }
  });
  setEnd();
  return element;
}, {
  className: toolbarMenuRadioGroupClassName,
  displayName: 'ToolbarMenuRadioGroup',
  slots: {
    wrapper: _ToolbarMenuRadioGroupWrapper.ToolbarMenuRadioGroupWrapper
  },
  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'activeIndex', 'items', 'onItemClick', 'wrapper']
});
exports.ToolbarMenuRadioGroup = ToolbarMenuRadioGroup;
ToolbarMenuRadioGroup.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  activeIndex: PropTypes.number,
  items: customPropTypes.collectionShorthand,
  onItemClick: PropTypes.func,
  wrapper: customPropTypes.itemShorthand
});
ToolbarMenuRadioGroup.defaultProps = {
  as: 'ul',
  accessibility: _accessibility.toolbarMenuRadioGroupBehavior,
  wrapper: {}
};
//# sourceMappingURL=ToolbarMenuRadioGroup.js.map
