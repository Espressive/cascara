{"version":3,"sources":["components/Toolbar/Toolbar.tsx"],"names":["WAS_FOCUSABLE_ATTRIBUTE","toolbarClassName","Toolbar","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","children","design","getOverflowItems","items","overflow","overflowItem","overflowOpen","overflowSentinel","styles","variables","overflowContainerRef","React","useRef","overflowItemWrapperRef","overflowSentinelRef","offsetMeasureRef","containerRef","lastVisibleItemIndex","animationFrameId","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","classes","ElementType","slotProps","resolveSlotProps","unhandledProps","handledProps","hide","el","style","visibility","target","activeElement","contains","current","firstFocusableItem","firstElementChild","focus","wasFocusable","getAttribute","IS_FOCUSABLE_ATTRIBUTE","setAttribute","show","removeAttribute","isItemOverflowing","itemBoundingRect","containerBoundingRect","right","left","wouldItemCollide","$item","overflowItemBoundingRect","actualWindow","defaultView","wouldCollide","itemLeftMargin","parseFloat","getComputedStyle","marginLeft","width","itemRightMargin","marginRight","setOverflowPosition","$overflowItem","$lastVisibleItem","lastVisibleItemRect","absolutePositioningOffset","lastVisibleItemMarginLeft","horizontal","lastVisibleItemRightMargin","hideOverflowItems","$overflowContainer","$overflowSentinel","$offsetMeasure","scrollTo","Number","MAX_SAFE_INTEGER","scrollTop","scrollLeft","$items","overflowContainerBoundingRect","getBoundingClientRect","offsetMeasureBoundingRect","vertical","top","isOverflowing","i","position","length","collectOverflowItems","slice","getVisibleItems","end","handleWindowResize","e","renderItems","item","kind","slots","divider","defaultProps","group","toggle","customItem","renderOverflowItem","overrideProps","predefinedProps","menu","popper","positionFixed","menuOpen","onMenuOpenChange","wrapper","renderOverflowSentinel","element","Box","create","id","useEffect","cancelAnimationFrame","requestAnimationFrame","undefined","node","unstable_wrapWithFocusZone","root","overflowContainer","offsetMeasure","ToolbarCustomItem","ToolbarDivider","ToolbarItem","ToolbarRadioGroup","ToolbarMenu","toggleButtonBehavior","icon","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","customPropTypes","collectionShorthandWithKindProp","PropTypes","bool","shorthandAllowingChildren","onOverflow","func","onOverflowOpenChange","toolbarBehavior","CustomItem","Divider","Item","ItemWrapper","ToolbarItemWrapper","ItemIcon","ToolbarItemIcon","Menu","MenuDivider","ToolbarMenuDivider","MenuItem","ToolbarMenuItem","MenuItemIcon","ToolbarMenuItemIcon","MenuItemSubmenuIndicator","ToolbarMenuItemSubmenuIndicator","MenuItemActiveIndicator","ToolbarMenuItemActiveIndicator","MenuRadioGroup","ToolbarMenuRadioGroup","MenuRadioGroupWrapper","ToolbarMenuRadioGroupWrapper","RadioGroup"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarBehavior,\n  ToolbarBehaviorProps,\n  toggleButtonBehavior,\n  IS_FOCUSABLE_ATTRIBUTE,\n} from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  compose,\n  getElementType,\n  getFirstFocusable,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport { MoreIcon } from '@fluentui/react-icons-northstar';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ComponentEventHandler, ShorthandCollection, ShorthandValue, ObjectShorthandValue } from '../../types';\nimport {\n  childrenExist,\n  createShorthand,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ColorComponentProps,\n} from '../../utils';\nimport { ToolbarCustomItem, ToolbarCustomItemProps } from './ToolbarCustomItem';\nimport { ToolbarDivider, ToolbarDividerProps } from './ToolbarDivider';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ToolbarItemWrapper } from './ToolbarItemWrapper';\nimport { ToolbarItemIcon } from './ToolbarItemIcon';\nimport { ToolbarMenu, ToolbarMenuProps } from './ToolbarMenu';\nimport { ToolbarMenuDivider } from './ToolbarMenuDivider';\nimport { ToolbarMenuItem } from './ToolbarMenuItem';\nimport { ToolbarMenuRadioGroup, ToolbarMenuRadioGroupProps } from './ToolbarMenuRadioGroup';\nimport { ToolbarMenuRadioGroupWrapper } from './ToolbarMenuRadioGroupWrapper';\nimport { ToolbarRadioGroup } from './ToolbarRadioGroup';\nimport { ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarMenuItemSubmenuIndicator } from './ToolbarMenuItemSubmenuIndicator';\nimport { ToolbarMenuItemIcon } from './ToolbarMenuItemIcon';\nimport { ToolbarMenuItemActiveIndicator } from './ToolbarMenuItemActiveIndicator';\nimport { ToolbarMenuContextProvider } from './toolbarMenuContext';\nimport { PopperShorthandProps } from '../../utils/positioner';\nimport { BoxProps, Box } from '../Box/Box';\n\nexport type ToolbarItemShorthandKinds = {\n  item: ToolbarItemProps;\n  divider: ToolbarDividerProps;\n  group: ToolbarMenuRadioGroupProps;\n  toggle: ToolbarItemProps;\n  custom: ToolbarCustomItemProps;\n};\n\ntype PositionOffset = {\n  vertical: number;\n  horizontal: number;\n};\n\nconst WAS_FOCUSABLE_ATTRIBUTE = 'data-was-focusable';\n\ntype ToolbarOverflowItemProps = Omit<ToolbarItemProps, 'menu'> & {\n  menu?: ObjectShorthandValue<ToolbarMenuProps & { popper?: PopperShorthandProps }>;\n};\n\nexport interface ToolbarProps\n  extends UIComponentProps,\n    ContentComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ToolbarBehaviorProps>;\n\n  /** Shorthand array of props for Toolbar. */\n  items?: ShorthandCollection<ToolbarItemProps, ToolbarItemShorthandKinds>;\n\n  /**\n   *  Automatically move overflow items to overflow menu.\n   *  For automatic overflow to work correctly, toolbar items including overflowMenuItem\n   *  must NOT change their size! If you need to change item's size, rerender the Toolbar.\n   */\n  overflow?: boolean;\n\n  /** Indicates if the overflow menu is open. Only valid if `overflow` is enabled and regular items do not fit. */\n  overflowOpen?: boolean;\n\n  /**\n   * Shorthand for the overflow item which is displayed when `overflow` is enabled and regular toolbar items do not fit.\n   * Do not set any menu on this item, Toolbar overrides it.\n   */\n  overflowItem?: ShorthandValue<ToolbarOverflowItemProps>;\n\n  /**\n   * Renders a sentinel node when the overflow menu is open to stop the width of the toolbar changing\n   * Only needed if the container hosting the toolbar does not have a fixed/min width\n   *\n   * @default null\n   */\n  overflowSentinel?: ShorthandValue<BoxProps>;\n\n  /**\n   * Called when overflow is recomputed (after render, update or window resize). Even if all items fit.\n   * @param itemsVisible - number of items visible\n   */\n  onOverflow?: (itemsVisible: number) => void;\n\n  /**\n   * Event for request to change 'overflowOpen' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOverflowOpenChange?: ComponentEventHandler<ToolbarProps>;\n\n  /**\n   * Callback to get items to be rendered in overflow menu.\n   * Called when overflow menu is rendered opened.\n   * @param startIndex - Index of the first item to be displayed in the overflow menu (the first item which does not fit the toolbar).\n   */\n  getOverflowItems?: (startIndex: number) => ToolbarItemProps['menu'];\n}\n\nexport type ToolbarStylesProps = Pick<ToolbarProps, 'overflowOpen'>;\n\nexport const toolbarClassName = 'ui-toolbar';\n\n/**\n * A Toolbar is a container for grouping a set of controls, often action controls (e.g. buttons) or input controls (e.g. checkboxes).\n *\n * @accessibility\n *  * Implements [ARIA Toolbar](https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar) design pattern.\n * @accessibilityIssues\n * [Issue 988424: VoiceOver narrates selected for button in toolbar](https://bugs.chromium.org/p/chromium/issues/detail?id=988424)\n * [In toolbars that can toggle items in a menu, VoiceOver narrates \"1\" for menuitemcheckbox/radio when checked.](https://github.com/microsoft/fluentui/issues/14064)\n */\nexport const Toolbar = compose<'div', ToolbarProps, ToolbarStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const {\n      accessibility,\n      className,\n      children,\n      design,\n      getOverflowItems,\n      items,\n      overflow,\n      overflowItem,\n      overflowOpen,\n      overflowSentinel,\n      styles,\n      variables,\n    } = props;\n\n    const overflowContainerRef = React.useRef<HTMLDivElement>();\n    const overflowItemWrapperRef = React.useRef<HTMLElement>();\n    const overflowSentinelRef = React.useRef<HTMLDivElement>();\n    const offsetMeasureRef = React.useRef<HTMLDivElement>();\n    const containerRef = React.useRef<HTMLElement>();\n\n    // index of the last visible item in Toolbar, the rest goes to overflow menu\n    const lastVisibleItemIndex = React.useRef<number>();\n    const animationFrameId = React.useRef<number>();\n\n    const getA11Props = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarStylesProps>(composeOptions.displayName, {\n      className: toolbarClassName,\n      composeOptions,\n      mapPropsToStyles: () => ({\n        overflowOpen,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const slotProps = composeOptions.resolveSlotProps<ToolbarProps>(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const hide = (el: HTMLElement) => {\n      if (el.style.visibility === 'hidden') {\n        return;\n      }\n\n      if (context.target.activeElement === el || el.contains(context.target.activeElement)) {\n        if (containerRef.current) {\n          const firstFocusableItem = getFirstFocusable(\n            containerRef.current,\n            containerRef.current.firstElementChild as HTMLElement,\n          );\n\n          if (firstFocusableItem) {\n            firstFocusableItem.focus();\n          }\n        }\n      }\n\n      el.style.visibility = 'hidden';\n      const wasFocusable = el.getAttribute(IS_FOCUSABLE_ATTRIBUTE);\n      if (wasFocusable) {\n        el.setAttribute(WAS_FOCUSABLE_ATTRIBUTE, wasFocusable);\n      }\n      el.setAttribute(IS_FOCUSABLE_ATTRIBUTE, 'false');\n    };\n\n    const show = (el: HTMLElement) => {\n      if (el.style.visibility !== 'hidden') {\n        return false;\n      }\n\n      el.style.visibility = '';\n      const wasFocusable = el.getAttribute(WAS_FOCUSABLE_ATTRIBUTE);\n      if (wasFocusable) {\n        el.setAttribute(IS_FOCUSABLE_ATTRIBUTE, wasFocusable);\n        el.removeAttribute(WAS_FOCUSABLE_ATTRIBUTE);\n      } else {\n        el.removeAttribute(IS_FOCUSABLE_ATTRIBUTE);\n      }\n\n      return true;\n    };\n\n    /**\n     * Checks if `item` overflows a `container`.\n     * TODO: check and fix all margin combination\n     */\n    const isItemOverflowing = (itemBoundingRect: ClientRect, containerBoundingRect: ClientRect) => {\n      return itemBoundingRect.right > containerBoundingRect.right || itemBoundingRect.left < containerBoundingRect.left;\n    };\n\n    /**\n     * Checks if `item` would collide with eventual position of `overflowItem`.\n     */\n    const wouldItemCollide = (\n      $item: Element,\n      itemBoundingRect: ClientRect,\n      overflowItemBoundingRect: ClientRect,\n      containerBoundingRect: ClientRect,\n    ) => {\n      const actualWindow: Window = context.target.defaultView;\n      let wouldCollide;\n\n      if (context.rtl) {\n        const itemLeftMargin = parseFloat(actualWindow.getComputedStyle($item).marginLeft) || 0;\n        wouldCollide =\n          itemBoundingRect.left - overflowItemBoundingRect.width - itemLeftMargin < containerBoundingRect.left;\n\n        // console.log('Collision [RTL]', {\n        //   wouldCollide,\n        //   'itemBoundingRect.left': itemBoundingRect.left,\n        //   'overflowItemBoundingRect.width': overflowItemBoundingRect.width,\n        //   itemRightMargin: itemLeftMargin,\n        //   sum: itemBoundingRect.left - overflowItemBoundingRect.width - itemLeftMargin,\n        //   'overflowContainerBoundingRect.left': containerBoundingRect.left,\n        // })\n      } else {\n        const itemRightMargin = parseFloat(actualWindow.getComputedStyle($item).marginRight) || 0;\n        wouldCollide =\n          itemBoundingRect.right + overflowItemBoundingRect.width + itemRightMargin > containerBoundingRect.right;\n\n        // console.log('Collision', {\n        //   wouldCollide,\n        //   'itemBoundingRect.right': itemBoundingRect.right,\n        //   'overflowItemBoundingRect.width': overflowItemBoundingRect.width,\n        //   itemRightMargin,\n        //   sum: itemBoundingRect.right + overflowItemBoundingRect.width + itemRightMargin,\n        //   'overflowContainerBoundingRect.right': containerBoundingRect.right,\n        // })\n      }\n\n      return wouldCollide;\n    };\n\n    /**\n     * Positions overflowItem next to lastVisible item\n     * TODO: consider overflowItem margin\n     */\n    const setOverflowPosition = (\n      $overflowItem: HTMLElement,\n      $lastVisibleItem: HTMLElement | undefined,\n      lastVisibleItemRect: ClientRect | undefined,\n      containerBoundingRect: ClientRect,\n      absolutePositioningOffset: PositionOffset,\n    ) => {\n      const actualWindow: Window = context.target.defaultView;\n\n      if ($lastVisibleItem) {\n        if (context.rtl) {\n          const lastVisibleItemMarginLeft = parseFloat(actualWindow.getComputedStyle($lastVisibleItem).marginLeft) || 0;\n\n          $overflowItem.style.right = `${\n            containerBoundingRect.right -\n            lastVisibleItemRect.left +\n            lastVisibleItemMarginLeft +\n            absolutePositioningOffset.horizontal\n          }px`;\n        } else {\n          const lastVisibleItemRightMargin =\n            parseFloat(actualWindow.getComputedStyle($lastVisibleItem).marginRight) || 0;\n\n          $overflowItem.style.left = `${\n            lastVisibleItemRect.right -\n            containerBoundingRect.left +\n            lastVisibleItemRightMargin +\n            absolutePositioningOffset.horizontal\n          }px`;\n        }\n      } else {\n        // there is no last visible item -> position the overflow as the first item\n        lastVisibleItemIndex.current = -1;\n        if (context.rtl) {\n          $overflowItem.style.right = `${absolutePositioningOffset.horizontal}px`;\n        } else {\n          $overflowItem.style.left = `${absolutePositioningOffset.horizontal}px`;\n        }\n      }\n    };\n\n    const hideOverflowItems = () => {\n      const $overflowContainer = overflowContainerRef.current;\n      const $overflowItem = overflowItemWrapperRef.current;\n      const $overflowSentinel = overflowSentinelRef.current;\n      const $offsetMeasure = offsetMeasureRef.current;\n      if (!$overflowContainer || !$overflowItem || !$offsetMeasure) {\n        return;\n      }\n\n      // workaround: when resizing window with popup opened the container contents scroll for some reason\n      if (context.rtl) {\n        $overflowContainer.scrollTo(Number.MAX_SAFE_INTEGER, 0);\n      } else {\n        $overflowContainer.scrollTop = 0;\n        $overflowContainer.scrollLeft = 0;\n      }\n\n      const $items = $overflowContainer.children;\n\n      const overflowContainerBoundingRect = $overflowContainer.getBoundingClientRect();\n      const overflowItemBoundingRect = $overflowItem.getBoundingClientRect();\n      const offsetMeasureBoundingRect = $offsetMeasure.getBoundingClientRect();\n\n      // Absolute positioning offset\n      // Overflow menu is absolutely positioned relative to root slot\n      // If there is padding set on the root slot boundingClientRect computations use inner content box,\n      // but absolute position is relative to root slot's PADDING box.\n      // We compute absolute positioning offset\n      // By measuring position of an offsetMeasure element absolutely positioned to 0,0.\n      // TODO: replace by getComputedStyle('padding')\n      const absolutePositioningOffset: PositionOffset = {\n        horizontal: context.rtl\n          ? offsetMeasureBoundingRect.right - overflowContainerBoundingRect.right\n          : overflowContainerBoundingRect.left - offsetMeasureBoundingRect.left,\n        vertical: overflowContainerBoundingRect.top - offsetMeasureBoundingRect.top,\n      };\n\n      let isOverflowing = false;\n      let $lastVisibleItem;\n      let lastVisibleItemRect;\n\n      // check all items from the last one back\n      _.forEachRight($items, ($item: HTMLElement, i: number) => {\n        if ($item === $overflowItem || $item === $overflowSentinel) {\n          return true;\n        }\n\n        const itemBoundingRect = $item.getBoundingClientRect();\n\n        // if the item is out of the crop rectangle, hide it\n        if (isItemOverflowing(itemBoundingRect, overflowContainerBoundingRect)) {\n          isOverflowing = true;\n          // console.log('Overflow', i, {\n          //   item: [itemBoundingRect.left, itemBoundingRect.right],\n          //   crop: [\n          //     overflowContainerBoundingRect.left,\n          //     overflowContainerBoundingRect.right,\n          //     overflowContainerBoundingRect.width,\n          //   ],\n          //   container: $overflowContainer,\n          // })\n          hide($item);\n          return true;\n        }\n\n        // if there is an overflow, check collision of remaining items with eventual overflow position\n        if (\n          isOverflowing &&\n          !$lastVisibleItem &&\n          wouldItemCollide($item, itemBoundingRect, overflowItemBoundingRect, overflowContainerBoundingRect)\n        ) {\n          hide($item);\n          return true;\n        }\n\n        // Remember the last visible item\n        if (!$lastVisibleItem) {\n          $lastVisibleItem = $item;\n          lastVisibleItemRect = itemBoundingRect;\n          lastVisibleItemIndex.current = i;\n        }\n\n        return show($item); // exit the loop when first visible item is found\n      });\n\n      // if there is an overflow,  position and show overflow item, otherwise hide it\n      if (isOverflowing || overflowOpen) {\n        $overflowItem.style.position = 'absolute';\n        setOverflowPosition(\n          $overflowItem,\n          $lastVisibleItem,\n          lastVisibleItemRect,\n          overflowContainerBoundingRect,\n          absolutePositioningOffset,\n        );\n        show($overflowItem);\n      } else {\n        lastVisibleItemIndex.current = items.length - 1;\n        hide($overflowItem);\n      }\n\n      _.invoke(props, 'onOverflow', lastVisibleItemIndex.current + 1);\n    };\n\n    const collectOverflowItems = (): ToolbarItemProps['menu'] => {\n      // console.log('getOverflowItems()', items.slice(lastVisibleItemIndex.current + 1))\n      return getOverflowItems\n        ? getOverflowItems(lastVisibleItemIndex.current + 1)\n        : items.slice(lastVisibleItemIndex.current + 1);\n    };\n\n    const getVisibleItems = () => {\n      // console.log('allItems()', items)\n      const end = overflowOpen ? lastVisibleItemIndex.current + 1 : items.length;\n      // console.log('getVisibleItems()', items.slice(0, end))\n      return items.slice(0, end);\n    };\n\n    const handleWindowResize = _.debounce((e: UIEvent) => {\n      hideOverflowItems();\n\n      if (overflowOpen) {\n        _.invoke(props, 'onOverflowOpenChange', e, { ...props, overflowOpen: false });\n      }\n    }, 16);\n\n    const renderItems = (items: ToolbarProps['items']) =>\n      _.map(items, item => {\n        const kind = _.get(item, 'kind', 'item');\n\n        switch (kind) {\n          case 'divider':\n            return createShorthand(composeOptions.slots.divider, item, {\n              defaultProps: () => slotProps.divider,\n            });\n          case 'group':\n            return createShorthand(composeOptions.slots.group, item, {\n              defaultProps: () => slotProps.group,\n            });\n          case 'toggle':\n            return createShorthand(composeOptions.slots.toggle, item, {\n              defaultProps: () => slotProps.toggle,\n            });\n          case 'custom':\n            return createShorthand(composeOptions.slots.customItem, item, {\n              defaultProps: () => slotProps.customItem,\n            });\n          default:\n            return createShorthand(composeOptions.slots.item, item, {\n              defaultProps: () => slotProps.item,\n            });\n        }\n      });\n\n    const renderOverflowItem = overflowItem =>\n      createShorthand(composeOptions.slots.overflowItem, overflowItem, {\n        defaultProps: () => slotProps.overflowItem,\n        overrideProps: (predefinedProps: ToolbarOverflowItemProps) => ({\n          menu: {\n            items: overflowOpen ? (collectOverflowItems() as ToolbarMenuProps['items']) : [],\n            popper: { positionFixed: true, ...predefinedProps.menu?.popper },\n          },\n          menuOpen: overflowOpen,\n          onMenuOpenChange: (e, { menuOpen }) => {\n            _.invoke(props, 'onOverflowOpenChange', e, { ...props, overflowOpen: menuOpen });\n          },\n          wrapper: {\n            ref: overflowItemWrapperRef,\n          },\n        }),\n      });\n\n    // renders a sentinel div that maintains the toolbar dimensions when the the overflow menu is open\n    // hidden elements are removed from the DOM\n    const renderOverflowSentinel = () => (\n      <Ref\n        innerRef={(element: HTMLDivElement) => {\n          overflowSentinelRef.current = element;\n        }}\n      >\n        {Box.create(overflowSentinel, {\n          defaultProps: () => ({\n            id: 'sentinel',\n            className: classes.overflowSentinel,\n          }),\n        })}\n      </Ref>\n    );\n\n    React.useEffect(() => {\n      const actualWindow: Window = context.target.defaultView;\n\n      actualWindow.cancelAnimationFrame(animationFrameId.current);\n      // Heads up! There are cases (like opening a portal and rendering the Toolbar there immediately) when rAF is necessary\n      animationFrameId.current = actualWindow.requestAnimationFrame(() => {\n        hideOverflowItems();\n      });\n\n      return () => {\n        if (animationFrameId.current !== undefined) {\n          context.target.defaultView?.cancelAnimationFrame(animationFrameId.current);\n          animationFrameId.current = undefined;\n        }\n      };\n    });\n\n    const element = overflow ? (\n      <>\n        <Ref\n          innerRef={(node: HTMLDivElement) => {\n            containerRef.current = node;\n            handleRef(ref, node);\n          }}\n        >\n          {getA11Props.unstable_wrapWithFocusZone(\n            <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n              <div className={classes.overflowContainer} ref={overflowContainerRef}>\n                <ToolbarMenuContextProvider value={{ slots: { menu: composeOptions.slots.menu } }}>\n                  <ToolbarVariablesProvider value={variables}>\n                    {childrenExist(children) ? children : renderItems(getVisibleItems())}\n                    {overflowSentinel && renderOverflowSentinel()}\n                    {renderOverflowItem(overflowItem)}\n                  </ToolbarVariablesProvider>\n                </ToolbarMenuContextProvider>\n              </div>\n              <div className={classes.offsetMeasure} ref={offsetMeasureRef} />\n            </ElementType>,\n          )}\n        </Ref>\n        <EventListener listener={handleWindowResize} target={context.target.defaultView} type=\"resize\" />\n      </>\n    ) : (\n      <Ref\n        innerRef={(node: HTMLDivElement) => {\n          containerRef.current = node;\n          handleRef(ref, node);\n        }}\n      >\n        {getA11Props.unstable_wrapWithFocusZone(\n          <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n            <ToolbarMenuContextProvider value={{ slots: { menu: composeOptions.slots.menu } }}>\n              <ToolbarVariablesProvider value={variables}>\n                {childrenExist(children) ? children : renderItems(items)}\n              </ToolbarVariablesProvider>\n            </ToolbarMenuContextProvider>\n          </ElementType>,\n        )}\n      </Ref>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarClassName,\n    displayName: 'Toolbar',\n\n    slots: {\n      customItem: ToolbarCustomItem,\n      divider: ToolbarDivider,\n      item: ToolbarItem,\n      group: ToolbarRadioGroup,\n      toggle: ToolbarItem,\n      overflowItem: ToolbarItem,\n      menu: ToolbarMenu,\n    },\n    slotProps: () => ({\n      toggle: {\n        accessibility: toggleButtonBehavior,\n      },\n      overflowItem: {\n        icon: <MoreIcon outline />,\n      },\n    }),\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'getOverflowItems',\n      'items',\n      'onOverflow',\n      'onOverflowOpenChange',\n      'overflow',\n      'overflowItem',\n      'overflowOpen',\n      'overflowSentinel',\n      'styles',\n      'variables',\n    ],\n  },\n) as ComponentWithAs<'div', ToolbarProps> & {\n  CustomItem: typeof ToolbarCustomItem;\n  Divider: typeof ToolbarDivider;\n  Item: typeof ToolbarItem;\n  ItemWrapper: typeof ToolbarItemWrapper;\n  ItemIcon: typeof ToolbarItemIcon;\n  Menu: typeof ToolbarMenu;\n  MenuDivider: typeof ToolbarMenuDivider;\n  MenuItem: typeof ToolbarMenuItem;\n  MenuItemIcon: typeof ToolbarMenuItemIcon;\n  MenuItemSubmenuIndicator: typeof ToolbarMenuItemSubmenuIndicator;\n  MenuItemActiveIndicator: typeof ToolbarMenuItemActiveIndicator;\n  MenuRadioGroup: typeof ToolbarMenuRadioGroup;\n  MenuRadioGroupWrapper: typeof ToolbarMenuRadioGroupWrapper;\n  RadioGroup: typeof ToolbarRadioGroup;\n};\n\nToolbar.propTypes = {\n  ...commonPropTypes.createCommon(),\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item', 'group', 'toggle', 'custom']),\n  overflow: PropTypes.bool,\n  overflowOpen: PropTypes.bool,\n  overflowSentinel: customPropTypes.shorthandAllowingChildren,\n  overflowItem: customPropTypes.shorthandAllowingChildren,\n  onOverflow: PropTypes.func,\n  onOverflowOpenChange: PropTypes.func,\n  getOverflowItems: PropTypes.func,\n};\nToolbar.defaultProps = {\n  accessibility: toolbarBehavior,\n  items: [],\n  overflowItem: {},\n  overflowSentinel: {},\n};\n\nToolbar.CustomItem = ToolbarCustomItem;\nToolbar.Divider = ToolbarDivider;\nToolbar.Item = ToolbarItem;\nToolbar.ItemWrapper = ToolbarItemWrapper;\nToolbar.ItemIcon = ToolbarItemIcon;\nToolbar.Menu = ToolbarMenu;\nToolbar.MenuDivider = ToolbarMenuDivider;\nToolbar.MenuItem = ToolbarMenuItem;\nToolbar.MenuItemIcon = ToolbarMenuItemIcon;\nToolbar.MenuItemSubmenuIndicator = ToolbarMenuItemSubmenuIndicator;\nToolbar.MenuItemActiveIndicator = ToolbarMenuItemActiveIndicator;\nToolbar.MenuRadioGroup = ToolbarMenuRadioGroup;\nToolbar.MenuRadioGroupWrapper = ToolbarMenuRadioGroupWrapper;\nToolbar.RadioGroup = ToolbarRadioGroup;\n"],"file":"Toolbar.js"}