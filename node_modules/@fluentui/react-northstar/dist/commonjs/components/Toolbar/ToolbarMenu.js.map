{"version":3,"sources":["components/Toolbar/ToolbarMenu.tsx"],"names":["toolbarMenuClassName","ToolbarMenu","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","accessibility","className","children","design","items","styles","variables","parentVariables","React","useContext","ToolbarVariablesContext","mergedVariables","slotProps","resolveSlotProps","getA11yProps","debugName","actionHandlers","performClick","e","rtl","mapPropsToInlineStyles","unstable_props","classes","handleItemOverrides","predefinedProps","onClick","itemProps","menuOpen","menu","handleRadioGroupOverrides","onItemClick","renderItems","item","kind","slots","divider","defaultProps","group","overrideProps","toggle","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","ToolbarMenuItem","ToolbarMenuDivider","ToolbarMenuRadioGroup","submenuIndicator","inSubmenu","submenu","toolbarMenuItemCheckboxBehavior","shorthandConfig","mappedArrayProp","propTypes","commonPropTypes","createCommon","customPropTypes","collectionShorthandWithKindProp","PropTypes","func","bool","shorthandAllowingChildren","toolbarMenuBehavior","as"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuBehavior,\n  toolbarMenuItemCheckboxBehavior,\n  ToolbarMenuBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  createShorthand,\n  commonPropTypes,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n} from '../../utils';\n\nimport { ComponentEventHandler, ShorthandCollection, ShorthandValue } from '../../types';\n\nimport { ToolbarMenuRadioGroup, ToolbarMenuRadioGroupProps } from './ToolbarMenuRadioGroup';\nimport { ToolbarMenuDivider } from './ToolbarMenuDivider';\nimport { ToolbarMenuItem, ToolbarMenuItemProps } from './ToolbarMenuItem';\nimport { BoxProps } from '../Box/Box';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarDividerProps } from './ToolbarDivider';\nimport { ToolbarItemProps } from './ToolbarItem';\n\nexport type ToolbarMenuItemShorthandKinds = {\n  divider: ToolbarDividerProps;\n  item: ToolbarItemProps;\n  toggle: ToolbarItemProps;\n};\n\nexport interface ToolbarMenuProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuBehaviorProps>;\n\n  /** Shorthand array of props for ToolbarMenu. */\n  items?: ShorthandCollection<ToolbarMenuItemProps, ToolbarMenuItemShorthandKinds>;\n\n  /**\n   * Called on item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /** Indicates whether the menu is submenu. */\n  submenu?: boolean;\n\n  /** Shorthand for the submenu indicator. */\n  submenuIndicator?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuStylesProps = never;\nexport const toolbarMenuClassName = 'ui-toolbar__menu';\n\n/**\n * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.\n *\n * @accessibility\n * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.\n */\nexport const ToolbarMenu = compose<'ul', ToolbarMenuProps, ToolbarMenuStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, children, design, items, styles, variables } = props;\n\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n    const slotProps = composeOptions.resolveSlotProps<ToolbarMenuProps>(props);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: e => {\n          _.invoke(props, 'onClick', e, props);\n        },\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarMenuStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergedVariables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const handleItemOverrides = predefinedProps => ({\n      onClick: (e, itemProps) => {\n        _.invoke(predefinedProps, 'onClick', e, itemProps);\n        _.invoke(props, 'onItemClick', e, {\n          ...itemProps,\n          menuOpen: !!itemProps.menu,\n        });\n      },\n    });\n\n    const handleRadioGroupOverrides = (predefinedProps: ToolbarMenuRadioGroupProps) => ({\n      onItemClick: (e, itemProps) => {\n        _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n        _.invoke(props, 'onItemClick', e, itemProps);\n      },\n    });\n\n    const renderItems = () => {\n      return _.map(items, item => {\n        const kind = _.get(item, 'kind', 'item');\n\n        switch (kind) {\n          case 'divider':\n            return createShorthand(composeOptions.slots.divider, item, {\n              defaultProps: () => slotProps.divider,\n            });\n\n          case 'group':\n            return createShorthand(composeOptions.slots.group, item, {\n              defaultProps: () => slotProps.group,\n              overrideProps: handleRadioGroupOverrides,\n            });\n\n          case 'toggle':\n            return createShorthand(composeOptions.slots.toggle, item, {\n              defaultProps: () => slotProps.toggle,\n              overrideProps: handleItemOverrides,\n            });\n\n          default:\n            return createShorthand(composeOptions.slots.item, item, {\n              defaultProps: () => slotProps.item,\n              overrideProps: handleItemOverrides,\n            });\n        }\n      });\n    };\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = getA11yProps.unstable_wrapWithFocusZone(\n      <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })}>\n        <ToolbarVariablesProvider value={mergedVariables}>\n          {childrenExist(children) ? children : renderItems()}\n        </ToolbarVariablesProvider>\n      </ElementType>,\n    );\n    setEnd();\n\n    // TODO: As ElementType is wrapped with FocusZone which doesn't ref forwarding we have to use Ref\n    return ref ? <Ref innerRef={ref}>{element}</Ref> : element;\n  },\n  {\n    displayName: 'ToolbarMenu',\n    className: toolbarMenuClassName,\n\n    slots: {\n      item: ToolbarMenuItem,\n      divider: ToolbarMenuDivider,\n      group: ToolbarMenuRadioGroup,\n      toggle: ToolbarMenuItem,\n    },\n    slotProps: props => ({\n      item: {\n        submenuIndicator: props.submenuIndicator,\n        inSubmenu: props.submenu,\n      },\n      toggle: {\n        accessibility: toolbarMenuItemCheckboxBehavior,\n      },\n    }),\n\n    shorthandConfig: {\n      mappedArrayProp: 'items',\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'items',\n      'onItemClick',\n      'styles',\n      'submenu',\n      'submenuIndicator',\n      'variables',\n    ],\n  },\n);\n\nToolbarMenu.propTypes = {\n  ...commonPropTypes.createCommon(),\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n  onItemClick: PropTypes.func,\n  submenu: PropTypes.bool,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n};\nToolbarMenu.defaultProps = {\n  accessibility: toolbarMenuBehavior,\n  as: 'ul',\n};\n"],"file":"ToolbarMenu.js"}