"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ToolbarMenu = exports.toolbarMenuClassName = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _ToolbarMenuRadioGroup = require("./ToolbarMenuRadioGroup");

var _ToolbarMenuDivider = require("./ToolbarMenuDivider");

var _ToolbarMenuItem = require("./ToolbarMenuItem");

var _toolbarVariablesContext = require("./toolbarVariablesContext");

var toolbarMenuClassName = 'ui-toolbar__menu';
/**
 * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.
 *
 * @accessibility
 * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.
 */

exports.toolbarMenuClassName = toolbarMenuClassName;
var ToolbarMenu = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      children = props.children,
      design = props.design,
      items = props.items,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var mergedVariables = (0, _reactBindings.mergeVariablesOverrides)(parentVariables, variables);
  var slotProps = composeOptions.resolveSlotProps(props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        (0, _invoke2.default)(props, 'onClick', e, props);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    composeOptions: composeOptions,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var handleItemOverrides = function handleItemOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, itemProps) {
        (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);
        (0, _invoke2.default)(props, 'onItemClick', e, Object.assign({}, itemProps, {
          menuOpen: !!itemProps.menu
        }));
      }
    };
  };

  var handleRadioGroupOverrides = function handleRadioGroupOverrides(predefinedProps) {
    return {
      onItemClick: function onItemClick(e, itemProps) {
        (0, _invoke2.default)(predefinedProps, 'onItemClick', e, itemProps);
        (0, _invoke2.default)(props, 'onItemClick', e, itemProps);
      }
    };
  };

  var renderItems = function renderItems() {
    return (0, _map2.default)(items, function (item) {
      var kind = (0, _get2.default)(item, 'kind', 'item');

      switch (kind) {
        case 'divider':
          return (0, _utils.createShorthand)(composeOptions.slots.divider, item, {
            defaultProps: function defaultProps() {
              return slotProps.divider;
            }
          });

        case 'group':
          return (0, _utils.createShorthand)(composeOptions.slots.group, item, {
            defaultProps: function defaultProps() {
              return slotProps.group;
            },
            overrideProps: handleRadioGroupOverrides
          });

        case 'toggle':
          return (0, _utils.createShorthand)(composeOptions.slots.toggle, item, {
            defaultProps: function defaultProps() {
              return slotProps.toggle;
            },
            overrideProps: handleItemOverrides
          });

        default:
          return (0, _utils.createShorthand)(composeOptions.slots.item, item, {
            defaultProps: function defaultProps() {
              return slotProps.item;
            },
            overrideProps: handleItemOverrides
          });
      }
    });
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root
  })), /*#__PURE__*/React.createElement(_toolbarVariablesContext.ToolbarVariablesProvider, {
    value: mergedVariables
  }, (0, _utils.childrenExist)(children) ? children : renderItems())));
  setEnd(); // TODO: As ElementType is wrapped with FocusZone which doesn't ref forwarding we have to use Ref

  return ref ? /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: ref
  }, element) : element;
}, {
  displayName: 'ToolbarMenu',
  className: toolbarMenuClassName,
  slots: {
    item: _ToolbarMenuItem.ToolbarMenuItem,
    divider: _ToolbarMenuDivider.ToolbarMenuDivider,
    group: _ToolbarMenuRadioGroup.ToolbarMenuRadioGroup,
    toggle: _ToolbarMenuItem.ToolbarMenuItem
  },
  slotProps: function slotProps(props) {
    return {
      item: {
        submenuIndicator: props.submenuIndicator,
        inSubmenu: props.submenu
      },
      toggle: {
        accessibility: _accessibility.toolbarMenuItemCheckboxBehavior
      }
    };
  },
  shorthandConfig: {
    mappedArrayProp: 'items'
  },
  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'items', 'onItemClick', 'styles', 'submenu', 'submenuIndicator', 'variables']
});
exports.ToolbarMenu = ToolbarMenu;
ToolbarMenu.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),
  onItemClick: PropTypes.func,
  submenu: PropTypes.bool,
  submenuIndicator: customPropTypes.shorthandAllowingChildren
});
ToolbarMenu.defaultProps = {
  accessibility: _accessibility.toolbarMenuBehavior,
  as: 'ul'
};
//# sourceMappingURL=ToolbarMenu.js.map
