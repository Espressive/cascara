"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ToolbarItem = exports.toolbarItemClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _some2 = _interopRequireDefault(require("lodash/some"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var _reactComponentEventListener = require("@fluentui/react-component-event-listener");

var _reactComponentNestingRegistry = require("@fluentui/react-component-nesting-registry");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _positioner = require("../../utils/positioner");

var _ToolbarMenu = require("./ToolbarMenu");

var _Popup = require("../Popup/Popup");

var _toolbarVariablesContext = require("./toolbarVariablesContext");

var _ToolbarItemWrapper = require("./ToolbarItemWrapper");

var _ToolbarItemIcon = require("./ToolbarItemIcon");

var _toolbarMenuContext = require("./toolbarMenuContext");

var toolbarItemClassName = 'ui-toolbar__item';
/**
 * A ToolbarItem renders Toolbar item as a button with an icon.
 */

exports.toolbarItemClassName = toolbarItemClassName;
var ToolbarItem = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      active = props.active,
      className = props.className,
      design = props.design,
      icon = props.icon,
      children = props.children,
      disabled = props.disabled,
      popup = props.popup,
      menuOpen = props.menuOpen,
      wrapper = props.wrapper,
      styles = props.styles,
      variables = props.variables;

  var _partitionPopperProps = (0, _positioner.partitionPopperPropsFromShorthand)(props.menu),
      menu = _partitionPopperProps[0],
      positioningProps = _partitionPopperProps[1];

  var itemRef = React.useRef();
  var menuRef = React.useRef();
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var mergedVariables = (0, _reactBindings.mergeVariablesOverrides)(parentVariables, variables);

  var _ref = (0, _reactBindings.useContextSelectors)(_toolbarMenuContext.ToolbarMenuContext, {
    menuSlot: function menuSlot(v) {
      return v.slots.menu;
    }
  }),
      menuSlot = _ref.menuSlot; // TODO: we should improve typings for the useContextSelectors


  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    actionHandlers: {
      performClick: function performClick(event) {
        event.preventDefault();
        handleClick(event);
      },
      performWrapperClick: function performWrapperClick(event) {
        handleWrapperClick(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        trySetMenuOpen(false, event);
        (0, _invoke2.default)(itemRef.current, 'focus');
      },
      doNotNavigateNextToolbarItem: function doNotNavigateNextToolbarItem(event) {
        event.stopPropagation();
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        as: String(props.as),
        disabled: disabled,
        hasMenu: !!menu,
        hasPopup: !!popup,
        menuOpen: menuOpen,
        active: active
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    composeOptions: composeOptions,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        active: active,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var handleBlur = function handleBlur(e) {
    (0, _invoke2.default)(props, 'onBlur', e, props);
  };

  var handleFocus = function handleFocus(e) {
    (0, _invoke2.default)(props, 'onFocus', e, props);
  };

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    if (menu) {
      trySetMenuOpen(!menuOpen, e);
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var handleWrapperClick = function handleWrapperClick(e) {
    if (menu) {
      if ((0, _utils.doesNodeContainClick)(menuRef.current, e.nativeEvent, context.target, false)) {
        trySetMenuOpen(false, e);
      }
    }
  };

  var handleOutsideClick = function handleOutsideClick(getRefs) {
    return function (e) {
      var isItemClick = (0, _utils.doesNodeContainClick)(itemRef.current, e, context.target);
      var isNestedClick = (0, _some2.default)(getRefs(), function (childRef) {
        return (0, _utils.doesNodeContainClick)(childRef.current, e, context.target);
      });
      var isInside = isItemClick || isNestedClick;

      if (!isInside) {
        trySetMenuOpen(false, e);
      }
    };
  };

  var trySetMenuOpen = function trySetMenuOpen(newValue, e) {
    (0, _invoke2.default)(props, 'onMenuOpenChange', e, Object.assign({}, props, {
      menuOpen: newValue
    }));
  };

  var handleMenuOverrides = function handleMenuOverrides(getRefs) {
    return function (predefinedProps) {
      return {
        onBlur: function onBlur(e) {
          var isInsideOrMenuTrigger = (0, _some2.default)(getRefs(), function (childRef) {
            return childRef.current.contains(e.relatedTarget) || itemRef.current.contains(e.relatedTarget);
          });

          if (!isInsideOrMenuTrigger) {
            trySetMenuOpen(false, e);
          }
        },
        onItemClick: function onItemClick(e, itemProps) {
          var popup = itemProps.popup,
              menuOpen = itemProps.menuOpen;
          (0, _invoke2.default)(predefinedProps, 'onItemClick', e, itemProps);

          if (popup) {
            return;
          } // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?


          trySetMenuOpen(menuOpen, e);
        }
      };
    };
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var slotProps = composeOptions.resolveSlotProps(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var itemElement = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: function innerRef(node) {
      itemRef.current = node;
      (0, _reactComponentRef.handleRef)(ref, node);
    }
  }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    disabled: disabled,
    className: classes.root,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onClick: handleClick
  })), (0, _utils.childrenExist)(children) ? children : (0, _utils.createShorthand)(composeOptions.slots.icon, icon, slotProps.icon)));
  var submenuElement = menuOpen ? /*#__PURE__*/React.createElement(_reactComponentNestingRegistry.Unstable_NestingAuto, null, function (getRefs, nestingRef) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
      innerRef: function innerRef(node) {
        nestingRef.current = node;
        menuRef.current = node;
      }
    }, /*#__PURE__*/React.createElement(_positioner.Popper, (0, _extends2.default)({
      align: "start",
      position: "above",
      targetRef: itemRef
    }, positioningProps), /*#__PURE__*/React.createElement(_toolbarVariablesContext.ToolbarVariablesProvider, {
      value: mergedVariables
    }, (0, _utils.createShorthand)(composeOptions.slots.menu || menuSlot || _ToolbarMenu.ToolbarMenu, menu, {
      defaultProps: function defaultProps() {
        return slotProps.menu;
      },
      overrideProps: handleMenuOverrides(getRefs)
    })))), /*#__PURE__*/React.createElement(_reactComponentEventListener.EventListener, {
      listener: handleOutsideClick(getRefs),
      target: context.target,
      type: "click",
      capture: true
    }));
  }) : null;

  if (popup) {
    var popupElement = (0, _utils.createShorthand)(composeOptions.slots.popup, popup, {
      defaultProps: function defaultProps() {
        return slotProps.popup;
      },
      overrideProps: {
        trigger: itemElement,
        children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`

      }
    });
    setEnd();
    return popupElement;
  } // wrap the item if it has menu (even if it is closed = not rendered)


  if (menu) {
    var contentElement = /*#__PURE__*/React.createElement(React.Fragment, null, itemElement, submenuElement);

    if (wrapper) {
      var wrapperElement = (0, _utils.createShorthand)(composeOptions.slots.wrapper, wrapper, {
        defaultProps: function defaultProps() {
          return getA11yProps('wrapper', slotProps.wrapper || {});
        },
        overrideProps: function overrideProps(predefinedProps) {
          return {
            children: contentElement,
            onClick: function onClick(e) {
              handleWrapperClick(e);
              (0, _invoke2.default)(predefinedProps, 'onClick', e);
            }
          };
        }
      });
      setEnd();
      return wrapperElement;
    }

    setEnd();
    return contentElement;
  }

  setEnd();
  return itemElement;
}, {
  className: toolbarItemClassName,
  displayName: 'ToolbarItem',
  slots: {
    icon: _ToolbarItemIcon.ToolbarItemIcon,
    wrapper: _ToolbarItemWrapper.ToolbarItemWrapper,
    popup: _Popup.Popup // TODO: compose Popup to ToolbarItemPopup once it has compose functionality

  },
  slotProps: function slotProps() {
    return {
      popup: {
        trapFocus: true
      }
    };
  },
  shorthandConfig: {
    mappedProp: 'content'
  },
  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'active', 'disabled', 'icon', 'menu', 'menuOpen', 'onMenuOpenChange', 'onClick', 'onFocus', 'onBlur', 'popup', 'wrapper']
});
exports.ToolbarItem = ToolbarItem;
ToolbarItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  menu: PropTypes.oneOfType([customPropTypes.shorthandAllowingChildren, PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren)]),
  menuOpen: PropTypes.bool,
  onMenuOpenChange: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, _Popup.Popup.propTypes, {
    trigger: customPropTypes.never,
    children: customPropTypes.never
  })), PropTypes.string]),
  wrapper: customPropTypes.shorthandAllowingChildren
});
ToolbarItem.defaultProps = {
  as: 'button',
  accessibility: _accessibility.toolbarItemBehavior,
  wrapper: {}
};
//# sourceMappingURL=ToolbarItem.js.map
