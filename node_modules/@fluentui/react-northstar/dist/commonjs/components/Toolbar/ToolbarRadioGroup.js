"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.ToolbarRadioGroup = exports.toolbarRadioGroupClassName = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _findIndex2 = _interopRequireDefault(require("lodash/findIndex"));

var _filter2 = _interopRequireDefault(require("lodash/filter"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _ToolbarDivider = require("./ToolbarDivider");

var _ToolbarItem = require("./ToolbarItem");

var _toolbarVariablesContext = require("./toolbarVariablesContext");

var toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars

/**
 * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.
 * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.
 *
 * @accessibility
 * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.
 */

exports.toolbarRadioGroupClassName = toolbarRadioGroupClassName;
var ToolbarRadioGroup = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      activeIndex = props.activeIndex,
      children = props.children,
      className = props.className,
      design = props.design,
      items = props.items,
      variables = props.variables,
      styles = props.styles;
  var itemRefs = [];
  var slotProps = composeOptions.resolveSlotProps(props);
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var mergedVariables = (0, _reactBindings.mergeVariablesOverrides)(parentVariables, variables);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    actionHandlers: {
      nextItem: function nextItem(event) {
        return setFocusedItem(event, 1);
      },
      prevItem: function prevItem(event) {
        return setFocusedItem(event, -1);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    composeOptions: composeOptions,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var setFocusedItem = function setFocusedItem(event, direction) {
    // filter items which are not disabled
    var filteredRadioItems = (0, _filter2.default)(itemRefs, function (item, index) {
      var currentItem = items[index];
      return currentItem && !currentItem.disabled;
    }); // get the index of currently focused element (w/ tabindex = 0) or the first one as default

    var currentFocusedIndex = (0, _findIndex2.default)(filteredRadioItems, function (item) {
      return item.current.tabIndex === 0;
    }) || 0;
    var itemsLength = filteredRadioItems.length;
    var nextIndex = currentFocusedIndex + direction;

    if (nextIndex >= itemsLength) {
      nextIndex = 0;
    }

    if (nextIndex < 0) {
      nextIndex = itemsLength - 1;
    }

    var nextItemToFocus = filteredRadioItems[nextIndex].current;

    if (nextItemToFocus) {
      nextItemToFocus.focus();
    }

    if (context.target.activeElement === nextItemToFocus) {
      event.stopPropagation();
    }

    event.preventDefault();
  };

  var renderItems = function renderItems() {
    return (0, _map2.default)(items, function (item, index) {
      var kind = (0, _get2.default)(item, 'kind', 'item');
      var ref = /*#__PURE__*/React.createRef();
      itemRefs[index] = ref;

      if (kind === 'divider') {
        return (0, _utils.createShorthand)(composeOptions.slots.divider, item, {
          defaultProps: function defaultProps() {
            return slotProps.divider;
          }
        });
      }

      var toolbarItem = (0, _utils.createShorthand)(composeOptions.slots.item, item, {
        defaultProps: function defaultProps() {
          return Object.assign({}, slotProps.item, {
            active: activeIndex === index
          });
        }
      });
      return /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
        innerRef: ref,
        key: toolbarItem.key
      }, toolbarItem);
    });
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root,
    ref: ref
  })), /*#__PURE__*/React.createElement(_toolbarVariablesContext.ToolbarVariablesProvider, {
    value: mergedVariables
  }, (0, _utils.childrenExist)(children) ? children : renderItems()));
  setEnd();
  return element;
}, {
  className: toolbarRadioGroupClassName,
  displayName: 'ToolbarRadioGroup',
  slots: {
    item: _ToolbarItem.ToolbarItem,
    divider: _ToolbarDivider.ToolbarDivider
  },
  slotProps: function slotProps() {
    return {
      item: {
        accessibility: _accessibility.toolbarRadioGroupItemBehavior
      }
    };
  },
  shorthandConfig: {
    mappedProp: 'content'
  },
  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'activeIndex', 'items']
});
exports.ToolbarRadioGroup = ToolbarRadioGroup;
ToolbarRadioGroup.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  activeIndex: PropTypes.number,
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item'])
});
ToolbarRadioGroup.defaultProps = {
  accessibility: _accessibility.toolbarRadioGroupBehavior
};
//# sourceMappingURL=ToolbarRadioGroup.js.map
