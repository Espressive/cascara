{"version":3,"sources":["components/Card/CardTopControls.tsx"],"names":["cardTopControlsClassName","CardTopControls","props","context","displayName","telemetry","setStart","setEnd","className","design","styles","variables","children","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToInlineStyles","classes","element","root","propTypes","commonPropTypes","createCommon","Object","keys","create","Component"],"mappings":";;;;;;;AACA;;AASA;;AAGA;;AAUO,IAAMA,wBAAwB,GAAG,sBAAjC;AAEP;AACA;AACA;;;;AACO,IAAMC,eACqC,GAAG,SADxCA,eACwC,CAAAC,KAAK,EAAI;AAC5D,MAAMC,OAAO,GAAG,sCAAhB;;AAD4D,sBAE/B,iCAAaF,eAAe,CAACG,WAA7B,EAA0CD,OAAO,CAACE,SAAlD,CAF+B;AAAA,MAEpDC,QAFoD,iBAEpDA,QAFoD;AAAA,MAE1CC,MAF0C,iBAE1CA,MAF0C;;AAG5DD,EAAAA,QAAQ;AAHoD,MAKpDE,SALoD,GAKDN,KALC,CAKpDM,SALoD;AAAA,MAKzCC,MALyC,GAKDP,KALC,CAKzCO,MALyC;AAAA,MAKjCC,MALiC,GAKDR,KALC,CAKjCQ,MALiC;AAAA,MAKzBC,SALyB,GAKDT,KALC,CAKzBS,SALyB;AAAA,MAKdC,QALc,GAKDV,KALC,CAKdU,QALc;AAM5D,MAAMC,WAAW,GAAG,mCAAeX,KAAf,CAApB;AACA,MAAMY,cAAc,GAAG,sCAAkBb,eAAe,CAACc,YAAlC,EAAgDb,KAAhD,CAAvB;AACA,MAAMc,YAAY,GAAG,qCAAiBd,KAAK,CAACe,aAAvB,EAAsC;AACzDC,IAAAA,SAAS,EAAEjB,eAAe,CAACG,WAD8B;AAEzDe,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAF4C,GAAtC,CAArB;;AAR4D,mBAaxC,8BAAsClB,eAAe,CAACG,WAAtD,EAAmE;AACrFI,IAAAA,SAAS,EAAER,wBAD0E;AAErFoB,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BZ,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAF6D;AAQrFQ,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AARwE,GAAnE,CAbwC;AAAA,MAapDE,OAboD,cAapDA,OAboD;;AAwB5D,MAAMC,OAAO,gBACX,oBAAC,WAAD,EACMN,YAAY,CAAC,MAAD;AACdR,IAAAA,SAAS,EAAEa,OAAO,CAACE;AADL,KAEXT,cAFW,EADlB,EAMGF,QANH,CADF;AAUAL,EAAAA,MAAM;AACN,SAAOe,OAAP;AACD,CArCM;;;AAuCPrB,eAAe,CAACG,WAAhB,GAA8B,iBAA9B;AAEAH,eAAe,CAACuB,SAAhB,qBACKC,uBAAgBC,YAAhB,EADL;AAIAzB,eAAe,CAACc,YAAhB,GAA+BY,MAAM,CAACC,IAAP,CAAY3B,eAAe,CAACuB,SAA5B,CAA/B;AAEAvB,eAAe,CAAC4B,MAAhB,GAAyB,mCAAuB;AAAEC,EAAAA,SAAS,EAAE7B;AAAb,CAAvB,CAAzB","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { ChildrenComponentProps, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\n\nexport interface CardTopControlsProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type CardTopControlsStylesProps = never;\nexport const cardTopControlsClassName = 'ui-card__topcontrols';\n\n/**\n * A CardTopControls is used to render control elements in the top of a Card component.\n */\nexport const CardTopControls: ComponentWithAs<'div', CardTopControlsProps> &\n  FluentComponentStaticProps<CardTopControlsProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CardTopControls.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardTopControls.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardTopControls.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardTopControlsStylesProps>(CardTopControls.displayName, {\n    className: cardTopControlsClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardTopControls.displayName = 'CardTopControls';\n\nCardTopControls.propTypes = {\n  ...commonPropTypes.createCommon(),\n};\n\nCardTopControls.handledProps = Object.keys(CardTopControls.propTypes) as any;\n\nCardTopControls.create = createShorthandFactory({ Component: CardTopControls });\n"],"file":"CardTopControls.js"}