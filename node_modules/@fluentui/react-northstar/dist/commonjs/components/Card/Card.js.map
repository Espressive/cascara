{"version":3,"sources":["components/Card/Card.tsx"],"names":["cardClassName","Card","props","context","displayName","telemetry","setStart","setEnd","cardRef","React","useRef","className","design","styles","variables","children","compact","horizontal","centered","size","fluid","onClick","disabled","expandable","elevated","inverted","ghost","selected","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","performClick","e","preventDefault","handleClick","focusCard","current","focus","mapPropsToBehavior","rtl","mapPropsToStyles","actionable","mapPropsToInlineStyles","classes","element","unstable_wrapWithFocusZone","root","propTypes","commonPropTypes","createCommon","PropTypes","func","bool","CustomPropTypes","defaultProps","cardBehavior","Object","keys","Header","CardHeader","Body","CardBody","Footer","CardFooter","Preview","CardPreview","TopControls","CardTopControls","Column","CardColumn","ExpandableBox","CardExpandableBox","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, cardBehavior, CardBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { commonPropTypes, createShorthandFactory, SizeValue, UIComponentProps } from '../../utils';\nimport { CardBody } from './CardBody';\nimport { CardColumn } from './CardColumn';\nimport { CardFooter } from './CardFooter';\nimport { CardHeader } from './CardHeader';\nimport { CardPreview } from './CardPreview';\nimport { CardTopControls } from './CardTopControls';\nimport { CardExpandableBox } from './CardExpandableBox';\n\nexport interface CardProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CardBehaviorProps>;\n\n  /** A primary content. */\n  children?: React.ReactNode;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CardProps>;\n\n  /** A card can be compact, without any padding inside. */\n  compact?: boolean;\n\n  /** A card will used horizontal layout. */\n  horizontal?: boolean;\n\n  /** Centers content in a card. */\n  centered?: boolean;\n\n  /** A card can be sized. */\n  size?: SizeValue;\n\n  /** A card can take up the width and height of its container. */\n  fluid?: boolean;\n\n  /** A card can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A card can be hiding part of the content and expand on hover/focus. */\n  expandable?: boolean;\n\n  /** A card can have elevation styles. */\n  elevated?: boolean;\n\n  /** A card can have inverted background styles. */\n  inverted?: boolean;\n\n  /** A card can have ghost styles. */\n  ghost?: boolean;\n\n  /** A card can show that it is currently selected or not. */\n  selected?: boolean;\n}\n\nexport type CardStylesProps = Pick<\n  CardProps,\n  | 'compact'\n  | 'horizontal'\n  | 'centered'\n  | 'size'\n  | 'fluid'\n  | 'disabled'\n  | 'expandable'\n  | 'elevated'\n  | 'inverted'\n  | 'ghost'\n  | 'selected'\n> & {\n  actionable: boolean;\n};\n\nexport const cardClassName = 'ui-card';\n\n/**\n * A Card is used to display data in sematically grouped way.\n * * @accessibility\n * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)\n * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).\n *\n */\nexport const Card: ComponentWithAs<'div', CardProps> &\n  FluentComponentStaticProps<CardProps> & {\n    Header: typeof CardHeader;\n    Body: typeof CardBody;\n    Footer: typeof CardFooter;\n    Preview: typeof CardPreview;\n    TopControls: typeof CardPreview;\n    Column: typeof CardColumn;\n    ExpandableBox: typeof CardExpandableBox;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Card.displayName, context.telemetry);\n  setStart();\n  const cardRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    children,\n    compact,\n    horizontal,\n    centered,\n    size,\n    fluid,\n    onClick,\n    disabled,\n    expandable,\n    elevated,\n    inverted,\n    ghost,\n    selected,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Card.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: e => {\n        // prevent Spacebar from scrolling\n        e.preventDefault();\n        handleClick(e);\n      },\n      focusCard: e => {\n        cardRef.current.focus();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardStylesProps>(Card.displayName, {\n    className: cardClassName,\n    mapPropsToStyles: () => ({\n      centered,\n      horizontal,\n      compact,\n      size,\n      fluid,\n      actionable: !!onClick,\n      disabled,\n      expandable,\n      elevated,\n      inverted,\n      ghost,\n      selected,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <Ref innerRef={cardRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {children}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  ...commonPropTypes.createCommon(),\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool,\n  expandable: PropTypes.bool,\n  disabled: PropTypes.bool,\n  elevated: PropTypes.bool,\n  ghost: PropTypes.bool,\n  inverted: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium',\n};\n\nCard.handledProps = Object.keys(Card.propTypes) as any;\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\nCard.ExpandableBox = CardExpandableBox;\n\nCard.create = createShorthandFactory({ Component: Card });\n"],"file":"Card.js"}