"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.SplitButtonToggle = exports.splitButtonToggleClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _reactBindings = require("@fluentui/react-bindings");

var splitButtonToggleClassName = 'ui-splitbutton__toggle';
/**
 * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */

exports.splitButtonToggleClassName = splitButtonToggleClassName;

var SplitButtonToggle = function SplitButtonToggle(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(SplitButtonToggle.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      as = props.as,
      children = props.children,
      content = props.content,
      disabled = props.disabled,
      primary = props.primary,
      className = props.className,
      size = props.size,
      styles = props.styles,
      variables = props.variables,
      design = props.design;
  var hasChildren = (0, _utils.childrenExist)(children);
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: SplitButtonToggle.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        as: String(as),
        disabled: disabled
      };
    },
    actionHandlers: {
      performClick: function performClick(event) {
        event.preventDefault();
        handleClick(event);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(SplitButtonToggle.displayName, {
    className: splitButtonToggleClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        primary: primary,
        disabled: disabled,
        size: size
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var unhandledProps = (0, _reactBindings.useUnhandledProps)(SplitButtonToggle.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var result = /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({}, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), getA11Props('root', Object.assign({
    onClick: handleClick,
    disabled: disabled,
    className: classes.root
  }, unhandledProps))), hasChildren ? children : content);
  setEnd();
  return result;
};

exports.SplitButtonToggle = SplitButtonToggle;
SplitButtonToggle.defaultProps = {
  as: 'button',
  accessibility: _accessibility.buttonBehavior
};
SplitButtonToggle.displayName = 'SplitButtonToggle';
SplitButtonToggle.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({}), {
  disabled: PropTypes.bool,
  onClick: PropTypes.func,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  size: customPropTypes.size
});
SplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes);
SplitButtonToggle.create = (0, _utils.createShorthandFactory)({
  Component: SplitButtonToggle,
  mappedProp: 'content'
});
//# sourceMappingURL=SplitButtonToggle.js.map
