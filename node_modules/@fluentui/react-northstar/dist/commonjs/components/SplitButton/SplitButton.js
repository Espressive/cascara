"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.SplitButton = exports.splitButtonClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _positioner = require("../../utils/positioner");

var _utils = require("../../utils");

var _SplitButtonToggle = require("./SplitButtonToggle");

var _Button = require("../Button/Button");

var _MenuButton = require("../MenuButton/MenuButton");

var _reactComponentRef = require("@fluentui/react-component-ref");

var _reactBindings = require("@fluentui/react-bindings");

var splitButtonClassName = 'ui-splitbutton';
exports.splitButtonClassName = splitButtonClassName;

/**
 * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.
 */
var SplitButton = function SplitButton(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(SplitButton.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var button = props.button,
      disabled = props.disabled,
      menu = props.menu,
      primary = props.primary,
      secondary = props.secondary,
      toggleButton = props.toggleButton,
      size = props.size,
      position = props.position,
      align = props.align,
      flipBoundary = props.flipBoundary,
      overflowBoundary = props.overflowBoundary,
      popperRef = props.popperRef,
      positionFixed = props.positionFixed,
      offset = props.offset,
      unstable_disableTether = props.unstable_disableTether,
      unstable_pinned = props.unstable_pinned,
      autoSize = props.autoSize,
      className = props.className,
      design = props.design,
      styles = props.styles,
      accessibility = props.accessibility,
      variables = props.variables;
  var targetRef = React.useRef();
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(SplitButton.handledProps, props);

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultOpen,
    value: props.open,
    initialValue: false
  }),
      open = _useAutoControlled[0],
      setOpen = _useAutoControlled[1];

  var _React$useState = React.useState(false),
      isFromKeyboard = _React$useState[0],
      setIsFromKeyboard = _React$useState[1];

  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: SplitButton.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        open: open
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(SplitButton.displayName, {
    className: splitButtonClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        isFromKeyboard: isFromKeyboard,
        size: size
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var handleMenuButtonOverrides = function handleMenuButtonOverrides(predefinedProps) {
    return {
      onMenuItemClick: function onMenuItemClick(e, menuItemProps) {
        setOpen(false);
        (0, _invoke2.default)(props, 'onOpenChange', e, Object.assign({}, props, {
          open: false
        }));
        (0, _invoke2.default)(predefinedProps, 'onMenuItemClick', e, menuItemProps);
        (0, _invoke2.default)(props, 'onMenuItemClick', e, menuItemProps);
      },
      onOpenChange: function onOpenChange(e, popupProps) {
        e.stopPropagation();
        setOpen(popupProps.open);
        (0, _invoke2.default)(props, 'onOpenChange', e, Object.assign({}, props, {
          open: popupProps.open
        }));
      }
    };
  };

  var handleMenuButtonTriggerOverrides = function handleMenuButtonTriggerOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, buttonProps) {
        (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);
        (0, _invoke2.default)(props, 'onMainButtonClick', e, buttonProps);
      },
      onFocus: function onFocus(e, buttonProps) {
        (0, _invoke2.default)(predefinedProps, 'onFocus', e, buttonProps);
        setIsFromKeyboard((0, _utils.isFromKeyboard)());
      }
    };
  };

  var element = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: targetRef
  }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), _MenuButton.MenuButton.create({}, {
    defaultProps: function defaultProps() {
      return getA11yProps('menuButton', {
        menu: menu,
        on: [],
        open: open,
        trigger: (0, _utils.createShorthand)(_Button.Button, button, {
          defaultProps: function defaultProps() {
            return {
              styles: resolvedStyles.menuButton,
              primary: primary,
              secondary: secondary,
              disabled: disabled
            };
          },
          overrideProps: handleMenuButtonTriggerOverrides
        }),
        target: targetRef.current,
        position: position,
        align: align,
        flipBoundary: flipBoundary,
        overflowBoundary: overflowBoundary,
        popperRef: popperRef,
        positionFixed: positionFixed,
        offset: offset,
        unstable_disableTether: unstable_disableTether,
        unstable_pinned: unstable_pinned,
        autoSize: autoSize
      });
    },
    overrideProps: handleMenuButtonOverrides
  }), _SplitButtonToggle.SplitButtonToggle.create(toggleButton, {
    defaultProps: function defaultProps() {
      return getA11yProps('toggleButton', {
        disabled: disabled,
        primary: primary,
        secondary: secondary,
        size: size
      });
    },
    overrideProps: function overrideProps(predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);
          setOpen(function (isOpen) {
            var open = !isOpen;
            (0, _invoke2.default)(props, 'onOpenChange', e, Object.assign({}, props, {
              open: open
            }));
            return open;
          });
        }
      };
    }
  })));
  setEnd();
  return element;
};

exports.SplitButton = SplitButton;
SplitButton.displayName = 'SplitButton';
SplitButton.Toggle = _SplitButtonToggle.SplitButtonToggle;
SplitButton.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  button: customPropTypes.itemShorthand,
  defaultOpen: PropTypes.bool,
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),
  onMainButtonClick: PropTypes.func,
  onMenuItemClick: PropTypes.func,
  onOpenChange: PropTypes.func,
  open: PropTypes.bool,
  size: customPropTypes.size,
  popperRef: customPropTypes.ref,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  toggleButton: customPropTypes.itemShorthand,
  position: PropTypes.oneOf(_positioner.POSITIONS),
  align: PropTypes.oneOf(_positioner.ALIGNMENTS),
  flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
  overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
  positionFixed: PropTypes.bool,
  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),
  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),
  unstable_pinned: PropTypes.bool,
  autoSize: PropTypes.oneOf(_positioner.AUTOSIZES)
});
SplitButton.defaultProps = {
  accessibility: _accessibility.splitButtonBehavior,
  toggleButton: {},
  position: 'below',
  align: 'start'
};
SplitButton.handledProps = Object.keys(SplitButton.propTypes);
SplitButton.create = (0, _utils.createShorthandFactory)({
  Component: SplitButton
});
//# sourceMappingURL=SplitButton.js.map
