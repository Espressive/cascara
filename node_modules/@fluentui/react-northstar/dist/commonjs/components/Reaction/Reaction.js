"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Reaction = exports.reactionSlotClassNames = exports.reactionClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _ReactionGroup = require("./ReactionGroup");

var _reactBindings = require("@fluentui/react-bindings");

var reactionClassName = 'ui-reaction';
exports.reactionClassName = reactionClassName;
var reactionSlotClassNames = {
  icon: reactionClassName + "__icon",
  content: reactionClassName + "__content"
};
/**
 * A Reaction indicates user's emotion or perception.
 * Used to display user's reaction for entity in Chat (e.g. message).
 */

exports.reactionSlotClassNames = reactionSlotClassNames;

var Reaction = function Reaction(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Reaction.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      icon = props.icon,
      content = props.content,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Reaction.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Reaction.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Reaction.displayName, {
    className: reactionClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        hasContent: !!content
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var element = /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({}, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  })), (0, _utils.childrenExist)(children) ? children : /*#__PURE__*/React.createElement(React.Fragment, null, _Box.Box.create(icon, {
    defaultProps: function defaultProps() {
      return getA11yProps('icon', {
        className: reactionSlotClassNames.icon,
        styles: resolvedStyles.icon
      });
    }
  }), _Box.Box.create(content, {
    defaultProps: function defaultProps() {
      return getA11yProps('content', {
        className: reactionSlotClassNames.content,
        styles: resolvedStyles.content
      });
    }
  })));
  setEnd();
  return element;
};

exports.Reaction = Reaction;
Reaction.displayName = 'Reaction';
Reaction.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  icon: customPropTypes.shorthandAllowingChildren
});
Reaction.defaultProps = {
  as: 'span'
};
Reaction.handledProps = Object.keys(Reaction.propTypes);
Reaction.Group = _ReactionGroup.ReactionGroup;
Reaction.create = (0, _utils.createShorthandFactory)({
  Component: Reaction,
  mappedProp: 'content'
});
//# sourceMappingURL=Reaction.js.map
