"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.TableCell = exports.tableCellSlotClassNames = exports.tableCellClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _accessibility = require("@fluentui/accessibility");

var _reactComponentRef = require("@fluentui/react-component-ref");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _reactBindings = require("@fluentui/react-bindings");

var _Box = require("../Box/Box");

var tableCellClassName = 'ui-table__cell';
exports.tableCellClassName = tableCellClassName;
var tableCellSlotClassNames = {
  content: tableCellClassName + "__content"
};
/**
 * Component represents a table cell.
 */

exports.tableCellSlotClassNames = tableCellSlotClassNames;

var TableCell = function TableCell(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(TableCell.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var cellRef = React.useRef();
  var children = props.children,
      content = props.content,
      truncateContent = props.truncateContent,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var hasChildren = (0, _utils.childrenExist)(children);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(TableCell.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: TableCell.displayName,
    actionHandlers: {
      focusCell: function focusCell(e) {
        e.preventDefault();
        cellRef.current.focus();
      },
      performClick: function performClick(e) {
        if (e.currentTarget === e.target) {
          (0, _invoke2.default)(props, 'onClick', e, props);
          e.preventDefault();
        }
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(TableCell.displayName, {
    className: tableCellClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        truncateContent: truncateContent
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var element = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: cellRef
  }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), hasChildren ? children : _Box.Box.create(content, {
    defaultProps: function defaultProps() {
      return {
        className: tableCellSlotClassNames.content,
        styles: resolvedStyles.content
      };
    }
  }))));
  setEnd();
  return element;
};

exports.TableCell = TableCell;
TableCell.displayName = 'TableCell';
TableCell.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  content: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent])]),
  truncateContent: PropTypes.bool
});
TableCell.handledProps = Object.keys(TableCell.propTypes);
TableCell.defaultProps = {
  accessibility: _accessibility.tableCellBehavior
};
TableCell.create = (0, _utils.createShorthandFactory)({
  Component: TableCell,
  mappedProp: 'content'
});
//# sourceMappingURL=TableCell.js.map
