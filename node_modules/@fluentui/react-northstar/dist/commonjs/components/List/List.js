"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.List = exports.listClassName = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _listContext = require("./listContext");

var _ListItem = require("./ListItem");

var _ListItemContent = require("./ListItemContent");

var _ListItemContentMedia = require("./ListItemContentMedia");

var _ListItemEndMedia = require("./ListItemEndMedia");

var _ListItemHeader = require("./ListItemHeader");

var _ListItemHeaderMedia = require("./ListItemHeaderMedia");

var _ListItemMedia = require("./ListItemMedia");

var listClassName = 'ui-list';
/**
 * A List displays a group of related sequential items.
 *
 * @accessibility
 * List may follow one of the following accessibility semantics:
 * - Static non-navigable list. Implements [ARIA list](https://www.w3.org/TR/wai-aria-1.1/#list) role.
 * - Selectable list: allows the user to select item from a list of choices. Implements [ARIA Listbox](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox) design pattern.
 * @accessibilityIssues
 * [NVDA - Browse Mode does not work with listbox #12350](https://github.com/nvaccess/nvda/issues/12350)
 * [JAWS - Listbox options are not reachable in Virtual Cursor PC mode #517](https://github.com/FreedomScientific/VFO-standards-support/issues/517)
 * [JAWS - Aria-selected is not narrated for the single-select listbox, when selection is NOT moved with focus #440](https://github.com/FreedomScientific/VFO-standards-support/issues/440)
 */

exports.listClassName = listClassName;

var List = function List(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(List.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      as = props.as,
      children = props.children,
      className = props.className,
      debug = props.debug,
      design = props.design,
      horizontal = props.horizontal,
      items = props.items,
      navigable = props.navigable,
      selectable = props.selectable,
      styles = props.styles,
      truncateContent = props.truncateContent,
      truncateHeader = props.truncateHeader,
      variables = props.variables,
      wrap = props.wrap;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultSelectedIndex,
    value: props.selectedIndex,
    initialValue: -1
  }),
      selectedIndex = _useAutoControlled[0],
      setSelectedIndex = _useAutoControlled[1];

  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: List.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        horizontal: horizontal,
        navigable: navigable,
        selectable: selectable
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(List.displayName, {
    className: listClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        isListTag: as === 'ol' || as === 'ul',
        debug: debug,
        horizontal: horizontal
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var latestProps = React.useRef(props);
  latestProps.current = props;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(List.handledProps, props);
  var hasContent = (0, _utils.childrenExist)(children) || items && items.length > 0;
  var onItemClick = React.useCallback(function (e, itemIndex) {
    if (latestProps.current.selectable) {
      setSelectedIndex(itemIndex);
      (0, _invoke2.default)(latestProps.current, 'onSelectedIndexChange', e, Object.assign({}, latestProps.current, {
        selectedIndex: itemIndex
      }));
    }
  }, [latestProps, setSelectedIndex]);
  var childProps = {
    debug: debug,
    navigable: navigable,
    onItemClick: onItemClick,
    selectable: selectable,
    selectedIndex: selectedIndex,
    truncateContent: truncateContent,
    truncateHeader: truncateHeader,
    variables: variables
  };

  var renderItems = function renderItems() {
    return (0, _map2.default)(items, function (item, index) {
      return _ListItem.ListItem.create(item, {
        defaultProps: function defaultProps() {
          return {
            index: index
          };
        }
      });
    });
  };

  var element = getA11Props.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), unhandledProps)), /*#__PURE__*/React.createElement(_listContext.ListContextProvider, {
    value: childProps
  }, hasContent && wrap((0, _utils.childrenExist)(children) ? children : renderItems()))));
  setEnd();
  return element;
};

exports.List = List;
List.displayName = 'List';
List.defaultProps = {
  as: 'ul',
  accessibility: _accessibility.listBehavior,
  wrap: function wrap(children) {
    return children;
  }
};
List.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  debug: PropTypes.bool,
  items: customPropTypes.collectionShorthand,
  selectable: customPropTypes.every([customPropTypes.disallow(['navigable']), PropTypes.bool]),
  navigable: customPropTypes.every([customPropTypes.disallow(['selectable']), PropTypes.bool]),
  truncateContent: PropTypes.bool,
  truncateHeader: PropTypes.bool,
  selectedIndex: PropTypes.number,
  defaultSelectedIndex: PropTypes.number,
  onSelectedIndexChange: PropTypes.func,
  horizontal: PropTypes.bool,
  wrap: PropTypes.func
});
List.handledProps = Object.keys(List.propTypes);
List.Item = _ListItem.ListItem;
List.ItemContent = _ListItemContent.ListItemContent;
List.ItemContentMedia = _ListItemContentMedia.ListItemContentMedia;
List.ItemEndMedia = _ListItemEndMedia.ListItemEndMedia;
List.ItemHeader = _ListItemHeader.ListItemHeader;
List.ItemHeaderMedia = _ListItemHeaderMedia.ListItemHeaderMedia;
List.ItemMedia = _ListItemMedia.ListItemMedia;
List.create = (0, _utils.createShorthandFactory)({
  Component: List,
  mappedArrayProp: 'items'
});
//# sourceMappingURL=List.js.map
