"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Embed = exports.embedSlotClassNames = exports.embedClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _accessibility = require("@fluentui/accessibility");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _utils = require("../../utils");

var _Image = require("../Image/Image");

var _Video = require("../Video/Video");

var _Box = require("../Box/Box");

var _reactComponentRef = require("@fluentui/react-component-ref");

var _reactBindings = require("@fluentui/react-bindings");

var embedClassName = 'ui-embed';
exports.embedClassName = embedClassName;
var embedSlotClassNames = {
  control: embedClassName + "__control"
};
exports.embedSlotClassNames = embedSlotClassNames;

/**
 * An Embed displays content from external websites, like a post from external social network.
 *
 * @accessibility
 * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its
 * accessibility section.
 */
var Embed = function Embed(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Embed.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var alt = props.alt,
      title = props.title,
      control = props.control,
      iframe = props.iframe,
      placeholder = props.placeholder,
      video = props.video,
      variables = props.variables,
      styles = props.styles,
      className = props.className,
      design = props.design;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Embed.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Embed.displayName,
    actionHandlers: {
      performClick: function performClick(event) {
        return handleClick(event);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        alt: alt,
        title: title
      };
    },
    rtl: context.rtl
  });

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultActive,
    value: props.active,
    initialValue: false
  }),
      active = _useAutoControlled[0],
      setACtive = _useAutoControlled[1];

  var _React$useState = React.useState(false),
      iframeLoaded = _React$useState[0],
      setIframeLoaded = _React$useState[1];

  var frameRef = React.useRef();

  var handleClick = function handleClick(e) {
    e.stopPropagation();
    e.preventDefault();
    var iframeNil = (0, _isNil2.default)(props.iframe);
    var newActive = !active;

    if (iframeNil || !iframeNil && newActive) {
      setACtive(newActive);
      (0, _invoke2.default)(props, 'onActiveChange', e, Object.assign({}, props, {
        active: newActive
      }));
    }

    (0, _invoke2.default)(props, 'onClick', e, Object.assign({}, props, {
      active: newActive
    }));
  };

  var handleFrameOverrides = function handleFrameOverrides(predefinedProps) {
    return {
      onLoad: function onLoad(e) {
        (0, _invoke2.default)(predefinedProps, 'onLoad', e);
        setIframeLoaded(true);
        frameRef.current.contentWindow.focus();
      }
    };
  };

  var _useStyles = (0, _reactBindings.useStyles)(Embed.displayName, {
    className: embedClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        iframeLoaded: iframeLoaded,
        active: active
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var placeholderElement = placeholder ? /*#__PURE__*/React.createElement(_Image.Image, {
    src: placeholder,
    styles: resolvedStyles.image,
    variables: {
      width: variables.width,
      height: variables.height
    }
  }) : null;
  var hasIframe = !(0, _isNil2.default)(iframe);
  var hasVideo = !(0, _isNil2.default)(video);
  var controlVisible = !active || hasVideo;
  var placeholderVisible = !active || hasIframe && active && !iframeLoaded;
  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    onClick: handleClick
  }, unhandledProps)), active && /*#__PURE__*/React.createElement(React.Fragment, null, _Video.Video.create(video, {
    defaultProps: function defaultProps() {
      return getA11yProps('video', {
        autoPlay: true,
        controls: false,
        loop: true,
        muted: true,
        poster: placeholder,
        styles: resolvedStyles.video,
        variables: {
          width: variables.width,
          height: variables.height
        }
      });
    }
  }), iframe && /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: frameRef
  }, _Box.Box.create(iframe, {
    defaultProps: function defaultProps() {
      return getA11yProps('iframe', {
        as: 'iframe',
        styles: resolvedStyles.iframe
      });
    },
    overrideProps: handleFrameOverrides
  }))), placeholderVisible && placeholderElement, controlVisible && _Box.Box.create(control, {
    defaultProps: function defaultProps() {
      return getA11yProps('control', {
        className: embedSlotClassNames.control,
        styles: resolvedStyles.control
      });
    }
  }));
  setEnd();
  return element;
};

exports.Embed = Embed;
Embed.displayName = 'Embed';
Embed.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  active: PropTypes.bool,
  defaultActive: PropTypes.bool,
  control: customPropTypes.itemShorthand,
  iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),
  onActiveChange: PropTypes.func,
  onClick: PropTypes.func,
  placeholder: PropTypes.string,
  video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand])
});
Embed.defaultProps = {
  as: 'span',
  accessibility: _accessibility.embedBehavior,
  control: {},
  variables: {}
};
Embed.handledProps = Object.keys(Embed.propTypes);
Embed.create = (0, _utils.createShorthandFactory)({
  Component: Embed
});
//# sourceMappingURL=Embed.js.map
