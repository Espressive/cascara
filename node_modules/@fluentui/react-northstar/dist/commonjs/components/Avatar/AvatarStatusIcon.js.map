{"version":3,"sources":["components/Avatar/AvatarStatusIcon.tsx"],"names":["avatarStatusIconClassName","AvatarStatusIcon","props","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","state","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","propTypes","commonPropTypes","createCommon","PropTypes","oneOf","Object","keys","defaultProps","as","create","Component"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;AACA;;AAYO,IAAMA,yBAAyB,GAAG,uBAAlC;AAEP;AACA;AACA;;;;AACO,IAAMC,gBAA6F,GAAG,SAAhGA,gBAAgG,CAAAC,KAAK,EAAI;AACpH,MAAMC,OAAO,GAAG,sCAAhB;;AADoH,sBAEvF,iCAAaF,gBAAgB,CAACG,WAA9B,EAA2CD,OAAO,CAACE,SAAnD,CAFuF;AAAA,MAE5GC,QAF4G,iBAE5GA,QAF4G;AAAA,MAElGC,MAFkG,iBAElGA,MAFkG;;AAGpHD,EAAAA,QAAQ;AAH4G,MAK5GE,SAL4G,GAKlDN,KALkD,CAK5GM,SAL4G;AAAA,MAKjGC,QALiG,GAKlDP,KALkD,CAKjGO,QALiG;AAAA,MAKvFC,MALuF,GAKlDR,KALkD,CAKvFQ,MALuF;AAAA,MAK/EC,MAL+E,GAKlDT,KALkD,CAK/ES,MAL+E;AAAA,MAKvEC,SALuE,GAKlDV,KALkD,CAKvEU,SALuE;AAAA,MAK5DC,KAL4D,GAKlDX,KALkD,CAK5DW,KAL4D;;AAAA,mBAOhG,8BAAuCZ,gBAAgB,CAACG,WAAxD,EAAqE;AACvFI,IAAAA,SAAS,EAAER,yBAD4E;AAEvFc,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBD,QAAAA,KAAK,EAALA;AADuB,OAAP;AAAA,KAFqE;AAKvFE,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BP,QAAAA,SAAS,EAATA,SAD6B;AAE7BE,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAL+D;AAWvFI,IAAAA,GAAG,EAAEb,OAAO,CAACa;AAX0E,GAArE,CAPgG;AAAA,MAO5GC,OAP4G,cAO5GA,OAP4G;;AAqBpH,MAAMC,WAAW,GAAG,qCAAiBhB,KAAK,CAACiB,aAAvB,EAAsC;AACxDC,IAAAA,SAAS,EAAEnB,gBAAgB,CAACG,WAD4B;AAExDY,IAAAA,GAAG,EAAEb,OAAO,CAACa;AAF2C,GAAtC,CAApB;AAKA,MAAMK,WAAW,GAAG,mCAAenB,KAAf,CAApB;AACA,MAAMoB,cAAc,GAAG,sCAAkBrB,gBAAgB,CAACsB,YAAnC,EAAiDrB,KAAjD,CAAvB;AAEA,MAAMsB,OAAO,gBACX,oBAAC,WAAD,EAAiBN,WAAW,CAAC,MAAD;AAAWV,IAAAA,SAAS,EAAES,OAAO,CAACQ;AAA9B,KAAuCH,cAAvC,EAA5B,EAAuFb,QAAvF,CADF;AAGAF,EAAAA,MAAM;AAEN,SAAOiB,OAAP;AACD,CAnCM;;;AAqCPvB,gBAAgB,CAACG,WAAjB,GAA+B,kBAA/B;AACAH,gBAAgB,CAACyB,SAAjB,qBACKC,uBAAgBC,YAAhB,EADL;AAEEf,EAAAA,KAAK,EAAEgB,SAAS,CAACC,KAAV,CAAgB,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,SAAxC,CAAhB;AAFT;AAIA7B,gBAAgB,CAACsB,YAAjB,GAAgCQ,MAAM,CAACC,IAAP,CAAY/B,gBAAgB,CAACyB,SAA7B,CAAhC;AACAzB,gBAAgB,CAACgC,YAAjB,GAAgC;AAC9BC,EAAAA,EAAE,EAAE;AAD0B,CAAhC;AAIAjC,gBAAgB,CAACkC,MAAjB,GAA0B,mCAAuB;AAAEC,EAAAA,SAAS,EAAEnC;AAAb,CAAvB,CAA1B","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes, UIComponentProps, createShorthandFactory } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface AvatarStatusIconProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type AvatarStatusIconStylesProps = Required<Pick<AvatarStatusIconProps, 'state'>>;\nexport const avatarStatusIconClassName = 'ui-avatar__statusicon';\n\n/**\n * A AvatarStatusIcon provides a status icon for the Avatar.\n */\nexport const AvatarStatusIcon: ComponentWithAs<'span', AvatarStatusIconProps> & FluentComponentStaticProps = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarStatusIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, state } = props;\n\n  const { classes } = useStyles<AvatarStatusIconStylesProps>(AvatarStatusIcon.displayName, {\n    className: avatarStatusIconClassName,\n    mapPropsToStyles: () => ({\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarStatusIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarStatusIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{children}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAvatarStatusIcon.displayName = 'AvatarStatusIcon';\nAvatarStatusIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nAvatarStatusIcon.handledProps = Object.keys(AvatarStatusIcon.propTypes) as any;\nAvatarStatusIcon.defaultProps = {\n  as: 'span',\n};\n\nAvatarStatusIcon.create = createShorthandFactory({ Component: AvatarStatusIcon });\n"],"file":"AvatarStatusIcon.js"}