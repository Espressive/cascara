{"version":3,"sources":["components/Avatar/AvatarIcon.tsx"],"names":["avatarIconClassName","AvatarIcon","props","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","size","square","content","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","propTypes","commonPropTypes","createCommon","PropTypes","bool","customPropTypes","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;AACA;;AACA;;AAuBO,IAAMA,mBAAmB,GAAG,iBAA5B;AAEP;AACA;AACA;;;;AACO,IAAMC,UACgC,GAAG,SADnCA,UACmC,CAAAC,KAAK,EAAI;AACvD,MAAMC,OAAO,GAAG,sCAAhB;;AADuD,sBAE1B,iCAAaF,UAAU,CAACG,WAAxB,EAAqCD,OAAO,CAACE,SAA7C,CAF0B;AAAA,MAE/CC,QAF+C,iBAE/CA,QAF+C;AAAA,MAErCC,MAFqC,iBAErCA,MAFqC;;AAGvDD,EAAAA,QAAQ;AAH+C,MAK/CE,SAL+C,GAK2BN,KAL3B,CAK/CM,SAL+C;AAAA,MAKpCC,QALoC,GAK2BP,KAL3B,CAKpCO,QALoC;AAAA,MAK1BC,MAL0B,GAK2BR,KAL3B,CAK1BQ,MAL0B;AAAA,MAKlBC,MALkB,GAK2BT,KAL3B,CAKlBS,MALkB;AAAA,MAKVC,SALU,GAK2BV,KAL3B,CAKVU,SALU;AAAA,MAKCC,IALD,GAK2BX,KAL3B,CAKCW,IALD;AAAA,MAKOC,MALP,GAK2BZ,KAL3B,CAKOY,MALP;AAAA,MAKeC,OALf,GAK2Bb,KAL3B,CAKea,OALf;;AAAA,mBAOnC,8BAAiCd,UAAU,CAACG,WAA5C,EAAyD;AAC3EI,IAAAA,SAAS,EAAER,mBADgE;AAE3EgB,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBH,QAAAA,IAAI,EAAJA,IADuB;AAEvBC,QAAAA,MAAM,EAANA;AAFuB,OAAP;AAAA,KAFyD;AAM3EG,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BT,QAAAA,SAAS,EAATA,SAD6B;AAE7BE,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KANmD;AAY3EM,IAAAA,GAAG,EAAEf,OAAO,CAACe;AAZ8D,GAAzD,CAPmC;AAAA,MAO/CC,OAP+C,cAO/CA,OAP+C;;AAsBvD,MAAMC,WAAW,GAAG,qCAAiBlB,KAAK,CAACmB,aAAvB,EAAsC;AACxDC,IAAAA,SAAS,EAAErB,UAAU,CAACG,WADkC;AAExDc,IAAAA,GAAG,EAAEf,OAAO,CAACe;AAF2C,GAAtC,CAApB;AAKA,MAAMK,WAAW,GAAG,mCAAerB,KAAf,CAApB;AACA,MAAMsB,cAAc,GAAG,sCAAkBvB,UAAU,CAACwB,YAA7B,EAA2CvB,KAA3C,CAAvB;AAEA,MAAMwB,OAAO,gBACX,oBAAC,WAAD,EAAiBN,WAAW,CAAC,MAAD;AAAWZ,IAAAA,SAAS,EAAEW,OAAO,CAACQ;AAA9B,KAAuCH,cAAvC,EAA5B,EACG,0BAAcf,QAAd,IAA0BA,QAA1B,GAAqCM,OADxC,CADF;AAKAR,EAAAA,MAAM;AAEN,SAAOmB,OAAP;AACD,CAvCM;;;AAyCPzB,UAAU,CAACG,WAAX,GAAyB,YAAzB;AACAH,UAAU,CAAC2B,SAAX,qBACKC,uBAAgBC,YAAhB,EADL;AAEEhB,EAAAA,MAAM,EAAEiB,SAAS,CAACC,IAFpB;AAGEnB,EAAAA,IAAI,EAAEoB,eAAe,CAACpB;AAHxB;AAKAZ,UAAU,CAACwB,YAAX,GAA0BS,MAAM,CAACC,IAAP,CAAYlC,UAAU,CAAC2B,SAAvB,CAA1B;AACA3B,UAAU,CAACmC,YAAX,GAA0B;AACxBC,EAAAA,EAAE,EAAE;AADoB,CAA1B;AAIApC,UAAU,CAACqC,eAAX,GAA6B;AAC3BC,EAAAA,UAAU,EAAE;AADe,CAA7B","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  SizeValue,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  childrenExist,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface AvatarIconProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** The avatar icon can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarIconStylesProps = Required<Pick<AvatarIconProps, 'size' | 'square'>>;\nexport const avatarIconClassName = 'ui-avatar__icon';\n\n/**\n * A AvatarIcon provides a status icon for the Avatar.\n */\nexport const AvatarIcon: ComponentWithAs<'span', AvatarIconProps> &\n  FluentComponentStaticProps<AvatarIconProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, size, square, content } = props;\n\n  const { classes } = useStyles<AvatarIconStylesProps>(AvatarIcon.displayName, {\n    className: avatarIconClassName,\n    mapPropsToStyles: () => ({\n      size,\n      square,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAvatarIcon.displayName = 'AvatarIcon';\nAvatarIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n};\nAvatarIcon.handledProps = Object.keys(AvatarIcon.propTypes) as any;\nAvatarIcon.defaultProps = {\n  as: 'span',\n};\n\nAvatarIcon.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"AvatarIcon.js"}