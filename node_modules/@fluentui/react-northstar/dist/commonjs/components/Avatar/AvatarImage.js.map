{"version":3,"sources":["components/Avatar/AvatarImage.tsx"],"names":["avatarImageClassName","imageClassName","AvatarImage","props","context","displayName","telemetry","setStart","setEnd","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","size","getA11Props","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","result","root","defaultProps","as","imageBehavior","propTypes","commonPropTypes","createCommon","children","content","PropTypes","bool","shorthandConfig","mappedProp","allowsJSX","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { UIComponentProps, commonPropTypes, createShorthandFactory, SizeValue } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { imageClassName } from '../Image/Image';\n\nexport interface AvatarImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** @deprecated An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An Avatarimage can appear circular. */\n  circular?: boolean;\n\n  /** An Avatarimage can take up the width of its container. */\n  fluid?: boolean;\n\n  /** AvatarImage source URL. */\n  src?: string;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarImageStylesProps = Pick<AvatarImageProps, 'avatar' | 'circular' | 'fluid' | 'size'>;\nexport const avatarImageClassName = imageClassName;\n\n/**\n * An AvatarImage is a graphic representation used by Avatar.\n */\nexport const AvatarImage: ComponentWithAs<'img', AvatarImageProps> &\n  FluentComponentStaticProps<AvatarImageProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarImage.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n    size,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AvatarImage.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<AvatarImageStylesProps>(AvatarImage.displayName, {\n    className: avatarImageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarImage.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n};\n\nAvatarImage.displayName = 'AvatarImage';\nAvatarImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior,\n};\n\nAvatarImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nAvatarImage.shorthandConfig = {\n  mappedProp: 'src',\n  allowsJSX: false,\n};\n\nAvatarImage.handledProps = Object.keys(AvatarImage.propTypes) as any;\nAvatarImage.create = createShorthandFactory({ Component: AvatarImage, mappedProp: 'src', allowsJSX: false });\n"],"file":"AvatarImage.js"}