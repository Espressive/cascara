{"version":3,"sources":["components/Avatar/Avatar.tsx"],"names":["avatarClassName","Avatar","props","context","displayName","telemetry","setStart","setEnd","accessibility","className","design","getInitials","label","icon","image","name","square","size","status","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","imageElement","AvatarImage","defaultProps","fluid","avatar","title","iconElement","AvatarIcon","labelElement","AvatarLabel","content","circular","hasGlyph","result","root","AvatarStatus","overrideProps","predefinedProps","reducedName","replace","initials","split","filter","item","map","charAt","reduce","accumulator","currentValue","length","propTypes","commonPropTypes","createCommon","children","PropTypes","string","customPropTypes","shorthandAllowingChildren","itemShorthandWithoutJSX","itemShorthand","bool","func","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  mergeVariablesOverrides,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue, createShorthand } from '../../utils';\nimport { AvatarStatusProps, AvatarStatus } from './AvatarStatus';\nimport { AvatarImage, AvatarImageProps } from './AvatarImage';\nimport { AvatarIcon, AvatarIconProps } from './AvatarIcon';\nimport { AvatarLabel, AvatarLabelProps } from './AvatarLabel';\n\nexport interface AvatarProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Avatar can contain icon. It will be rendered only if the image is not present. */\n  icon?: ShorthandValue<AvatarIconProps>;\n\n  /** Shorthand for the image. */\n  image?: ShorthandValue<AvatarImageProps>;\n\n  /** Shorthand for the label. */\n  label?: ShorthandValue<AvatarLabelProps>;\n\n  /** The name used for displaying the initials of the avatar if the image is not provided. */\n  name?: string;\n\n  /** The avatar can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n\n  /** Shorthand for the status of the user. */\n  status?: ShorthandValue<AvatarStatusProps>;\n\n  /** Custom method for generating the initials from the name property, which is shown if no image is provided. */\n  getInitials?: (name: string) => string;\n}\n\nexport type AvatarStylesProps = Pick<AvatarProps, 'size' | 'square'>;\nexport const avatarClassName = 'ui-avatar';\n\n/**\n * An Avatar is a graphical representation of a user.\n */\nexport const Avatar: ComponentWithAs<'div', AvatarProps> & FluentComponentStaticProps<AvatarProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Avatar.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    className,\n    design,\n    getInitials,\n    label,\n    icon,\n    image,\n    name,\n    square,\n    size,\n    status,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Avatar.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles(Avatar.displayName, {\n    className: avatarClassName,\n    mapPropsToStyles: () => ({ size, square }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Avatar.handledProps, props);\n\n  const imageElement = createShorthand(AvatarImage, image, {\n    defaultProps: () =>\n      getA11Props('image', {\n        fluid: true,\n        avatar: !square,\n        title: name,\n        size,\n        // remove in upcoming breaking change\n        styles: resolvedStyles.image,\n      }),\n  });\n\n  const iconElement = createShorthand(AvatarIcon, icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        title: name,\n        styles: resolvedStyles.icon,\n        size,\n        square,\n      }),\n  });\n\n  const labelElement = createShorthand(AvatarLabel, label || {}, {\n    defaultProps: () =>\n      getA11Props('label', {\n        content: getInitials(name),\n        circular: !square,\n        title: name,\n        size,\n        square,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const hasGlyph = !!image || !!icon;\n\n  const result = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n      {hasGlyph && (imageElement || iconElement)}\n      {!hasGlyph && labelElement}\n      {createShorthand(AvatarStatus, status, {\n        defaultProps: () =>\n          getA11Props('status', {\n            size,\n            // remove in upcoming breaking change\n            styles: resolvedStyles.status,\n          }),\n        overrideProps: (predefinedProps: AvatarStatusProps) => ({\n          variables: mergeVariablesOverrides(variables, predefinedProps.variables),\n        }),\n      })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nAvatar.displayName = 'Avatar';\n\nAvatar.defaultProps = {\n  size: 'medium',\n  getInitials(name: string) {\n    if (!name) {\n      return '';\n    }\n\n    const reducedName = name\n      .replace(/\\s+/g, ' ')\n      .replace(/\\s*\\(.*?\\)\\s*/g, ' ')\n      .replace(/\\s*{.*?}\\s*/g, ' ')\n      .replace(/\\s*\\[.*?]\\s*/g, ' ');\n\n    const initials = reducedName\n      .split(' ')\n      .filter(item => item !== '')\n      .map(item => item.charAt(0))\n      .reduce((accumulator, currentValue) => accumulator + currentValue, '');\n\n    if (initials.length > 2) {\n      return initials.charAt(0) + initials.charAt(initials.length - 1);\n    }\n    return initials;\n  },\n};\n\nAvatar.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  name: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  label: customPropTypes.itemShorthand,\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  status: customPropTypes.itemShorthand,\n  getInitials: PropTypes.func,\n};\n\nAvatar.handledProps = Object.keys(Avatar.propTypes) as any;\n\nAvatar.create = createShorthandFactory({ Component: Avatar, mappedProp: 'name' });\n"],"file":"Avatar.js"}