{"version":3,"sources":["components/Avatar/AvatarStatus.tsx"],"names":["avatarStatusClassName","statusClassName","AvatarStatus","props","context","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","AvatarStatusIcon","defaultProps","element","root","propTypes","commonPropTypes","createCommon","children","content","PropTypes","string","customPropTypes","shorthandAllowingChildren","oneOf","Object","keys","avatarStatusBehavior","as","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { commonPropTypes, SizeValue, UIComponentProps, createShorthandFactory, createShorthand } from '../../utils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Accessibility, statusBehavior as avatarStatusBehavior, StatusBehaviorProps } from '@fluentui/accessibility';\nimport { AvatarStatusIcon, AvatarStatusIconProps } from './AvatarStatusIcon';\nimport { statusClassName } from '../Status/Status';\n\nexport interface AvatarStatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<StatusBehaviorProps>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<AvatarStatusIconProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type AvatarStatusStylesProps = Required<Pick<AvatarStatusProps, 'color' | 'size' | 'state'>>;\n// update in upcoming breaking change and enable a unit test\nexport const avatarStatusClassName = statusClassName;\n\n/**\n * A AvatarStatus provides a status for the Avatar.\n */\nexport const AvatarStatus: ComponentWithAs<'span', AvatarStatusProps> & FluentComponentStaticProps = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarStatus.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes } = useStyles<AvatarStatusStylesProps>(AvatarStatus.displayName, {\n    className: avatarStatusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarStatus.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarStatus.handledProps, props);\n\n  const iconElement = createShorthand(AvatarStatusIcon, icon, {\n    defaultProps: () => ({\n      state,\n    }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{iconElement}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAvatarStatus.displayName = 'AvatarStatus';\nAvatarStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nAvatarStatus.handledProps = Object.keys(AvatarStatus.propTypes) as any;\nAvatarStatus.defaultProps = {\n  accessibility: avatarStatusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nAvatarStatus.create = createShorthandFactory({ Component: AvatarStatus, mappedProp: 'state' });\n"],"file":"AvatarStatus.js"}