{"version":3,"sources":["components/Avatar/AvatarLabel.tsx"],"names":["avatarlabelClassName","labelClassName","AvatarLabel","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","styles","variables","square","size","circular","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","bool","customPropTypes","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  SizeValue,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { labelClassName } from '../Label/Label';\n\nexport interface AvatarLabelProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** The AvatarLabel can have a square shape. */\n  square?: boolean;\n\n  /** The AvatarLabel can be circular. */\n  circular?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarLabelStylesProps = Pick<AvatarLabelProps, 'size' | 'square' | 'circular'>;\nexport const avatarlabelClassName = labelClassName;\n\n/**\n * A AvatarLabel allows user to classify content.\n */\nexport const AvatarLabel: ComponentWithAs<'span', AvatarLabelProps> &\n  FluentComponentStaticProps<AvatarLabelProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarLabel.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, styles, variables, square, size, circular } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AvatarLabel.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<AvatarLabelStylesProps>(AvatarLabel.displayName, {\n    className: avatarlabelClassName,\n    mapPropsToStyles: () => ({\n      square,\n      size,\n      circular,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarLabel.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAvatarLabel.displayName = 'AvatarLabel';\n\nAvatarLabel.propTypes = {\n  ...commonPropTypes.createCommon(),\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  circular: PropTypes.bool,\n};\nAvatarLabel.handledProps = Object.keys(AvatarLabel.propTypes) as any;\n\nAvatarLabel.defaultProps = {\n  as: 'span',\n};\n\nAvatarLabel.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"AvatarLabel.js"}