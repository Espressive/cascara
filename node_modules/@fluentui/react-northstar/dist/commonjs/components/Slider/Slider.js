"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Slider = exports.sliderSlotClassNames = exports.sliderClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _toNumber2 = _interopRequireDefault(require("lodash/toNumber"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _state = require("@fluentui/state");

var _classnames = _interopRequireDefault(require("classnames"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var processInputValues = function processInputValues(p) {
  var min = (0, _toNumber2.default)(p.min);
  var max = (0, _toNumber2.default)(p.max);
  var value = (0, _toNumber2.default)(p.value);
  if (isNaN(min)) min = Number(Slider.defaultProps.min);
  if (isNaN(max)) max = Number(Slider.defaultProps.max);
  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));
  var valueAsPercentage = 100 * (value - min) / (max - min) + "%";
  return {
    min: min,
    max: max,
    value: value,
    valueAsPercentage: valueAsPercentage
  };
};

var sliderClassName = 'ui-slider';
exports.sliderClassName = sliderClassName;
var sliderSlotClassNames = {
  input: sliderClassName + "__input",
  inputWrapper: sliderClassName + "__input-wrapper",
  rail: sliderClassName + "__rail",
  thumb: sliderClassName + "__thumb",
  track: sliderClassName + "__track"
};
/**
 * A Slider represents an input that allows user to choose a value from within a specific range.
 *
 * @accessibility
 * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.
 * @accessibilityIssues
 * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)
 * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)
 */

exports.sliderSlotClassNames = sliderSlotClassNames;

var Slider = function Slider(props) {
  var _ref;

  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Slider.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      min = props.min,
      max = props.max,
      value = props.value,
      getA11yValueMessageOnChange = props.getA11yValueMessageOnChange,
      defaultValue = props.defaultValue,
      input = props.input,
      userInputRef = props.inputRef,
      step = props.step,
      className = props.className,
      styles = props.styles,
      variables = props.variables,
      design = props.design,
      fluid = props.fluid,
      vertical = props.vertical,
      disabled = props.disabled;
  var inputRef = React.useRef();

  var _useStateManager = (0, _reactBindings.useStateManager)(_state.createSliderManager, {
    mapPropsToInitialState: function mapPropsToInitialState() {
      return {
        value: defaultValue
      };
    },
    mapPropsToState: function mapPropsToState() {
      return {
        value: value
      };
    }
  }),
      state = _useStateManager.state,
      actions = _useStateManager.actions;

  var _processInputValues = processInputValues({
    min: min,
    max: max,
    value: state.value || ''
  }),
      numericMin = _processInputValues.min,
      numericMax = _processInputValues.max,
      numericValue = _processInputValues.value,
      valueAsPercentage = _processInputValues.valueAsPercentage;

  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Slider.displayName,
    rtl: context.rtl,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        disabled: disabled,
        getA11yValueMessageOnChange: getA11yValueMessageOnChange,
        max: numericMax,
        min: numericMax,
        value: numericValue,
        vertical: vertical
      };
    }
  });

  var _useStyles = (0, _reactBindings.useStyles)(Slider.displayName, {
    className: sliderClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        fluid: fluid,
        vertical: vertical,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        styles: styles,
        variables: variables,
        design: design
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var handleInputOverrides = function handleInputOverrides() {
    return {
      onChange: function onChange(e) {
        var value = (0, _get2.default)(e, 'target.value');
        (0, _invoke2.default)(props, 'onChange', e, Object.assign({}, props, {
          value: value
        }));
        actions.change(value);
      },
      onMouseDown: function onMouseDown(e) {
        (0, _utils.setWhatInputSource)(context.target, 'mouse');
        (0, _invoke2.default)(props, 'onMouseDown', e, props);
      }
    };
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Slider.handledProps, props);

  var _partitionHTMLProps = (0, _utils.partitionHTMLProps)(unhandledProps),
      htmlInputProps = _partitionHTMLProps[0],
      restProps = _partitionHTMLProps[1];

  var type = 'range'; // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes

  var inputElement = _Box.Box.create(input || type, {
    defaultProps: function defaultProps() {
      return getA11Props('input', Object.assign({}, htmlInputProps, {
        as: 'input',
        className: sliderSlotClassNames.input,
        min: numericMin,
        max: numericMax,
        step: step,
        styles: resolvedStyles.input,
        type: type,
        value: numericValue
      }));
    },
    overrideProps: handleInputOverrides
  });

  var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, restProps)), /*#__PURE__*/React.createElement("div", getA11Props('inputWrapper', {
    className: (0, _classnames.default)(sliderSlotClassNames.inputWrapper, classes.inputWrapper)
  }), /*#__PURE__*/React.createElement("span", getA11Props('rail', {
    className: (0, _classnames.default)(sliderSlotClassNames.rail, classes.rail)
  })), /*#__PURE__*/React.createElement("span", (0, _extends2.default)({}, getA11Props('track', {
    className: (0, _classnames.default)(sliderSlotClassNames.track, classes.track)
  }), {
    style: {
      width: valueAsPercentage
    }
  })), /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: function innerRef(inputElement) {
      (0, _reactComponentRef.handleRef)(inputRef, inputElement);
      (0, _reactComponentRef.handleRef)(userInputRef, inputElement);
    }
  }, inputElement), /*#__PURE__*/React.createElement("span", (0, _extends2.default)({}, getA11Props('thumb', {
    className: (0, _classnames.default)(sliderSlotClassNames.thumb, classes.thumb)
  }), {
    style: (_ref = {}, _ref[context.rtl ? 'right' : 'left'] = valueAsPercentage, _ref)
  }))));
  setEnd();
  return element;
};

exports.Slider = Slider;
Slider.displayName = 'Slider';
Slider.defaultProps = {
  accessibility: _accessibility.sliderBehavior,
  getA11yValueMessageOnChange: function getA11yValueMessageOnChange(_ref2) {
    var value = _ref2.value;
    return String(value);
  },
  max: 100,
  min: 0,
  step: 1
};
Slider.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fluid: PropTypes.bool,
  getA11yValueMessageOnChange: PropTypes.func,
  input: customPropTypes.itemShorthand,
  inputRef: customPropTypes.ref,
  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  onChange: PropTypes.func,
  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vertical: PropTypes.bool
});
Slider.handledProps = Object.keys(Slider.propTypes);
Slider.create = (0, _utils.createShorthandFactory)({
  Component: Slider,
  mappedProp: 'value'
});
//# sourceMappingURL=Slider.js.map
