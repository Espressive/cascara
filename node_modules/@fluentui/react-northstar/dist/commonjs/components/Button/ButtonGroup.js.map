{"version":3,"sources":["components/Button/ButtonGroup.tsx"],"names":["buttonGroupClassName","ButtonGroup","props","context","displayName","telemetry","setStart","setEnd","children","buttons","circular","content","className","design","styles","variables","ElementType","unhandledProps","handledProps","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","resolvedStyles","getA11yProps","accessibility","debugName","getStyleForButtonIndex","isFirst","isLast","resultStyles","firstButton","lastButton","middleButton","emptyButtons","element","root","rtlTextContainer","getAttributes","forElements","button","idx","Button","defaultProps","length","propTypes","commonPropTypes","createCommon","customPropTypes","collectionShorthand","PropTypes","bool","buttonGroupBehavior","Object","keys","create","Component","mappedProp","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, ButtonGroupBehaviorProps, buttonGroupBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport { ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  createShorthand,\n} from '../../utils';\nimport { Button, ButtonProps } from './Button';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useUnhandledProps,\n  useTelemetry,\n  useStyles,\n  useFluentContext,\n} from '@fluentui/react-bindings';\n\nexport interface ButtonGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ButtonGroupBehaviorProps>;\n\n  /** The buttons contained inside the ButtonGroup. */\n  buttons?: ShorthandCollection<ButtonProps>;\n\n  /** The buttons inside group can appear circular. */\n  circular?: boolean;\n}\n\nexport type ButtonGroupStylesProps = Required<Pick<ButtonGroupProps, 'circular'>>;\n\nexport const buttonGroupClassName = 'ui-buttons';\n\n/**\n * A ButtonGroup represents multiple related actions as a group.\n */\nexport const ButtonGroup: ComponentWithAs<'div', ButtonGroupProps> &\n  FluentComponentStaticProps<ButtonGroupProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ButtonGroup.displayName, context.telemetry);\n  setStart();\n  const { children, buttons, circular, content, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ButtonGroup.handledProps, props);\n  const { classes, styles: resolvedStyles } = useStyles<ButtonGroupStylesProps>(ButtonGroup.displayName, {\n    className: buttonGroupClassName,\n    mapPropsToStyles: () => ({\n      circular,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<ButtonGroupBehaviorProps>(props.accessibility, {\n    debugName: ButtonGroup.displayName,\n    rtl: context.rtl,\n  });\n\n  const getStyleForButtonIndex = (styles, isFirst, isLast) => {\n    let resultStyles = {};\n    if (isFirst) {\n      resultStyles = styles.firstButton;\n    }\n    if (isLast) {\n      resultStyles = { ...resultStyles, ...styles.lastButton };\n    }\n    if (!isFirst && !isLast) {\n      resultStyles = styles.middleButton;\n    }\n    return resultStyles;\n  };\n\n  const emptyButtons = _.isNil(buttons);\n\n  const element = (\n    <ElementType\n      {...{\n        ...getA11yProps('root', {\n          className: classes.root,\n          ...unhandledProps,\n        }),\n        ...(emptyButtons && { ...rtlTextContainer.getAttributes({ forElements: [children, content] }) }),\n      }}\n    >\n      {emptyButtons\n        ? childrenExist(children)\n          ? children\n          : content\n        : _.map(buttons, (button, idx) =>\n            createShorthand(Button, button, {\n              defaultProps: () => ({\n                circular,\n                styles: getStyleForButtonIndex(resolvedStyles, idx === 0, idx === buttons.length - 1),\n              }),\n            }),\n          )}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nButtonGroup.displayName = 'ButtonGroup';\n\nButtonGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  buttons: customPropTypes.collectionShorthand,\n  circular: PropTypes.bool,\n};\n\nButtonGroup.defaultProps = {\n  accessibility: buttonGroupBehavior,\n};\n\nButtonGroup.handledProps = Object.keys(ButtonGroup.propTypes) as any;\n\nButtonGroup.create = createShorthandFactory({\n  Component: ButtonGroup,\n  mappedProp: 'content',\n  mappedArrayProp: 'buttons',\n});\n"],"file":"ButtonGroup.js"}