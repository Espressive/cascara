"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Button = exports.buttonClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _Loader = require("../Loader/Loader");

var _ButtonGroup = require("./ButtonGroup");

var _ButtonContent = require("./ButtonContent");

var buttonClassName = 'ui-button';
/**
 * A Button enables users to take an action, such as submitting a form, opening a dialog, etc.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */

exports.buttonClassName = buttonClassName;
var Button = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      active = props.active,
      as = props.as,
      children = props.children,
      content = props.content,
      icon = props.icon,
      loader = props.loader,
      disabled = props.disabled,
      disabledFocusable = props.disabledFocusable,
      iconPosition = props.iconPosition,
      loading = props.loading,
      text = props.text,
      primary = props.primary,
      inverted = props.inverted,
      size = props.size,
      iconOnly = props.iconOnly,
      fluid = props.fluid,
      circular = props.circular,
      className = props.className,
      styles = props.styles,
      tinted = props.tinted,
      variables = props.variables,
      design = props.design;
  var hasChildren = (0, _utils.childrenExist)(children);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        as: as,
        active: active,
        disabled: disabled,
        disabledFocusable: disabledFocusable
      };
    },
    actionHandlers: {
      performClick: function performClick(event) {
        event.preventDefault();
        handleClick(event);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        text: text,
        primary: primary,
        disabled: disabled,
        tinted: tinted,
        disabledFocusable: disabledFocusable,
        circular: circular,
        size: size,
        loading: loading,
        inverted: inverted,
        iconOnly: iconOnly,
        iconPosition: iconPosition,
        fluid: fluid,
        hasContent: !!content
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl,
    composeOptions: composeOptions,
    unstable_props: props
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var slotProps = composeOptions.resolveSlotProps(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);

  var renderIcon = function renderIcon() {
    return (0, _utils.createShorthand)(composeOptions.slots.icon, icon, {
      defaultProps: function defaultProps() {
        return getA11yProps('icon', Object.assign({
          styles: resolvedStyles.icon
        }, slotProps.icon));
      }
    });
  };

  var renderLoader = function renderLoader() {
    return (0, _utils.createShorthand)(composeOptions.slots.loader, loader || {}, {
      defaultProps: function defaultProps() {
        return getA11yProps('loader', Object.assign({
          styles: resolvedStyles.loader
        }, slotProps.loader));
      }
    });
  };

  var renderContent = function renderContent() {
    return (0, _utils.createShorthand)(composeOptions.slots.content, content, {
      defaultProps: function defaultProps() {
        return getA11yProps('content', slotProps.content);
      }
    });
  };

  var handleClick = function handleClick(e) {
    if (disabled || disabledFocusable) {
      e.preventDefault();
      return;
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var handleFocus = function handleFocus(e) {
    (0, _invoke2.default)(props, 'onFocus', e, props);
  };

  var result = /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({}, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), getA11yProps('root', Object.assign({
    onClick: handleClick,
    className: classes.root,
    onFocus: handleFocus,
    ref: ref
  }, unhandledProps))), hasChildren ? children : /*#__PURE__*/React.createElement(React.Fragment, null, loading && renderLoader(), iconPosition !== 'after' && renderIcon(), renderContent(), iconPosition === 'after' && renderIcon()));
  setEnd();
  return result;
}, {
  className: buttonClassName,
  displayName: 'Button',
  slots: {
    content: _ButtonContent.ButtonContent,
    icon: _Box.Box,
    loader: _Loader.Loader
  },
  slotProps: function slotProps(props) {
    return {
      content: {
        size: props.size
      },
      loader: {
        role: undefined
      }
    };
  },
  shorthandConfig: {
    mappedProp: 'content'
  },
  handledProps: ['accessibility', 'as', 'children', 'circular', 'className', 'content', 'design', 'disabled', 'tinted', 'disabledFocusable', 'fluid', 'icon', 'iconOnly', 'iconPosition', 'inverted', 'loader', 'loading', 'onClick', 'onFocus', 'primary', 'text', 'secondary', 'size', 'styles', 'variables']
});
exports.Button = Button;
Button.defaultProps = {
  as: 'button',
  accessibility: _accessibility.buttonBehavior,
  size: 'medium'
};
Button.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  circular: PropTypes.bool,
  disabled: PropTypes.bool,
  disabledFocusable: PropTypes.bool,
  fluid: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  iconOnly: PropTypes.bool,
  iconPosition: PropTypes.oneOf(['before', 'after']),
  inverted: PropTypes.bool,
  loader: customPropTypes.itemShorthandWithoutJSX,
  loading: PropTypes.bool,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  tinted: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  text: PropTypes.bool,
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  size: PropTypes.oneOf(['medium', 'small'])
});
Button.Group = _ButtonGroup.ButtonGroup;
Button.Content = _ButtonContent.ButtonContent;
Button.create = (0, _utils.createShorthandFactory)({
  Component: Button,
  mappedProp: 'content'
});
//# sourceMappingURL=Button.js.map
