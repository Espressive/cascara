{"version":3,"sources":["components/Dropdown/DropdownSelectedItem.tsx"],"names":["dropdownSelectedItemClassName","dropdownSelectedItemSlotClassNames","header","icon","image","DropdownSelectedItem","props","context","displayName","telemetry","setStart","setEnd","active","className","design","styles","variables","itemRef","React","useRef","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","mapPropsToBehavior","rtl","useEffect","current","focus","mapPropsToStyles","hasImage","mapPropsToInlineStyles","classes","resolvedStyles","handleClick","e","handleKeyDown","handleIconOverrides","iconProps","onClick","stopPropagation","onKeyDown","keyboardKey","Enter","headerElement","Box","create","defaultProps","as","iconElement","overrideProps","imageElement","Image","avatar","element","root","propTypes","commonPropTypes","createCommon","children","PropTypes","bool","customPropTypes","itemShorthand","shorthandAllowingChildren","itemShorthandWithoutJSX","func","onRemove","Object","keys","dropdownSelectedItemBehavior","Component","mappedProp"],"mappings":";;;;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;AACA;;AAEA;;AAQA;;AACA;;AACA;;AACA;;AA2DO,IAAMA,6BAA6B,GAAG,2BAAtC;;AACA,IAAMC,kCAAsE,GAAG;AACpFC,EAAAA,MAAM,EAAKF,6BAAL,aAD8E;AAEpFG,EAAAA,IAAI,EAAKH,6BAAL,WAFgF;AAGpFI,EAAAA,KAAK,EAAKJ,6BAAL;AAH+E,CAA/E;;;AAQP;AACA;AACA;AACO,IAAMK,oBAC0C,GAAG,SAD7CA,oBAC6C,CAAAC,KAAK,EAAI;AACjE,MAAMC,OAAO,GAAG,sCAAhB;;AADiE,sBAEpC,iCAAaF,oBAAoB,CAACG,WAAlC,EAA+CD,OAAO,CAACE,SAAvD,CAFoC;AAAA,MAEzDC,QAFyD,iBAEzDA,QAFyD;AAAA,MAE/CC,MAF+C,iBAE/CA,MAF+C;;AAGjED,EAAAA,QAAQ;AAHyD,MAKzDE,MALyD,GAKaN,KALb,CAKzDM,MALyD;AAAA,MAKjDV,MALiD,GAKaI,KALb,CAKjDJ,MALiD;AAAA,MAKzCC,IALyC,GAKaG,KALb,CAKzCH,IALyC;AAAA,MAKnCC,KALmC,GAKaE,KALb,CAKnCF,KALmC;AAAA,MAK5BS,SAL4B,GAKaP,KALb,CAK5BO,SAL4B;AAAA,MAKjBC,MALiB,GAKaR,KALb,CAKjBQ,MALiB;AAAA,MAKTC,MALS,GAKaT,KALb,CAKTS,MALS;AAAA,MAKDC,SALC,GAKaV,KALb,CAKDU,SALC;AAOjE,MAAMC,OAAO,GAAGC,KAAK,CAACC,MAAN,EAAhB;AACA,MAAMC,WAAW,GAAG,mCAAed,KAAf,CAApB;AACA,MAAMe,cAAc,GAAG,sCAAkBhB,oBAAoB,CAACiB,YAAvC,EAAqDhB,KAArD,CAAvB;AAEA,MAAMiB,YAAY,GAAG,qCAAoDjB,KAAK,CAACkB,aAA1D,EAAyE;AAC5FC,IAAAA,SAAS,EAAEpB,oBAAoB,CAACG,WAD4D;AAE5FkB,IAAAA,kBAAkB,EAAE;AAAA,aAAO;AACzBxB,QAAAA,MAAM,EAAEA,MADiB;AAEzBU,QAAAA,MAAM,EAANA;AAFyB,OAAP;AAAA,KAFwE;AAM5Fe,IAAAA,GAAG,EAAEpB,OAAO,CAACoB;AAN+E,GAAzE,CAArB;AASAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM;AACpB,QAAIhB,MAAJ,EAAY;AACVK,MAAAA,OAAO,CAACY,OAAR,CAAgBC,KAAhB;AACD;AACF,GAJD,EAIG,CAAClB,MAAD,CAJH;;AApBiE,mBA0BrB,8BAC1CP,oBAAoB,CAACG,WADqB,EAE1C;AACEK,IAAAA,SAAS,EAAEb,6BADb;AAEE+B,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBC,QAAAA,QAAQ,EAAE,CAAC,CAAC5B;AADW,OAAP;AAAA,KAFpB;AAKE6B,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BpB,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAL1B;AAWEW,IAAAA,GAAG,EAAEpB,OAAO,CAACoB;AAXf,GAF0C,CA1BqB;AAAA,MA0BzDO,OA1ByD,cA0BzDA,OA1ByD;AAAA,MA0BxCC,cA1BwC,cA0BhDpB,MA1BgD;;AA2CjE,MAAMqB,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAA6B;AAC/C,0BAAS/B,KAAT,EAAgB,SAAhB,EAA2B+B,CAA3B,EAA8B/B,KAA9B;AACD,GAFD;;AAIA,MAAMgC,aAAa,GAAG,SAAhBA,aAAgB,CAACD,CAAD,EAA6B;AACjD,0BAAS/B,KAAT,EAAgB,WAAhB,EAA6B+B,CAA7B,EAAgC/B,KAAhC;AACD,GAFD;;AAIA,MAAMiC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,SAAS;AAAA,6BAChCA,SADgC;AAEnCC,MAAAA,OAAO,EAAE,iBAACJ,CAAD,EAA0BG,SAA1B,EAAkD;AACzDH,QAAAA,CAAC,CAACK,eAAF;AACA,8BAASpC,KAAT,EAAgB,UAAhB,EAA4B+B,CAA5B,EAA+BG,SAA/B;AACA,8BAASlC,KAAT,EAAgB,SAAhB,EAA2B+B,CAA3B,EAA8BG,SAA9B;AACD,OANkC;AAOnCG,MAAAA,SAAS,EAAE,mBAACN,CAAD,EAAyBG,SAAzB,EAAiD;AAC1DH,QAAAA,CAAC,CAACK,eAAF;;AACA,YAAI,4BAAQL,CAAR,MAAeO,2BAAYC,KAA/B,EAAsC;AACpC,gCAASvC,KAAT,EAAgB,UAAhB,EAA4B+B,CAA5B,EAA+BG,SAA/B;AACD;;AACD,8BAASlC,KAAT,EAAgB,WAAhB,EAA6B+B,CAA7B,EAAgCG,SAAhC;AACD;AAbkC;AAAA,GAArC;;AAgBA,MAAMM,aAAa,GAAGC,SAAIC,MAAJ,CAAW9C,MAAX,EAAmB;AACvC+C,IAAAA,YAAY,EAAE;AAAA,aACZ1B,YAAY,CAAC,QAAD,EAAW;AACrB2B,QAAAA,EAAE,EAAE,MADiB;AAErBrC,QAAAA,SAAS,EAAEZ,kCAAkC,CAACC,MAFzB;AAGrBa,QAAAA,MAAM,EAAEoB,cAAc,CAACjC;AAHF,OAAX,CADA;AAAA;AADyB,GAAnB,CAAtB;;AASA,MAAMiD,WAAW,GAAGJ,SAAIC,MAAJ,CAAW7C,IAAX,EAAiB;AACnC8C,IAAAA,YAAY,EAAE;AAAA,aACZ1B,YAAY,CAAC,MAAD,EAAS;AACnBV,QAAAA,SAAS,EAAEZ,kCAAkC,CAACE,IAD3B;AAEnBY,QAAAA,MAAM,EAAEoB,cAAc,CAAChC;AAFJ,OAAT,CADA;AAAA,KADqB;AAMnCiD,IAAAA,aAAa,EAAEb;AANoB,GAAjB,CAApB;;AASA,MAAMc,YAAY,GAAGC,aAAMN,MAAN,CAAa5C,KAAb,EAAoB;AACvC6C,IAAAA,YAAY,EAAE;AAAA,aACZ1B,YAAY,CAAC,OAAD,EAAU;AACpBgC,QAAAA,MAAM,EAAE,IADY;AAEpB1C,QAAAA,SAAS,EAAEZ,kCAAkC,CAACG,KAF1B;AAGpBW,QAAAA,MAAM,EAAEoB,cAAc,CAAC/B;AAHH,OAAV,CADA;AAAA;AADyB,GAApB,CAArB;;AASA,MAAMoD,OAAO,gBACX,oBAAC,sBAAD;AAAK,IAAA,QAAQ,EAAEvC;AAAf,kBACE,oBAAC,WAAD,EACMM,YAAY,CAAC,MAAD;AACdV,IAAAA,SAAS,EAAEqB,OAAO,CAACuB,IADL;AAEdhB,IAAAA,OAAO,EAAEL,WAFK;AAGdO,IAAAA,SAAS,EAAEL;AAHG,KAIXjB,cAJW,EADlB,EAQGgC,YARH,EASGP,aATH,EAUGK,WAVH,CADF,CADF;AAiBAxC,EAAAA,MAAM;AACN,SAAO6C,OAAP;AACD,CAlHM;;;AAoHPnD,oBAAoB,CAACG,WAArB,GAAmC,sBAAnC;AAEAH,oBAAoB,CAACqD,SAArB,qBACKC,uBAAgBC,YAAhB,CAA6B;AAC9BC,EAAAA,QAAQ,EAAE;AADoB,CAA7B,CADL;AAIEjD,EAAAA,MAAM,EAAEkD,SAAS,CAACC,IAJpB;AAKE7D,EAAAA,MAAM,EAAE8D,eAAe,CAACC,aAL1B;AAME9D,EAAAA,IAAI,EAAE6D,eAAe,CAACE,yBANxB;AAOE9D,EAAAA,KAAK,EAAE4D,eAAe,CAACG,uBAPzB;AAQE1B,EAAAA,OAAO,EAAEqB,SAAS,CAACM,IARrB;AASEzB,EAAAA,SAAS,EAAEmB,SAAS,CAACM,IATvB;AAUEC,EAAAA,QAAQ,EAAEP,SAAS,CAACM;AAVtB;AAaA/D,oBAAoB,CAACiB,YAArB,GAAoCgD,MAAM,CAACC,IAAP,CAAYlE,oBAAoB,CAACqD,SAAjC,CAApC;AAEArD,oBAAoB,CAAC4C,YAArB,GAAoC;AAClCzB,EAAAA,aAAa,EAAEgD,2CADmB;AAElCtB,EAAAA,EAAE,EAAE,MAF8B;AAGlC/C,EAAAA,IAAI,eAAE,oBAAC,8BAAD;AAH4B,CAApC;AAMAE,oBAAoB,CAAC2C,MAArB,GAA8B,mCAAuB;AACnDyB,EAAAA,SAAS,EAAEpE,oBADwC;AAEnDqE,EAAAA,UAAU,EAAE;AAFuC,CAAvB,CAA9B","sourcesContent":["import {\n  Accessibility,\n  dropdownSelectedItemBehavior,\n  DropdownSelectedItemBehaviorProps,\n  getCode,\n  keyboardKey,\n} from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport { CloseIcon } from '@fluentui/react-icons-northstar';\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  ComponentKeyboardEventHandler,\n  FluentComponentStaticProps,\n} from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  useUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  getElementType,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface DropdownSelectedItemSlotClassNames {\n  header: string;\n  icon: string;\n  image: string;\n}\n\nexport interface DropdownSelectedItemProps extends UIComponentProps<DropdownSelectedItemProps> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<DropdownSelectedItemBehaviorProps>;\n\n  /** A selected item can be active. */\n  active?: boolean;\n\n  /** Header of the selected item. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Icon of the selected item. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Image of the selected item. */\n  image?: ShorthandValue<ImageProps>;\n\n  /**\n   * Called on selected item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownSelectedItemProps>;\n\n  /**\n   * Called on selected item key down.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyDown?: ComponentKeyboardEventHandler<DropdownSelectedItemProps>;\n\n  /**\n   * Called when item is removed from the selection list.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onRemove?: ComponentEventHandler<DropdownSelectedItemProps>;\n}\n\nexport const dropdownSelectedItemClassName = 'ui-dropdown__selecteditem';\nexport const dropdownSelectedItemSlotClassNames: DropdownSelectedItemSlotClassNames = {\n  header: `${dropdownSelectedItemClassName}__header`,\n  icon: `${dropdownSelectedItemClassName}__icon`,\n  image: `${dropdownSelectedItemClassName}__image`,\n};\n\nexport type DropdownSelectedItemStylesProps = { hasImage: boolean };\n\n/**\n * A DropdownSelectedItem represents a selected item of 'multiple-selection' Dropdown.\n */\nexport const DropdownSelectedItem: ComponentWithAs<'span', DropdownSelectedItemProps> &\n  FluentComponentStaticProps<DropdownSelectedItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownSelectedItem.displayName, context.telemetry);\n  setStart();\n\n  const { active, header, icon, image, className, design, styles, variables } = props;\n\n  const itemRef = React.useRef<HTMLElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownSelectedItem.handledProps, props);\n\n  const getA11yProps = useAccessibility<DropdownSelectedItemBehaviorProps>(props.accessibility, {\n    debugName: DropdownSelectedItem.displayName,\n    mapPropsToBehavior: () => ({\n      header: header as string,\n      active,\n    }),\n    rtl: context.rtl,\n  });\n\n  React.useEffect(() => {\n    if (active) {\n      itemRef.current.focus();\n    }\n  }, [active]);\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownSelectedItemStylesProps>(\n    DropdownSelectedItem.displayName,\n    {\n      className: dropdownSelectedItemClassName,\n      mapPropsToStyles: () => ({\n        hasImage: !!image,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    },\n  );\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const handleKeyDown = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onKeyDown', e, props);\n  };\n\n  const handleIconOverrides = iconProps => ({\n    ...iconProps,\n    onClick: (e: React.SyntheticEvent, iconProps: BoxProps) => {\n      e.stopPropagation();\n      _.invoke(props, 'onRemove', e, iconProps);\n      _.invoke(props, 'onClick', e, iconProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, iconProps: BoxProps) => {\n      e.stopPropagation();\n      if (getCode(e) === keyboardKey.Enter) {\n        _.invoke(props, 'onRemove', e, iconProps);\n      }\n      _.invoke(props, 'onKeyDown', e, iconProps);\n    },\n  });\n\n  const headerElement = Box.create(header, {\n    defaultProps: () =>\n      getA11yProps('header', {\n        as: 'span',\n        className: dropdownSelectedItemSlotClassNames.header,\n        styles: resolvedStyles.header,\n      }),\n  });\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11yProps('icon', {\n        className: dropdownSelectedItemSlotClassNames.icon,\n        styles: resolvedStyles.icon,\n      }),\n    overrideProps: handleIconOverrides,\n  });\n\n  const imageElement = Image.create(image, {\n    defaultProps: () =>\n      getA11yProps('image', {\n        avatar: true,\n        className: dropdownSelectedItemSlotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n  });\n\n  const element = (\n    <Ref innerRef={itemRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          onKeyDown: handleKeyDown,\n          ...unhandledProps,\n        })}\n      >\n        {imageElement}\n        {headerElement}\n        {iconElement}\n      </ElementType>\n    </Ref>\n  );\n\n  setEnd();\n  return element;\n};\n\nDropdownSelectedItem.displayName = 'DropdownSelectedItem';\n\nDropdownSelectedItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n  }),\n  active: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onRemove: PropTypes.func,\n};\n\nDropdownSelectedItem.handledProps = Object.keys(DropdownSelectedItem.propTypes) as any;\n\nDropdownSelectedItem.defaultProps = {\n  accessibility: dropdownSelectedItemBehavior,\n  as: 'span',\n  icon: <CloseIcon />,\n};\n\nDropdownSelectedItem.create = createShorthandFactory({\n  Component: DropdownSelectedItem,\n  mappedProp: 'header',\n});\n"],"file":"DropdownSelectedItem.js"}