"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Menu = exports.menuClassName = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _filter2 = _interopRequireDefault(require("lodash/filter"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _values2 = _interopRequireDefault(require("lodash/values"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _MenuItem = require("./MenuItem");

var _MenuDivider = require("./MenuDivider");

var _MenuItemIcon = require("./MenuItemIcon");

var _MenuItemContent = require("./MenuItemContent");

var _MenuItemIndicator = require("./MenuItemIndicator");

var _MenuItemWrapper = require("./MenuItemWrapper");

var _menuContext = require("./menuContext");

var _reactComponentRef = require("@fluentui/react-component-ref");

var menuClassName = 'ui-menu';
exports.menuClassName = menuClassName;

function useActualProps(props) {
  var actualProps = React.useRef(props);
  React.useEffect(function () {
    actualProps.current = props;
  });
  return actualProps;
}

function useSlotProps(slotName, slotsProps) {
  var slotProps = slotsProps[slotName];
  return React.useMemo(function () {
    return slotProps;
  }, // `slotProps` has a stable order of keys so an amount of dependencies will not change between renders
  // eslint-disable-next-line react-hooks/exhaustive-deps
  (0, _values2.default)(slotProps));
}
/**
 * A Menu is a component that offers a grouped list of choices to the user.
 *
 * @accessibility
 * Implements ARIA [Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu), [Toolbar](https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar) or [Tabs](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) design pattern, depending on the behavior used.
 * @accessibilityIssues
 * [JAWS - navigation instruction for menubar](https://github.com/FreedomScientific/VFO-standards-support/issues/203)
 * [JAWS - navigation instruction for menu with aria-orientation="horizontal"](https://github.com/FreedomScientific/VFO-standards-support/issues/204)
 * [JAWS [VC] doesn't narrate menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/324)
 * [JAWS [app mode] focus moves to second menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/325)
 * [Enter into a tablist JAWS narrates: To switch pages, press Control+PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/337)
 * 51114083 VoiceOver+Web narrate wrong position in menu / total count of menu items, when pseudo element ::after or ::before is used
 */


var Menu = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Menu.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var iconOnly = props.iconOnly,
      items = props.items,
      pills = props.pills,
      pointing = props.pointing,
      primary = props.primary,
      underlined = props.underlined,
      vertical = props.vertical,
      submenu = props.submenu,
      children = props.children,
      variables = props.variables,
      styles = props.styles,
      fluid = props.fluid,
      className = props.className,
      design = props.design,
      secondary = props.secondary,
      accessibility = props.accessibility;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var slotProps = {
    divider: {
      inSubmenu: props.submenu,
      pills: props.pills,
      pointing: props.pointing,
      primary: props.primary,
      secondary: props.secondary,
      vertical: props.vertical
    },
    item: {
      iconOnly: props.iconOnly,
      indicator: props.indicator,
      inSubmenu: props.submenu,
      pills: props.pills,
      pointing: props.pointing,
      primary: props.primary,
      secondary: props.secondary,
      vertical: props.vertical,
      underlined: props.underlined
    }
  };
  var itemProps = useSlotProps('item', slotProps);
  var dividerProps = useSlotProps('divider', slotProps);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Menu.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Menu.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        vertical: vertical
      };
    },
    rtl: context.rtl
  });
  var actualProps = useActualProps(props);

  var _useStyles = (0, _reactBindings.useStyles)(Menu.displayName, {
    className: menuClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        iconOnly: iconOnly,
        fluid: fluid,
        pointing: pointing,
        pills: pills,
        primary: primary,
        underlined: underlined,
        vertical: vertical,
        secondary: secondary,
        submenu: submenu
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultActiveIndex,
    value: props.activeIndex,
    initialValue: undefined
  }),
      activeIndex = _useAutoControlled[0],
      setIndex = _useAutoControlled[1];

  var setActiveIndex = React.useCallback(function (e, activeIndex) {
    (0, _invoke2.default)(actualProps.current, 'onActiveIndexChange', e, Object.assign({}, actualProps.current, {
      activeIndex: activeIndex
    }));
    setIndex(activeIndex);
  }, [actualProps, setIndex]);
  var handleClick = React.useCallback(function (e, itemProps) {
    var index = itemProps.index;
    setActiveIndex(e, index);
    (0, _invoke2.default)(actualProps.current, 'onItemClick', e, itemProps);
  }, [actualProps, setActiveIndex]);
  var handleSelect = React.useCallback(function (e, index) {
    setActiveIndex(e, index);
  }, [setActiveIndex]);

  var handleItemOverrides = function handleItemOverrides(predefinedProps) {
    return {
      onActiveChanged: function onActiveChanged(e, props) {
        var index = props.index,
            active = props.active;

        if (active) {
          setActiveIndex(e, index);
        } else if (activeIndex === index) {
          setActiveIndex(e, null);
        }

        (0, _invoke2.default)(predefinedProps, 'onActiveChanged', e, props);
      },
      variables: (0, _reactBindings.mergeVariablesOverrides)(variables, predefinedProps.variables)
    };
  };

  var handleDividerOverrides = function handleDividerOverrides(predefinedProps) {
    return {
      variables: (0, _reactBindings.mergeVariablesOverrides)(variables, predefinedProps.variables)
    };
  };

  var renderItems = function renderItems() {
    var itemsCount = (0, _filter2.default)(items, function (item) {
      return (0, _utils.getKindProp)(item, 'item') !== 'divider';
    }).length;
    var itemPosition = 0;
    return (0, _map2.default)(items, function (item, index) {
      var kind = (0, _utils.getKindProp)(item, 'item');

      if (kind === 'divider') {
        return (0, _utils.createShorthand)(_MenuDivider.MenuDivider, item, {
          defaultProps: function defaultProps() {
            return getA11yProps('divider', {});
          },
          overrideProps: handleDividerOverrides
        });
      }

      itemPosition++;
      return (0, _utils.createShorthand)(_MenuItem.MenuItem, item, {
        defaultProps: function defaultProps() {
          return getA11yProps('item', {
            index: index,
            itemPosition: itemPosition,
            itemsCount: itemsCount
          });
        },
        overrideProps: handleItemOverrides
      });
    });
  };

  var childBehaviors = accessibility && accessibility(props).childBehaviors;
  var childProps = {
    activeIndex: +activeIndex,
    onItemClick: handleClick,
    onItemSelect: handleSelect,
    vertical: vertical,
    variables: variables,
    slotProps: {
      item: itemProps,
      divider: dividerProps
    },
    behaviors: {
      item: childBehaviors == null ? void 0 : childBehaviors.item,
      divider: childBehaviors == null ? void 0 : childBehaviors.divider
    }
  };
  var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), unhandledProps)), /*#__PURE__*/React.createElement(_menuContext.MenuContextProvider, {
    value: childProps
  }, (0, _utils.childrenExist)(children) ? children : renderItems())));
  var wrappedElement = ref ? /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: ref
  }, element) : element;
  setEnd();
  return wrappedElement;
});
exports.Menu = Menu;
Menu.displayName = 'Menu';
Menu.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  defaultActiveIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  fluid: PropTypes.bool,
  iconOnly: PropTypes.bool,
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),
  onItemClick: PropTypes.func,
  onActiveIndexChange: PropTypes.func,
  pills: PropTypes.bool,
  pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]),
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  underlined: PropTypes.bool,
  vertical: PropTypes.bool,
  submenu: PropTypes.bool,
  indicator: customPropTypes.shorthandAllowingChildren
});
Menu.handledProps = Object.keys(Menu.propTypes);
Menu.defaultProps = {
  as: 'ul',
  accessibility: _accessibility.menuBehavior
};
Menu.Item = _MenuItem.MenuItem;
Menu.ItemIcon = _MenuItemIcon.MenuItemIcon;
Menu.ItemContent = _MenuItemContent.MenuItemContent;
Menu.ItemWrapper = _MenuItemWrapper.MenuItemWrapper;
Menu.ItemIndicator = _MenuItemIndicator.MenuItemIndicator;
Menu.Divider = _MenuDivider.MenuDivider;
Menu.create = (0, _utils.createShorthandFactory)({
  Component: Menu,
  mappedArrayProp: 'items'
});
Menu.shorthandConfig = {
  mappedArrayProp: 'items'
};
//# sourceMappingURL=Menu.js.map
