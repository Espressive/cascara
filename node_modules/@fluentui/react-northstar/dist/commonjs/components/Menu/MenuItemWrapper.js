"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.MenuItemWrapper = exports.menuItemWrapperClassName = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var menuItemWrapperClassName = 'ui-menu__itemwrapper';
/**
 * A MenuItemWrapper allows a user to have a dedicated component that can be targeted from the theme.
 */

exports.menuItemWrapperClassName = menuItemWrapperClassName;
var MenuItemWrapper = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(MenuItemWrapper.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      children = props.children,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      content = props.content,
      active = props.active,
      disabled = props.disabled,
      iconOnly = props.iconOnly,
      isFromKeyboard = props.isFromKeyboard,
      pills = props.pills,
      pointing = props.pointing,
      secondary = props.secondary,
      underlined = props.underlined,
      vertical = props.vertical,
      primary = props.primary,
      on = props.on;

  var _useStyles = (0, _reactBindings.useStyles)(MenuItemWrapper.displayName, {
    className: menuItemWrapperClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        active: active,
        disabled: disabled,
        iconOnly: iconOnly,
        isFromKeyboard: isFromKeyboard,
        pills: pills,
        pointing: pointing,
        secondary: secondary,
        underlined: underlined,
        vertical: vertical,
        primary: primary,
        on: on
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var getA11Props = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: MenuItemWrapper.displayName,
    rtl: context.rtl
  });
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(MenuItemWrapper.handledProps, props);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)), (0, _reactBindings.childrenExist)(children) ? children : content);
  setEnd();
  return element;
});
exports.MenuItemWrapper = MenuItemWrapper;
MenuItemWrapper.displayName = 'MenuItemWrapper';
MenuItemWrapper.defaultProps = {
  as: 'li'
};
MenuItemWrapper.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  iconOnly: PropTypes.bool,
  isFromKeyboard: PropTypes.bool,
  pills: PropTypes.bool,
  pointing: PropTypes.oneOf(['start', 'end', true, false]),
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  underlined: PropTypes.bool,
  vertical: PropTypes.bool
});
MenuItemWrapper.handledProps = Object.keys(MenuItemWrapper.propTypes);
MenuItemWrapper.shorthandConfig = {
  mappedProp: 'content'
};
//# sourceMappingURL=MenuItemWrapper.js.map
