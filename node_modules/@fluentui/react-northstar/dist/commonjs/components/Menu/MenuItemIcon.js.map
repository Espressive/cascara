{"version":3,"sources":["components/Menu/MenuItemIcon.tsx"],"names":["menuItemIconClassName","MenuItemIcon","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","content","hasContent","iconOnly","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","defaultProps","as","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys","shorthandConfig","mappedProp"],"mappings":";;;;;;;AAAA;;AACA;;AAUA;;AACA;;AAmBO,IAAMA,qBAAqB,GAAG,mBAA9B;AAEP;AACA;AACA;;;AACO,IAAMC,YAAY,gBAAIC,KAAK,CAACC,UAAN,CAAqD,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAChG,MAAMC,OAAO,GAAG,sCAAhB;;AADgG,sBAEnE,iCAAaL,YAAY,CAACM,WAA1B,EAAuCD,OAAO,CAACE,SAA/C,CAFmE;AAAA,MAExFC,QAFwF,iBAExFA,QAFwF;AAAA,MAE9EC,MAF8E,iBAE9EA,MAF8E;;AAGhGD,EAAAA,QAAQ;AAHwF,MAKxFE,SALwF,GAKNP,KALM,CAKxFO,SALwF;AAAA,MAK7EC,QAL6E,GAKNR,KALM,CAK7EQ,QAL6E;AAAA,MAKnEC,MALmE,GAKNT,KALM,CAKnES,MALmE;AAAA,MAK3DC,MAL2D,GAKNV,KALM,CAK3DU,MAL2D;AAAA,MAKnDC,SALmD,GAKNX,KALM,CAKnDW,SALmD;AAAA,MAKxCC,OALwC,GAKNZ,KALM,CAKxCY,OALwC;AAAA,MAK/BC,UAL+B,GAKNb,KALM,CAK/Ba,UAL+B;AAAA,MAKnBC,QALmB,GAKNd,KALM,CAKnBc,QALmB;;AAAA,mBAO5E,8BAAmCjB,YAAY,CAACM,WAAhD,EAA6D;AAC/EI,IAAAA,SAAS,EAAEX,qBADoE;AAE/EmB,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBF,QAAAA,UAAU,EAAVA,UADuB;AAEvBC,QAAAA,QAAQ,EAARA;AAFuB,OAAP;AAAA,KAF6D;AAM/EE,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BT,QAAAA,SAAS,EAATA,SAD6B;AAE7BE,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KANuD;AAY/EM,IAAAA,GAAG,EAAEf,OAAO,CAACe;AAZkE,GAA7D,CAP4E;AAAA,MAOxFC,OAPwF,cAOxFA,OAPwF;;AAsBhG,MAAMC,WAAW,GAAG,qCAAiBnB,KAAK,CAACoB,aAAvB,EAAsC;AACxDC,IAAAA,SAAS,EAAExB,YAAY,CAACM,WADgC;AAExDc,IAAAA,GAAG,EAAEf,OAAO,CAACe;AAF2C,GAAtC,CAApB;AAKA,MAAMK,WAAW,GAAG,mCAAetB,KAAf,CAApB;AACA,MAAMuB,cAAc,GAAG,sCAAkB1B,YAAY,CAAC2B,YAA/B,EAA6CxB,KAA7C,CAAvB;AAEA,MAAMyB,OAAO,gBACX,oBAAC,WAAD,EAAiBN,WAAW,CAAC,MAAD;AAAWZ,IAAAA,SAAS,EAAEW,OAAO,CAACQ,IAA9B;AAAoCzB,IAAAA,GAAG,EAAHA;AAApC,KAA4CsB,cAA5C,EAA5B,EACG,kCAAcf,QAAd,IAA0BA,QAA1B,GAAqCI,OADxC,CADF;AAKAN,EAAAA,MAAM;AAEN,SAAOmB,OAAP;AACD,CAtC4B,CAAtB;;AAyCP5B,YAAY,CAACM,WAAb,GAA2B,cAA3B;AAEAN,YAAY,CAAC8B,YAAb,GAA4B;AAC1BC,EAAAA,EAAE,EAAE;AADsB,CAA5B;AAIA/B,YAAY,CAACgC,SAAb,qBACKC,uBAAgBC,YAAhB,EADL;AAEElB,EAAAA,UAAU,EAAEmB,SAAS,CAACC,IAFxB;AAGEnB,EAAAA,QAAQ,EAAEkB,SAAS,CAACC;AAHtB;AAMApC,YAAY,CAAC2B,YAAb,GAA4BU,MAAM,CAACC,IAAP,CAAYtC,YAAY,CAACgC,SAAzB,CAA5B;AAEAhC,YAAY,CAACuC,eAAb,GAA+B;AAC7BC,EAAAA,UAAU,EAAE;AADiB,CAA/B","sourcesContent":["import * as React from 'react';\nimport {\n  ForwardRefWithAs,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  childrenExist,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport { ChildrenComponentProps, commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface MenuItemIconProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Indicates if the parent menu item may have just icons. */\n  iconOnly?: boolean;\n\n  /** Indicates if the parent menu item has content. */\n  hasContent?: boolean;\n}\n\nexport type MenuItemIconStylesProps = Pick<MenuItemIconProps, 'hasContent' | 'iconOnly'>;\n\nexport const menuItemIconClassName = 'ui-menu__itemicon';\n\n/**\n * A MenuItemIcon allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemIcon = (React.forwardRef<HTMLSpanElement, MenuItemIconProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(MenuItemIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, content, hasContent, iconOnly } = props;\n\n  const { classes } = useStyles<MenuItemIconStylesProps>(MenuItemIcon.displayName, {\n    className: menuItemIconClassName,\n    mapPropsToStyles: () => ({\n      hasContent,\n      iconOnly,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: MenuItemIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(MenuItemIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, MenuItemIconProps> &\n  FluentComponentStaticProps<MenuItemIconProps>;\n\nMenuItemIcon.displayName = 'MenuItemIcon';\n\nMenuItemIcon.defaultProps = {\n  as: 'span',\n};\n\nMenuItemIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasContent: PropTypes.bool,\n  iconOnly: PropTypes.bool,\n};\n\nMenuItemIcon.handledProps = Object.keys(MenuItemIcon.propTypes) as any;\n\nMenuItemIcon.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"MenuItemIcon.js"}