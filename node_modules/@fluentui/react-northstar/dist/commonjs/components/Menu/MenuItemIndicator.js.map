{"version":3,"sources":["components/Menu/MenuItemIndicator.tsx"],"names":["menuItemIndicatorClassName","MenuItemIndicator","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","content","iconOnly","vertical","inSubmenu","active","primary","underlined","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","defaultProps","as","indicatorBehavior","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ForwardRefWithAs,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  childrenExist,\n} from '@fluentui/react-bindings';\nimport { Accessibility, indicatorBehavior, IndicatorBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport { ChildrenComponentProps, commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface MenuItemIndicatorProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<IndicatorBehaviorProps>;\n\n  /** Indicates if the parent menu item may have just icons. */\n  iconOnly?: boolean;\n\n  /** Indicates whether the parent menu item is inside vertical menu. */\n  vertical?: boolean;\n\n  /** Indicates whether the parent menu item is part of submenu. */\n  inSubmenu?: boolean;\n\n  /** Indicates whether the parent menu item is active. */\n  active?: boolean;\n\n  /** Indicates whether the parent menu item is primary. */\n  primary?: boolean;\n\n  /** Indicates whether the parent menu item is underlined. */\n  underlined?: boolean;\n}\n\nexport type MenuItemIndicatorStylesProps = Pick<\n  MenuItemIndicatorProps,\n  'iconOnly' | 'vertical' | 'inSubmenu' | 'active' | 'primary' | 'underlined'\n>;\n\nexport const menuItemIndicatorClassName = 'ui-menu__itemindicator';\n\n/**\n * A MenuItemIndicator allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemIndicator = (React.forwardRef<HTMLSpanElement, MenuItemIndicatorProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(MenuItemIndicator.displayName, context.telemetry);\n  setStart();\n\n  const {\n    className,\n    children,\n    design,\n    styles,\n    variables,\n    content,\n    iconOnly,\n    vertical,\n    inSubmenu,\n    active,\n    primary,\n    underlined,\n  } = props;\n\n  const { classes } = useStyles<MenuItemIndicatorStylesProps>(MenuItemIndicator.displayName, {\n    className: menuItemIndicatorClassName,\n    mapPropsToStyles: () => ({\n      iconOnly,\n      vertical,\n      inSubmenu,\n      active,\n      primary,\n      underlined,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: MenuItemIndicator.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(MenuItemIndicator.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, MenuItemIndicatorProps> &\n  FluentComponentStaticProps<MenuItemIndicatorProps>;\n\nMenuItemIndicator.displayName = 'MenuItemIndicator';\n\nMenuItemIndicator.defaultProps = {\n  as: 'span',\n  accessibility: indicatorBehavior,\n};\n\nMenuItemIndicator.propTypes = {\n  ...commonPropTypes.createCommon(),\n  iconOnly: PropTypes.bool,\n  vertical: PropTypes.bool,\n  inSubmenu: PropTypes.bool,\n  active: PropTypes.bool,\n  primary: PropTypes.bool,\n  underlined: PropTypes.bool,\n};\n\nMenuItemIndicator.handledProps = Object.keys(MenuItemIndicator.propTypes) as any;\n\nMenuItemIndicator.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"MenuItemIndicator.js"}