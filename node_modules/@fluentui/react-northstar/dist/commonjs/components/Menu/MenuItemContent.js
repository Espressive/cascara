"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.MenuItemContent = exports.menuItemContentClassName = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var _menuContext = require("./menuContext");

var menuItemContentClassName = 'ui-menu__itemcontent';
/**
 * A MenuItemContent allows a user to have a dedicated component that can be targeted from the theme.
 */

exports.menuItemContentClassName = menuItemContentClassName;
var MenuItemContent = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(MenuItemContent.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var parentProps = (0, _reactBindings.useContextSelectors)(_menuContext.MenuContext, {
    vertical: function vertical(v) {
      return v.vertical;
    }
  }); // TODO: we should improve typings for the useContextSelectors

  var className = props.className,
      children = props.children,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      content = props.content,
      hasMenu = props.hasMenu,
      hasIcon = props.hasIcon,
      vertical = props.vertical,
      inSubmenu = props.inSubmenu;

  var _useStyles = (0, _reactBindings.useStyles)(MenuItemContent.displayName, {
    className: menuItemContentClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        hasMenu: hasMenu,
        hasIcon: hasIcon,
        vertical: vertical || parentProps.vertical,
        inSubmenu: inSubmenu
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var getA11Props = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: MenuItemContent.displayName,
    rtl: context.rtl
  });
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(MenuItemContent.handledProps, props);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {
    ref: ref
  }, unhandledProps)), (0, _reactBindings.childrenExist)(children) ? children : content);
  setEnd();
  return element;
});
exports.MenuItemContent = MenuItemContent;
MenuItemContent.displayName = 'MenuItemContent';
MenuItemContent.defaultProps = {
  as: 'span'
};
MenuItemContent.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  hasIcon: PropTypes.bool,
  hasMenu: PropTypes.bool,
  vertical: PropTypes.bool,
  inSubmenu: PropTypes.bool
});
MenuItemContent.shorthandConfig = {
  mappedProp: 'content'
};
MenuItemContent.handledProps = Object.keys(MenuItemContent.propTypes);
//# sourceMappingURL=MenuItemContent.js.map
