"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.MenuDivider = exports.menuDividerClassName = void 0;

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _menuContext = require("./menuContext");

var menuDividerClassName = 'ui-menu__divider';
/**
 * A MenuDivider is non-actionable element that visually segments items of Menu.
 */

exports.menuDividerClassName = menuDividerClassName;
var MenuDivider = /*#__PURE__*/React.forwardRef(function (inputProps, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(MenuDivider.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var parentProps = (0, _reactBindings.useContextSelectors)(_menuContext.MenuContext, {
    variables: function variables(v) {
      return v.variables;
    },
    slotProps: function slotProps(v) {
      return v.slotProps.divider;
    },
    accessibility: function accessibility(v) {
      return v.behaviors.divider;
    }
  }); // TODO: we should improve typings for the useContextSelectors

  var props = Object.assign({}, parentProps.slotProps, {
    accessibility: parentProps.accessibility,
    variables: parentProps.variables
  }, inputProps);
  var _props$accessibility = props.accessibility,
      accessibility = _props$accessibility === void 0 ? _accessibility.menuDividerBehavior : _props$accessibility,
      children = props.children,
      content = props.content,
      vertical = props.vertical,
      inSubmenu = props.inSubmenu,
      pills = props.pills,
      pointing = props.pointing,
      primary = props.primary,
      className = props.className,
      design = props.design,
      styles = props.styles,
      secondary = props.secondary,
      variables = props.variables;
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: MenuDivider.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(MenuDivider.displayName, {
    className: menuDividerClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        hasContent: !!content || !!children,
        pills: pills,
        pointing: pointing,
        vertical: vertical,
        inSubmenu: inSubmenu,
        primary: primary,
        secondary: secondary
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: (0, _reactBindings.mergeVariablesOverrides)(variables, parentProps.variables)
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(MenuDivider.handledProps, props);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), unhandledProps, {
    ref: ref
  })), (0, _utils.childrenExist)(children) ? children : content);
  setEnd();
  return element;
});
exports.MenuDivider = MenuDivider;
MenuDivider.defaultProps = {
  as: 'li'
};
MenuDivider.displayName = 'MenuDivider';
MenuDivider.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  primary: PropTypes.bool,
  secondary: PropTypes.bool,
  vertical: PropTypes.bool,
  inSubmenu: PropTypes.bool,
  pointing: PropTypes.oneOf(['start', 'end', true, false])
});
MenuDivider.handledProps = Object.keys(MenuDivider.propTypes);
MenuDivider.shorthandConfig = {
  mappedProp: 'content'
};
MenuDivider.create = (0, _utils.createShorthandFactory)({
  Component: MenuDivider,
  mappedProp: 'content'
});
//# sourceMappingURL=MenuDivider.js.map
