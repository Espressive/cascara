{"version":3,"sources":["components/Chat/ChatMessage.tsx"],"names":["chatMessageClassName","chatMessageSlotClassNames","actionMenu","author","badge","bar","compactBody","content","reactionGroup","timestamp","partitionActionMenuPropsFromShorthand","value","Array","isArray","inline","showActionMenu","props","ChatMessage","context","displayName","telemetry","setStart","setEnd","parentAttached","ChatItemContext","v","attached","chatDensity","accessibility","badgePosition","children","className","density","design","details","header","mine","positionActionMenu","reactionGroupPosition","readStatus","styles","overflow","unstable_overflow","variables","actionMenuOptions","positioningProps","inlineActionMenu","controlledShowActionMenu","defaultValue","setShowActionMenu","hasActionMenu","actionMenuId","React","useRef","current","modifiers","useCallback","target","container","name","options","fallbackPlacements","boundary","popperRef","align","position","positionFixed","enabled","messageRef","targetRef","actionsMenuRef","containerRef","useState","focused","setFocused","getA11Props","actionHandlers","preventDefault","event","currentTarget","focus","stopPropagation","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","hasBadge","hasReactionGroup","mapPropsToInlineStyles","classes","resolvedStyles","handleFocus","e","updatePosition","handleBlur","shouldPreserveFocusState","relatedTarget","handleMouseEnter","handleMouseLeave","renderActionMenu","actionMenuElement","Menu","create","defaultProps","IS_FOCUSABLE_ATTRIBUTE","menuAsToolbarBehavior","overrideProps","id","handleKeyDown","toFocusItemInActionMenu","querySelector","querySelectorAll","keyCode","keyboardKey","Enter","Tab","isShift","shiftKey","focusableElementsInsideMessage","firstFocusableInsideMessage","lastFocusableInsideMessage","length","boundaryElementInsideMessage","childrenPropExists","rootClasses","root","ElementType","unhandledProps","handledProps","badgeElement","Label","reactionGroupElement","Reaction","Group","authorElement","Text","size","undefined","timestampElement","messageContent","Box","detailsElement","ChatMessageDetails","readStatusElement","ChatMessageReadStatus","elements","headerElement","ChatMessageHeader","bodyElement","element","unstable_wrapWithFocusZone","onBlur","onFocus","onMouseEnter","onMouseLeave","onKeyDown","rtlTextContainer","getAttributes","forElements","chatMessageBehavior","propTypes","commonPropTypes","createCommon","PropTypes","oneOfType","customPropTypes","itemShorthand","collectionShorthand","bool","oneOf","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  chatMessageBehavior,\n  ChatMessageBehaviorProps,\n  IS_FOCUSABLE_ATTRIBUTE,\n  keyboardKey,\n  menuAsToolbarBehavior,\n} from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useAutoControlled,\n  useContextSelector,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ComponentEventHandler,\n  ComponentKeyboardEventHandler,\n  FluentComponentStaticProps,\n  ObjectShorthandValue,\n  ShorthandCollection,\n  ShorthandValue,\n} from '../../types';\nimport {\n  ChildrenComponentProps,\n  childrenExist,\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthand,\n  createShorthandFactory,\n  getOrGenerateIdFromShorthand,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport {\n  getScrollParent,\n  partitionPopperPropsFromShorthand,\n  PopperModifiersFn,\n  PopperRefHandle,\n  PopperShorthandProps,\n  usePopper,\n} from '../../utils/positioner';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Flex } from '../Flex/Flex';\nimport { Label, LabelProps } from '../Label/Label';\nimport { Menu, MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport { PortalInner } from '../Portal/PortalInner';\nimport { Reaction, ReactionProps } from '../Reaction/Reaction';\nimport { ReactionGroupProps } from '../Reaction/ReactionGroup';\nimport { Text, TextProps } from '../Text/Text';\nimport { ChatDensity, useChatDensityContext } from './chatDensityContext';\nimport { ChatItemContext } from './chatItemContext';\nimport { ChatMessageDetails, ChatMessageDetailsProps } from './ChatMessageDetails';\nimport { ChatMessageHeader, ChatMessageHeaderProps } from './ChatMessageHeader';\nimport { ChatMessageReadStatus, ChatMessageReadStatusProps } from './ChatMessageReadStatus';\n\nexport interface ChatMessageSlotClassNames {\n  actionMenu: string;\n  author: string;\n  badge: string;\n  bar: string;\n  compactBody: string;\n  content: string;\n  reactionGroup: string;\n  timestamp: string;\n}\n\nexport interface ChatMessageProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatMessageBehaviorProps>;\n\n  /**\n   * Menu with actions of the message.\n   * popper: alters the action menu positioning.\n   * inline: whether the action menu should be rendered inline with the chat message, or in the body. It's true by default.\n   * showActionMenu: controls if the action menu is visible or not.\n   */\n  actionMenu?:\n    | ShorthandValue<MenuProps & { popper?: PopperShorthandProps; inline?: boolean; showActionMenu?: boolean }>\n    | ShorthandCollection<MenuItemProps & { inline?: boolean; showActionMenu?: boolean }>;\n\n  /** Controls messages's relation to other chat messages. Is automatically set by the ChatItem. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Author of the message. */\n  author?: ShorthandValue<TextProps>;\n\n  /** Badge attached to the message. */\n  badge?: ShorthandValue<LabelProps>;\n\n  /** A message can format the badge to appear at the start or the end of the message. */\n  badgePosition?: 'start' | 'end';\n\n  /** A message can have a custom body. Only rendered in compact density. */\n  compactBody?: ShorthandValue<BoxProps>;\n\n  /** Chat density. Is automatically set by the Chat. */\n  density?: ChatDensity;\n\n  /** Message details info slot. Displayed in the header or body in comfy and compact density respectively. */\n  details?: ShorthandValue<ChatMessageDetailsProps>;\n\n  /** A message can have a custom header. */\n  header?: ShorthandValue<ChatMessageHeaderProps>;\n\n  /** Indicates whether message belongs to the current user. */\n  mine?: boolean;\n\n  /**\n   * Called after user's blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called on chat message item key down.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyDown?: ComponentKeyboardEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user enters by mouse.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseEnter?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user leaves by mouse.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseLeave?: ComponentEventHandler<ChatMessageProps>;\n\n  /** Allows suppression of action menu positioning for performance reasons. */\n  positionActionMenu?: boolean;\n\n  /** Reaction group applied to the message. */\n  reactionGroup?: ShorthandValue<ReactionGroupProps> | ShorthandCollection<ReactionProps>;\n\n  /** A message can format the reactions group to appear at the start or the end of the message. */\n  reactionGroupPosition?: 'start' | 'end';\n\n  /** Message read status indicator. */\n  readStatus?: ShorthandValue<ChatMessageReadStatusProps>;\n\n  /** Timestamp of the message. */\n  timestamp?: ShorthandValue<TextProps>;\n\n  /** Positions an actionMenu slot in \"fixed\" mode. */\n  unstable_overflow?: boolean;\n}\n\nexport type ChatMessageStylesProps = Pick<ChatMessageProps, 'attached' | 'badgePosition' | 'density' | 'mine'> & {\n  hasBadge: boolean;\n  hasReactionGroup: boolean;\n\n  // focused, hasActionMenu and showActionMenu controls the visibility of action menu\n  focused: boolean;\n  hasActionMenu: boolean;\n  showActionMenu: boolean;\n};\n\nexport const chatMessageClassName = 'ui-chat__message';\nexport const chatMessageSlotClassNames: ChatMessageSlotClassNames = {\n  actionMenu: `${chatMessageClassName}__actions`,\n  author: `${chatMessageClassName}__author`,\n  badge: `${chatMessageClassName}__badge`,\n  bar: `${chatMessageClassName}__bar`,\n  compactBody: `${chatMessageClassName}__compact-body`,\n  content: `${chatMessageClassName}__content`,\n  reactionGroup: `${chatMessageClassName}__reactions`,\n  timestamp: `${chatMessageClassName}__timestamp`,\n};\n\nfunction partitionActionMenuPropsFromShorthand<P>(\n  value: ShorthandValue<P & { inline?: boolean; showActionMenu?: boolean }>,\n): [ShorthandValue<P> | ObjectShorthandValue<P>, boolean | undefined, boolean | undefined] {\n  if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n    const { inline, showActionMenu, ...props } = value as ObjectShorthandValue<P> & {\n      inline?: boolean;\n      showActionMenu?: boolean;\n    };\n\n    return [props as ObjectShorthandValue<P>, inline ?? true, showActionMenu];\n  }\n\n  return [value, true, false];\n}\n\n/**\n * A ChatMessage represents a single message in chat.\n */\nexport const ChatMessage: ComponentWithAs<'div', ChatMessageProps> &\n  FluentComponentStaticProps<ChatMessageProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ChatMessage.displayName, context.telemetry);\n  setStart();\n\n  const parentAttached = useContextSelector(ChatItemContext, v => v.attached);\n  const chatDensity = useChatDensityContext();\n  const {\n    accessibility,\n    attached = parentAttached,\n    author,\n    badge,\n    badgePosition,\n    children,\n    className,\n    compactBody,\n    content,\n    density = chatDensity,\n    design,\n    details,\n    header,\n    mine,\n    positionActionMenu,\n    reactionGroup,\n    reactionGroupPosition,\n    readStatus,\n    styles,\n    timestamp,\n    unstable_overflow: overflow,\n    variables,\n  } = props;\n\n  const [actionMenuOptions, positioningProps] = partitionPopperPropsFromShorthand(props.actionMenu);\n  const [actionMenu, inlineActionMenu, controlledShowActionMenu] = partitionActionMenuPropsFromShorthand(\n    actionMenuOptions,\n  );\n  const [showActionMenu, setShowActionMenu] = useAutoControlled<boolean>({\n    defaultValue: false,\n    value: controlledShowActionMenu,\n  });\n  const hasActionMenu = !_.isNil(actionMenu);\n\n  const actionMenuId = React.useRef<string>();\n  actionMenuId.current = getOrGenerateIdFromShorthand(`${chatMessageClassName}-`, actionMenu, actionMenuId.current);\n\n  const modifiers = React.useCallback<PopperModifiersFn>(\n    (target, container) => {\n      return (\n        positionActionMenu && [\n          // https://popper.js.org/docs/v2/modifiers/flip/\n          // Forces to flip only in \"top-*\" positions\n          { name: 'flip', options: { fallbackPlacements: ['top'] } },\n          overflow && {\n            name: 'preventOverflow',\n            options: { boundary: getScrollParent(container) },\n          },\n        ]\n      );\n    },\n    [positionActionMenu, overflow],\n  );\n\n  const popperRef = React.useRef<PopperRefHandle>();\n  const { targetRef: messageRef, containerRef: actionsMenuRef } = usePopper({\n    align: 'end',\n    position: 'above',\n    positionFixed: overflow,\n\n    enabled: hasActionMenu && positionActionMenu,\n    modifiers,\n    popperRef,\n\n    ...positioningProps,\n  });\n\n  // `focused` state is used for show/hide actionMenu\n  const [focused, setFocused] = React.useState<boolean>(false);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      // prevents default FocusZone behavior, e.g., in ChatMessageBehavior, it prevents FocusZone from using arrow keys\n      // as navigation (only Tab key should work)\n      preventDefault: event => {\n        // preventDefault only if event coming from inside the message\n        if (event.currentTarget !== event.target) {\n          event.preventDefault();\n        }\n      },\n\n      focus: event => {\n        if (messageRef.current) {\n          messageRef.current.focus();\n          event.stopPropagation();\n        }\n      },\n    },\n    debugName: ChatMessage.displayName,\n    mapPropsToBehavior: () => ({\n      hasActionMenu,\n      inlineActionMenu,\n      actionMenuId: actionMenuId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<ChatMessageStylesProps>(ChatMessage.displayName, {\n    className: chatMessageClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      badgePosition,\n      density,\n      focused,\n      hasActionMenu,\n      hasBadge: !!badge,\n      hasReactionGroup: !!reactionGroup,\n      mine,\n      showActionMenu,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    popperRef.current?.updatePosition();\n\n    // react onFocus is called even when nested component receives focus (i.e. it bubbles)\n    // so when focus moves within actionMenu, the `focus` state in chatMessage remains true, and keeps actionMenu visible\n    setFocused(true);\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    // `focused` controls is focused the whole `ChatMessage` or any of its children. When we're navigating\n    // with keyboard the focused element will be changed and there is no way to use `:focus` selector\n    const shouldPreserveFocusState = _.invoke(e, 'currentTarget.contains', (e as any).relatedTarget);\n\n    setFocused(shouldPreserveFocusState);\n    setShowActionMenu(false);\n\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleMouseEnter = (e: React.SyntheticEvent) => {\n    popperRef.current?.updatePosition();\n    if (hasActionMenu && !inlineActionMenu) {\n      setShowActionMenu(true);\n    }\n    _.invoke(props, 'onMouseEnter', e, props);\n  };\n\n  const handleMouseLeave = (e: React.SyntheticEvent) => {\n    if (!focused && hasActionMenu && !inlineActionMenu) {\n      setShowActionMenu(false);\n    }\n    _.invoke(props, 'onMouseLeave', e, props);\n  };\n\n  const renderActionMenu = () => {\n    const actionMenuElement = Menu.create(actionMenu, {\n      defaultProps: () => ({\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        accessibility: menuAsToolbarBehavior,\n        className: chatMessageSlotClassNames.actionMenu,\n        styles: resolvedStyles.actionMenu,\n      }),\n      overrideProps: {\n        id: actionMenuId.current,\n      },\n    });\n\n    const content = actionMenuElement ? <Ref innerRef={actionsMenuRef}>{actionMenuElement}</Ref> : actionMenuElement;\n\n    return inlineActionMenu || !content ? content : <PortalInner>{content}</PortalInner>;\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (hasActionMenu && !inlineActionMenu) {\n      // reference: https://github.com/microsoft/fluentui/pull/17329\n\n      const toFocusItemInActionMenu =\n        actionsMenuRef.current?.querySelector('[tabindex=\"0\"]') ??\n        actionsMenuRef.current?.querySelectorAll('[tabindex=\"-1\"]:not([data-is-focusable=\"false\"])')[0];\n\n      if (e.keyCode === keyboardKey.Enter) {\n        toFocusItemInActionMenu?.focus();\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      if (e.keyCode === keyboardKey.Tab) {\n        // TAB/SHIFT+TAB cycles focus among actionMenu and focusable elements within chat message\n        const isShift = !!e.shiftKey;\n\n        const focusableElementsInsideMessage: NodeListOf<HTMLElement> = e.currentTarget.querySelectorAll(\n          '[tabindex=\"-1\"]:not([data-is-focusable=\"false\"])',\n        );\n        const firstFocusableInsideMessage = focusableElementsInsideMessage[0];\n        const lastFocusableInsideMessage = focusableElementsInsideMessage[focusableElementsInsideMessage.length - 1];\n\n        if (e.target === toFocusItemInActionMenu) {\n          // focus is now inside action menu\n          // cycle focus into the first/last focusable element inside chat message\n          if (isShift) {\n            lastFocusableInsideMessage?.focus();\n          } else {\n            firstFocusableInsideMessage?.focus();\n          }\n          e.stopPropagation();\n          e.preventDefault();\n        } else {\n          const boundaryElementInsideMessage = isShift ? firstFocusableInsideMessage : lastFocusableInsideMessage;\n          if (e.target === boundaryElementInsideMessage) {\n            // focus is now on the first/last focusable element inside chat message\n            toFocusItemInActionMenu.focus(); // cycle focus back into action Menu\n            e.stopPropagation();\n            e.preventDefault();\n          }\n        }\n      }\n    }\n    _.invoke(props, 'onKeyDown', e, props);\n  };\n\n  const childrenPropExists = childrenExist(children);\n  const rootClasses = childrenPropExists ? cx(classes.root, classes.content) : classes.root;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatMessage.handledProps, props);\n\n  const badgeElement = Label.create(badge, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.badge,\n      styles: resolvedStyles.badge,\n    }),\n  });\n\n  const reactionGroupElement = Reaction.Group.create(reactionGroup, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.reactionGroup,\n      styles: resolvedStyles.reactionGroup,\n    }),\n  });\n\n  const actionMenuElement = renderActionMenu();\n\n  const authorElement = Text.create(author, {\n    defaultProps: () => ({\n      size: density === 'comfy' ? 'small' : undefined,\n      styles: resolvedStyles.author,\n      className: chatMessageSlotClassNames.author,\n    }),\n  });\n\n  const timestampElement = Text.create(timestamp, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.timestamp,\n      timestamp: true,\n      className: chatMessageSlotClassNames.timestamp,\n    }),\n  });\n\n  const messageContent = Box.create(content, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n\n  const detailsElement = createShorthand(ChatMessageDetails, details, {\n    defaultProps: () => ({ attached, density, mine }),\n  });\n\n  const readStatusElement = createShorthand(ChatMessageReadStatus, readStatus, {\n    defaultProps: () => ({ density }),\n  });\n\n  let elements = <></>;\n  if (density === 'compact') {\n    const headerElement = createShorthand(ChatMessageHeader, header);\n\n    const bodyElement = Box.create(compactBody, {\n      defaultProps: () =>\n        getA11Props('compactBody', {\n          className: chatMessageSlotClassNames.compactBody,\n          styles: resolvedStyles.compactBody,\n        }),\n      overrideProps: () => ({\n        content: (\n          <>\n            <Flex.Item grow={1}>\n              <div>\n                {authorElement}\n                {messageContent}\n              </div>\n            </Flex.Item>\n            {timestampElement}\n            {detailsElement}\n            {badgeElement}\n          </>\n        ),\n      }),\n    });\n\n    elements = (\n      <>\n        {actionMenuElement}\n        <div className={chatMessageSlotClassNames.bar} />\n        {headerElement}\n        {bodyElement}\n        {reactionGroupElement}\n        {readStatusElement}\n      </>\n    );\n  } else {\n    const headerElement = createShorthand(ChatMessageHeader, header || {}, {\n      overrideProps: () => ({\n        content: (\n          <>\n            {authorElement}\n            {timestampElement}\n            {detailsElement}\n            {reactionGroupPosition === 'start' && reactionGroupElement}\n          </>\n        ),\n      }),\n    });\n\n    elements = (\n      <>\n        {actionMenuElement}\n        <div className={chatMessageSlotClassNames.bar} />\n        {badgePosition === 'start' && badgeElement}\n        {headerElement}\n        {messageContent}\n        {reactionGroupPosition === 'end' && reactionGroupElement}\n        {badgePosition === 'end' && badgeElement}\n        {readStatusElement}\n      </>\n    );\n  }\n\n  const element = (\n    <Ref innerRef={messageRef}>\n      {getA11Props.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11Props('root', {\n            className: rootClasses,\n            onBlur: handleBlur,\n            onFocus: handleFocus,\n            onMouseEnter: handleMouseEnter,\n            onMouseLeave: handleMouseLeave,\n            onKeyDown: handleKeyDown,\n            ...rtlTextContainer.getAttributes({ forElements: [children] }),\n            ...unhandledProps,\n          })}\n        >\n          {childrenPropExists ? children : elements}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatMessage.displayName = 'ChatMessage';\n\nChatMessage.defaultProps = {\n  accessibility: chatMessageBehavior,\n  badgePosition: 'end',\n  compactBody: {},\n  positionActionMenu: true,\n  reactionGroupPosition: 'start',\n};\n\nChatMessage.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  actionMenu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  author: customPropTypes.itemShorthand,\n  badge: customPropTypes.itemShorthand,\n  badgePosition: PropTypes.oneOf(['start', 'end']),\n  compactBody: customPropTypes.itemShorthand,\n  density: PropTypes.oneOf<ChatDensity>(['comfy', 'compact']),\n  details: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  mine: PropTypes.bool,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  positionActionMenu: PropTypes.bool,\n  reactionGroup: PropTypes.oneOfType([customPropTypes.collectionShorthand, customPropTypes.itemShorthand]),\n  reactionGroupPosition: PropTypes.oneOf(['start', 'end']),\n  readStatus: customPropTypes.itemShorthand,\n  timestamp: customPropTypes.itemShorthand,\n  unstable_overflow: PropTypes.bool,\n};\n\nChatMessage.handledProps = Object.keys(ChatMessage.propTypes) as any;\n\nChatMessage.create = createShorthandFactory({ Component: ChatMessage, mappedProp: 'content' });\n"],"file":"ChatMessage.js"}