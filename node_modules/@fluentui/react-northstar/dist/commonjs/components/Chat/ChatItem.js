"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.ChatItem = exports.chatItemSlotClassNames = exports.chatItemClassName = void 0;

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _chatDensityContext = require("./chatDensityContext");

var _chatItemContext = require("./chatItemContext");

var chatItemClassName = 'ui-chat__item';
exports.chatItemClassName = chatItemClassName;
var chatItemSlotClassNames = {
  message: chatItemClassName + "__message",
  gutter: chatItemClassName + "__gutter"
};
exports.chatItemSlotClassNames = chatItemSlotClassNames;

/**
 * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).
 */
var ChatItem = function ChatItem(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(ChatItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var chatDensity = (0, _chatDensityContext.useChatDensityContext)();
  var accessibility = props.accessibility,
      attached = props.attached,
      children = props.children,
      className = props.className,
      contentPosition = props.contentPosition,
      _props$density = props.density,
      density = _props$density === void 0 ? chatDensity : _props$density,
      design = props.design,
      gutter = props.gutter,
      message = props.message,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: ChatItem.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(ChatItem.displayName, {
    className: chatItemClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        attached: attached,
        contentPosition: contentPosition,
        density: density
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var renderContent = function renderContent() {
    var gutterElement = _Box.Box.create(gutter, {
      defaultProps: function defaultProps() {
        return getA11Props('gutter', {
          className: chatItemSlotClassNames.gutter,
          styles: resolvedStyles.gutter
        });
      }
    });

    var messageElement = _Box.Box.create(message, {
      defaultProps: function defaultProps() {
        return getA11Props('message', {
          className: chatItemSlotClassNames.message,
          styles: resolvedStyles.message
        });
      }
    });

    return /*#__PURE__*/React.createElement(_chatItemContext.ChatItemContextProvider, {
      value: {
        attached: attached
      }
    }, (contentPosition === 'start' || density === 'compact') && gutterElement, messageElement, contentPosition === 'end' && density === 'comfy' && gutterElement);
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(ChatItem.handledProps, props);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), unhandledProps)), (0, _utils.childrenExist)(children) ? children : renderContent());
  setEnd();
  return element;
};

exports.ChatItem = ChatItem;
ChatItem.displayName = 'ChatItem';
ChatItem.defaultProps = {
  as: 'li',
  contentPosition: 'start',
  attached: false
};
ChatItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),
  contentPosition: PropTypes.oneOf(['start', 'end']),
  density: PropTypes.oneOf(['comfy', 'compact']),
  gutter: customPropTypes.itemShorthand,
  message: customPropTypes.itemShorthand
});
ChatItem.handledProps = Object.keys(ChatItem.propTypes);
ChatItem.create = (0, _utils.createShorthandFactory)({
  Component: ChatItem,
  mappedProp: 'message'
});
//# sourceMappingURL=ChatItem.js.map
