{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatClassName","chatSlotClassNames","item","Chat","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","density","design","items","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","ChatItem","create","defaultProps","chatBehavior","as","defaultChatDensity","propTypes","commonPropTypes","createCommon","content","PropTypes","arrayOf","customPropTypes","itemShorthand","oneOf","Object","keys","Item","Message","ChatMessage","MessageHeader","ChatMessageHeader","MessageDetails","ChatMessageDetails","MessageReadStatus","ChatMessageReadStatus","Component"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { FluentComponentStaticProps, ShorthandCollection } from '../../types';\nimport {\n  ChildrenComponentProps,\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { ChatDensity, ChatDensityContextProvider, defaultChatDensity } from './chatDensityContext';\nimport { ChatItem, ChatItemProps } from './ChatItem';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatMessageDetails } from './ChatMessageDetails';\nimport { ChatMessageHeader } from './ChatMessageHeader';\nimport { ChatMessageReadStatus } from './ChatMessageReadStatus';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Chat density. */\n  density?: ChatDensity;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = Pick<ChatProps, 'density'>;\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport const Chat: ComponentWithAs<'ul', ChatProps> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n    MessageDetails: typeof ChatMessageDetails;\n    MessageReadStatus: typeof ChatMessageReadStatus;\n    MessageHeader: typeof ChatMessageHeader;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, density, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToStyles: () => ({ density }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      <ChatDensityContextProvider value={density}>\n        {childrenExist(children)\n          ? children\n          : _.map(items, item =>\n              ChatItem.create(item, {\n                defaultProps: () => ({ className: chatSlotClassNames.item }),\n              }),\n            )}\n      </ChatDensityContextProvider>\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n  density: defaultChatDensity,\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n  density: PropTypes.oneOf<ChatDensity>(['comfy', 'compact']),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\nChat.MessageHeader = ChatMessageHeader;\nChat.MessageDetails = ChatMessageDetails;\nChat.MessageReadStatus = ChatMessageReadStatus;\n\nChat.create = createShorthandFactory({ Component: Chat });\n"],"file":"Chat.js"}