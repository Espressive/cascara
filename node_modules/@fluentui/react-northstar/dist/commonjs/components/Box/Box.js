"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.Box = exports.boxClassName = void 0;

var _reactBindings = require("@fluentui/react-bindings");

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var boxClassName = 'ui-box';
/**
 * A Box is a basic component, commonly used for slots in other Fluent UI components.
 * By default it just renders a `div`.
 */

exports.boxClassName = boxClassName;
var Box = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      children = props.children,
      content = props.content;
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    composeOptions: composeOptions,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var result = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, _utils.rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {
    className: classes.root,
    ref: ref
  }, unhandledProps)), (0, _utils.childrenExist)(children) ? children : content));
  setEnd();
  return result;
}, {
  className: boxClassName,
  displayName: 'Box',
  handledProps: ['accessibility', 'as', 'className', 'children', 'content', 'design', 'styles', 'variables']
});
exports.Box = Box;
Box.propTypes = _utils.commonPropTypes.createCommon();
Box.create = (0, _utils.createShorthandFactory)({
  Component: Box
});
//# sourceMappingURL=Box.js.map
