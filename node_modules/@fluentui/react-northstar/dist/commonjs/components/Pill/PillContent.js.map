{"version":3,"sources":["components/Pill/PillContent.tsx"],"names":["pillContentClassName","PillContent","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","styles","variables","size","actionable","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AASA;;AA8BO,IAAMA,oBAAoB,GAAG,gBAA7B;AAEP;AACA;AACA;;;;AACO,IAAMC,WACiC,GAAG,SADpCA,WACoC,CAAAC,KAAK,EAAI;AACxD,MAAMC,OAAO,GAAG,sCAAhB;;AADwD,sBAE3B,iCAAaF,WAAW,CAACG,WAAzB,EAAsCD,OAAO,CAACE,SAA9C,CAF2B;AAAA,MAEhDC,QAFgD,iBAEhDA,QAFgD;AAAA,MAEtCC,MAFsC,iBAEtCA,MAFsC;;AAGxDD,EAAAA,QAAQ;AAHgD,MAKhDE,aALgD,GAK6CN,KAL7C,CAKhDM,aALgD;AAAA,MAKjCC,QALiC,GAK6CP,KAL7C,CAKjCO,QALiC;AAAA,MAKvBC,SALuB,GAK6CR,KAL7C,CAKvBQ,SALuB;AAAA,MAKZC,OALY,GAK6CT,KAL7C,CAKZS,OALY;AAAA,MAKHC,MALG,GAK6CV,KAL7C,CAKHU,MALG;AAAA,MAKKC,MALL,GAK6CX,KAL7C,CAKKW,MALL;AAAA,MAKaC,SALb,GAK6CZ,KAL7C,CAKaY,SALb;AAAA,MAKwBC,IALxB,GAK6Cb,KAL7C,CAKwBa,IALxB;AAAA,MAK8BC,UAL9B,GAK6Cd,KAL7C,CAK8Bc,UAL9B;AAOxD,MAAMC,WAAW,GAAG,qCAAiBT,aAAjB,EAAgC;AAClDU,IAAAA,SAAS,EAAEjB,WAAW,CAACG,WAD2B;AAElDe,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAFqC,GAAhC,CAApB;;AAPwD,mBAYpC,8BAAkClB,WAAW,CAACG,WAA9C,EAA2D;AAC7EM,IAAAA,SAAS,EAAEV,oBADkE;AAE7EoB,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AAAEL,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,UAAU,EAAVA;AAAR,OAAP;AAAA,KAF2D;AAG7EK,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAAEX,QAAAA,SAAS,EAATA,SAAF;AAAaE,QAAAA,MAAM,EAANA,MAAb;AAAqBC,QAAAA,MAAM,EAANA,MAArB;AAA6BC,QAAAA,SAAS,EAATA;AAA7B,OAAP;AAAA,KAHqD;AAI7EK,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAJgE,GAA3D,CAZoC;AAAA,MAYhDG,OAZgD,cAYhDA,OAZgD;;AAmBxD,MAAMC,WAAW,GAAG,mCAAerB,KAAf,CAApB;AACA,MAAMsB,cAAc,GAAG,sCAAkBvB,WAAW,CAACwB,YAA9B,EAA4CvB,KAA5C,CAAvB;AAEA,MAAMwB,OAAO,gBACX,oBAAC,WAAD,EACMT,WAAW,CAAC,MAAD;AACbP,IAAAA,SAAS,EAAEY,OAAO,CAACK;AADN,KAEVC,wBAAiBC,aAAjB,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAACrB,QAAD;AAAf,GAA/B,CAFU,EAGVe,cAHU,EADjB,EAOG,0BAAcf,QAAd,IAA0BA,QAA1B,GAAqCE,OAPxC,CADF;AAYAJ,EAAAA,MAAM;AAEN,SAAOmB,OAAP;AACD,CAtCM;;;AAwCPzB,WAAW,CAACG,WAAZ,GAA0B,aAA1B;AAEAH,WAAW,CAAC8B,SAAZ,qBACKC,uBAAgBC,YAAhB,EADL;AAEEjB,EAAAA,UAAU,EAAEkB,SAAS,CAACC;AAFxB;AAKAlC,WAAW,CAACwB,YAAZ,GAA2BW,MAAM,CAACC,IAAP,CAAYpC,WAAW,CAAC8B,SAAxB,CAA3B;AAEA9B,WAAW,CAACqC,YAAZ,GAA2B;AACzBC,EAAAA,EAAE,EAAE;AADqB,CAA3B;AAIAtC,WAAW,CAACuC,eAAZ,GAA8B;AAC5BC,EAAAA,UAAU,EAAE;AADgB,CAA9B","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  SizeValue,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface PillContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /**\n   * A Pill can be sized.\n   */\n  size?: Extract<SizeValue, 'smaller' | 'small' | 'medium'>;\n\n  /**\n   * A Pill can be actionable.\n   */\n  actionable?: boolean;\n}\n\nexport type PillContentStylesProps = Required<Pick<PillContentProps, 'size' | 'actionable'>>;\nexport const pillContentClassName = 'ui-pillcontent';\n\n/**\n * A PillContent allows user to classify content.\n */\nexport const PillContent: ComponentWithAs<'span', PillContentProps> &\n  FluentComponentStaticProps<PillContentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(PillContent.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, styles, variables, size, actionable } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: PillContent.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<PillContentStylesProps>(PillContent.displayName, {\n    className: pillContentClassName,\n    mapPropsToStyles: () => ({ size, actionable }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(PillContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nPillContent.displayName = 'PillContent';\n\nPillContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  actionable: PropTypes.bool,\n};\n\nPillContent.handledProps = Object.keys(PillContent.propTypes) as any;\n\nPillContent.defaultProps = {\n  as: 'span',\n};\n\nPillContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"PillContent.js"}