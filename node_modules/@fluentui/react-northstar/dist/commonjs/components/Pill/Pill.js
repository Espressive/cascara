"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Pill = exports.pillClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _accessibility = require("@fluentui/accessibility");

var _utils = require("../../utils");

var _reactBindings = require("@fluentui/react-bindings");

var _PillContent = require("./PillContent");

var _PillAction = require("./PillAction");

var _pillContext = require("./pillContext");

var _PillImage = require("./PillImage");

var _PillIcon = require("./PillIcon");

var _reactIconsNorthstar = require("@fluentui/react-icons-northstar");

var pillClassName = 'ui-pill';
/**
 * THIS COMPONENT IS UNSTABLE
 * Pills should be used when representing an input, as a way to filter content, or to represent an attribute.
 */

exports.pillClassName = pillClassName;

var Pill = function Pill(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Pill.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var parentProps = (0, _pillContext.usePillContext)();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      appearance = props.appearance,
      size = props.size,
      rectangular = props.rectangular,
      children = props.children,
      content = props.content,
      disabled = props.disabled,
      action = props.action,
      actionable = props.actionable,
      image = props.image,
      icon = props.icon,
      selectable = props.selectable,
      selectedIndicator = props.selectedIndicator;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultSelected,
    value: props.selected,
    initialValue: false
  }),
      selected = _useAutoControlled[0],
      setSelected = _useAutoControlled[1];

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Pill.handledProps, props);

  var handleDismiss = function handleDismiss(e) {
    (0, _invoke2.default)(props, 'onDismiss', e, props);
  };

  var handleClick = function handleClick(e) {
    if (selectable) {
      setSelected(function (prevSelected) {
        return !prevSelected;
      });
      (0, _invoke2.default)(props, 'onSelectionChange', e, Object.assign({}, props, {
        selected: !selected
      }));
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility || parentProps.pillBehavior || _accessibility.pillBehavior, {
    debugName: Pill.displayName,
    actionHandlers: {
      performDismiss: handleDismiss,
      performClick: handleClick
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        actionable: actionable,
        selectable: selectable,
        selected: selected
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Pill.displayName, {
    className: pillClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        appearance: appearance,
        size: size,
        rectangular: rectangular,
        disabled: disabled,
        selectable: selectable,
        selected: selected
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var getSelectedIndicator = function getSelectedIndicator() {
    if (!!selectedIndicator) {
      return selectedIndicator;
    }

    if (!!image) {
      return /*#__PURE__*/React.createElement(_reactIconsNorthstar.CheckmarkCircleIcon, null);
    }

    return /*#__PURE__*/React.createElement(_reactIconsNorthstar.AcceptIcon, null);
  };

  var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, actionable && {
    onClick: handleClick
  }, unhandledProps)), selectable && selected && (0, _utils.createShorthand)(_PillIcon.PillIcon, getSelectedIndicator(), {
    defaultProps: function defaultProps() {
      return {
        size: size,
        selectable: selectable,
        image: image
      };
    }
  }), !selected && (0, _utils.createShorthand)(_PillImage.PillImage, image, {
    defaultProps: function defaultProps() {
      return {
        size: size
      };
    }
  }), !selected && (0, _utils.createShorthand)(_PillIcon.PillIcon, icon, {
    defaultProps: function defaultProps() {
      return {
        size: size
      };
    }
  }), (0, _utils.createShorthand)(_PillContent.PillContent, content || {}, {
    defaultProps: function defaultProps() {
      return {
        children: children,
        size: size,
        actionable: actionable
      };
    }
  }), actionable && (0, _utils.createShorthand)(_PillAction.PillAction, action || {}, {
    overrideProps: function overrideProps(prevProps) {
      return {
        onClick: function onClick(e) {
          (0, _invoke2.default)(prevProps, 'onClick', e);
          handleDismiss(e);
        }
      };
    }
  })));
  setEnd();
  return element;
};

exports.Pill = Pill;
Pill.defaultProps = {
  as: 'span'
};
Pill.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  content: customPropTypes.shorthandAllowingChildren,
  size: PropTypes.oneOf(['small', 'smaller', 'medium']),
  rectangular: PropTypes.bool,
  disabled: PropTypes.bool,
  appearance: PropTypes.oneOf(['filled', 'inverted', 'outline']),
  actionable: PropTypes.bool,
  action: customPropTypes.shorthandAllowingChildren,
  onDismiss: PropTypes.func,
  selectedIndicator: customPropTypes.shorthandAllowingChildren,
  selectable: PropTypes.bool,
  selected: PropTypes.bool,
  defaultSelected: PropTypes.bool,
  image: customPropTypes.shorthandAllowingChildren
});
Pill.displayName = 'Pill';
Pill.handledProps = Object.keys(Pill.propTypes);
//# sourceMappingURL=Pill.js.map
