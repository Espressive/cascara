"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Dialog = exports.dialogSlotClassNames = exports.dialogClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentNestingRegistry = require("@fluentui/react-component-nesting-registry");

var _reactComponentEventListener = require("@fluentui/react-component-event-listener");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _bodyScrollLock = require("body-scroll-lock");

var _utils = require("../../utils");

var _Button = require("../Button/Button");

var _ButtonGroup = require("../Button/ButtonGroup");

var _Box = require("../Box/Box");

var _Header = require("../Header/Header");

var _Portal = require("../Portal/Portal");

var _Flex = require("../Flex/Flex");

var _DialogFooter = require("./DialogFooter");

var dialogClassName = 'ui-dialog';
exports.dialogClassName = dialogClassName;
var dialogSlotClassNames = {
  header: dialogClassName + "__header",
  headerAction: dialogClassName + "__headerAction",
  content: dialogClassName + "__content",
  overlay: dialogClassName + "__overlay",
  footer: dialogClassName + "__footer"
};
exports.dialogSlotClassNames = dialogSlotClassNames;

/**
 * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.
 * Dialogs are purposefully interruptive, so they should be used sparingly.
 *
 * @accessibility
 * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.
 * @accessibilityIssues
 * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)
 * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)
 * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)
 * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)
 */
var Dialog = function Dialog(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Dialog.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      content = props.content,
      header = props.header,
      actions = props.actions,
      cancelButton = props.cancelButton,
      closeOnOutsideClick = props.closeOnOutsideClick,
      confirmButton = props.confirmButton,
      headerAction = props.headerAction,
      overlay = props.overlay,
      trapFocus = props.trapFocus,
      trigger = props.trigger,
      footer = props.footer,
      backdrop = props.backdrop,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Dialog.handledProps, props);
  var contentRef = React.useRef();
  var overlayRef = React.useRef();
  var triggerRef = React.useRef();
  var contentId = React.useRef();
  contentId.current = (0, _utils.getOrGenerateIdFromShorthand)('dialog-content-', content, contentId.current);
  var headerId = React.useRef();
  headerId.current = (0, _utils.getOrGenerateIdFromShorthand)('dialog-header-', header, headerId.current);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Dialog.displayName,
    actionHandlers: {
      closeAndFocusTrigger: function closeAndFocusTrigger(e) {
        handleDialogCancel(e);
        e.stopPropagation();
        (0, _invoke2.default)(triggerRef, 'current.focus');
      },
      close: function close(e) {
        return handleDialogCancel(e);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        headerId: headerId.current,
        contentId: contentId.current,
        trapFocus: trapFocus,
        trigger: trigger
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Dialog.displayName, {
    className: dialogClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        backdrop: backdrop
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultOpen,
    value: props.open,
    initialValue: false
  }),
      open = _useAutoControlled[0],
      setOpen = _useAutoControlled[1];

  React.useEffect(function () {
    var target = contentRef == null ? void 0 : contentRef.current;

    if (open) {
      (0, _bodyScrollLock.disableBodyScroll)(target);
    }

    return function () {
      if (open) {
        (0, _bodyScrollLock.enableBodyScroll)(target);
      }
    };
  }, [open]);

  var handleDialogCancel = function handleDialogCancel(e) {
    (0, _invoke2.default)(props, 'onCancel', e, Object.assign({}, props, {
      open: false
    }));
    setOpen(false);
  };

  var handleDialogConfirm = function handleDialogConfirm(e) {
    (0, _invoke2.default)(props, 'onConfirm', e, Object.assign({}, props, {
      open: false
    }));
    setOpen(false);
  };

  var handleDialogOpen = function handleDialogOpen(e) {
    (0, _invoke2.default)(props, 'onOpen', e, Object.assign({}, props, {
      open: true
    }));
    setOpen(true);
  };

  var handleCancelButtonOverrides = function handleCancelButtonOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, buttonProps) {
        (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);
        handleDialogCancel(e);
      }
    };
  };

  var handleConfirmButtonOverrides = function handleConfirmButtonOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, buttonProps) {
        (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);
        handleDialogConfirm(e);
      }
    };
  };

  var handleOverlayClick = function handleOverlayClick(e) {
    // Dialog has different conditions to close than Popup, so we don't need to iterate across all
    // refs
    var isInsideContentClick = (0, _utils.doesNodeContainClick)(contentRef.current, e, context.target);
    var isInsideOverlayClick = (0, _utils.doesNodeContainClick)(overlayRef.current, e, context.target);
    var shouldClose = !isInsideContentClick && isInsideOverlayClick;

    if (shouldClose) {
      handleDialogCancel(e);
    }
  };

  var handleDocumentKeydown = function handleDocumentKeydown(getRefs) {
    return function (e) {
      // if focus was lost from Dialog, for e.g. when click on Dialog's content
      // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus
      var lastOverlayRef = getRefs().pop();
      var isLastOpenedDialog = lastOverlayRef && lastOverlayRef.current === overlayRef.current;
      var targetIsBody = e.target.nodeName === 'BODY';

      if (targetIsBody && (0, _accessibility.getCode)(e) === _accessibility.keyboardKey.Escape && isLastOpenedDialog) {
        handleDialogCancel(e);
        (0, _invoke2.default)(triggerRef, 'current.focus');
      }
    };
  };

  var cancelElement = (0, _utils.createShorthand)(_Button.Button, cancelButton, {
    overrideProps: handleCancelButtonOverrides
  });
  var confirmElement = (0, _utils.createShorthand)(_Button.Button, confirmButton, {
    defaultProps: function defaultProps() {
      return {
        primary: true
      };
    },
    overrideProps: handleConfirmButtonOverrides
  });

  var dialogActions = (cancelElement || confirmElement) && _ButtonGroup.ButtonGroup.create(actions, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.actions
      };
    },
    overrideProps: {
      content: /*#__PURE__*/React.createElement(_Flex.Flex, {
        gap: "gap.smaller"
      }, cancelElement, confirmElement)
    }
  });

  var dialogContent = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: contentRef
  }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('popup', Object.assign({
    className: classes.root
  }, unhandledProps)), _Header.Header.create(header, {
    defaultProps: function defaultProps() {
      return getA11yProps('header', {
        as: 'h2',
        className: dialogSlotClassNames.header,
        styles: resolvedStyles.header
      });
    }
  }), (0, _utils.createShorthand)(_Button.Button, headerAction, {
    defaultProps: function defaultProps() {
      return getA11yProps('headerAction', {
        className: dialogSlotClassNames.headerAction,
        styles: resolvedStyles.headerAction,
        text: true,
        iconOnly: true
      });
    }
  }), _Box.Box.create(content, {
    defaultProps: function defaultProps() {
      return getA11yProps('content', {
        styles: resolvedStyles.content,
        className: dialogSlotClassNames.content
      });
    }
  }), _DialogFooter.DialogFooter.create(footer, {
    overrideProps: {
      content: dialogActions,
      className: dialogSlotClassNames.footer,
      styles: resolvedStyles.footer
    }
  })));
  var triggerAccessibility = {
    // refactor this when unstable_behaviorDefinition gets merged
    attributes: accessibility(props).attributes.trigger,
    keyHandlers: accessibility(props).keyActions.trigger
  };
  var element = /*#__PURE__*/React.createElement(_Portal.Portal, {
    onTriggerClick: handleDialogOpen,
    open: open,
    trapFocus: trapFocus,
    trigger: trigger,
    triggerAccessibility: triggerAccessibility,
    triggerRef: triggerRef
  }, /*#__PURE__*/React.createElement(_reactComponentNestingRegistry.Unstable_NestingAuto, null, function (getRefs, nestingRef) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
      innerRef: function innerRef(contentNode) {
        overlayRef.current = contentNode;
        nestingRef.current = contentNode;
      }
    }, _Box.Box.create(overlay, {
      defaultProps: function defaultProps() {
        return {
          className: dialogSlotClassNames.overlay,
          styles: resolvedStyles.overlay
        };
      },
      overrideProps: {
        content: dialogContent
      }
    })), closeOnOutsideClick && /*#__PURE__*/React.createElement(_reactComponentEventListener.EventListener, {
      listener: handleOverlayClick,
      target: context.target,
      type: "click",
      capture: true
    }), /*#__PURE__*/React.createElement(_reactComponentEventListener.EventListener, {
      listener: handleDocumentKeydown(getRefs),
      target: context.target,
      type: "keydown",
      capture: true
    }));
  }));
  setEnd();
  return element;
};

exports.Dialog = Dialog;
Dialog.displayName = 'Dialog';
Dialog.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  children: false,
  content: 'shorthand'
}), {
  actions: customPropTypes.itemShorthand,
  backdrop: PropTypes.bool,
  headerAction: customPropTypes.itemShorthand,
  cancelButton: customPropTypes.itemShorthand,
  closeOnOutsideClick: PropTypes.bool,
  confirmButton: customPropTypes.itemShorthand,
  defaultOpen: PropTypes.bool,
  header: customPropTypes.itemShorthand,
  onCancel: PropTypes.func,
  onConfirm: PropTypes.func,
  onOpen: PropTypes.func,
  open: PropTypes.bool,
  overlay: customPropTypes.itemShorthand,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  trigger: PropTypes.any
});
Dialog.defaultProps = {
  accessibility: _accessibility.dialogBehavior,
  actions: {},
  backdrop: true,
  closeOnOutsideClick: true,
  overlay: {},
  footer: {},
  trapFocus: true
};
Dialog.handledProps = Object.keys(Dialog.propTypes);
Dialog.Footer = _DialogFooter.DialogFooter;
Dialog.create = (0, _utils.createShorthandFactory)({
  Component: Dialog
});
//# sourceMappingURL=Dialog.js.map
