"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Portal = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentEventListener = require("@fluentui/react-component-event-listener");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _PortalInner = require("./PortalInner");

/**
 * (DEPRECATED) A Portal allows to render children outside of their parent.
 *
 * @deprecated Please use "Popup" or "Dialog" components instead.
 */
var Portal = function Portal(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Portal.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      content = props.content,
      trapFocus = props.trapFocus,
      trigger = props.trigger,
      triggerAccessibility = props.triggerAccessibility;
  var portalRef = React.useRef();
  var triggerRef = React.useRef();

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultOpen,
    value: props.open,
    initialValue: false
  }),
      open = _useAutoControlled[0],
      setOpen = _useAutoControlled[1];

  var renderPortal = function renderPortal() {
    var contentToRender = (0, _utils.childrenExist)(children) ? children : content;
    var focusTrapZoneProps = (0, _keys2.default)(trapFocus).length && trapFocus || {};
    return open && /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
      innerRef: portalRef
    }, /*#__PURE__*/React.createElement(_PortalInner.PortalInner, (0, _extends2.default)({
      onMount: handleMount,
      onUnmount: handleUnmount
    }, _utils.rtlTextContainer.getAttributes({
      forElements: [contentToRender]
    })), trapFocus ? /*#__PURE__*/React.createElement(_reactBindings.FocusTrapZone, focusTrapZoneProps, contentToRender) : contentToRender, /*#__PURE__*/React.createElement(_reactComponentEventListener.EventListener, {
      listener: handleDocumentClick,
      target: context.target,
      type: "click"
    })));
  };

  var renderTrigger = function renderTrigger() {
    return trigger && /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
      innerRef: handleTriggerRef
    }, /*#__PURE__*/React.cloneElement(trigger, Object.assign({
      onClick: handleTriggerClick
    }, triggerAccessibility.attributes, triggerAccessibility.keyHandlers)));
  };

  var handleMount = function handleMount() {
    (0, _invoke2.default)(props, 'onMount', props);
  };

  var handleUnmount = function handleUnmount() {
    (0, _invoke2.default)(props, 'onUnmount', props);
  };

  var handleTriggerRef = function handleTriggerRef(node) {
    triggerRef.current = node;
    (0, _reactComponentRef.handleRef)(props.triggerRef, node);
  };

  var handleTriggerClick = function handleTriggerClick(e) {
    (0, _invoke2.default)(props, 'onTriggerClick', e); // Call handler from parent component

    for (var _len = arguments.length, unhandledProps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      unhandledProps[_key - 1] = arguments[_key];
    }

    _invoke2.default.apply(void 0, [trigger, 'props.onClick', e].concat(unhandledProps)); // Call original event handler


    setOpen(function (isOpen) {
      return !isOpen;
    });
  };

  var handleDocumentClick = function handleDocumentClick(e) {
    if (!portalRef || // no portal
    (0, _utils.doesNodeContainClick)(triggerRef.current, e, context.target) || // event happened in trigger (delegate to trigger handlers)
    (0, _utils.doesNodeContainClick)(portalRef.current, e, context.target) // event happened in the portal
    ) {
        return; // ignore the click
      }

    (0, _invoke2.default)(props, 'onOutsideClick', e);
    setOpen(false);
  };

  var element = /*#__PURE__*/React.createElement(React.Fragment, null, renderPortal(), renderTrigger());
  setEnd();
  return element;
};

exports.Portal = Portal;
Portal.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  accessibility: false,
  as: false,
  className: false,
  styled: false
}), {
  defaultOpen: PropTypes.bool,
  onMount: PropTypes.func,
  onUnmount: PropTypes.func,
  open: PropTypes.bool,
  trigger: PropTypes.element,
  triggerRef: customPropTypes.ref,
  triggerAccessibility: PropTypes.object,
  onTriggerClick: PropTypes.func,
  onOutsideClick: PropTypes.func,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
});
Portal.handledProps = Object.keys(Portal.propTypes);
Portal.create = (0, _utils.createShorthandFactory)({
  Component: Portal
});
Portal.defaultProps = {
  triggerAccessibility: {}
};
//# sourceMappingURL=Portal.js.map
