{"version":3,"sources":["components/Portal/PortalInner.tsx"],"names":["PortalInner","props","context","React","useContext","PortalBoxContext","children","mountNode","target","document","body","container","ReactDOM","createPortal","propTypes","commonPropTypes","createCommon","accessibility","as","className","content","styled","customPropTypes","domNode","onMount","PropTypes","func","onUnmount"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAqBA;AACA;AACA;AACO,IAAMA,WAAuC,GAAG,SAA1CA,WAA0C,CAAAC,KAAK,EAAI;AAC9D,MAAMC,OAAO,GAAGC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAAhB;AAD8D,MAEtDC,QAFsD,GAE9BL,KAF8B,CAEtDK,QAFsD;AAAA,MAE5CC,SAF4C,GAE9BN,KAF8B,CAE5CM,SAF4C,EAI9D;AACA;;AACA,MAAMC,MAA0B,GAAG,0BAAcN,OAAO,IAAIO,QAAQ,CAACC,IAAlC,GAAyC,IAA5E;AACA,MAAMC,SAA6B,GAAGJ,SAAS,IAAIC,MAAnD;AACA,gDAA0B,YAAM;AAC9B,0BAASP,KAAT,EAAgB,SAAhB,EAA2BA,KAA3B;AAEA,WAAO;AAAA,aAAM,sBAASA,KAAT,EAAgB,WAAhB,EAA6BA,KAA7B,CAAN;AAAA,KAAP;AACD,GAJD,EAIG,EAJH;AAKA,SAAOU,SAAS,iBAAIC,QAAQ,CAACC,YAAT,CAAsBP,QAAtB,EAAgCK,SAAhC,CAApB;AACD,CAdM;;;AAgBPX,WAAW,CAACc,SAAZ,qBACKC,uBAAgBC,YAAhB,CAA6B;AAC9BC,EAAAA,aAAa,EAAE,KADe;AAE9BC,EAAAA,EAAE,EAAE,KAF0B;AAG9BC,EAAAA,SAAS,EAAE,KAHmB;AAI9BC,EAAAA,OAAO,EAAE,KAJqB;AAK9BC,EAAAA,MAAM,EAAE;AALsB,CAA7B,CADL;AAQEd,EAAAA,SAAS,EAAEe,eAAe,CAACC,OAR7B;AASEC,EAAAA,OAAO,EAAEC,SAAS,CAACC,IATrB;AAUEC,EAAAA,SAAS,EAAEF,SAAS,CAACC;AAVvB","sourcesContent":["import * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { isBrowser, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { PortalBoxContext } from '../Provider/usePortalBox';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\n\nexport interface PortalInnerProps extends ChildrenComponentProps {\n  /** Existing element the portal should be bound to. */\n  mountNode?: HTMLElement;\n\n  /**\n   * Called when the portal is mounted on the DOM\n   *\n   * @param data - All props.\n   */\n  onMount?: (props: PortalInnerProps) => void;\n\n  /**\n   * Called when the portal is unmounted from the DOM\n   *\n   * @param data - All props.\n   */\n  onUnmount?: (props: PortalInnerProps) => void;\n}\n\n/**\n * A PortalInner is a container for Portal's content.\n */\nexport const PortalInner: React.FC<PortalInnerProps> = props => {\n  const context = React.useContext(PortalBoxContext);\n  const { children, mountNode } = props;\n\n  // PortalInner should render elements even without a context\n  // eslint-disable-next-line\n  const target: HTMLElement | null = isBrowser() ? context || document.body : null;\n  const container: HTMLElement | null = mountNode || target;\n  useIsomorphicLayoutEffect(() => {\n    _.invoke(props, 'onMount', props);\n\n    return () => _.invoke(props, 'onUnmount', props);\n  }, []);\n  return container && ReactDOM.createPortal(children, container);\n};\n\nPortalInner.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    className: false,\n    content: false,\n    styled: false,\n  }),\n  mountNode: customPropTypes.domNode,\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func,\n};\n"],"file":"PortalInner.js"}