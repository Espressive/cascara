{"version":3,"sources":["components/Animation/Animation.tsx"],"names":["Animation","props","context","displayName","telemetry","setStart","setEnd","appear","children","className","mountOnEnter","timeout","visible","unmountOnExit","handleAnimationEvent","event","animationClasses","animationDuration","animationDelay","timeoutResult","unhandledProps","handledProps","isChildrenFunction","child","React","Children","only","element","classes","propTypes","commonPropTypes","createCommon","accessibility","as","content","PropTypes","oneOfType","func","name","string","delay","direction","duration","fillMode","iterationCount","keyframeParams","object","playState","timingFunction","bool","number","shape","enter","exit","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Object","keys"],"mappings":"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","sourcesContent":["import {\n  useUnhandledProps,\n  unstable_calculateAnimationTimeout as calculateAnimationTimeout,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Transition } from 'react-transition-group';\n\nimport { childrenExist, commonPropTypes, ChildrenComponentProps } from '../../utils';\nimport { ComponentEventHandler } from '../../types';\nimport { useAnimationStyles } from './useAnimationStyles';\n\nexport type AnimationChildrenProp = (props: { classes: string }) => React.ReactNode;\n\nexport interface AnimationProps extends ChildrenComponentProps<AnimationChildrenProp | React.ReactChild> {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  /** The name for the animation that should be applied, defined in the theme. */\n  name?: string;\n\n  /** Specifies a delay for the start of an animation. Negative values are\n   * also allowed. If using negative values, the animation will start as if it had already been\n   * playing for that amount of time.\n   */\n  delay?: string;\n\n  /** Specifies whether an animation should be played forwards, backwards or in alternate cycles.\n   * It can have the following values:\n   * - normal (default) - The animation is played as normal (forwards)\n   * - reverse - The animation is played in reverse direction (backwards)\n   * - alternate - The animation is played forwards first, then backwards\n   * - alternate-reverse - The animation is played backwards first, then forwards\n   */\n  direction?: string;\n\n  /** Specifies how long an animation should take to complete. */\n  duration?: string;\n\n  /**\n   * Specifies a style for the target element when the animation is not playing (i.e. before it starts, after it ends, or both).\n   * It can have the following values:\n   * - none (default) - Animation will not apply any styles to the element before or after it is executing\n   * - forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)\n   * - backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period\n   * - both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions\n   * */\n  fillMode?: string;\n\n  /** Specifies the number of times an animation should run. */\n  iterationCount?: string;\n\n  /** Custom parameters for the keyframe defined for the animation. */\n  keyframeParams?: object;\n\n  /**\n   * Specifies whether the animation is running or paused. It can have the following values:\n   * - paused - Specifies that the animation is paused\n   * - running - Default value. Specifies that the animation is running\n   * - initial - Sets this property to its default value.\n   * - inherit - Inherits this property from its parent element.\n   * */\n  playState?: string;\n\n  /**\n   * Specifies the speed curve of the animation. It can have the following values:\n   * - ease - Specifies an animation with a slow start, then fast, then end slowly (this is default)\n   * - linear - Specifies an animation with the same speed from start to end\n   * - ease-in - Specifies an animation with a slow start\n   * - ease-out - Specifies an animation with a slow end\n   * - ease-in-out - Specifies an animation with a slow start and end\n   * - cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function\n   */\n  timingFunction?: string;\n\n  /** Show the component; triggers the enter or exit animation. */\n  visible?: boolean;\n\n  /** Run the enter animation when the component mounts, if it is initially shown. */\n  appear?: boolean;\n\n  /** Wait until the first \"enter\" transition to mount the component (add it to the DOM). */\n  mountOnEnter?: boolean;\n\n  /** Unmount the component (remove it from the DOM) when it is not shown. */\n  unmountOnExit?: boolean;\n\n  /** The duration of the transition, in milliseconds. */\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n\n  /**\n   * Callback fired before the \"entering\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onEnter?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"entering\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onEntering?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"entered\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onEntered?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onExit?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onExiting?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onExited?: ComponentEventHandler<AnimationProps>;\n}\n\n/**\n * An Animation provides animation effects to rendered elements.\n */\nexport const Animation: React.FC<AnimationProps> & {\n  handledProps: (keyof AnimationProps)[];\n} = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Animation.displayName, context.telemetry);\n  setStart();\n\n  const { appear, children, className, mountOnEnter, timeout, visible, unmountOnExit } = props;\n\n  const handleAnimationEvent = (\n    event: 'onEnter' | 'onEntering' | 'onEntered' | 'onExit' | 'onExiting' | 'onExited',\n  ) => () => {\n    _.invoke(props, event, null, props);\n  };\n\n  const { className: animationClasses, animationDuration, animationDelay } = useAnimationStyles(\n    Animation.displayName,\n    props,\n  );\n  const timeoutResult = timeout || calculateAnimationTimeout(animationDuration, animationDelay) || 0;\n\n  const unhandledProps = useUnhandledProps(Animation.handledProps, props);\n\n  if (_.isNil(children)) {\n    setEnd();\n    return null;\n  }\n\n  const isChildrenFunction = typeof children === 'function';\n  const child = childrenExist(children) && !isChildrenFunction && (React.Children.only(children) as React.ReactElement);\n\n  const element = (\n    <Transition\n      in={visible}\n      appear={appear}\n      mountOnEnter={mountOnEnter}\n      unmountOnExit={unmountOnExit}\n      timeout={timeoutResult}\n      onEnter={handleAnimationEvent('onEnter')}\n      onEntering={handleAnimationEvent('onEntering')}\n      onEntered={handleAnimationEvent('onEntered')}\n      onExit={handleAnimationEvent('onExit')}\n      onExiting={handleAnimationEvent('onExiting')}\n      onExited={handleAnimationEvent('onExited')}\n      {...unhandledProps}\n      className={!isChildrenFunction ? cx(animationClasses, className, (child as any)?.props?.className) : ''}\n    >\n      {isChildrenFunction\n        ? () => (children as AnimationChildrenProp)({ classes: cx(animationClasses, className) })\n        : child}\n    </Transition>\n  );\n  setEnd();\n\n  return element;\n};\n\nAnimation.displayName = 'Animation';\n\nAnimation.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    content: false,\n    children: false,\n  }),\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  name: PropTypes.string,\n  delay: PropTypes.string,\n  direction: PropTypes.string,\n  duration: PropTypes.string,\n  fillMode: PropTypes.string,\n  iterationCount: PropTypes.string,\n  keyframeParams: PropTypes.object,\n  playState: PropTypes.string,\n  timingFunction: PropTypes.string,\n  visible: PropTypes.bool,\n  appear: PropTypes.bool,\n  mountOnEnter: PropTypes.bool,\n  unmountOnExit: PropTypes.bool,\n  timeout: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      appear: PropTypes.number,\n      enter: PropTypes.number,\n      exit: PropTypes.number,\n    }),\n  ]),\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func,\n};\nAnimation.handledProps = Object.keys(Animation.propTypes) as any;\n"],"file":"Animation.js"}