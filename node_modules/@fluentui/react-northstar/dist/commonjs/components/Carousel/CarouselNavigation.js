"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.CarouselNavigation = exports.carouselNavigationClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _utils = require("../../utils");

var _CarouselNavigationItem = require("./CarouselNavigationItem");

var carouselNavigationClassName = 'ui-carousel__navigation';
/**
 * A Carousel navigation helps switching between Carousel items.
 */

exports.carouselNavigationClassName = carouselNavigationClassName;

var CarouselNavigation = function CarouselNavigation(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(CarouselNavigation.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      variables = props.variables,
      children = props.children,
      className = props.className,
      design = props.design,
      activeIndex = props.activeIndex,
      iconOnly = props.iconOnly,
      items = props.items,
      primary = props.primary,
      secondary = props.secondary,
      vertical = props.vertical,
      thumbnails = props.thumbnails,
      styles = props.styles;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(CarouselNavigation.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: CarouselNavigation.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(CarouselNavigation.displayName, {
    className: carouselNavigationClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        activeIndex: activeIndex,
        iconOnly: iconOnly,
        primary: primary,
        vertical: vertical,
        thumbnails: thumbnails
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleItemOverrides = function handleItemOverrides(variables) {
    return function (predefinedProps) {
      return {
        onClick: function onClick(e, itemProps) {
          (0, _invoke2.default)(props, 'onItemClick', e, itemProps);
          (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);
        },
        variables: (0, _reactBindings.mergeVariablesOverrides)(variables, predefinedProps.variables)
      };
    };
  };

  var renderItems = function renderItems() {
    return (0, _map2.default)(items, function (item, index) {
      return _CarouselNavigationItem.CarouselNavigationItem.create(item, {
        defaultProps: function defaultProps() {
          return getA11yProps('item', {
            active: index === activeIndex,
            iconOnly: iconOnly,
            index: index,
            primary: primary,
            secondary: secondary,
            vertical: vertical,
            thumbnails: thumbnails
          });
        },
        overrideProps: handleItemOverrides(variables)
      });
    });
  };

  var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({}, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  })), (0, _utils.childrenExist)(children) ? children : renderItems()));
  setEnd();
  return element;
};

exports.CarouselNavigation = CarouselNavigation;
CarouselNavigation.displayName = 'CarouselNavigation';
CarouselNavigation.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  iconOnly: PropTypes.bool,
  thumbnails: PropTypes.bool,
  items: customPropTypes.collectionShorthand,
  onItemClick: PropTypes.func,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  vertical: PropTypes.bool
});
CarouselNavigation.defaultProps = {
  accessibility: _accessibility.tabListBehavior,
  as: 'ul'
};
CarouselNavigation.handledProps = Object.keys(CarouselNavigation.propTypes);
CarouselNavigation.create = (0, _utils.createShorthandFactory)({
  Component: CarouselNavigation,
  mappedArrayProp: 'items'
});
//# sourceMappingURL=CarouselNavigation.js.map
