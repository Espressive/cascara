{"version":3,"sources":["components/Carousel/CarouselItem.tsx"],"names":["carouselItemClassName","carouselItemSlotClassNames","itemPositionText","CarouselItem","props","context","displayName","telemetry","setStart","setEnd","unhandledProps","handledProps","accessibility","navigation","active","children","content","className","design","styles","variables","ElementType","getA11yProps","debugName","actionHandlers","arrowKeysNavigationStopPropagation","e","currentTarget","target","stopPropagation","mapPropsToBehavior","mapPropsToInlineStyles","rtl","classes","element","root","screenReaderContainerStyles","propTypes","commonPropTypes","createCommon","PropTypes","bool","string","defaultProps","carouselItemBehavior","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior, CarouselItemBehaviorProps, Accessibility } from '@fluentui/accessibility';\n\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  useAccessibility,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface CarouselItemSlotClassNames {\n  itemPositionText: string;\n}\n\nexport interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CarouselItemBehaviorProps>;\n\n  /** Whether or not the item is in view or not. */\n  active?: boolean;\n\n  /**\n   * Text to be added in the DOM that will specify item position. To be picked\n   * up by screen readers.\n   */\n  itemPositionText?: string;\n\n  /** Whether or not navigation exists in carousel. */\n  navigation?: boolean;\n}\n\nexport type CarouselItemStylesProps = never;\n\nexport const carouselItemClassName = 'ui-carousel__item';\nexport const carouselItemSlotClassNames: CarouselItemSlotClassNames = {\n  itemPositionText: `${carouselItemClassName}__itemPositionText`,\n};\n\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\nexport const CarouselItem: ComponentWithAs<'div', CarouselItemProps> &\n  FluentComponentStaticProps<CarouselItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CarouselItem.displayName, context.telemetry);\n  setStart();\n  const unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);\n  const {\n    accessibility,\n    navigation,\n    active,\n    children,\n    itemPositionText,\n    content,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const getA11yProps = useAccessibility<CarouselItemBehaviorProps>(accessibility, {\n    debugName: CarouselItem.displayName,\n    actionHandlers: {\n      arrowKeysNavigationStopPropagation: e => {\n        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n        if (e.currentTarget !== e.target) {\n          e.stopPropagation();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      navigation,\n      active,\n    }),\n  });\n\n  const { classes } = useStyles<CarouselItemStylesProps>(CarouselItem.displayName, {\n    className: carouselItemClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      <div className={carouselItemSlotClassNames.itemPositionText} style={screenReaderContainerStyles}>\n        {itemPositionText}\n      </div>\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nCarouselItem.displayName = 'CarouselItem';\n\nCarouselItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  navigation: PropTypes.bool,\n  itemPositionText: PropTypes.string,\n};\n\nCarouselItem.defaultProps = {\n  accessibility: carouselItemBehavior,\n};\n\nCarouselItem.handledProps = Object.keys(CarouselItem.propTypes) as any;\n\nCarouselItem.create = createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });\n"],"file":"CarouselItem.js"}