"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.CarouselItem = exports.carouselItemSlotClassNames = exports.carouselItemClassName = void 0;

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _accessibility = require("@fluentui/accessibility");

var _utils = require("../../utils");

var _accessibilityStyles = require("../../utils/accessibility/Styles/accessibilityStyles");

var _reactBindings = require("@fluentui/react-bindings");

var carouselItemClassName = 'ui-carousel__item';
exports.carouselItemClassName = carouselItemClassName;
var carouselItemSlotClassNames = {
  itemPositionText: carouselItemClassName + "__itemPositionText"
};
/**
 * A Carousel displays data organised as a gallery.
 *
 * @accessibility
 * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.
 */

exports.carouselItemSlotClassNames = carouselItemSlotClassNames;

var CarouselItem = function CarouselItem(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(CarouselItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(CarouselItem.handledProps, props);
  var accessibility = props.accessibility,
      navigation = props.navigation,
      active = props.active,
      children = props.children,
      itemPositionText = props.itemPositionText,
      content = props.content,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: CarouselItem.displayName,
    actionHandlers: {
      arrowKeysNavigationStopPropagation: function arrowKeysNavigationStopPropagation(e) {
        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel
        if (e.currentTarget !== e.target) {
          e.stopPropagation();
        }
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        navigation: navigation,
        active: active
      };
    }
  });

  var _useStyles = (0, _reactBindings.useStyles)(CarouselItem.displayName, {
    className: carouselItemClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), (0, _utils.childrenExist)(children) ? children : content, /*#__PURE__*/React.createElement("div", {
    className: carouselItemSlotClassNames.itemPositionText,
    style: _accessibilityStyles.screenReaderContainerStyles
  }, itemPositionText));
  setEnd();
  return element;
};

exports.CarouselItem = CarouselItem;
CarouselItem.displayName = 'CarouselItem';
CarouselItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  navigation: PropTypes.bool,
  itemPositionText: PropTypes.string
});
CarouselItem.defaultProps = {
  accessibility: _accessibility.carouselItemBehavior
};
CarouselItem.handledProps = Object.keys(CarouselItem.propTypes);
CarouselItem.create = (0, _utils.createShorthandFactory)({
  Component: CarouselItem,
  mappedProp: 'content'
});
//# sourceMappingURL=CarouselItem.js.map
