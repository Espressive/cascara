"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.CarouselNavigationItem = exports.carouselNavigationItemSlotClassNames = exports.carouselNavigationItemClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _accessibility = require("@fluentui/accessibility");

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _reactBindings = require("@fluentui/react-bindings");

var carouselNavigationItemClassName = 'ui-carousel__navigationitem';
exports.carouselNavigationItemClassName = carouselNavigationItemClassName;
var carouselNavigationItemSlotClassNames = {
  indicator: carouselNavigationItemClassName + "__indicator",
  content: carouselNavigationItemClassName + "__content"
};
/**
 * A CarouselItem is an actionable item within a Carousel.
 */

exports.carouselNavigationItemSlotClassNames = carouselNavigationItemSlotClassNames;

var CarouselNavigationItem = function CarouselNavigationItem(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(CarouselNavigationItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      thumbnails = props.thumbnails,
      vertical = props.vertical,
      active = props.active,
      content = props.content,
      iconOnly = props.iconOnly,
      primary = props.primary,
      indicator = props.indicator,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(CarouselNavigationItem.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: CarouselNavigationItem.displayName,
    actionHandlers: {
      performClick: function performClick(event) {
        return !event.defaultPrevented && handleClick(event);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        active: active
      };
    }
  });

  var _useStyles = (0, _reactBindings.useStyles)(CarouselNavigationItem.displayName, {
    className: carouselNavigationItemClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        thumbnails: thumbnails,
        vertical: vertical,
        active: active,
        hasContent: !!content,
        iconOnly: iconOnly,
        primary: primary,
        hasIndicator: !!indicator
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var renderContent = function renderContent() {
    return content ? _Box.Box.create(content, {
      defaultProps: function defaultProps() {
        return {
          as: 'span',
          className: carouselNavigationItemSlotClassNames.content,
          styles: resolvedStyles.content
        };
      }
    }) : _Box.Box.create(indicator, {
      defaultProps: function defaultProps() {
        return {
          className: carouselNavigationItemSlotClassNames.indicator,
          styles: resolvedStyles.indicator
        };
      }
    });
  };

  var handleClick = function handleClick(e) {
    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var handleBlur = function handleBlur(e) {
    (0, _invoke2.default)(props, 'onBlur', e, props);
  };

  var handleFocus = function handleFocus(e) {
    (0, _invoke2.default)(props, 'onFocus', e, props);
  };

  var element = /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({}, getA11yProps('root', Object.assign({
    className: classes.root,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onClick: handleClick
  }, unhandledProps)), _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  })), (0, _utils.childrenExist)(children) ? children : renderContent());
  setEnd();
  return element;
};

exports.CarouselNavigationItem = CarouselNavigationItem;
CarouselNavigationItem.displayName = 'CarouselNavigationItem';
CarouselNavigationItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  indicator: customPropTypes.shorthandAllowingChildren,
  iconOnly: PropTypes.bool,
  index: PropTypes.number,
  onClick: PropTypes.func,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  vertical: PropTypes.bool,
  thumbnails: PropTypes.bool
});
CarouselNavigationItem.handledProps = Object.keys(CarouselNavigationItem.propTypes);
CarouselNavigationItem.defaultProps = {
  accessibility: _accessibility.tabBehavior,
  as: 'li',
  indicator: {}
};
CarouselNavigationItem.create = (0, _utils.createShorthandFactory)({
  Component: CarouselNavigationItem,
  mappedArrayProp: 'content'
});
//# sourceMappingURL=CarouselNavigationItem.js.map
