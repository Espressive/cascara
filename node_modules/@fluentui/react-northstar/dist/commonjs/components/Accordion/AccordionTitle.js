"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.AccordionTitle = exports.accordionTitleSlotClassNames = exports.accordionTitleClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _reactBindings = require("@fluentui/react-bindings");

var accordionTitleClassName = 'ui-accordion__title';
exports.accordionTitleClassName = accordionTitleClassName;
var accordionTitleSlotClassNames = {
  contentWrapper: accordionTitleClassName + "__content-wrapper"
};
exports.accordionTitleSlotClassNames = accordionTitleSlotClassNames;

/**
 * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.
 */
var AccordionTitle = function AccordionTitle(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(AccordionTitle.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var contentRef = props.contentRef,
      children = props.children,
      content = props.content,
      indicator = props.indicator,
      contentWrapper = props.contentWrapper,
      disabled = props.disabled,
      accessibility = props.accessibility,
      canBeCollapsed = props.canBeCollapsed,
      as = props.as,
      active = props.active,
      accordionContentId = props.accordionContentId,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(AccordionTitle.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: AccordionTitle.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        e.preventDefault();
        e.stopPropagation();
        handleClick(e);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        hasContent: !!content,
        canBeCollapsed: canBeCollapsed,
        as: String(as),
        active: active,
        disabled: disabled,
        accordionContentId: accordionContentId
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(AccordionTitle.displayName, {
    className: accordionTitleClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        disabled: disabled,
        content: !!content,
        active: active
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var handleClick = function handleClick(e) {
    if (!disabled) {
      (0, _invoke2.default)(props, 'onClick', e, props);
    }
  };

  var handleFocus = function handleFocus(e) {
    e.stopPropagation();
    (0, _invoke2.default)(props, 'onFocus', e, props);
  };

  var handleWrapperOverrides = function handleWrapperOverrides(predefinedProps) {
    return {
      onFocus: function onFocus(e) {
        handleFocus(e);
        (0, _invoke2.default)(predefinedProps, 'onFocus', e, props);
      },
      onClick: function onClick(e) {
        handleClick(e);
        (0, _invoke2.default)(predefinedProps, 'onClick', e, props);
      }
    };
  };

  var contentWrapperElement = /*#__PURE__*/React.createElement(_reactComponentRef.Ref, {
    innerRef: contentRef
  }, _Box.Box.create(contentWrapper, {
    defaultProps: function defaultProps() {
      return getA11yProps('content', {
        className: accordionTitleSlotClassNames.contentWrapper,
        styles: resolvedStyles.contentWrapper
      });
    },
    overrideProps: function overrideProps(predefinedProps) {
      return Object.assign({
        children: /*#__PURE__*/React.createElement(React.Fragment, null, _Box.Box.create(indicator, {
          defaultProps: function defaultProps() {
            return getA11yProps('indicator', {
              styles: resolvedStyles.indicator
            });
          }
        }), _Box.Box.create(content, {
          defaultProps: function defaultProps() {
            return {
              styles: resolvedStyles.content
            };
          }
        }))
      }, handleWrapperOverrides(predefinedProps));
    }
  }));
  var element = /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({}, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps))), (0, _utils.childrenExist)(children) ? children : contentWrapperElement);
  setEnd();
  return element;
};

exports.AccordionTitle = AccordionTitle;
AccordionTitle.displayName = 'AccordionTitle';
AccordionTitle.shorthandConfig = {
  mappedProp: 'content'
};
AccordionTitle.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  accordionContentId: PropTypes.string,
  active: PropTypes.bool,
  contentRef: customPropTypes.ref,
  contentWrapper: customPropTypes.wrapperShorthand,
  canBeCollapsed: PropTypes.bool,
  disabled: PropTypes.bool,
  index: PropTypes.number,
  onClick: PropTypes.func,
  indicator: customPropTypes.shorthandAllowingChildren
});
AccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes);
AccordionTitle.defaultProps = {
  accessibility: _accessibility.accordionTitleBehavior,
  as: 'dt',
  contentRef: _noop2.default,
  indicator: {},
  contentWrapper: {}
};
AccordionTitle.create = (0, _utils.createShorthandFactory)({
  Component: AccordionTitle,
  mappedProp: 'content'
});
//# sourceMappingURL=AccordionTitle.js.map
