{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["accordionTitleClassName","accordionTitleSlotClassNames","contentWrapper","AccordionTitle","props","context","displayName","telemetry","setStart","setEnd","contentRef","children","content","indicator","disabled","accessibility","canBeCollapsed","as","active","accordionContentId","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","mapPropsToBehavior","hasContent","String","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleFocus","handleWrapperOverrides","predefinedProps","onFocus","onClick","contentWrapperElement","Box","create","defaultProps","overrideProps","element","rtlTextContainer","getAttributes","forElements","root","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","PropTypes","string","bool","customPropTypes","ref","wrapperShorthand","index","number","func","shorthandAllowingChildren","Object","keys","accordionTitleBehavior","Component"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, Accessibility, AccordionTitleBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionTitleBehaviorProps>;\n\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nexport const accordionTitleClassName = 'ui-accordion__title';\nexport const accordionTitleSlotClassNames: AccordionTitleSlotClassNames = {\n  contentWrapper: `${accordionTitleClassName}__content-wrapper`,\n};\n\nexport type AccordionTitleStylesProps = Required<Pick<AccordionTitleProps, 'disabled' | 'active'>> & {\n  content: boolean;\n};\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport const AccordionTitle: ComponentWithAs<'dt', AccordionTitleProps> &\n  FluentComponentStaticProps<AccordionTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AccordionTitle.displayName, context.telemetry);\n  setStart();\n  const {\n    contentRef,\n    children,\n    content,\n    indicator,\n    contentWrapper,\n    disabled,\n    accessibility,\n    canBeCollapsed,\n    as,\n    active,\n    accordionContentId,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n\n  const getA11yProps = useAccessibility<AccordionTitleBehaviorProps>(accessibility, {\n    debugName: AccordionTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasContent: !!content,\n      canBeCollapsed,\n      as: String(as),\n      active,\n      disabled,\n      accordionContentId,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<AccordionTitleStylesProps>(AccordionTitle.displayName, {\n    className: accordionTitleClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      content: !!content,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (!disabled) {\n      _.invoke(props, 'onClick', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleWrapperOverrides = predefinedProps => ({\n    onFocus: (e: React.FocusEvent) => {\n      handleFocus(e);\n      _.invoke(predefinedProps, 'onFocus', e, props);\n    },\n    onClick: (e: React.MouseEvent) => {\n      handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, props);\n    },\n  });\n\n  const contentWrapperElement = (\n    <Ref innerRef={contentRef}>\n      {Box.create(contentWrapper, {\n        defaultProps: () =>\n          getA11yProps('content', {\n            className: accordionTitleSlotClassNames.contentWrapper,\n            styles: resolvedStyles.contentWrapper,\n          }),\n        overrideProps: predefinedProps => ({\n          children: (\n            <>\n              {Box.create(indicator, {\n                defaultProps: () =>\n                  getA11yProps('indicator', {\n                    styles: resolvedStyles.indicator,\n                  }),\n              })}\n              {Box.create(content, {\n                defaultProps: () => ({\n                  styles: resolvedStyles.content,\n                }),\n              })}\n            </>\n          ),\n          ...handleWrapperOverrides(predefinedProps),\n        }),\n      })}\n    </Ref>\n  );\n\n  const element = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : contentWrapperElement}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nAccordionTitle.displayName = 'AccordionTitle';\n\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionTitle.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren,\n};\n\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes) as any;\n\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'dt',\n  contentRef: _.noop,\n  indicator: {},\n  contentWrapper: {},\n};\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n"],"file":"AccordionTitle.js"}