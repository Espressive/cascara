{"version":3,"sources":["components/Accordion/Accordion.tsx"],"names":["accordionClassName","accordionSlotClassNames","content","title","Accordion","props","context","displayName","telemetry","setStart","setEnd","expanded","exclusive","accessibility","children","className","design","styles","variables","panels","renderPanelContent","renderPanelTitle","alwaysActiveIndex","defaultValue","defaultActiveIndex","value","activeIndex","initialValue","setActiveIndex","actionHandlers","moveNext","e","preventDefault","focusHandler","movePrevious","moveFirst","moveLast","getA11yProps","debugName","rtl","mapPropsToInlineStyles","classes","React","useState","focusedIndex","setfocusedIndex","handleNavigationFocus","index","getNavigationItemsSize","length","unhandledProps","handledProps","ElementType","ContainerFocusHandler","itemRefs","useMemo","Array","from","createRef","useEffect","targetComponent","current","focus","defaultAccordionTitleId","defaultAccordionContentId","computeNewIndex","isIndexActionable","handleTitleOverrides","predefinedProps","onClick","titleProps","onFocus","isIndexActive","renderPanels","syncFocusedIndex","panel","active","canBeCollapsed","titleId","contentId","contentRef","push","AccordionTitle","defaultProps","id","accordionContentId","overrideProps","render","AccordionContent","accordionTitleId","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","customPropTypes","every","disallow","PropTypes","oneOfType","arrayOf","number","bool","onTitleClick","func","onActiveIndexChange","shape","itemShorthand","accordionBehavior","as","Object","keys","Title","Content","create","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;AASA;;AACA;;AAQA;;AACA;;AAyEO,IAAMA,kBAAkB,GAAG,cAA3B;;AACA,IAAMC,uBAAgD,GAAG;AAC9DC,EAAAA,OAAO,EAAKF,kBAAL,cADuD;AAE9DG,EAAAA,KAAK,EAAKH,kBAAL;AAFyD,CAAzD;AAKP;AACA;AACA;AACA;AACA;AACA;;;;AACO,IAAMI,SAIV,GAAG,SAJOA,SAIP,CAAAC,KAAK,EAAI;AACb,MAAMC,OAAO,GAAG,sCAAhB;;AADa,sBAEgB,iCAAaF,SAAS,CAACG,WAAvB,EAAoCD,OAAO,CAACE,SAA5C,CAFhB;AAAA,MAELC,QAFK,iBAELA,QAFK;AAAA,MAEKC,MAFL,iBAEKA,MAFL;;AAGbD,EAAAA,QAAQ;AAHK,MAKXE,QALW,GAgBTN,KAhBS,CAKXM,QALW;AAAA,MAMXC,SANW,GAgBTP,KAhBS,CAMXO,SANW;AAAA,MAOXC,aAPW,GAgBTR,KAhBS,CAOXQ,aAPW;AAAA,MAQXC,QARW,GAgBTT,KAhBS,CAQXS,QARW;AAAA,MASXC,SATW,GAgBTV,KAhBS,CASXU,SATW;AAAA,MAUXC,MAVW,GAgBTX,KAhBS,CAUXW,MAVW;AAAA,MAWXC,MAXW,GAgBTZ,KAhBS,CAWXY,MAXW;AAAA,MAYXC,SAZW,GAgBTb,KAhBS,CAYXa,SAZW;AAAA,MAaXC,MAbW,GAgBTd,KAhBS,CAaXc,MAbW;AAAA,MAcXC,kBAdW,GAgBTf,KAhBS,CAcXe,kBAdW;AAAA,MAeXC,gBAfW,GAgBThB,KAhBS,CAeXgB,gBAfW;AAiBb,MAAMC,iBAAiB,GAAGX,QAAQ,GAAG,CAAH,GAAO,CAAC,CAA1C;;AAjBa,2BAmByB,sCAAkB;AACtDY,IAAAA,YAAY,EAAElB,KAAK,CAACmB,kBADkC;AAEtDC,IAAAA,KAAK,EAAEpB,KAAK,CAACqB,WAFyC;AAGtDC,IAAAA,YAAY,EAAEf,SAAS,GAAGU,iBAAH,GAAuB,CAACA,iBAAD;AAHQ,GAAlB,CAnBzB;AAAA,MAmBNI,WAnBM;AAAA,MAmBOE,cAnBP;;AAyBb,MAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACbA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,YAAY,CAACH,QAAb;AACD,KAJoB;AAKrBI,IAAAA,YAAY,EAAE,sBAAAH,CAAC,EAAI;AACjBA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,YAAY,CAACC,YAAb;AACD,KARoB;AASrBC,IAAAA,SAAS,EAAE,mBAAAJ,CAAC,EAAI;AACdA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,YAAY,CAACE,SAAb;AACD,KAZoB;AAarBC,IAAAA,QAAQ,EAAE,kBAAAL,CAAC,EAAI;AACbA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,YAAY,CAACG,QAAb;AACD;AAhBoB,GAAvB;AAmBA,MAAMC,YAAY,GAAG,qCAAyCxB,aAAzC,EAAwD;AAC3EyB,IAAAA,SAAS,EAAElC,SAAS,CAACG,WADsD;AAE3EsB,IAAAA,cAAc,EAAdA,cAF2E;AAG3EU,IAAAA,GAAG,EAAEjC,OAAO,CAACiC;AAH8D,GAAxD,CAArB;;AA5Ca,mBAkDO,8BAAgCnC,SAAS,CAACG,WAA1C,EAAuD;AACzEQ,IAAAA,SAAS,EAAEf,kBAD8D;AAEzEwC,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BzB,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAFiD;AAQzEqB,IAAAA,GAAG,EAAEjC,OAAO,CAACiC;AAR4D,GAAvD,CAlDP;AAAA,MAkDLE,OAlDK,cAkDLA,OAlDK;;AAAA,wBA6D2BC,KAAK,CAACC,QAAN,EA7D3B;AAAA,MA6DNC,YA7DM;AAAA,MA6DQC,eA7DR;;AA+Db,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAmB;AAC/CF,IAAAA,eAAe,CAACE,KAAD,CAAf;AACD,GAFD;;AAIA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,WAAM3C,KAAK,CAACc,MAAN,CAAa8B,MAAnB;AAAA,GAA/B;;AACA,MAAMC,cAAc,GAAG,sCAAkB9C,SAAS,CAAC+C,YAA5B,EAA0C9C,KAA1C,CAAvB;AACA,MAAM+C,WAAW,GAAG,mCAAe/C,KAAf,CAApB;AAEA,MAAM4B,YAAmC,GAAG,IAAIoB,qCAAJ,CAC1CL,sBAD0C,EAE1CF,qBAF0C,EAG1C,IAH0C,CAA5C;AAMA,MAAMQ,QAAQ,GAAGZ,KAAK,CAACa,OAAN,CACf;AAAA,WAAMC,KAAK,CAACC,IAAN,CAAW;AAAER,MAAAA,MAAM,EAAE9B,MAAF,oBAAEA,MAAM,CAAE8B;AAAlB,KAAX,EAAuC;AAAA,0BAAMP,KAAK,CAACgB,SAAN,EAAN;AAAA,KAAvC,CAAN;AAAA,GADe,EAEf;AACA;AACA,GAACvC,MAAD,oBAACA,MAAM,CAAE8B,MAAT,CAJe,CAAjB;AAOAP,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpB,QAAMC,eAAe,GAAGN,QAAQ,CAACV,YAAD,CAAR,IAA0BU,QAAQ,CAACV,YAAD,CAAR,CAAuBiB,OAAzE;AACAD,IAAAA,eAAe,IAAIA,eAAe,CAACE,KAAhB,EAAnB;AACD,GAHD,EAGG,CAACR,QAAD,EAAWV,YAAX,CAHH;AAKA,MAAMmB,uBAAuB,GAAGrB,KAAK,CAACa,OAAN,CAAc;AAAA,WAAM,wBAAW,kBAAX,CAAN;AAAA,GAAd,EAAoD,EAApD,CAAhC;AACA,MAAMS,yBAAyB,GAAGtB,KAAK,CAACa,OAAN,CAAc;AAAA,WAAM,wBAAW,oBAAX,CAAN;AAAA,GAAd,EAAsD,EAAtD,CAAlC;;AAEA,MAAMU,eAAe,GAAG,SAAlBA,eAAkB,CAAClB,KAAD,EAAsC;AAC5D,QAAI,CAACmB,iBAAiB,CAACnB,KAAD,CAAtB,EAA+B;AAC7B,aAAOrB,WAAP;AACD;;AAED,QAAId,SAAJ,EAAe,OAAOmC,KAAK,KAAKrB,WAAV,GAAwB,CAAC,CAAzB,GAA6BqB,KAApC,CAL6C,CAM5D;;AACA,WAAO,wBAAWrB,WAAX,EAAoCqB,KAApC,IACH,uBAAUrB,WAAV,EAAmCqB,KAAnC,CADG,aAEErB,WAFF,GAE4BqB,KAF5B,EAAP;AAGD,GAVD;;AAYA,MAAMoB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,eAAD;AAAA,WAA2C;AACtEC,MAAAA,OAAO,EAAE,iBAACtC,CAAD,EAA0BuC,UAA1B,EAA8D;AAAA,YAC7DvB,KAD6D,GACnDuB,UADmD,CAC7DvB,KAD6D;AAErE,YAAMrB,WAAW,GAAGuC,eAAe,CAAClB,KAAD,CAAnC;AACAnB,QAAAA,cAAc,CAACF,WAAD,CAAd;AACAmB,QAAAA,eAAe,CAACE,KAAD,CAAf;AAEA,8BAAS1C,KAAT,EAAgB,qBAAhB,EAAuC0B,CAAvC,oBAA+C1B,KAA/C;AAAsDqB,UAAAA,WAAW,EAAXA;AAAtD;AACA,8BAAS0C,eAAT,EAA0B,SAA1B,EAAqCrC,CAArC,EAAwCuC,UAAxC;AACA,8BAASjE,KAAT,EAAgB,cAAhB,EAAgC0B,CAAhC,EAAmCuC,UAAnC;AACD,OAVqE;AAWtEC,MAAAA,OAAO,EAAE,iBAACxC,CAAD,EAA0BuC,UAA1B,EAA8D;AACrE,8BAASF,eAAT,EAA0B,SAA1B,EAAqCrC,CAArC,EAAwCuC,UAAxC;AACAzB,QAAAA,eAAe,CAACuB,eAAe,CAACrB,KAAjB,CAAf;AACD;AAdqE,KAA3C;AAAA,GAA7B;;AAiBA,MAAMyB,aAAa,GAAG,SAAhBA,aAAgB,CAACzB,KAAD,EAA4B;AAChD,WAAOnC,SAAS,GAAGc,WAAW,KAAKqB,KAAnB,GAA2B,wBAAWrB,WAAX,EAAoCqB,KAApC,CAA3C;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAMmB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACnB,KAAD,EAA4B;AACpD,QAAI,CAACyB,aAAa,CAACzB,KAAD,CAAlB,EAA2B;AACzB,aAAO,IAAP;AACD;;AAED,WAAO,CAACpC,QAAD,IAAc,CAACC,SAAD,IAAec,WAAD,CAA0BuB,MAA1B,GAAmC,CAAtE;AACD,GAND;;AAQA,MAAMwB,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAM3D,QAAe,GAAG,EAAxB;AACAmB,IAAAA,YAAY,CAACyC,gBAAb,CAA8B9B,YAA9B;AACA,wBAAOzB,MAAP,EAAe,UAACwD,KAAD,EAAQ5B,KAAR,EAAkB;AAAA,UACvB7C,OADuB,GACJyE,KADI,CACvBzE,OADuB;AAAA,UACdC,KADc,GACJwE,KADI,CACdxE,KADc;AAE/B,UAAMyE,MAAM,GAAGJ,aAAa,CAAC,CAACzB,KAAF,CAA5B;AACA,UAAM8B,cAAc,GAAGX,iBAAiB,CAAC,CAACnB,KAAF,CAAxC;AACA,UAAM+B,OAAO,GAAG3E,KAAK,CAAC,IAAD,CAAL,SAAkB4D,uBAAlB,GAA4ChB,KAA5D;AACA,UAAMgC,SAAS,GAAG7E,OAAO,CAAC,IAAD,CAAP,SAAoB8D,yBAApB,GAAgDjB,KAAlE;AACA,UAAMiC,UAAU,GAAG1B,QAAQ,CAACP,KAAD,CAA3B;AAEAjC,MAAAA,QAAQ,CAACmE,IAAT,CACE,4BAAgBC,8BAAhB,EAAgC/E,KAAhC,EAAuC;AACrCgF,QAAAA,YAAY,EAAE;AAAA,iBAAO;AACnBpE,YAAAA,SAAS,EAAEd,uBAAuB,CAACE,KADhB;AAEnByE,YAAAA,MAAM,EAANA,MAFmB;AAGnB7B,YAAAA,KAAK,EAAE,CAACA,KAHW;AAInBiC,YAAAA,UAAU,EAAVA,UAJmB;AAKnBH,YAAAA,cAAc,EAAdA,cALmB;AAMnBO,YAAAA,EAAE,EAAEN,OANe;AAOnBO,YAAAA,kBAAkB,EAAEN;AAPD,WAAP;AAAA,SADuB;AAUrCO,QAAAA,aAAa,EAAEnB,oBAVsB;AAWrCoB,QAAAA,MAAM,EAAElE;AAX6B,OAAvC,CADF;AAeAP,MAAAA,QAAQ,CAACmE,IAAT,CACE,4BAAgBO,kCAAhB,EAAkCtF,OAAlC,EAA2C;AACzCiF,QAAAA,YAAY,EAAE;AAAA,iBAAO;AACnBpE,YAAAA,SAAS,EAAEd,uBAAuB,CAACC,OADhB;AAEnB0E,YAAAA,MAAM,EAANA,MAFmB;AAGnBQ,YAAAA,EAAE,EAAEL,SAHe;AAInBU,YAAAA,gBAAgB,EAAEX;AAJC,WAAP;AAAA,SAD2B;AAOzCS,QAAAA,MAAM,EAAEnE;AAPiC,OAA3C,CADF;AAWD,KAlCD;AAmCA,WAAON,QAAP;AACD,GAvCD;;AAyCA,MAAM4E,OAAO,gBACX,oBAAC,WAAD,6BACMrD,YAAY,CAAC,MAAD;AACdtB,IAAAA,SAAS,EAAE0B,OAAO,CAACkD;AADL,KAEXzC,cAFW,EADlB,EAKM0C,wBAAiBC,aAAjB,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAAChF,QAAD;AAAf,GAA/B,CALN,GAOG,0BAAcA,QAAd,IAA0BA,QAA1B,GAAqC2D,YAAY,EAPpD,CADF;AAYA/D,EAAAA,MAAM;AAEN,SAAOgF,OAAP;AACD,CA1MM;;;AA4MPtF,SAAS,CAACG,WAAV,GAAwB,WAAxB;AAEAH,SAAS,CAAC2F,SAAV,qBACKC,uBAAgBC,YAAhB,CAA6B;AAC9B/F,EAAAA,OAAO,EAAE;AADqB,CAA7B,CADL;AAIEwB,EAAAA,WAAW,EAAEwE,eAAe,CAACC,KAAhB,CAAsB,CACjCD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CADiC,EAEjCC,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,OAAV,CAAkBF,SAAS,CAACG,MAA5B,CAAD,EAAsCH,SAAS,CAACG,MAAhD,CAApB,CAFiC,CAAtB,CAJf;AAQEhF,EAAAA,kBAAkB,EAAE0E,eAAe,CAACC,KAAhB,CAAsB,CACxCD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CADwC,EAExCC,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,OAAV,CAAkBF,SAAS,CAACG,MAA5B,CAAD,EAAsCH,SAAS,CAACG,MAAhD,CAApB,CAFwC,CAAtB,CARtB;AAYE5F,EAAAA,SAAS,EAAEyF,SAAS,CAACI,IAZvB;AAaE9F,EAAAA,QAAQ,EAAE0F,SAAS,CAACI,IAbtB;AAcEC,EAAAA,YAAY,EAAER,eAAe,CAACC,KAAhB,CAAsB,CAACD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CAAD,EAAyCC,SAAS,CAACM,IAAnD,CAAtB,CAdhB;AAeEC,EAAAA,mBAAmB,EAAEP,SAAS,CAACM,IAfjC;AAgBExF,EAAAA,MAAM,EAAE+E,eAAe,CAACC,KAAhB,CAAsB,CAC5BD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CAD4B,EAE5BC,SAAS,CAACE,OAAV,CACEF,SAAS,CAACQ,KAAV,CAAgB;AACd3G,IAAAA,OAAO,EAAEgG,eAAe,CAACY,aADX;AAEd3G,IAAAA,KAAK,EAAE+F,eAAe,CAACY;AAFT,GAAhB,CADF,CAF4B,CAAtB,CAhBV;AA0BEzF,EAAAA,gBAAgB,EAAEgF,SAAS,CAACM,IA1B9B;AA2BEvF,EAAAA,kBAAkB,EAAEiF,SAAS,CAACM;AA3BhC;AA8BAvG,SAAS,CAAC+E,YAAV,GAAyB;AACvBtE,EAAAA,aAAa,EAAEkG,gCADQ;AAEvBC,EAAAA,EAAE,EAAE;AAFmB,CAAzB;AAIA5G,SAAS,CAAC+C,YAAV,GAAyB8D,MAAM,CAACC,IAAP,CAAY9G,SAAS,CAAC2F,SAAtB,CAAzB;AACA3F,SAAS,CAAC+G,KAAV,GAAkBjC,8BAAlB;AACA9E,SAAS,CAACgH,OAAV,GAAoB5B,kCAApB;AACApF,SAAS,CAACiH,MAAV,GAAmB,mCAAuB;AACxCC,EAAAA,SAAS,EAAElH;AAD6B,CAAvB,CAAnB","sourcesContent":["import { Accessibility, accordionBehavior, AccordionBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport { AccordionTitle, AccordionTitleProps } from './AccordionTitle';\nimport { AccordionContent, AccordionContentProps } from './AccordionContent';\n\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  ShorthandRenderFunction,\n  FluentComponentStaticProps,\n} from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\nimport {\n  ComponentWithAs,\n  useAutoControlled,\n  useAccessibility,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  getElementType,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionSlotClassNames {\n  content: string;\n  title: string;\n}\n\nexport interface AccordionProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active panel. */\n  activeIndex?: number[] | number;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one panel to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** At least one panel should be expanded at any time. */\n  expanded?: boolean;\n\n  /**\n   * Called when the active index of the Accordion changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeIndex` reflecting the new state.\n   */\n  onActiveIndexChange?: ComponentEventHandler<AccordionProps>;\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onTitleClick?: ComponentEventHandler<AccordionProps>;\n\n  /** Shorthand array of props for Accordion. */\n  panels?: {\n    content: ShorthandValue<AccordionContentProps>;\n    title: ShorthandValue<AccordionTitleProps>;\n  }[];\n\n  /**\n   * A custom renderer for each Accordion's panel title.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelTitle?: ShorthandRenderFunction<AccordionTitleProps>;\n\n  /**\n   * A custom renderer for each Accordion's panel content.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelContent?: ShorthandRenderFunction<AccordionContentProps>;\n\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionBehaviorProps>;\n}\n\nexport type AccordionStylesProps = never;\nexport const accordionClassName = 'ui-accordion';\nexport const accordionSlotClassNames: AccordionSlotClassNames = {\n  content: `${accordionClassName}__content`,\n  title: `${accordionClassName}__title`,\n};\n\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\nexport const Accordion: ComponentWithAs<'dl', AccordionProps> &\n  FluentComponentStaticProps<AccordionProps> & {\n    Title: typeof AccordionTitle;\n    Content: typeof AccordionContent;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Accordion.displayName, context.telemetry);\n  setStart();\n  const {\n    expanded,\n    exclusive,\n    accessibility,\n    children,\n    className,\n    design,\n    styles,\n    variables,\n    panels,\n    renderPanelContent,\n    renderPanelTitle,\n  } = props;\n  const alwaysActiveIndex = expanded ? 0 : -1;\n\n  const [activeIndex, setActiveIndex] = useAutoControlled({\n    defaultValue: props.defaultActiveIndex,\n    value: props.activeIndex,\n    initialValue: exclusive ? alwaysActiveIndex : [alwaysActiveIndex],\n  });\n\n  const actionHandlers = {\n    moveNext: e => {\n      e.preventDefault();\n      focusHandler.moveNext();\n    },\n    movePrevious: e => {\n      e.preventDefault();\n      focusHandler.movePrevious();\n    },\n    moveFirst: e => {\n      e.preventDefault();\n      focusHandler.moveFirst();\n    },\n    moveLast: e => {\n      e.preventDefault();\n      focusHandler.moveLast();\n    },\n  };\n\n  const getA11yProps = useAccessibility<AccordionBehaviorProps>(accessibility, {\n    debugName: Accordion.displayName,\n    actionHandlers,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<AccordionStylesProps>(Accordion.displayName, {\n    className: accordionClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [focusedIndex, setfocusedIndex] = React.useState<number>();\n\n  const handleNavigationFocus = (index: number) => {\n    setfocusedIndex(index);\n  };\n\n  const getNavigationItemsSize = () => props.panels.length;\n  const unhandledProps = useUnhandledProps(Accordion.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const focusHandler: ContainerFocusHandler = new ContainerFocusHandler(\n    getNavigationItemsSize,\n    handleNavigationFocus,\n    true,\n  );\n\n  const itemRefs = React.useMemo<React.RefObject<HTMLElement>[]>(\n    () => Array.from({ length: panels?.length }, () => React.createRef()),\n    // As we are using \"panels.length\" it's fine to have dependency on them\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panels?.length],\n  );\n\n  React.useEffect(() => {\n    const targetComponent = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n    targetComponent && targetComponent.focus();\n  }, [itemRefs, focusedIndex]);\n\n  const defaultAccordionTitleId = React.useMemo(() => _.uniqueId('accordion-title-'), []);\n  const defaultAccordionContentId = React.useMemo(() => _.uniqueId('accordion-content-'), []);\n\n  const computeNewIndex = (index: number): number | number[] => {\n    if (!isIndexActionable(index)) {\n      return activeIndex;\n    }\n\n    if (exclusive) return index === activeIndex ? -1 : index;\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndex as number[], index)\n      ? _.without(activeIndex as number[], index)\n      : [...(activeIndex as number[]), index];\n  };\n\n  const handleTitleOverrides = (predefinedProps: AccordionTitleProps) => ({\n    onClick: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      const { index } = titleProps;\n      const activeIndex = computeNewIndex(index);\n      setActiveIndex(activeIndex);\n      setfocusedIndex(index);\n\n      _.invoke(props, 'onActiveIndexChange', e, { ...props, activeIndex });\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n      _.invoke(props, 'onTitleClick', e, titleProps);\n    },\n    onFocus: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, titleProps);\n      setfocusedIndex(predefinedProps.index);\n    },\n  });\n\n  const isIndexActive = (index: number): boolean => {\n    return exclusive ? activeIndex === index : _.includes(activeIndex as number[], index);\n  };\n\n  /**\n   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n   * when at least a panel needs to stay active. Will return false if expanded prop is true,\n   * index is active and either it's an exclusive accordion or if there are no other active\n   * panels open besides this one.\n   *\n   * @param index - The index of the panel.\n   * @returns If the panel can be set active/inactive.\n   */\n  const isIndexActionable = (index: number): boolean => {\n    if (!isIndexActive(index)) {\n      return true;\n    }\n\n    return !expanded || (!exclusive && (activeIndex as number[]).length > 1);\n  };\n\n  const renderPanels = () => {\n    const children: any[] = [];\n    focusHandler.syncFocusedIndex(focusedIndex);\n    _.each(panels, (panel, index) => {\n      const { content, title } = panel;\n      const active = isIndexActive(+index);\n      const canBeCollapsed = isIndexActionable(+index);\n      const titleId = title['id'] || `${defaultAccordionTitleId}${index}`;\n      const contentId = content['id'] || `${defaultAccordionContentId}${index}`;\n      const contentRef = itemRefs[index];\n\n      children.push(\n        createShorthand(AccordionTitle, title, {\n          defaultProps: () => ({\n            className: accordionSlotClassNames.title,\n            active,\n            index: +index,\n            contentRef,\n            canBeCollapsed,\n            id: titleId,\n            accordionContentId: contentId,\n          }),\n          overrideProps: handleTitleOverrides,\n          render: renderPanelTitle,\n        }),\n      );\n      children.push(\n        createShorthand(AccordionContent, content, {\n          defaultProps: () => ({\n            className: accordionSlotClassNames.content,\n            active,\n            id: contentId,\n            accordionTitleId: titleId,\n          }),\n          render: renderPanelContent,\n        }),\n      );\n    });\n    return children;\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? children : renderPanels()}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAccordion.displayName = 'Accordion';\n\nAccordion.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  defaultActiveIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  exclusive: PropTypes.bool,\n  expanded: PropTypes.bool,\n  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n  onActiveIndexChange: PropTypes.func,\n  panels: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        content: customPropTypes.itemShorthand,\n        title: customPropTypes.itemShorthand,\n      }),\n    ),\n  ]),\n\n  renderPanelTitle: PropTypes.func,\n  renderPanelContent: PropTypes.func,\n};\n\nAccordion.defaultProps = {\n  accessibility: accordionBehavior,\n  as: 'dl',\n};\nAccordion.handledProps = Object.keys(Accordion.propTypes) as any;\nAccordion.Title = AccordionTitle;\nAccordion.Content = AccordionContent;\nAccordion.create = createShorthandFactory({\n  Component: Accordion,\n});\n"],"file":"Accordion.js"}