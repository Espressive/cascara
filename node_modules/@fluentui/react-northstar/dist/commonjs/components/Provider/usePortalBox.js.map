{"version":3,"sources":["components/Provider/usePortalBox.ts"],"names":["PortalBoxContext","React","createContext","usePortalBox","options","className","rtl","target","element","useMemo","newElement","createElement","body","appendChild","setAttribute","removeAttribute","removeChild"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAQO,IAAMA,gBAAgB,gBAAGC,KAAK,CAACC,aAAN,CAAoC,IAApC,CAAzB;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAkD;AAAA,MACpEC,SADoE,GACzCD,OADyC,CACpEC,SADoE;AAAA,MACzDC,GADyD,GACzCF,OADyC,CACzDE,GADyD;AAAA,MACpDC,MADoD,GACzCH,OADyC,CACpDG,MADoD;AAG5E,MAAMC,OAA8B,GAAGP,KAAK,CAACQ,OAAN,CAAc,YAAM;AACzD,QAAMC,UAAU,GAAG,8BAAcH,MAAM,CAACI,aAAP,CAAqB,KAArB,CAAd,GAA4C,IAA/D,CADyD,CAGzD;AACA;;AACA,QAAID,UAAJ,EAAgB;AACdH,MAAAA,MAAM,CAACK,IAAP,CAAYC,WAAZ,CAAwBH,UAAxB;AACD;;AAED,WAAOA,UAAP;AACD,GAVsC,EAUpC,CAACH,MAAD,CAVoC,CAAvC;AAYA,gDAA0B,YAAM;AAC9B,QAAIC,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACM,YAAR,CAAqB,OAArB,EAA8BT,SAA9B;;AAEA,UAAIC,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACM,YAAR,CAAqB,KAArB,EAA4B,KAA5B;AACD,OAFD,MAEO;AACLN,QAAAA,OAAO,CAACO,eAAR,CAAwB,KAAxB;AACD;AACF;AACF,GAVD,EAUG,CAACV,SAAD,EAAYG,OAAZ,EAAqBF,GAArB,CAVH,EAf4E,CA2B5E;;AACA,gDAA0B,YAAM;AAC9B,WAAO,YAAM;AACX,UAAIE,OAAJ,EAAa;AACXD,QAAAA,MAAM,CAACK,IAAP,CAAYI,WAAZ,CAAwBR,OAAxB;AACD;AACF,KAJD;AAKD,GAND,EAMG,CAACA,OAAD,EAAUD,MAAV,CANH;AAQA,SAAOC,OAAP;AACD,CArCM","sourcesContent":["import { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { isBrowser } from '../../utils/isBrowser';\n\ntype UsePortalBoxOptions = {\n  className: string;\n  rtl: boolean;\n  target: Document;\n};\n\nexport const PortalBoxContext = React.createContext<HTMLDivElement>(null);\n\nexport const usePortalBox = (options: UsePortalBoxOptions): HTMLDivElement => {\n  const { className, rtl, target } = options;\n\n  const element: HTMLDivElement | null = React.useMemo(() => {\n    const newElement = isBrowser() ? target.createElement('div') : null;\n\n    // Element should be attached to DOM during render to make elements that will be rendered\n    // inside accessible in effects of child components\n    if (newElement) {\n      target.body.appendChild(newElement);\n    }\n\n    return newElement;\n  }, [target]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (element) {\n      element.setAttribute('class', className);\n\n      if (rtl) {\n        element.setAttribute('dir', 'rtl');\n      } else {\n        element.removeAttribute('dir');\n      }\n    }\n  }, [className, element, rtl]);\n\n  // This effect should always last as it removes element from HTML tree\n  useIsomorphicLayoutEffect(() => {\n    return () => {\n      if (element) {\n        target.body.removeChild(element);\n      }\n    };\n  }, [element, target]);\n\n  return element;\n};\n"],"file":"usePortalBox.js"}