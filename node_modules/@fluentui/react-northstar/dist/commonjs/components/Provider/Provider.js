"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Provider = exports.providerClassName = void 0;

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isBoolean2 = _interopRequireDefault(require("lodash/isBoolean"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _reactBindings = require("@fluentui/react-bindings");

var _styles = require("@fluentui/styles");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _mergeProviderContexts = require("../../utils/mergeProviderContexts");

var _ProviderConsumer = require("./ProviderConsumer");

var _usePortalBox = require("./usePortalBox");

var renderFontFaces = function renderFontFaces(renderer, theme) {
  if (!theme.fontFaces) {
    return;
  }

  var renderFontObject = function renderFontObject(font) {
    if (!(0, _isPlainObject2.default)(font)) {
      throw new Error("fontFaces must be objects, got: " + typeof font);
    }

    renderer.renderFont(font);
  };

  theme.fontFaces.forEach(function (font) {
    renderFontObject(font);
  });
};

var renderStaticStyles = function renderStaticStyles(renderer, theme, siteVariables) {
  if (!theme.staticStyles) {
    return;
  }

  var renderObject = function renderObject(object) {
    (0, _forEach2.default)(object, function (style, selector) {
      renderer.renderGlobal(style, selector);
    });
  };

  theme.staticStyles.forEach(function (staticStyle) {
    if (typeof staticStyle === 'string') {
      renderer.renderGlobal(staticStyle);
    } else if ((0, _isPlainObject2.default)(staticStyle)) {
      renderObject(staticStyle);
    } else if ((0, _isFunction2.default)(staticStyle)) {
      var preparedSiteVariables = (0, _styles.mergeSiteVariables)(siteVariables);
      renderObject(staticStyle(preparedSiteVariables));
    } else {
      throw new Error("staticStyles array must contain CSS strings, style objects, or style functions, got: " + typeof staticStyle);
    }
  });
};

var providerClassName = 'ui-provider';
/**
 * The Provider passes the CSS-in-JS renderer, theme styles and other settings to Fluent UI components.
 */

exports.providerClassName = providerClassName;

var Provider = function Provider(props) {
  var children = props.children,
      className = props.className,
      design = props.design,
      overwrite = props.overwrite,
      styles = props.styles,
      variables = props.variables,
      telemetryRef = props.telemetryRef;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Provider.handledProps, props);
  var telemetry = React.useMemo(function () {
    if (!telemetryRef) {
      return undefined;
    }

    if (!telemetryRef.current) {
      telemetryRef.current = new _reactBindings.Telemetry();
    }

    return telemetryRef.current;
  }, [telemetryRef]);
  var consumedContext = (0, _reactBindings.useFluentContext)();
  var incomingContext = overwrite ? _reactBindings.defaultContextValue : consumedContext;
  var createRenderer = React.useContext(_reactBindings.RendererContext); // Memoization of `inputContext` & `outgoingContext` is required to avoid useless notifications of components that
  // consume `useFluentContext()` on each render
  // @see https://reactjs.org/docs/context.html#caveats

  var inputContext = React.useMemo(function () {
    return {
      disableAnimations: props.disableAnimations,
      performance: props.performance,
      rtl: props.rtl,
      target: props.target,
      telemetry: telemetry,
      theme: props.theme
    };
  }, [props.disableAnimations, props.performance, props.rtl, props.target, telemetry, props.theme]);
  var outgoingContext = React.useMemo(function () {
    return (0, _mergeProviderContexts.mergeProviderContexts)(createRenderer, incomingContext, inputContext);
  }, [createRenderer, incomingContext, inputContext]);
  var rtlProps = {}; // only add dir attribute for top level provider or when direction changes from parent to child

  if (consumedContext.rtl !== outgoingContext.rtl && (0, _isBoolean2.default)(outgoingContext.rtl)) {
    rtlProps.dir = outgoingContext.rtl ? 'rtl' : 'ltr';
  }

  var _unstable_getStyles = (0, _reactBindings.unstable_getStyles)({
    allDisplayNames: [Provider.displayName],
    className: providerClassName,
    primaryDisplayName: Provider.displayName,
    componentProps: {},
    inlineStylesProps: {
      className: className,
      design: design,
      styles: styles,
      variables: variables
    },
    disableAnimations: outgoingContext.disableAnimations,
    performance: outgoingContext.performance,
    renderer: outgoingContext.renderer,
    rtl: outgoingContext.rtl,
    theme: outgoingContext.theme,
    saveDebug: _noop2.default,
    telemetry: undefined
  }),
      classes = _unstable_getStyles.classes;

  var element = (0, _usePortalBox.usePortalBox)({
    className: classes.root,
    target: outgoingContext.target,
    rtl: outgoingContext.rtl
  });
  (0, _reactBindings.useIsomorphicLayoutEffect)(function () {
    renderFontFaces(outgoingContext.renderer, props.theme);
    renderStaticStyles(outgoingContext.renderer, props.theme, outgoingContext.theme.siteVariables);

    if (props.target) {
      (0, _utils.setUpWhatInput)(props.target);
    }

    outgoingContext.renderer.registerUsage();
    return function () {
      if (props.target) {
        (0, _utils.tryCleanupWhatInput)(props.target);
      }

      outgoingContext.renderer.unregisterUsage();
    };
  }, []); // do not spread anything - React.Fragment can only have `key` and `children` props

  var elementProps = ElementType === React.Fragment ? {} : Object.assign({
    className: classes.root
  }, rtlProps, unhandledProps);
  var RenderProvider = outgoingContext.renderer.Provider;
  return /*#__PURE__*/React.createElement(RenderProvider, null, /*#__PURE__*/React.createElement(_reactBindings.Unstable_FluentContextProvider, {
    value: outgoingContext
  }, /*#__PURE__*/React.createElement(_usePortalBox.PortalBoxContext.Provider, {
    value: element
  }, /*#__PURE__*/React.createElement(ElementType, elementProps, children))));
};

exports.Provider = Provider;
Provider.displayName = 'Provider';
Provider.defaultProps = {
  theme: {}
};
Provider.propTypes = {
  as: PropTypes.elementType,
  design: PropTypes.object,
  variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
  styles: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
  theme: PropTypes.shape({
    siteVariables: PropTypes.object,
    componentVariables: PropTypes.object,
    componentStyles: PropTypes.objectOf(PropTypes.any),
    fontFaces: PropTypes.arrayOf(PropTypes.exact({
      name: PropTypes.string.isRequired,
      paths: PropTypes.arrayOf(PropTypes.string),
      props: PropTypes.shape({
        fontStretch: PropTypes.string,
        fontStyle: PropTypes.string,
        fontVariant: PropTypes.string,
        fontWeight: PropTypes.number,
        localAlias: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
        unicodeRange: PropTypes.string
      })
    })),
    staticStyles: PropTypes.array,
    animations: PropTypes.objectOf(PropTypes.any)
  }),
  rtl: PropTypes.bool,
  disableAnimations: PropTypes.bool,
  // Heads Up!
  // Keep in sync with packages/react-bindings/src/styles/types.ts
  performance: PropTypes.shape({
    enableSanitizeCssPlugin: PropTypes.bool,
    enableStylesCaching: PropTypes.bool,
    enableVariablesCaching: PropTypes.bool
  }),
  children: PropTypes.node.isRequired,
  overwrite: PropTypes.bool,
  target: PropTypes.object,
  telemetryRef: PropTypes.object
};
Provider.handledProps = Object.keys(Provider.propTypes);
Provider.Consumer = _ProviderConsumer.ProviderConsumer;
//# sourceMappingURL=Provider.js.map
