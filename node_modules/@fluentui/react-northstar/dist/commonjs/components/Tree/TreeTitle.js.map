{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["treeTitleClassName","treeTitleSlotClassNames","indicator","TreeTitle","props","context","displayName","telemetry","setStart","setEnd","React","useContext","TreeContext","focusItemById","toggleItemActive","toggleItemSelect","accessibility","id","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","selectionIndicator","disabled","selected","selectable","expanded","indeterminate","getA11Props","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","focusParent","parent","mapPropsToBehavior","rtl","mapPropsToStyles","showIndicator","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","selectionIndicatorOverrideProps","predefinedProps","onClick","selectIndicator","Box","create","defaultProps","as","overrideProps","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","string","bool","number","func","customPropTypes","shorthandAllowingChildren","treeTitleBehavior","Object","keys","Component","mappedProp"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AASA;;AAEA;;AAEA;;AACA;;AAEA;;AAWA;;AA8DO,IAAMA,kBAAkB,GAAG,gBAA3B;;AAEA,IAAMC,uBAAuB,GAAG;AACrCC,EAAAA,SAAS,EAAKF,kBAAL;AAD4B,CAAhC;AAIP;AACA;AACA;;;;AACO,IAAMG,SAA4F,GAAG,SAA/FA,SAA+F,CAAAC,KAAK,EAAI;AACnH,MAAMC,OAAO,GAAG,sCAAhB;;AADmH,sBAEtF,iCAAaF,SAAS,CAACG,WAAvB,EAAoCD,OAAO,CAACE,SAA5C,CAFsF;AAAA,MAE3GC,QAF2G,iBAE3GA,QAF2G;AAAA,MAEjGC,MAFiG,iBAEjGA,MAFiG;;AAGnHD,EAAAA,QAAQ;;AAH2G,0BAIrDE,KAAK,CAACC,UAAN,CAAiBC,oBAAjB,CAJqD;AAAA,MAI3GC,aAJ2G,qBAI3GA,aAJ2G;AAAA,MAI5FC,gBAJ4F,qBAI5FA,gBAJ4F;AAAA,MAI1EC,gBAJ0E,qBAI1EA,gBAJ0E;;AAAA,MAMjHC,aANiH,GAwB/GZ,KAxB+G,CAMjHY,aANiH;AAAA,MAOjHC,EAPiH,GAwB/Gb,KAxB+G,CAOjHa,EAPiH;AAAA,MAQjHC,QARiH,GAwB/Gd,KAxB+G,CAQjHc,QARiH;AAAA,MASjHC,SATiH,GAwB/Gf,KAxB+G,CASjHe,SATiH;AAAA,MAUjHC,OAViH,GAwB/GhB,KAxB+G,CAUjHgB,OAViH;AAAA,MAWjHC,MAXiH,GAwB/GjB,KAxB+G,CAWjHiB,MAXiH;AAAA,MAYjHC,UAZiH,GAwB/GlB,KAxB+G,CAYjHkB,UAZiH;AAAA,MAajHC,KAbiH,GAwB/GnB,KAxB+G,CAajHmB,KAbiH;AAAA,MAcjHC,KAdiH,GAwB/GpB,KAxB+G,CAcjHoB,KAdiH;AAAA,MAejHC,MAfiH,GAwB/GrB,KAxB+G,CAejHqB,MAfiH;AAAA,MAgBjHC,QAhBiH,GAwB/GtB,KAxB+G,CAgBjHsB,QAhBiH;AAAA,MAiBjHC,SAjBiH,GAwB/GvB,KAxB+G,CAiBjHuB,SAjBiH;AAAA,MAkBjHC,kBAlBiH,GAwB/GxB,KAxB+G,CAkBjHwB,kBAlBiH;AAAA,MAmBjHC,QAnBiH,GAwB/GzB,KAxB+G,CAmBjHyB,QAnBiH;AAAA,MAoBjHC,QApBiH,GAwB/G1B,KAxB+G,CAoBjH0B,QApBiH;AAAA,MAqBjHC,UArBiH,GAwB/G3B,KAxB+G,CAqBjH2B,UArBiH;AAAA,MAsBjHC,QAtBiH,GAwB/G5B,KAxB+G,CAsBjH4B,QAtBiH;AAAA,MAuBjHC,aAvBiH,GAwB/G7B,KAxB+G,CAuBjH6B,aAvBiH;AA0BnH,MAAMC,WAAW,GAAG,qCAAyClB,aAAzC,EAAwD;AAC1EmB,IAAAA,SAAS,EAAEhC,SAAS,CAACG,WADqD;AAE1E8B,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAE,sBAAAC,CAAC,EAAI;AACjB,YAAI,0CAA8BA,CAA9B,CAAJ,EAAsC;AACpCA,UAAAA,CAAC,CAACC,cAAF;AACD;;AACDD,QAAAA,CAAC,CAACE,eAAF;AACAC,QAAAA,WAAW,CAACH,CAAD,CAAX;AACD,OAPa;AAQdI,MAAAA,WAAW,EAAE,qBAAAJ,CAAC,EAAI;AAChB;AACAzB,QAAAA,aAAa,CAACT,KAAK,CAACuC,MAAP,CAAb;AACD;AAXa,KAF0D;AAe1EC,IAAAA,kBAAkB,EAAE;AAAA,aAAO;AACzBtB,QAAAA,UAAU,EAAVA,UADyB;AAEzBC,QAAAA,KAAK,EAALA,KAFyB;AAGzBC,QAAAA,KAAK,EAALA,KAHyB;AAIzBE,QAAAA,QAAQ,EAARA,QAJyB;AAKzBI,QAAAA,QAAQ,EAARA,QALyB;AAMzBC,QAAAA,UAAU,EAAVA;AANyB,OAAP;AAAA,KAfsD;AAuB1Ec,IAAAA,GAAG,EAAExC,OAAO,CAACwC;AAvB6D,GAAxD,CAApB;;AA1BmH,mBAoDvE,8BAAgC1C,SAAS,CAACG,WAA1C,EAAuD;AACjGa,IAAAA,SAAS,EAAEnB,kBADsF;AAEjG8C,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBhB,QAAAA,QAAQ,EAARA,QADuB;AAEvBD,QAAAA,QAAQ,EAARA,QAFuB;AAGvBE,QAAAA,UAAU,EAAVA,UAHuB;AAIvBE,QAAAA,aAAa,EAAbA,aAJuB;AAKvBV,QAAAA,KAAK,EAALA,KALuB;AAMvBwB,QAAAA,aAAa,EAAEhB,UAAU,KAAMT,UAAU,IAAIU,QAAf,IAA4BF,QAA5B,IAAwCG,aAA7C;AANF,OAAP;AAAA,KAF+E;AAUjGe,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7B7B,QAAAA,SAAS,EAATA,SAD6B;AAE7BE,QAAAA,MAAM,EAANA,MAF6B;AAG7BI,QAAAA,MAAM,EAANA,MAH6B;AAI7BE,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAVyE;AAgBjGkB,IAAAA,GAAG,EAAExC,OAAO,CAACwC;AAhBoF,GAAvD,CApDuE;AAAA,MAoD3GI,OApD2G,cAoD3GA,OApD2G;AAAA,MAoD1FC,cApD0F,cAoDlGzB,MApDkG;;AAuEnH,MAAM0B,WAAW,GAAG,mCAAe/C,KAAf,CAApB;AACA,MAAMgD,cAAc,GAAG,sCAAkBjD,SAAS,CAACkD,YAA5B,EAA0CjD,KAA1C,CAAvB;;AAEA,MAAMqC,WAAW,GAAG,SAAdA,WAAc,CAAAH,CAAC,EAAI;AACvB,QAAIhB,UAAJ,EAAgB;AACdR,MAAAA,gBAAgB,CAACwB,CAAD,EAAIrB,EAAJ,CAAhB;AACD,KAFD,MAEO;AACLF,MAAAA,gBAAgB,CAACuB,CAAD,EAAIrB,EAAJ,CAAhB;AACD;;AACD,0BAASb,KAAT,EAAgB,SAAhB,EAA2BkC,CAA3B,EAA8BlC,KAA9B;AACD,GAPD;;AASA,MAAMkD,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACC,eAAD;AAAA,WAAgC;AACtEC,MAAAA,OAAO,EAAE,iBAAClB,CAAD,EAA6B;AACpCA,QAAAA,CAAC,CAACE,eAAF,GADoC,CACf;;AACrB,YAAIT,UAAJ,EAAgB;AACdhB,UAAAA,gBAAgB,CAACuB,CAAD,EAAIrB,EAAJ,CAAhB;AACD;;AAED,8BAASsC,eAAT,EAA0B,SAA1B,EAAqCjB,CAArC;AACD;AARqE,KAAhC;AAAA,GAAxC;;AAWA,MAAMmB,eAAe,GAAGC,SAAIC,MAAJ,CAAW/B,kBAAX,EAA+B;AACrDgC,IAAAA,YAAY,EAAE;AAAA;AACZC,QAAAA,EAAE,EAAE,MADQ;AAEZ/B,QAAAA,QAAQ,EAARA;AAFY,SAGTI,WAAW,CAAC,WAAD,EAAc;AAC1Bf,QAAAA,SAAS,EAAElB,uBAAuB,CAACC,SADT;AAE1BuB,QAAAA,MAAM,EAAEyB,cAAc,CAACtB;AAFG,OAAd,CAHF;AAAA,KADuC;AASrDkC,IAAAA,aAAa,EAAER;AATsC,GAA/B,CAAxB;;AAYA,MAAMS,OAAO,gBACX,oBAAC,WAAD,EACM7B,WAAW,CAAC,MAAD;AACbf,IAAAA,SAAS,EAAE8B,OAAO,CAACe,IADN;AAEbR,IAAAA,OAAO,EAAEf,WAFI;AAGbX,IAAAA,QAAQ,EAARA;AAHa,KAIVmC,wBAAiBC,aAAjB,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAACjD,QAAD,EAAWE,OAAX;AAAf,GAA/B,CAJU,EAKVgC,cALU,EADjB,EASG,0BAAclC,QAAd,IAA0BA,QAA1B,GAAqCE,OATxC,EAUGqC,eAVH,CADF;AAcAhD,EAAAA,MAAM;AAEN,SAAOsD,OAAP;AACD,CA3HM;;;AA6HP5D,SAAS,CAACG,WAAV,GAAwB,WAAxB;AAEAH,SAAS,CAACiE,SAAV,qBACKC,uBAAgBC,YAAhB,EADL;AAEErD,EAAAA,EAAE,EAAEsD,SAAS,CAACC,MAFhB;AAGElD,EAAAA,UAAU,EAAEiD,SAAS,CAACE,IAHxB;AAIEjD,EAAAA,KAAK,EAAE+C,SAAS,CAACG,MAJnB;AAKEnD,EAAAA,KAAK,EAAEgD,SAAS,CAACG,MALnB;AAMElB,EAAAA,OAAO,EAAEe,SAAS,CAACI,IANrB;AAOE3C,EAAAA,QAAQ,EAAEuC,SAAS,CAACE,IAPtB;AAQE3C,EAAAA,QAAQ,EAAEyC,SAAS,CAACE,IARtB;AASE1C,EAAAA,UAAU,EAAEwC,SAAS,CAACE,IATxB;AAUE/C,EAAAA,QAAQ,EAAE6C,SAAS,CAACG,MAVtB;AAWE9C,EAAAA,kBAAkB,EAAEgD,eAAe,CAACC,yBAXtC;AAYE5C,EAAAA,aAAa,EAAEsC,SAAS,CAACE,IAZ3B;AAaE9B,EAAAA,MAAM,EAAE4B,SAAS,CAACC;AAbpB;AAeArE,SAAS,CAACyD,YAAV,GAAyB;AACvBC,EAAAA,EAAE,EAAE,GADmB;AAEvBjC,EAAAA,kBAAkB,EAAE,EAFG;AAGvBZ,EAAAA,aAAa,EAAE8D;AAHQ,CAAzB;AAKA3E,SAAS,CAACkD,YAAV,GAAyB0B,MAAM,CAACC,IAAP,CAAY7E,SAAS,CAACiE,SAAtB,CAAzB;AAEAjE,SAAS,CAACwD,MAAV,GAAmB,mCAAuB;AACxCsB,EAAAA,SAAS,EAAE9E,SAD6B;AAExC+E,EAAAA,UAAU,EAAE;AAF4B,CAAvB,CAAnB","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Box, BoxProps } from '../Box/Box';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n  shouldPreventDefaultOnKeyDown,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { TreeContext } from './context';\n\nexport interface TreeTitleSlotClassNames {\n  indicator: string;\n}\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Internal usage only -  Id needed to identify this item inside the Tree, passed down from TreeItem */\n  id?: string;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** A selection indicator can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** Whether or not tree title is selectable. */\n  selectable?: boolean;\n\n  /** For selectable parents define if all nested children are checked */\n  indeterminate?: boolean;\n\n  /** The id of the parent tree title, if any. */\n  parent?: string;\n}\n\nexport type TreeTitleStylesProps = Pick<\n  TreeTitleProps,\n  'selected' | 'selectable' | 'disabled' | 'indeterminate' | 'level'\n> & {\n  showIndicator: boolean;\n};\n\nexport const treeTitleClassName = 'ui-tree__title';\n\nexport const treeTitleSlotClassNames = {\n  indicator: `${treeTitleClassName}__selection-indicator`,\n};\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport const TreeTitle: ComponentWithAs<'a', TreeTitleProps> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n  const { focusItemById, toggleItemActive, toggleItemSelect } = React.useContext(TreeContext);\n  const {\n    accessibility,\n    id,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n    selectionIndicator,\n    disabled,\n    selected,\n    selectable,\n    expanded,\n    indeterminate,\n  } = props;\n\n  const getA11Props = useAccessibility<TreeTitleBehaviorProps>(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        if (shouldPreventDefaultOnKeyDown(e)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n        handleClick(e);\n      },\n      focusParent: e => {\n        // allow bubbling up to parent treeItem\n        focusItemById(props.parent);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n      selected,\n      selectable,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: treeTitleClassName,\n    mapPropsToStyles: () => ({\n      selected,\n      disabled,\n      selectable,\n      indeterminate,\n      level,\n      showIndicator: selectable && ((hasSubtree && expanded) || selected || indeterminate),\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n\n  const handleClick = e => {\n    if (hasSubtree) {\n      toggleItemActive(e, id);\n    } else {\n      toggleItemSelect(e, id);\n    }\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const selectionIndicatorOverrideProps = (predefinedProps: BoxProps) => ({\n    onClick: (e: React.SyntheticEvent) => {\n      e.stopPropagation(); // otherwise onClick on title will also be executed\n      if (selectable) {\n        toggleItemSelect(e, id);\n      }\n\n      _.invoke(predefinedProps, 'onClick', e);\n    },\n  });\n\n  const selectIndicator = Box.create(selectionIndicator, {\n    defaultProps: () => ({\n      as: 'span',\n      selected,\n      ...getA11Props('indicator', {\n        className: treeTitleSlotClassNames.indicator,\n        styles: resolvedStyles.selectionIndicator,\n      }),\n    }),\n    overrideProps: selectionIndicatorOverrideProps,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      {selectIndicator}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  id: PropTypes.string,\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  treeSize: PropTypes.number,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  indeterminate: PropTypes.bool,\n  parent: PropTypes.string,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  selectionIndicator: {},\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n"],"file":"TreeTitle.js"}