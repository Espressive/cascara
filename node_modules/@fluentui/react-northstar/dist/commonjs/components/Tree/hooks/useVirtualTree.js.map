{"version":3,"sources":["components/Tree/hooks/useVirtualTree.ts"],"names":["useVirtualTree","props","baseTree","baseRegisterItemRef","registerItemRef","baseExpandSiblings","expandSiblings","getItemById","getItemRef","visibleItemIds","listRef","React","useRef","focusIdRef","focusItemById","useCallback","id","itemRef","current","focusIndex","indexOf","scrollToItem","hasSubtree","focus","firstElementChild","node","e","useLayoutEffect","searchByFirstChar","startIndex","endIndex","char","itemToString","item","content","i","itemFirstChar","trim","charAt","toLowerCase","getToFocusIDByFirstCharacter","idToStartSearch","starIndex","length","toFocusIndex","key"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useTree, UseTreeResult, UseTreeOptions } from './useTree';\nimport { ShorthandValue } from '../../../types';\nimport { TreeItemProps } from '../TreeItem';\n\nexport interface UseVirtualTreeOptions extends Omit<UseTreeOptions, 'selectedItemIds' | 'defaultSelectedItemIds'> {\n  /**\n   * A function that converts an item to string. Used for keyboard navigation based on the first letter of an item's text content\n   */\n  itemToString?: (item: ShorthandValue<TreeItemProps>) => string;\n}\n\nexport interface UseVirtualTreeResult extends UseTreeResult {\n  /** ref to be assigned to react-window VariableSizeList/FixedSizeList component */\n  listRef: React.MutableRefObject<any>;\n}\n\n// export our own interface that is similar to react-window VariableSizeList,\n//  to avoid dependency to react-window\nexport interface VariableSizeListRef extends React.Component<any> {\n  scrollTo(scrollOffset: number): void;\n  scrollToItem(index: number, align?: 'auto' | 'smart' | 'center' | 'end' | 'start'): void;\n\n  resetAfterIndex(index: number, shouldForceUpdate?: boolean): void;\n}\n\nexport function useVirtualTree(props: UseVirtualTreeOptions): UseVirtualTreeResult {\n  const baseTree = useTree(props);\n  const {\n    registerItemRef: baseRegisterItemRef,\n    expandSiblings: baseExpandSiblings,\n    getItemById,\n    getItemRef,\n    visibleItemIds,\n  } = baseTree;\n\n  const listRef = React.useRef<VariableSizeListRef>();\n  const focusIdRef = React.useRef<string>();\n\n  const focusItemById = React.useCallback(\n    (id: string) => {\n      const itemRef = getItemRef(id);\n\n      // item is not mounted yet\n      if (itemRef == null) {\n        // set focusIdRef so item can be focused on mount; then scroll to item\n        focusIdRef.current = id;\n        const focusIndex = visibleItemIds.indexOf(focusIdRef.current);\n        if (focusIndex >= 0) {\n          listRef.current?.scrollToItem(focusIndex, 'center');\n        }\n        return;\n      }\n\n      // item is mounted, set focus\n      if (getItemById(id)?.hasSubtree) {\n        itemRef.focus();\n      } else {\n        // when tree item is leaf, need to focus on the inner treeTitle\n        (itemRef.firstElementChild as HTMLElement)?.focus();\n      }\n    },\n    [getItemById, getItemRef, visibleItemIds],\n  );\n\n  const registerItemRef = React.useCallback(\n    (id: string, node: HTMLElement) => {\n      baseRegisterItemRef(id, node);\n      if (node && focusIdRef.current === id) {\n        // focus on this tree item\n        if (getItemById(id)?.hasSubtree) {\n          node.focus();\n        } else {\n          // when node is leaf, need to focus on the inner treeTitle\n          (node.firstElementChild as HTMLElement)?.focus();\n        }\n        focusIdRef.current = null;\n      }\n    },\n    [baseRegisterItemRef, getItemById],\n  );\n\n  const expandSiblings = React.useCallback(\n    (e: React.KeyboardEvent, id: string) => {\n      baseExpandSiblings(e, id);\n      focusIdRef.current = id;\n    },\n    [baseExpandSiblings],\n  );\n\n  React.useLayoutEffect(() => {\n    /**\n     * Reason for scroll in useLayoutEffect:\n     * Without useLayoutEffect, scrolling works for focus parent and focus first child, but it is problematic for expanding sibings.\n     * When focus parent/child, the number of items (itemCount) in the virtual list does not change. But when sibling expand, itemCount could change.\n     * When siblings are expanded:\n     *  without useLayoutEffect, react window uses the itemCount before siblings are expanded, causing it to compute wrong scroll offset.\n     *  with useLayoutEffect, the scrolling happens after the new itemCount passed into list as props. Therefore the computed scroll offset is correct.\n     */\n    if (focusIdRef.current != null && getItemRef(focusIdRef.current) == null) {\n      const focusIndex = visibleItemIds.indexOf(focusIdRef.current);\n      if (focusIndex >= 0) {\n        listRef.current?.scrollToItem(focusIndex, 'center');\n      }\n    }\n  }, [getItemRef, visibleItemIds]);\n\n  const searchByFirstChar = React.useCallback(\n    (startIndex: number, endIndex: number, char: string) => {\n      const itemToString = props.itemToString || (item => (item as any).content || '');\n      for (let i = startIndex; i < endIndex; ++i) {\n        const itemFirstChar = itemToString(getItemById(visibleItemIds[i]).item)?.trim()?.charAt(0)?.toLowerCase();\n        if (itemFirstChar === char.toLowerCase()) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    [getItemById, props.itemToString, visibleItemIds],\n  );\n\n  const getToFocusIDByFirstCharacter = React.useCallback(\n    (e: React.KeyboardEvent, idToStartSearch: string) => {\n      // Get start index for search\n      let starIndex = visibleItemIds.indexOf(idToStartSearch) + 1;\n      if (starIndex === visibleItemIds.length) {\n        starIndex = 0;\n      }\n\n      // Check following nodes in tree\n      let toFocusIndex = searchByFirstChar(starIndex, visibleItemIds.length, e.key);\n      // If not found in following nodes, check from beginning\n      if (toFocusIndex === -1) {\n        toFocusIndex = searchByFirstChar(0, starIndex - 1, e.key);\n      }\n\n      if (toFocusIndex === -1) {\n        return idToStartSearch;\n      }\n\n      return visibleItemIds[toFocusIndex];\n    },\n    [searchByFirstChar, visibleItemIds],\n  );\n\n  return {\n    ...baseTree,\n    registerItemRef,\n    focusItemById,\n    expandSiblings,\n    getToFocusIDByFirstCharacter,\n    listRef,\n  };\n}\n"],"file":"useVirtualTree.js"}