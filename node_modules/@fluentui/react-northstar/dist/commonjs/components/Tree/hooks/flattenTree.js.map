{"version":3,"sources":["components/Tree/hooks/flattenTree.ts"],"names":["SECRET_ROOT_ID","flattenTree","items","activeItemIds","selectedItemIds","flatTree","index","level","expanded","treeSize","hasSubtree","flattenSubTree","parent","isParentVisible","visibleItemIds","selectedChildrenNum","selectableChildrenNum","itemsInLeaf","length","selectedNum","selectableNum","forEach","item","indexAmongSiblings","id","childrenItems","selectable","indexOf","undefined","selected","push","childrenIds"],"mappings":";;;;AAsDA;AACA;AACA;AACA,IAAMA,cAAc,GAAG,0BAAvB;AAEA;AACA;AACA;;AACO,SAASC,WAAT,CACLC,KADK,EAELC,aAFK,EAGLC,eAHK,EAI6C;AAAA;;AAClD,MAAMC,QAAQ,8BACXL,cADW,IACM;AAChBM,IAAAA,KAAK,EAAE,CADS;AAEhBC,IAAAA,KAAK,EAAE,CAFS;AAGhBC,IAAAA,QAAQ,EAAE,IAHM;AAIhBC,IAAAA,QAAQ,EAAE,CAJM;AAKhBC,IAAAA,UAAU,EAAE;AALI,GADN,YAAd,CADkD,CAWlD;;AACA,SAAOC,cAAc,CAACT,KAAD,EAAQ,CAAR,EAAWF,cAAX,EAA2BK,QAA3B,EAAqC,IAArC,EAA2CF,aAA3C,EAA0D,EAA1D,EAA8DC,eAA9D,CAArB;AACD;;AAED,SAASO,cAAT,CACET,KADF,EAEEK,KAFF,EAGEK,MAHF,EAIEP,QAJF,EAKEQ,eALF,EAMEV,aANF,EAOEW,cAPF,EAQEV,eARF,EASgH;AAAA,MAP9GG,KAO8G;AAP9GA,IAAAA,KAO8G,GAP9F,CAO8F;AAAA;;AAAA,MAJ9GM,eAI8G;AAJ9GA,IAAAA,eAI8G,GAJnF,IAImF;AAAA;;AAC9G,MAAI,CAACX,KAAL,EAAY;AACV,WAAO;AAAEG,MAAAA,QAAQ,EAARA,QAAF;AAAYS,MAAAA,cAAc,EAAdA,cAAZ;AAA4BC,MAAAA,mBAAmB,EAAE,CAAjD;AAAoDC,MAAAA,qBAAqB,EAAE;AAA3E,KAAP;AACD;;AAED,MAAMC,WAAW,GAAGf,KAAK,CAACgB,MAA1B;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,aAAa,GAAG,CAApB;AAEAlB,EAAAA,KAAK,CAACmB,OAAN,CAAc,UAACC,IAAD,EAAOC,kBAAP,EAA8B;AAAA,QAClCC,EADkC,GACLF,IADK,CAClCE,EADkC;AAAA,QACvBC,aADuB,GACLH,IADK,CAC9BpB,KAD8B;AAE1C,QAAMwB,UAAU,GAAGJ,IAAI,CAACI,UAAL,KAAoB,KAAvC,CAF0C,CAEI;;AAC9C,QAAMhB,UAAU,GAAGe,aAAa,GAAG,CAAC,CAACA,aAAa,CAACP,MAAnB,GAA4B,KAA5D;AACA,QAAMV,QAAQ,GAAGE,UAAU,IAAIP,aAAa,CAACwB,OAAd,CAAsBH,EAAtB,MAA8B,CAAC,CAA9D;AAEAnB,IAAAA,QAAQ,CAACmB,EAAD,CAAR,GAAe;AACbF,MAAAA,IAAI,EAAJA,IADa;AAEbhB,MAAAA,KAAK,EAAEiB,kBAAkB,GAAG,CAFf;AAEkB;AAC/BhB,MAAAA,KAAK,EAALA,KAHa;AAIbC,MAAAA,QAAQ,EAARA,QAJa;AAKbI,MAAAA,MAAM,EAAEA,MAAM,IAAI,IAAV,GAAiBgB,SAAjB,GAA6BhB,MALxB;AAMbH,MAAAA,QAAQ,EAAEQ,WANG;AAObP,MAAAA,UAAU,EAAVA,UAPa;AAQbmB,MAAAA,QAAQ,EAAE;AARG,KAAf;;AAWA,QAAIhB,eAAJ,EAAqB;AACnBC,MAAAA,cAAc,CAACgB,IAAf,CAAoBN,EAApB;AACD;;AAnByC,0BAqBab,cAAc,CACnEc,aADmE,EAEnElB,KAAK,GAAG,CAF2D,EAGnEiB,EAHmE,EAInEnB,QAJmE,EAKnEQ,eAAe,IAAIL,QALgD,EAKtC;AAC7BL,IAAAA,aANmE,EAOnEW,cAPmE,EAQnEV,eARmE,CArB3B;AAAA,QAqBlCW,mBArBkC,mBAqBlCA,mBArBkC;AAAA,QAqBbC,qBArBa,mBAqBbA,qBArBa;;AAgC1C,QAAIU,UAAJ,EAAgB;AACdN,MAAAA,aAAa;;AACb,UACGV,UAAU,IAAIK,mBAAmB,KAAKC,qBAAvC,IACC,CAACN,UAAD,IAAeN,eAAe,CAACuB,OAAhB,CAAwBH,EAAxB,KAA+B,CAFjD,CAEoD;AAFpD,QAGE;AACAnB,UAAAA,QAAQ,CAACmB,EAAD,CAAR,CAAaK,QAAb,GAAwB,IAAxB;AACAV,UAAAA,WAAW;AACZ,SAND,MAMO,IAAIJ,mBAAmB,GAAG,CAA1B,EAA6B;AAClCV,QAAAA,QAAQ,CAACmB,EAAD,CAAR,CAAaK,QAAb,GAAwB,eAAxB;AACAV,QAAAA,WAAW,IAAI,GAAf,CAFkC,CAEd;AACrB;AACF;;AAED,QAAId,QAAQ,CAACO,MAAD,CAAR,CAAiBmB,WAArB,EAAkC;AAChC1B,MAAAA,QAAQ,CAACO,MAAD,CAAR,CAAiBmB,WAAjB,CAA6BD,IAA7B,CAAkCN,EAAlC;AACD,KAFD,MAEO;AACLnB,MAAAA,QAAQ,CAACO,MAAD,CAAR,CAAiBmB,WAAjB,GAA+B,CAACP,EAAD,CAA/B;AACD;AACF,GAnDD;AAqDA,SAAO;AAAEnB,IAAAA,QAAQ,EAARA,QAAF;AAAYS,IAAAA,cAAc,EAAdA,cAAZ;AAA4BC,IAAAA,mBAAmB,EAAEI,WAAjD;AAA8DH,IAAAA,qBAAqB,EAAEI;AAArF,GAAP;AACD","sourcesContent":["import { ObjectShorthandValue } from '../../../types';\nimport { TreeItemProps } from '../TreeItem';\n\nexport interface FlatTreeItem {\n  /**\n   * Also in TreeItemProps.\n   * The index of the item among its siblings. Count starts at 1.\n   */\n  index: number;\n\n  /**\n   * Also in TreeItemProps.\n   * Level of the tree/subtree that contains this item.\n   */\n  level: number;\n\n  /**\n   * Also in TreeItemProps.\n   * true if the tree item is expanded (indicating tree item has subtree).\n   * when tree item has no subtree, expanded is undefined\n   */\n  expanded?: boolean;\n\n  /**\n   * Also in TreeItemProps.\n   * parent id of the tree item. For the top level tree items, parent is undefined\n   */\n  parent?: string;\n\n  /**\n   * Also in TreeItemProps.\n   * Size of the tree/subtree that contains this item.\n   */\n  treeSize: number;\n\n  /** true if the tree item has subtree, indicating childrenIds are not undefined */\n  hasSubtree: boolean;\n\n  /** children ids of the tree item. For leaf tree item, childrenIds is undefined */\n  childrenIds?: string[];\n\n  /** Shorthand props for the current item */\n  item: ObjectShorthandValue<TreeItemProps>;\n\n  /**\n   * when selected=true, the tree item is fully selected, indicating all its descendents are fully selected;\n   * when selected=false, the tree item is not selected, indicating none of its descendents is selected;\n   * when selected='indeterminate', only part of the tree item's descendents are selected\n   */\n  selected?: boolean | 'indeterminate';\n}\n\nexport type FlatTree = Record<string, FlatTreeItem>;\n\n// Fluent UI Tree component does not have a root item.\n// Adding a 'secret' root (level=0) helps traversing among the top level (level=1) tree items.\n// This 'secret' root should NOT be returned as part of orderedItemIds, because it is not an item from user props\nconst SECRET_ROOT_ID = 'FLUENT_UI_SECRET_ROOT_ID';\n\n/**\n * @returns returns the flattened tree, and an array of all visible tree item ids in a Depth First order.\n */\nexport function flattenTree(\n  items: ObjectShorthandValue<TreeItemProps>[],\n  activeItemIds: string[],\n  selectedItemIds: string[],\n): { flatTree: FlatTree; visibleItemIds: string[] } {\n  const flatTree = {\n    [SECRET_ROOT_ID]: {\n      index: 1,\n      level: 0,\n      expanded: true,\n      treeSize: 1,\n      hasSubtree: true,\n    } as FlatTreeItem,\n  };\n\n  // returns an extra array of orderedItemIds because flattened tree object does not keep the order of insertion\n  return flattenSubTree(items, 1, SECRET_ROOT_ID, flatTree, true, activeItemIds, [], selectedItemIds);\n}\n\nfunction flattenSubTree(\n  items: ObjectShorthandValue<TreeItemProps>[],\n  level: number = 1,\n  parent: string,\n  flatTree: FlatTree,\n  isParentVisible: boolean = true,\n  activeItemIds: string[],\n  visibleItemIds: string[],\n  selectedItemIds: string[],\n): { flatTree: FlatTree; visibleItemIds: string[]; selectedChildrenNum: number; selectableChildrenNum: number } {\n  if (!items) {\n    return { flatTree, visibleItemIds, selectedChildrenNum: 0, selectableChildrenNum: 0 };\n  }\n\n  const itemsInLeaf = items.length;\n  let selectedNum = 0;\n  let selectableNum = 0;\n\n  items.forEach((item, indexAmongSiblings) => {\n    const { id, items: childrenItems } = item;\n    const selectable = item.selectable !== false; // by default item is selectable, unless selectable=false specified\n    const hasSubtree = childrenItems ? !!childrenItems.length : false;\n    const expanded = hasSubtree && activeItemIds.indexOf(id) !== -1;\n\n    flatTree[id] = {\n      item,\n      index: indexAmongSiblings + 1, // Used for aria-posinset and it's 1-based.\n      level,\n      expanded,\n      parent: parent == null ? undefined : parent,\n      treeSize: itemsInLeaf,\n      hasSubtree,\n      selected: false,\n    };\n\n    if (isParentVisible) {\n      visibleItemIds.push(id);\n    }\n\n    const { selectedChildrenNum, selectableChildrenNum } = flattenSubTree(\n      childrenItems as ObjectShorthandValue<TreeItemProps>[],\n      level + 1,\n      id,\n      flatTree,\n      isParentVisible && expanded, // parent being visible and expanded means subtree is visible\n      activeItemIds,\n      visibleItemIds,\n      selectedItemIds,\n    );\n\n    if (selectable) {\n      selectableNum++;\n      if (\n        (hasSubtree && selectedChildrenNum === selectableChildrenNum) ||\n        (!hasSubtree && selectedItemIds.indexOf(id) >= 0) // selectedItemIds only make sense for leaf nodes\n      ) {\n        flatTree[id].selected = true;\n        selectedNum++;\n      } else if (selectedChildrenNum > 0) {\n        flatTree[id].selected = 'indeterminate';\n        selectedNum += 0.5; // trick to propagate indeterminate state to ancestors\n      }\n    }\n\n    if (flatTree[parent].childrenIds) {\n      flatTree[parent].childrenIds.push(id);\n    } else {\n      flatTree[parent].childrenIds = [id];\n    }\n  });\n\n  return { flatTree, visibleItemIds, selectedChildrenNum: selectedNum, selectableChildrenNum: selectableNum };\n}\n"],"file":"flattenTree.js"}