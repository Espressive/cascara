{"version":3,"sources":["components/Tree/TreeItem.tsx"],"names":["treeItemClassName","TreeItem","props","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","contentRef","design","title","renderItemTitle","expanded","level","index","styles","variables","treeSize","selectionIndicator","selectable","id","parent","React","useContext","TreeContext","getItemById","registerItemRef","toggleItemActive","focusItemById","expandSiblings","toggleItemSelect","getToFocusIDByFirstCharacter","selected","hasSubtree","childrenIds","getA11Props","actionHandlers","performClick","e","preventDefault","stopPropagation","focusParent","handleFocusParent","collapse","expand","focusFirstChild","handleFocusFirstChild","handleSiblingsExpand","performSelection","handleSelection","debugName","mapPropsToBehavior","indeterminate","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","handleTitleOverrides","predefinedProps","onClick","titleProps","handleClick","target","currentTarget","handleKeyDown","key","length","match","toFocusID","ref","useCallback","node","ElementType","unhandledProps","handledProps","element","root","onKeyDown","rtlTextContainer","getAttributes","forElements","TreeTitle","create","defaultProps","as","render","overrideProps","elementWithRef","propTypes","commonPropTypes","createCommon","content","customPropTypes","PropTypes","string","isRequired","number","items","collectionShorthand","onFocusFirstChild","func","onFocusParent","onTitleClick","onSiblingsExpand","bool","itemShorthand","shorthandAllowingChildren","treeItemBehavior","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeItemBehavior, TreeItemBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  shouldPreventDefaultOnKeyDown,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  ShorthandRenderFunction,\n  ShorthandValue,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ComponentKeyboardEventHandler,\n} from '../../types';\nimport { TreeTitle, TreeTitleProps } from './TreeTitle';\nimport { BoxProps } from '../Box/Box';\nimport { TreeContext } from './context';\n\nexport interface TreeItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeItemBehaviorProps>;\n\n  /** Ref for the item DOM element. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /** Id needed to identify this item inside the Tree. */\n  id: string;\n\n  /** The index of the item among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Array of props for sub tree. */\n  items?: ShorthandCollection<TreeItemProps>;\n\n  /** Level of the tree/subtree that contains this item. */\n  level?: number;\n\n  /** Called when the item's first child is about to be focused. */\n  onFocusFirstChild?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when the item's parent is about to be focused. */\n  onFocusParent?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when a tree title is clicked. */\n  onTitleClick?: ComponentEventHandler<TreeItemProps>;\n\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when the item's siblings are about to be expanded. */\n  onSiblingsExpand?: ComponentEventHandler<TreeItemProps>;\n\n  /** Whether or not the item is in the expanded state. Only makes sense if item has children items. If set to true, item is initialy expanded. */\n  expanded?: boolean;\n\n  /** The id of the parent tree item, if any. */\n  parent?: string;\n\n  /**\n   * A custom render iterator for rendering each tree title.\n   * The default component, props, and children are available for each tree title.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /** Size of the tree/subtree that contains this item. */\n  treeSize?: number;\n\n  /** Properties for TreeTitle. */\n  title?: ShorthandValue<TreeTitleProps>;\n\n  /** Whether or not the item can be selectable. */\n  selectable?: boolean;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /**\n   * Called on item key down.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyDown?: ComponentKeyboardEventHandler<TreeItemProps>;\n}\n\nexport type TreeItemStylesProps = Required<Pick<TreeItemProps, 'level'>> & {\n  selectable?: boolean;\n};\nexport const treeItemClassName = 'ui-tree__item';\n\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport const TreeItem: ComponentWithAs<'div', TreeItemProps> & FluentComponentStaticProps<TreeItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TreeItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    contentRef,\n    design,\n    title,\n    renderItemTitle,\n    expanded,\n    level,\n    index,\n    styles,\n    variables,\n    treeSize,\n    selectionIndicator,\n    selectable,\n    id,\n    parent,\n  } = props;\n\n  const {\n    getItemById,\n    registerItemRef,\n    toggleItemActive,\n    focusItemById,\n    expandSiblings,\n    toggleItemSelect,\n    getToFocusIDByFirstCharacter,\n  } = React.useContext(TreeContext);\n\n  const { selected, hasSubtree, childrenIds } = getItemById(id);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      performClick: e => {\n        if (shouldPreventDefaultOnKeyDown(e)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n        toggleItemActive(e, id);\n        _.invoke(props, 'onTitleClick', e, props);\n      },\n      focusParent: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleFocusParent(e);\n      },\n      collapse: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        toggleItemActive(e, id);\n      },\n      expand: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        toggleItemActive(e, id);\n      },\n      focusFirstChild: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleFocusFirstChild(e);\n      },\n      expandSiblings: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleSiblingsExpand(e);\n      },\n      performSelection: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleSelection(e);\n      },\n    },\n    debugName: TreeItem.displayName,\n    mapPropsToBehavior: () => ({\n      expanded,\n      level,\n      index,\n      hasSubtree,\n      treeSize,\n      selected: selected === true,\n      selectable,\n      indeterminate: selected === 'indeterminate',\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TreeItemStylesProps>(TreeItem.displayName, {\n    className: treeItemClassName,\n    mapPropsToStyles: () => ({\n      level,\n      selectable,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const handleSelection = e => {\n    if (selectable) {\n      toggleItemSelect(e, id);\n    }\n    _.invoke(props, 'onTitleClick', e, props);\n  };\n\n  const handleFocusFirstChild = e => {\n    _.invoke(props, 'onFocusFirstChild', e, props);\n    focusItemById(childrenIds?.[0]);\n  };\n\n  const handleFocusParent = e => {\n    _.invoke(props, 'onFocusParent', e, props);\n    focusItemById(parent);\n  };\n\n  const handleSiblingsExpand = e => {\n    _.invoke(props, 'onSiblingsExpand', e, props);\n    expandSiblings(e, props.id);\n  };\n\n  const handleTitleOverrides = (predefinedProps: TreeTitleProps) => ({\n    id,\n    onClick: (e, titleProps) => {\n      _.invoke(props, 'onTitleClick', e, props);\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n    },\n  });\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (e.target === e.currentTarget) {\n      // onClick listener for mouse click on treeItem DOM only,\n      // which could be triggered by VO+space on selectable tree parent node\n      handleSelection(e);\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key && e.key.length === 1 && e.key.match(/\\S/) && e.key !== '*') {\n      e.preventDefault();\n      e.stopPropagation();\n      const toFocusID = getToFocusIDByFirstCharacter(e, props.id);\n      if (toFocusID !== props.id) {\n        focusItemById(toFocusID);\n      }\n    }\n    _.invoke(props, 'onKeyDown', e, props);\n  };\n\n  const ref = React.useCallback(\n    node => {\n      registerItemRef(id, node);\n      handleRef(contentRef, node);\n    },\n    [id, contentRef, registerItemRef],\n  );\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeItem.handledProps, props);\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        id,\n        selected: selected === true,\n        onClick: handleClick,\n        onKeyDown: handleKeyDown,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : TreeTitle.create(title, {\n            defaultProps: () =>\n              getA11Props('title', {\n                hasSubtree,\n                as: hasSubtree ? 'span' : 'a',\n                level,\n                treeSize,\n                expanded,\n                index,\n                selected: selected === true,\n                selectable,\n                parent,\n                ...(hasSubtree && {\n                  indeterminate: selected === 'indeterminate',\n                }),\n                selectionIndicator,\n              }),\n            render: renderItemTitle,\n            overrideProps: handleTitleOverrides,\n          })}\n    </ElementType>\n  );\n\n  const elementWithRef = <Ref innerRef={ref}>{element}</Ref>;\n  setEnd();\n\n  return elementWithRef;\n};\n\nTreeItem.displayName = 'TreeItem';\n\nTreeItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  contentRef: customPropTypes.ref,\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number,\n  items: customPropTypes.collectionShorthand,\n  level: PropTypes.number,\n  onFocusFirstChild: PropTypes.func,\n  onFocusParent: PropTypes.func,\n  onTitleClick: PropTypes.func,\n  onSiblingsExpand: PropTypes.func,\n  expanded: PropTypes.bool,\n  parent: PropTypes.string,\n  renderItemTitle: PropTypes.func,\n  treeSize: PropTypes.number,\n  title: customPropTypes.itemShorthand,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  selectable: PropTypes.bool,\n  onKeyDown: PropTypes.func,\n};\n\nTreeItem.defaultProps = {\n  accessibility: treeItemBehavior,\n  selectable: true,\n};\n\nTreeItem.handledProps = Object.keys(TreeItem.propTypes) as any;\n\nTreeItem.create = createShorthandFactory({\n  Component: TreeItem,\n  mappedProp: 'title',\n});\n"],"file":"TreeItem.js"}