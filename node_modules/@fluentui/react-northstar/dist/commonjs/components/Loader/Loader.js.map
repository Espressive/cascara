{"version":3,"sources":["components/Loader/Loader.tsx"],"names":["loaderClassName","loaderSlotClassNames","indicator","label","svg","Loader","props","context","displayName","telemetry","setStart","setEnd","delay","inline","labelPosition","className","design","styles","variables","size","ElementType","unhandledProps","handledProps","delayTimer","React","useRef","useState","visible","setVisible","labelId","current","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","resolvedStyles","getA11yProps","accessibility","debugName","mapPropsToBehavior","useEffect","setTimeout","clearTimeout","svgElement","Box","create","defaultProps","element","root","children","Text","id","propTypes","commonPropTypes","createCommon","content","PropTypes","number","customPropTypes","itemShorthand","bool","oneOf","loaderBehavior","Object","keys","Component","mappedProp","shorthandConfig"],"mappings":"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","sourcesContent":["import { Accessibility, loaderBehavior, LoaderBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport {\n  ComponentWithAs,\n  ShorthandConfig,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n  useAccessibility,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  SizeValue,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Text, TextProps } from '../Text/Text';\n\nexport interface LoaderSlotClassNames {\n  indicator: string;\n  label: string;\n  svg: string;\n}\n\nexport interface LoaderProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<LoaderBehaviorProps>;\n\n  /** Time in milliseconds after component mount before spinner is visible. */\n  delay?: number;\n\n  /** A loader can contain an indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** Loaders can appear inline with content. */\n  inline?: boolean;\n\n  /** A loader can contain a label. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A label in the loader can have different positions. */\n  labelPosition?: 'above' | 'below' | 'start' | 'end';\n\n  /** A size of the loader. */\n  size?: SizeValue;\n\n  /** A loader can contain a custom svg element. */\n  svg?: ShorthandValue<BoxProps>;\n}\n\nexport interface LoaderState {\n  visible: boolean;\n  labelId: string;\n}\n\nexport const loaderClassName = 'ui-loader';\nexport const loaderSlotClassNames: LoaderSlotClassNames = {\n  indicator: `${loaderClassName}__indicator`,\n  label: `${loaderClassName}__label`,\n  svg: `${loaderClassName}__svg`,\n};\n\nexport type LoaderStylesProps = Pick<LoaderProps, 'inline' | 'labelPosition' | 'size'>;\n\n/**\n * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.\n *\n * @accessibility\n * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.\n */\nexport const Loader: ComponentWithAs<'div', LoaderProps> &\n  FluentComponentStaticProps<LoaderProps> & {\n    shorthandConfig: ShorthandConfig<LoaderProps>;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Loader.displayName, context.telemetry);\n  setStart();\n  const { delay, label, indicator, svg, inline, labelPosition, className, design, styles, variables, size } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Loader.handledProps, props);\n\n  const delayTimer = React.useRef<number>();\n  const [visible, setVisible] = React.useState(props.delay === 0);\n\n  const labelId = React.useRef<string>();\n  labelId.current = getOrGenerateIdFromShorthand('loader-label-', label, labelId.current);\n\n  const { classes, styles: resolvedStyles } = useStyles<LoaderStylesProps>(Loader.displayName, {\n    className: loaderClassName,\n    mapPropsToStyles: () => ({\n      inline,\n      labelPosition,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<LoaderBehaviorProps>(props.accessibility, {\n    debugName: Loader.displayName,\n    mapPropsToBehavior: () => ({\n      labelId: labelId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  React.useEffect(() => {\n    if (delay > 0) {\n      // @ts-ignore We have a collision between types from DOM and @types/node\n      delayTimer.current = setTimeout(() => {\n        setVisible(true);\n      }, delay);\n    }\n\n    return () => clearTimeout(delayTimer.current);\n  }, [delay]);\n\n  const svgElement = Box.create(svg, {\n    defaultProps: () => ({ className: loaderSlotClassNames.svg, styles: resolvedStyles.svg }),\n  });\n\n  const element = visible && (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11yProps('indicator', {\n            children: svgElement,\n            className: loaderSlotClassNames.indicator,\n            styles: resolvedStyles.indicator,\n          }),\n      })}\n      {Text.create(label, {\n        defaultProps: () =>\n          getA11yProps('label', {\n            className: loaderSlotClassNames.label,\n            styles: resolvedStyles.label,\n            id: labelId.current,\n          }),\n      })}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nLoader.displayName = 'Loader';\n\nLoader.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  delay: PropTypes.number,\n  indicator: customPropTypes.itemShorthand,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),\n  size: customPropTypes.size,\n  svg: customPropTypes.itemShorthand,\n};\n\nLoader.defaultProps = {\n  accessibility: loaderBehavior,\n  delay: 0,\n  indicator: {},\n  labelPosition: 'below',\n  svg: '',\n  size: 'medium',\n};\n\nLoader.handledProps = Object.keys(Loader.propTypes) as any;\n\nLoader.create = createShorthandFactory({ Component: Loader, mappedProp: 'label' });\n\nLoader.shorthandConfig = { mappedProp: 'label' };\n"],"file":"Loader.js"}