{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["checkboxClassName","checkboxSlotClassNames","label","indicator","Checkbox","props","context","displayName","telemetry","setStart","setEnd","checked","className","defaultChecked","design","disabled","labelPosition","styles","toggle","variables","createCheckboxManager","mapPropsToInitialState","mapPropsToState","state","actions","getA11Props","accessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleChange","labelElement","Text","create","defaultProps","element","root","onClick","onChange","Box","checkbox","checkboxBehavior","propTypes","commonPropTypes","createCommon","content","PropTypes","oneOf","bool","customPropTypes","shorthandAllowingChildren","itemShorthand","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Text, TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'] | 'mixed';\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<Omit<CheckboxProps, 'checked'> & { checked: boolean }>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<Omit<CheckboxProps, 'checked'> & { checked: boolean }>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\nexport const checkboxClassName = 'ui-checkbox';\nexport const checkboxSlotClassNames: CheckboxSlotClassNames = {\n  label: `${checkboxClassName}__label`,\n  indicator: `${checkboxClassName}__indicator`,\n};\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport const Checkbox: ComponentWithAs<'div', CheckboxProps> & FluentComponentStaticProps<CheckboxProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked: checked === 'mixed' ? false : checked }),\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: checkboxClassName,\n    mapPropsToStyles: () => ({\n      checked: checked === 'mixed' ? 'mixed' : state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: checkboxSlotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: checkboxSlotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.oneOf([true, false, 'mixed']),\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n"],"file":"Checkbox.js"}