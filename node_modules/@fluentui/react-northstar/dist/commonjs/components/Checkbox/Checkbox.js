"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Checkbox = exports.checkboxSlotClassNames = exports.checkboxClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _state = require("@fluentui/state");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _Text = require("../Text/Text");

var checkboxClassName = 'ui-checkbox';
exports.checkboxClassName = checkboxClassName;
var checkboxSlotClassNames = {
  label: checkboxClassName + "__label",
  indicator: checkboxClassName + "__indicator"
};
/**
 * A Checkbox allows a user to make a choice between two mutually exclusive options.
 *
 * @accessibility
 * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.
 */

exports.checkboxSlotClassNames = checkboxSlotClassNames;

var Checkbox = function Checkbox(props) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Checkbox.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var checked = props.checked,
      className = props.className,
      defaultChecked = props.defaultChecked,
      design = props.design,
      disabled = props.disabled,
      label = props.label,
      labelPosition = props.labelPosition,
      indicator = props.indicator,
      styles = props.styles,
      toggle = props.toggle,
      variables = props.variables;

  var _useStateManager = (0, _reactBindings.useStateManager)(_state.createCheckboxManager, {
    mapPropsToInitialState: function mapPropsToInitialState() {
      return {
        checked: defaultChecked
      };
    },
    mapPropsToState: function mapPropsToState() {
      return {
        checked: checked === 'mixed' ? false : checked
      };
    }
  }),
      state = _useStateManager.state,
      actions = _useStateManager.actions;

  var getA11Props = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Checkbox.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        checked: state.checked,
        disabled: disabled
      };
    },
    actionHandlers: {
      performClick: function performClick(e) {
        e.preventDefault();
        handleClick(e);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Checkbox.displayName, {
    className: checkboxClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        checked: checked === 'mixed' ? 'mixed' : state.checked,
        disabled: disabled,
        labelPosition: labelPosition,
        toggle: toggle
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Checkbox.handledProps, props);

  var handleChange = function handleChange(e) {
    if (!disabled) {
      // Checkbox component doesn't present any `input` component in markup, however all of our
      // components should handle events transparently.
      var _checked = !state.checked;

      actions.toggle(_checked);
      (0, _invoke2.default)(props, 'onChange', e, Object.assign({}, props, {
        checked: _checked
      }));
    }
  };

  var handleClick = function handleClick(e) {
    if (!disabled) {
      var _checked2 = !state.checked;

      actions.toggle(_checked2);
      (0, _invoke2.default)(props, 'onClick', e, Object.assign({}, props, {
        checked: _checked2
      }));
      (0, _invoke2.default)(props, 'onChange', e, Object.assign({}, props, {
        checked: _checked2
      }));
    }
  };

  var labelElement = _Text.Text.create(label, {
    defaultProps: function defaultProps() {
      return getA11Props('label', {
        styles: resolvedStyles.label,
        className: checkboxSlotClassNames.label
      });
    }
  });

  var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    onClick: handleClick,
    onChange: handleChange
  }, unhandledProps)), labelPosition === 'start' && labelElement, _Box.Box.create(indicator, {
    defaultProps: function defaultProps() {
      return getA11Props('indicator', {
        className: checkboxSlotClassNames.indicator,
        styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox
      });
    }
  }), labelPosition === 'end' && labelElement);
  setEnd();
  return element;
};

exports.Checkbox = Checkbox;
Checkbox.displayName = 'Checkbox';
Checkbox.defaultProps = {
  accessibility: _accessibility.checkboxBehavior,
  indicator: {},
  labelPosition: 'end'
};
Checkbox.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  checked: PropTypes.oneOf([true, false, 'mixed']),
  defaultChecked: PropTypes.bool,
  disabled: PropTypes.bool,
  indicator: customPropTypes.shorthandAllowingChildren,
  label: customPropTypes.itemShorthand,
  labelPosition: PropTypes.oneOf(['start', 'end']),
  onChange: PropTypes.func,
  onClick: PropTypes.func,
  toggle: PropTypes.bool
});
Checkbox.handledProps = Object.keys(Checkbox.propTypes);
Checkbox.create = (0, _utils.createShorthandFactory)({
  Component: Checkbox,
  mappedProp: 'label'
});
//# sourceMappingURL=Checkbox.js.map
