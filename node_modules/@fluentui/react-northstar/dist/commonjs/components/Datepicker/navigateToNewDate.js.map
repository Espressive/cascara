{"version":3,"sources":["components/Datepicker/navigateToNewDate.tsx"],"names":["contstraintNavigatedDate","initialDate","targetDate","direction","restrictedDatesOptions","navigateToDisabledDates","undefined","findAvailableDateOptions","newNavigatedDate","maxDate","minDate","navigateToNewDate","originalDate","kind","step","targetDayDirection"],"mappings":";;;;;AAAA;;AAaO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CACtCC,WADsC,EAEtCC,UAFsC,EAGtCC,SAHsC,EAItCC,sBAJsC,EAKtCC,uBALsC,EAMnC;AACH,MAAI,CAACH,UAAL,EAAiB;AACf;AACA,WAAOI,SAAP;AACD;;AAED,MAAMC,wBAA+C;AACnDN,IAAAA,WAAW,EAAXA,WADmD;AAEnDC,IAAAA,UAAU,EAAVA,UAFmD;AAGnDC,IAAAA,SAAS,EAATA;AAHmD,KAI/C,CAACE,uBAAD,IAA4BD,sBAJmB,CAArD;AAOA,MAAII,gBAAgB,GAAG,0CAAkBD,wBAAlB,CAAvB;;AAEA,MAAI,CAACC,gBAAL,EAAuB;AACrB;AACAD,IAAAA,wBAAwB,CAACJ,SAAzB,GAAqC,CAACA,SAAtC;AACAK,IAAAA,gBAAgB,GAAG,0CAAkBD,wBAAlB,CAAnB;AACD;;AAED,MAAI,CAACF,uBAAD,IAA4B,uCAAeH,UAAf,EAA2BE,sBAA3B,CAAhC,EAAoF;AAClFI,IAAAA,gBAAgB,GAAGJ,sBAAsB,CAACK,OAA1C;AACD,GAFD,MAEO,IAAI,CAACJ,uBAAD,IAA4B,wCAAgBH,UAAhB,EAA4BE,sBAA5B,CAAhC,EAAqF;AAC1FI,IAAAA,gBAAgB,GAAGJ,sBAAsB,CAACM,OAA1C;AACD;;AAED,SAAOF,gBAAP;AACD,CAlCM;;;;AAoCA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BC,YAD+B,EAE/BC,IAF+B,EAG/BC,IAH+B,EAI/BV,sBAJ+B,EAK/BC,uBAL+B,EAMtB;AACT,MAAIH,UAAuB,GAAG,IAA9B;AACA,MAAMa,kBAAkB,GAAGD,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAC,CAA3C;;AAEA,UAAQD,IAAR;AACE,SAAK,OAAL;AAAc;AACZX,QAAAA,UAAU,GAAG,kCAAUU,YAAV,EAAwBG,kBAAxB,CAAb;AACA;AACD;;AACD,SAAK,MAAL;AAAa;AACXb,QAAAA,UAAU,GAAG,iCAASU,YAAT,EAAuBG,kBAAvB,CAAb;AACA;AACD;;AACD,SAAK,KAAL;AAAY;AACVb,QAAAA,UAAU,GAAG,gCAAQU,YAAR,EAAsBG,kBAAtB,CAAb;AACA;AACD;;AACD;AACE;AAdJ;;AAiBA,SAAOf,wBAAwB,CAACY,YAAD,EAAeV,UAAf,EAA2BY,IAA3B,EAAiCV,sBAAjC,EAAyDC,uBAAzD,CAA/B;AACD,CA5BM","sourcesContent":["import {\n  addMonths,\n  IAvailableDateOptions,\n  IRestrictedDatesOptions,\n  findAvailableDate,\n  addDays,\n  addWeeks,\n  isAfterMaxDate,\n  isBeforeMinDate,\n} from '../../utils/date-time-utilities';\n\nexport type NavigationKind = 'Month' | 'Week' | 'Day';\n\nexport const contstraintNavigatedDate = (\n  initialDate: Date,\n  targetDate: Date,\n  direction: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n) => {\n  if (!targetDate) {\n    // if we couldn't find a target date at all, do nothing\n    return undefined;\n  }\n\n  const findAvailableDateOptions: IAvailableDateOptions = {\n    initialDate,\n    targetDate,\n    direction,\n    ...(!navigateToDisabledDates && restrictedDatesOptions),\n  };\n\n  let newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n\n  if (!newNavigatedDate) {\n    // if no dates available in initial direction, try going backwards\n    findAvailableDateOptions.direction = -direction;\n    newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n  }\n\n  if (!navigateToDisabledDates && isAfterMaxDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.maxDate;\n  } else if (!navigateToDisabledDates && isBeforeMinDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.minDate;\n  }\n\n  return newNavigatedDate;\n};\n\nexport const navigateToNewDate = (\n  originalDate: Date,\n  kind: NavigationKind,\n  step: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n): Date => {\n  let targetDate: Date | null = null;\n  const targetDayDirection = step > 0 ? 1 : -1;\n\n  switch (kind) {\n    case 'Month': {\n      targetDate = addMonths(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Week': {\n      targetDate = addWeeks(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Day': {\n      targetDate = addDays(originalDate, targetDayDirection);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return contstraintNavigatedDate(originalDate, targetDate, step, restrictedDatesOptions, navigateToDisabledDates);\n};\n"],"file":"navigateToNewDate.js"}