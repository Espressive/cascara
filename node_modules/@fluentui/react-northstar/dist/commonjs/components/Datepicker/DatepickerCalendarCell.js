"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.DatepickerCalendarCell = exports.datepickerCalendarCellClassName = void 0;

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var datepickerCalendarCellClassName = 'ui-datepicker__calendarcell';
/**
 * A Datepicker cell is used to display calendar grid cells.
 */

exports.datepickerCalendarCellClassName = datepickerCalendarCellClassName;
var DatepickerCalendarCell = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      disabled = props.disabled,
      selected = props.selected,
      quiet = props.quiet,
      today = props.today,
      content = props.content;
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: composeOptions.displayName,
    actionHandlers: {},
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        selected: selected,
        disabled: disabled,
        quiet: quiet,
        today: today
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(DatepickerCalendarCell.displayName, {
    className: composeOptions.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        disabled: disabled,
        selected: selected,
        quiet: quiet,
        today: today
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl,
    composeOptions: composeOptions,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)), content);
  setEnd();
  return element;
}, {
  className: datepickerCalendarCellClassName,
  displayName: 'DatepickerCalendarCell',
  handledProps: ['accessibility', 'as', 'className', 'content', 'design', 'disabled', 'selected', 'styles', 'variables', 'quiet', 'today']
});
exports.DatepickerCalendarCell = DatepickerCalendarCell;
DatepickerCalendarCell.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  children: false
}), {
  disabled: PropTypes.bool,
  selected: PropTypes.bool,
  quiet: PropTypes.bool,
  today: PropTypes.bool
});
DatepickerCalendarCell.defaultProps = {
  accessibility: _accessibility.datepickerCalendarCellBehavior,
  as: 'td'
};
//# sourceMappingURL=DatepickerCalendarCell.js.map
