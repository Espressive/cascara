{"version":3,"sources":["components/Datepicker/DatepickerCalendarCellButton.tsx"],"names":["datepickerCalendarCellButtonClassName","DatepickerCalendarCellButton","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","className","design","styles","variables","disabled","selected","quiet","today","content","unhandledProps","handledProps","ElementType","getA11yProps","accessibility","debugName","actionHandlers","performClick","e","preventDefault","handleClick","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","classes","element","root","onClick","propTypes","commonPropTypes","createCommon","children","PropTypes","func","bool","defaultProps","datepickerCalendarCellButtonBehavior","as"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  datepickerCalendarCellButtonBehavior,\n  DatepickerCalendarCellButtonBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n  compose,\n} from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, ComponentKeyboardEventHandler } from '../../types';\nimport { commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\n\nexport interface DatepickerCalendarCellButtonProps extends UIComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<DatepickerCalendarCellButtonBehaviorProps>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<DatepickerCalendarCellButtonProps>;\n\n  /**\n   * Called on focus.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<DatepickerCalendarCellButtonProps>;\n\n  /** A cell can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A cell can show that it is currently selected or not. */\n  selected?: boolean;\n\n  /** Denotes that the cell marks today's date. */\n  today?: boolean;\n\n  /** A cell can show that it currently has dimmed styles. */\n  quiet?: boolean;\n\n  /**\n   * Called on selected item key down.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyDown?: ComponentKeyboardEventHandler<DatepickerCalendarCellButtonProps>;\n}\n\nexport type DatepickerCalendarCellButtonStylesProps = Pick<\n  DatepickerCalendarCellButtonProps,\n  'disabled' | 'selected' | 'quiet' | 'today'\n>;\n\nexport const datepickerCalendarCellButtonClassName = 'ui-datepicker__calendarcellbutton';\n/**\n * A Datepicker cell is used to display calendar grid cell button.\n */\nexport const DatepickerCalendarCellButton = compose<\n  'button',\n  DatepickerCalendarCellButtonProps,\n  DatepickerCalendarCellButtonStylesProps,\n  {},\n  {}\n>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { className, design, styles, variables, disabled, selected, quiet, today, content } = props;\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n    const getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: e => {\n          // prevent Spacebar from scrolling\n          e.preventDefault();\n          handleClick(e);\n        },\n      },\n      mapPropsToBehavior: () => ({\n        selected,\n        disabled,\n        quiet,\n        today,\n      }),\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<DatepickerCalendarCellButtonStylesProps>(DatepickerCalendarCellButton.displayName, {\n      className: composeOptions.className,\n      mapPropsToStyles: () => ({\n        disabled,\n        selected,\n        quiet,\n        today,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n    const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {content}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: datepickerCalendarCellButtonClassName,\n    displayName: 'DatepickerCalendarCellButton',\n\n    handledProps: [\n      'accessibility',\n      'as',\n      'className',\n      'content',\n      'design',\n      'disabled',\n      'onClick',\n      'selected',\n      'styles',\n      'variables',\n      'quiet',\n      'today',\n    ],\n  },\n);\n\nDatepickerCalendarCellButton.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  selected: PropTypes.bool,\n  quiet: PropTypes.bool,\n  today: PropTypes.bool,\n};\n\nDatepickerCalendarCellButton.defaultProps = {\n  accessibility: datepickerCalendarCellButtonBehavior,\n  as: 'button',\n};\n"],"file":"DatepickerCalendarCellButton.js"}