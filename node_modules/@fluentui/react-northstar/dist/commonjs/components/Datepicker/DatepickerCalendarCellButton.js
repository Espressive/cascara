"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.DatepickerCalendarCellButton = exports.datepickerCalendarCellButtonClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var datepickerCalendarCellButtonClassName = 'ui-datepicker__calendarcellbutton';
/**
 * A Datepicker cell is used to display calendar grid cell button.
 */

exports.datepickerCalendarCellButtonClassName = datepickerCalendarCellButtonClassName;
var DatepickerCalendarCellButton = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      disabled = props.disabled,
      selected = props.selected,
      quiet = props.quiet,
      today = props.today,
      content = props.content;
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: composeOptions.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        // prevent Spacebar from scrolling
        e.preventDefault();
        handleClick(e);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        selected: selected,
        disabled: disabled,
        quiet: quiet,
        today: today
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(DatepickerCalendarCellButton.displayName, {
    className: composeOptions.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        disabled: disabled,
        selected: selected,
        quiet: quiet,
        today: today
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl,
    composeOptions: composeOptions,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    onClick: handleClick,
    ref: ref
  }, unhandledProps)), content);
  setEnd();
  return element;
}, {
  className: datepickerCalendarCellButtonClassName,
  displayName: 'DatepickerCalendarCellButton',
  handledProps: ['accessibility', 'as', 'className', 'content', 'design', 'disabled', 'onClick', 'selected', 'styles', 'variables', 'quiet', 'today']
});
exports.DatepickerCalendarCellButton = DatepickerCalendarCellButton;
DatepickerCalendarCellButton.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  children: false
}), {
  onClick: PropTypes.func,
  disabled: PropTypes.bool,
  selected: PropTypes.bool,
  quiet: PropTypes.bool,
  today: PropTypes.bool
});
DatepickerCalendarCellButton.defaultProps = {
  accessibility: _accessibility.datepickerCalendarCellButtonBehavior,
  as: 'button'
};
//# sourceMappingURL=DatepickerCalendarCellButton.js.map
