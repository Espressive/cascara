{"version":3,"sources":["components/Input/Input.tsx"],"names":["inputClassName","inputSlotClassNames","input","icon","Input","props","ref","composeOptions","context","displayName","telemetry","setStart","setEnd","className","type","wrapper","disabled","fluid","inverted","inline","clearable","iconPosition","design","styles","variables","required","successIndicator","error","errorIndicator","showSuccessIndicator","label","labelPosition","inputRef","React","useRef","useContext","FormFieldBaseContext","labelId","inputId","current","id","ElementType","unhandledProps","handledProps","htmlInputProps","restProps","defaultValue","value","initialValue","setValue","hasValue","length","isShowSuccessIndicatorUndefined","requiredAndSuccessful","hasIcon","mapPropsToStyles","mapPropsToInlineStyles","rtl","unstable_props","classes","resolvedStyles","getA11yProps","accessibility","debugName","actionHandlers","clear","e","stopPropagation","nativeEvent","handleOnClear","mapPropsToBehavior","handleIconOverrides","predefinedProps","onClick","focus","handleChange","newValue","computeIcon","labelElement","slots","defaultProps","htmlFor","inputElement","Box","create","children","control","as","onChange","overrideProps","inputContainer","element","root","InputLabel","propTypes","commonPropTypes","createCommon","content","PropTypes","bool","oneOfType","string","arrayOf","customPropTypes","itemShorthand","oneOf","shorthandAllowingChildren","func","number","wrapperShorthand","inputBehavior","Label","Component"],"mappings":"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","sourcesContent":["import { Accessibility, inputBehavior, InputBehaviorProps } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  partitionHTMLProps,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  ShorthandFactory,\n  createShorthand,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { ShorthandValue, ComponentEventHandler } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  useAutoControlled,\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useFluentContext,\n  useStyles,\n  useAccessibility,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { ExclamationCircleIcon, CheckmarkCircleIcon, CloseIcon } from '@fluentui/react-icons-northstar';\nimport { InputLabel, InputLabelProps, LabelPosition } from './InputLabel';\nimport { FormFieldBaseContext } from '../Form/utils/formFieldBaseContext';\n\nexport interface InputProps extends UIComponentProps, ChildrenComponentProps, SupportedIntrinsicInputProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<InputBehaviorProps>;\n\n  /** A property that will change the icon on the input and clear the input on click on Cancel. */\n  clearable?: boolean;\n\n  /** The default value of the input. */\n  defaultValue?: string | string[];\n\n  /** An Input can be disabled. */\n  disabled?: boolean;\n\n  /** An input can take the width of its container. */\n  fluid?: boolean;\n\n  /** Optional Icon to display inside the Input. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An Input with icon can format the icon to appear at the start or at the end of the input field. */\n  iconPosition?: 'start' | 'end';\n\n  /** An input can be used inline with text. */\n  inline?: boolean;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onChange?: ComponentEventHandler<InputProps & { value: string }>;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** (DEPRECATED) Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The value of the input. */\n  value?: string | number;\n\n  /** A label for the input. */\n  label?: ShorthandValue<InputLabelProps>;\n\n  /** Poisition for the label */\n  labelPosition?: LabelPosition;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n\n  /** Input can be required to be valid. */\n  required?: boolean;\n\n  /** Input can have error state */\n  error?: boolean;\n\n  /** Input can have error indicator when error is true */\n  errorIndicator?: ShorthandValue<BoxProps>;\n\n  /** Optional Icon to display inside the Input if required and fulfilled. */\n  successIndicator?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the successIndicator should be visible. */\n  showSuccessIndicator?: boolean;\n}\n\nexport interface InputSlotClassNames {\n  input: string;\n  icon: string;\n}\n\nexport const inputClassName = 'ui-input';\n\nexport type InputStylesProps = Required<\n  Pick<\n    InputProps,\n    'fluid' | 'inverted' | 'inline' | 'disabled' | 'clearable' | 'iconPosition' | 'error' | 'labelPosition'\n  > & {\n    hasIcon: boolean;\n    hasValue: boolean;\n    requiredAndSuccessful: boolean;\n  }\n>;\n\nexport const inputSlotClassNames: InputSlotClassNames = {\n  input: `${inputClassName}__input`,\n  icon: `${inputClassName}__icon`,\n};\n\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\nexport const Input = compose<'input', InputProps, InputStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n    const {\n      className,\n      input,\n      type,\n      wrapper,\n      disabled,\n      fluid,\n      inverted,\n      inline,\n      clearable,\n      icon,\n      iconPosition,\n      design,\n      styles,\n      variables,\n      required,\n      successIndicator,\n      error,\n      errorIndicator,\n      showSuccessIndicator,\n      label,\n      labelPosition,\n    } = props;\n\n    const inputRef = React.useRef<HTMLInputElement>();\n\n    const { labelId } = React.useContext(FormFieldBaseContext);\n    const inputId = React.useRef<string>();\n    inputId.current = props.id || getOrGenerateIdFromShorthand('ui-input-', '', inputId.current);\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n    const [value, setValue] = useAutoControlled({\n      defaultValue: props.defaultValue,\n      value: props.value as string,\n      initialValue: '',\n    });\n    const hasValue: boolean = !!value && (value as string)?.length !== 0;\n\n    const isShowSuccessIndicatorUndefined = typeof showSuccessIndicator === 'undefined';\n\n    const requiredAndSuccessful = isShowSuccessIndicatorUndefined\n      ? ((required && hasValue) || showSuccessIndicator) && !error\n      : showSuccessIndicator;\n\n    const hasIcon = !!icon || showSuccessIndicator || (required && isShowSuccessIndicatorUndefined) || !_.isNil(error);\n\n    const { classes, styles: resolvedStyles } = useStyles<InputStylesProps>(composeOptions.displayName, {\n      className: inputClassName,\n      mapPropsToStyles: () => ({\n        fluid,\n        inverted,\n        inline,\n        disabled,\n        clearable,\n        hasIcon,\n        requiredAndSuccessful,\n        iconPosition,\n        hasValue,\n        labelPosition,\n        error,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<InputBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        clear: e => {\n          if (clearable && value !== '') {\n            e.stopPropagation();\n            e.nativeEvent && e.nativeEvent.stopPropagation();\n            handleOnClear(e);\n          }\n        },\n      },\n      mapPropsToBehavior: () => ({\n        disabled,\n        required,\n        error,\n      }),\n      rtl: context.rtl,\n    });\n\n    const handleIconOverrides = predefinedProps => ({\n      onClick: (e: React.MouseEvent) => {\n        if (!disabled) {\n          handleOnClear(e);\n          inputRef.current.focus();\n        }\n\n        _.invoke(predefinedProps, 'onClick', e, props);\n      },\n    });\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) {\n        return;\n      }\n\n      const newValue = _.get(e, 'target.value');\n\n      _.invoke(props, 'onChange', e, { ...props, value: newValue });\n\n      setValue(newValue);\n    };\n\n    const handleOnClear = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (clearable) {\n        _.invoke(props, 'onChange', e, { ...props, value: '' });\n        setValue('');\n      }\n    };\n\n    const computeIcon = (): ShorthandValue<BoxProps> => {\n      if (clearable && (value as string)?.length !== 0) {\n        return <CloseIcon outline />;\n      }\n      if (requiredAndSuccessful) {\n        return successIndicator;\n      }\n      if (error) {\n        return errorIndicator;\n      }\n      return icon || null;\n    };\n\n    const labelElement = createShorthand(composeOptions.slots.label, label, {\n      defaultProps: () => ({\n        labelPosition,\n        label,\n        required,\n        htmlFor: inputId.current,\n        hasValue,\n        id: labelId,\n      }),\n    });\n\n    const inputElement = Box.create(\n      {},\n      {\n        defaultProps: () => ({\n          children: (\n            <>\n              <Ref\n                innerRef={(inputElement: HTMLElement) => {\n                  handleRef(inputRef, inputElement);\n                  handleRef(props.inputRef, inputElement);\n                  handleRef(ref, inputElement);\n                }}\n              >\n                {createShorthand(composeOptions.slots.control, input || type, {\n                  defaultProps: () =>\n                    getA11yProps('input', {\n                      ...htmlInputProps,\n                      as: 'input',\n                      disabled,\n                      type,\n                      required,\n                      value: value || '',\n                      id: inputId.current,\n                      className: inputSlotClassNames.input,\n                      styles: resolvedStyles.input,\n                      onChange: handleChange,\n                    }),\n                })}\n              </Ref>\n              {createShorthand(composeOptions.slots.icon, computeIcon(), {\n                defaultProps: () =>\n                  getA11yProps('icon', {\n                    className: inputSlotClassNames.icon,\n                    styles: resolvedStyles.icon,\n                  }),\n                overrideProps: handleIconOverrides,\n              })}\n            </>\n          ),\n          styles: resolvedStyles.inputContainer,\n        }),\n      },\n    );\n\n    const element = Box.create(wrapper, {\n      defaultProps: () =>\n        getA11yProps('root', {\n          className: classes.root,\n          children: (\n            <>\n              {labelElement}\n              {inputElement}\n            </>\n          ),\n          styles: resolvedStyles.root,\n          ...restProps,\n        }),\n      overrideProps: {\n        as: (wrapper && (wrapper as any).as) || ElementType,\n      },\n    });\n    setEnd();\n    return element;\n  },\n  {\n    className: inputClassName,\n    displayName: 'Input',\n    slots: {\n      control: Box,\n      icon: Box,\n      label: InputLabel,\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'design',\n      'styles',\n      'variables',\n      'clearable',\n      'defaultValue',\n      'disabled',\n      'fluid',\n      'icon',\n      'iconPosition',\n      'input',\n      'inputRef',\n      'inline',\n      'inverted',\n      'onChange',\n      'type',\n      'value',\n      'wrapper',\n      'required',\n      'successIndicator',\n      'error',\n      'errorIndicator',\n      'showSuccessIndicator',\n      'label',\n      'labelPosition',\n    ],\n  },\n) as ComponentWithAs<'input', InputProps> & {\n  create: ShorthandFactory<InputProps>;\n  Label: typeof InputLabel;\n};\n\nInput.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  clearable: PropTypes.bool,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  disabled: PropTypes.bool,\n  fluid: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf<LabelPosition>(['inline', 'above', 'inside']),\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  wrapper: customPropTypes.wrapperShorthand,\n  required: PropTypes.bool,\n  successIndicator: customPropTypes.shorthandAllowingChildren,\n  error: PropTypes.bool,\n  errorIndicator: customPropTypes.shorthandAllowingChildren,\n  showSuccessIndicator: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  accessibility: inputBehavior,\n  type: 'text',\n  wrapper: {},\n  iconPosition: 'end',\n  errorIndicator: <ExclamationCircleIcon />,\n  successIndicator: <CheckmarkCircleIcon outline />,\n};\n\nInput.Label = InputLabel;\n\nInput.create = createShorthandFactory({ Component: Input });\n"],"file":"Input.js"}