"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderComponent = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_northstar_styles_renderer_1 = require("@fluentui/react-northstar-styles-renderer");
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
var providerMissingHandler_1 = require("./providerMissingHandler");
var renderComponent = function (config, context) {
    var className = config.className, displayName = config.displayName, handledProps = config.handledProps, props = config.props, state = config.state, actionHandlers = config.actionHandlers, render = config.render, _a = config.saveDebug, saveDebug = _a === void 0 ? function () { } : _a;
    if (_.isEmpty(context)) {
        providerMissingHandler_1.logProviderMissingWarning();
    }
    var _b = react_bindings_1.deprecated_getTelemetry(displayName, context.telemetry, config.isFirstRenderRef), setStart = _b.setStart, setEnd = _b.setEnd;
    var rtl = context.rtl || false;
    setStart();
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.getUnhandledProps(handledProps, props);
    var stateAndProps = tslib_1.__assign(tslib_1.__assign({}, state), props);
    var accessibility = react_bindings_1.unstable_getAccessibility(displayName, props.accessibility, stateAndProps, rtl, actionHandlers);
    var _c = react_bindings_1.unstable_getStyles({
        allDisplayNames: [displayName],
        className: className,
        disableAnimations: context.disableAnimations || false,
        primaryDisplayName: displayName,
        componentProps: stateAndProps,
        inlineStylesProps: stateAndProps,
        renderer: context.renderer || react_northstar_styles_renderer_1.noopRenderer,
        rtl: rtl,
        saveDebug: saveDebug,
        theme: context.theme || styles_1.emptyTheme,
        performance: tslib_1.__assign(tslib_1.__assign({}, context.performance), { 
            // we cannot enable caching for class components
            enableStylesCaching: false, enableBooleanVariablesCaching: false }),
        telemetry: context.telemetry,
    }), classes = _c.classes, variables = _c.variables, styles = _c.styles, theme = _c.theme;
    var resolvedConfig = {
        ElementType: ElementType,
        unhandledProps: unhandledProps,
        classes: classes,
        variables: variables,
        styles: styles,
        accessibility: accessibility,
        rtl: rtl,
        theme: theme,
    };
    if (accessibility.focusZone) {
        var originalElementType = resolvedConfig.ElementType;
        resolvedConfig.ElementType = react_bindings_1.FocusZone;
        resolvedConfig.unhandledProps = tslib_1.__assign(tslib_1.__assign({}, resolvedConfig.unhandledProps), accessibility.focusZone.props);
        resolvedConfig.unhandledProps.as = originalElementType;
        resolvedConfig.unhandledProps.isRtl = resolvedConfig.rtl;
    }
    var element = render(resolvedConfig);
    setEnd();
    return element;
};
exports.renderComponent = renderComponent;
