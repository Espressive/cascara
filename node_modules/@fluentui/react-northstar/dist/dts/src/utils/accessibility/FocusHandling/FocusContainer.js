"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerFocusHandler = void 0;
var ContainerFocusHandler = /** @class */ (function () {
    function ContainerFocusHandler(getItemsCount, setFocusAt, circular) {
        var _this = this;
        if (circular === void 0) { circular = false; }
        this.getItemsCount = getItemsCount;
        this.setFocusAt = setFocusAt;
        this.circular = circular;
        this.focusedIndex = 0;
        this.noItems = function () { return _this.getItemsCount() === 0; };
    }
    ContainerFocusHandler.prototype.constrainFocusedIndex = function () {
        var itemsCount = this.getItemsCount();
        if (this.focusedIndex < 0) {
            this.focusedIndex = this.circular ? itemsCount - 1 : 0;
        }
        if (this.focusedIndex >= itemsCount) {
            this.focusedIndex = this.circular ? 0 : itemsCount - 1;
        }
    };
    ContainerFocusHandler.prototype.getFocusedIndex = function () {
        return this.focusedIndex;
    };
    ContainerFocusHandler.prototype.syncFocusedIndex = function (withCurrentIndex) {
        this.focusedIndex = withCurrentIndex;
    };
    ContainerFocusHandler.prototype.movePrevious = function () {
        if (this.noItems()) {
            return;
        }
        this.focusedIndex -= 1;
        this.constrainFocusedIndex();
        this.setFocusAt(this.focusedIndex);
    };
    ContainerFocusHandler.prototype.moveNext = function () {
        if (this.noItems()) {
            return;
        }
        this.focusedIndex += 1;
        this.constrainFocusedIndex();
        this.setFocusAt(this.focusedIndex);
    };
    ContainerFocusHandler.prototype.moveFirst = function () {
        if (this.noItems()) {
            return;
        }
        this.focusedIndex = 0;
        this.setFocusAt(this.focusedIndex);
    };
    ContainerFocusHandler.prototype.moveLast = function () {
        if (this.noItems()) {
            return;
        }
        this.focusedIndex = this.getItemsCount() - 1;
        this.setFocusAt(this.focusedIndex);
    };
    return ContainerFocusHandler;
}());
exports.ContainerFocusHandler = ContainerFocusHandler;
