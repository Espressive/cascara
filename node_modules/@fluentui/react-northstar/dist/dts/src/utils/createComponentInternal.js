"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComponentInternal = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var React = require("react");
var _ = require("lodash");
var renderComponent_1 = require("./renderComponent");
var factories_1 = require("./factories");
var createComponentInternal = function (_a) {
    var _b = _a.displayName, displayName = _b === void 0 ? 'FluentUIComponent' : _b, _c = _a.className, className = _c === void 0 ? 'fluent-ui-component' : _c, _d = _a.shorthandPropName, shorthandPropName = _d === void 0 ? 'children' : _d, _e = _a.defaultProps, defaultProps = _e === void 0 ? {} : _e, _f = _a.handledProps, handledProps = _f === void 0 ? [] : _f, propTypes = _a.propTypes, actionHandlers = _a.actionHandlers, render = _a.render;
    var mergedDefaultProps = tslib_1.__assign({ as: 'div' }, defaultProps);
    var FluentComponent = function (props) {
        // Stores debug information for component.
        // Note that this ref should go as the first one, to be discoverable by debug utils.
        var ref = React.useRef(null);
        var context = react_bindings_1.useFluentContext();
        var isFirstRenderRef = React.useRef(true);
        return renderComponent_1.renderComponent({
            className: className,
            displayName: displayName,
            handledProps: _.keys(propTypes).concat(handledProps),
            props: props,
            state: {},
            actionHandlers: actionHandlers,
            render: function (config) { return render(config, props); },
            saveDebug: function (fluentUIDebug) { return (ref.current = { fluentUIDebug: fluentUIDebug }); },
            isFirstRenderRef: isFirstRenderRef,
        }, context);
    };
    FluentComponent.deprecated_className = className;
    FluentComponent.create = factories_1.createShorthandFactory({
        Component: mergedDefaultProps.as,
        mappedProp: shorthandPropName,
    });
    FluentComponent.displayName = displayName;
    FluentComponent.propTypes = propTypes; // TODO: generate prop types
    FluentComponent.defaultProps = mergedDefaultProps;
    return FluentComponent;
};
exports.createComponentInternal = createComponentInternal;
