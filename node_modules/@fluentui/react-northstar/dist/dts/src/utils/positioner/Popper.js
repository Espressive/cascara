"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popper = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var React = require("react");
var positioningHelper_1 = require("./positioningHelper");
var usePopper_1 = require("./usePopper");
/**
 * Popper relies on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.
 *
 * @deprecated Please use "usePopper()" hook instead.
 */
var Popper = function (props) {
    var usesRenderProps = typeof props.children === 'function';
    var proposedPlacement = positioningHelper_1.getPlacement(props.align, props.position, props.rtl);
    var latestPlacement = React.useRef(proposedPlacement);
    var _a = React.useState(proposedPlacement), computedPlacement = _a[0], setComputedPlacement = _a[1];
    var popperRef = React.useRef(null);
    var _b = usePopper_1.usePopper(tslib_1.__assign(tslib_1.__assign({}, props), { popperRef: react_bindings_1.useMergedRefs(props.popperRef, popperRef), onStateUpdate: function (state) {
            // PopperJS performs computations that might update the computed placement: auto positioning, flipping the
            // placement in case the popper box should be rendered at the edge of the viewport and does not fit
            if (state.placement !== latestPlacement.current) {
                latestPlacement.current = state.placement;
                // A state change has sense only if renderProps are passed, otherwise a state value is unused
                if (usesRenderProps) {
                    setComputedPlacement(state.placement);
                }
            }
        } })), targetRef = _b.targetRef, containerRef = _b.containerRef, arrowRef = _b.arrowRef;
    react_bindings_1.useIsomorphicLayoutEffect(function () {
        var _a;
        // A way to sync refs, is needed as Popper component accepts refs as params
        // Does not make anything worse as Popper component does not have proper handing for ref updates ¯\_(ツ)_/¯
        targetRef.current = react_component_ref_1.isRefObject(props.targetRef)
            ? props.targetRef.current
            : props.targetRef;
        arrowRef.current = (_a = props.pointerTargetRef) === null || _a === void 0 ? void 0 : _a.current;
    });
    var scheduleUpdate = React.useCallback(function () {
        var _a;
        (_a = popperRef.current) === null || _a === void 0 ? void 0 : _a.updatePosition();
    }, []);
    var child = usesRenderProps
        ? props.children({
            placement: computedPlacement,
            scheduleUpdate: scheduleUpdate,
        })
        : props.children;
    return child ? React.createElement(react_component_ref_1.Ref, { innerRef: containerRef }, React.Children.only(child)) : null;
};
exports.Popper = Popper;
exports.Popper.defaultProps = {
    enabled: true,
    modifiers: [],
    positionFixed: false,
    positioningDependencies: [],
};
