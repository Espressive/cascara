"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.partitionHTMLProps = exports.htmlInputProps = exports.htmlInputEvents = exports.htmlInputAttrs = exports.htmlImageProps = void 0;
var tslib_1 = require("tslib");
var _ = require("lodash");
exports.htmlImageProps = ['alt', 'height', 'src', 'srcSet', 'width'];
exports.htmlInputAttrs = [
    // REACT
    'selected',
    'defaultValue',
    'defaultChecked',
    // LIMITED HTML PROPS
    'accept',
    'autoCapitalize',
    'autoComplete',
    'autoCorrect',
    'autoFocus',
    'checked',
    'disabled',
    'form',
    'id',
    'list',
    'max',
    'maxLength',
    'min',
    'minLength',
    'multiple',
    'name',
    'pattern',
    'placeholder',
    'readOnly',
    'required',
    'step',
    'type',
    'value',
];
exports.htmlInputEvents = [
    // EVENTS
    // keyboard
    'onKeyDown',
    'onKeyPress',
    'onKeyUp',
    // focus
    'onFocus',
    'onBlur',
    // form
    'onChange',
    'onInput',
    // mouse
    'onClick',
    'onContextMenu',
    'onDrag',
    'onDragEnd',
    'onDragEnter',
    'onDragExit',
    'onDragLeave',
    'onDragOver',
    'onDragStart',
    'onDrop',
    'onMouseDown',
    'onMouseEnter',
    'onMouseLeave',
    'onMouseMove',
    'onMouseOut',
    'onMouseOver',
    'onMouseUp',
    // selection
    'onSelect',
    // touch
    'onTouchCancel',
    'onTouchEnd',
    'onTouchMove',
    'onTouchStart',
];
exports.htmlInputProps = tslib_1.__spreadArrays(exports.htmlInputAttrs, exports.htmlInputEvents);
/**
 * Returns props of html input element and restProps.
 * @param props - A ReactElement props object
 * @param options - Options for
 * @returns - 2-element array. First element is props of HTML input element and second element is the other props.
 */
var partitionHTMLProps = function (props, options) {
    if (options === void 0) { options = {}; }
    var _a = options.htmlProps, htmlProps = _a === void 0 ? exports.htmlInputProps : _a, _b = options.includeAria, includeAria = _b === void 0 ? true : _b;
    var inputProps = {};
    var restProps = {};
    _.forEach(props, function (val, prop) {
        var possibleAria = includeAria && (/^aria-.*$/.test(prop) || prop === 'role');
        var target = _.includes(htmlProps, prop) || possibleAria ? inputProps : restProps;
        target[prop] = val;
    });
    return [inputProps, restProps];
};
exports.partitionHTMLProps = partitionHTMLProps;
