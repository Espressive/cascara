"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitButtonToggleStyles = void 0;
var tslib_1 = require("tslib");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var toggleIndicatorUrl_1 = require("./toggleIndicatorUrl");
var getIndicatorStyles = function (color, outline, size) {
    return {
        content: '""',
        width: size,
        height: size,
        backgroundImage: toggleIndicatorUrl_1.toggleIndicatorUrl(color, outline),
        backgroundRepeat: 'no-repeat',
    };
};
exports.splitButtonToggleStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, theme = _a.theme;
        var siteVariables = theme.siteVariables;
        var borderWidth = siteVariables.borderWidth;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: {
                borderRadius: v.focusBorderRadius,
                borderWidth: v.focusBorderWidth,
                focusInnerBorderColor: v.focusInnerBorderColor,
                focusOuterBorderColor: v.focusOuterBorderColor,
                zIndexes: { foreground: v.focusBorderZIndex },
            },
            borderPadding: borderWidth,
        });
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ height: v.toggleButtonHeight, minWidth: v.toggleButtonHeight, color: v.toggleButtonColor, backgroundColor: v.toggleButtonBackgroundColor, borderRadius: v.toggleButtonBorderRadius, display: 'inline-flex', justifyContent: 'center', alignItems: 'center', position: 'relative', verticalAlign: 'middle', cursor: 'pointer', outline: 0, padding: 0, borderWidth: borderWidth, borderStyle: 'solid', borderColor: v.toggleButtonBorderColor, boxShadow: v.toggleButtonBoxShadow, borderTopLeftRadius: 0, borderBottomLeftRadius: 0 }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: true })), { ':before': tslib_1.__assign({}, getIndicatorStyles(p.disabled ? v.toggleButtonColorDisabled : p.primary ? v.toggleButtonPrimaryColor : v.toggleButtonColor, true, v.toggleButtonIndicatorSize)), ':hover': tslib_1.__assign(tslib_1.__assign({}, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })), { ':before': tslib_1.__assign({}, getIndicatorStyles(v.toggleButtonColorHover, false, v.toggleButtonIndicatorSize)), color: v.toggleButtonColorHover, background: v.toggleButtonBackgroundColorHover }), ':active': {
                color: v.toggleButtonColorActive,
                backgroundColor: v.toggleButtonBackgroundColorActive,
                borderColor: v.toggleButtonBorderColorActive,
                boxShadow: 'none',
            }, ':focus': borderFocusStyles[':focus'], ':focus-visible': {
                backgroundColor: v.toggleButtonBackgroundColorFocus,
                borderColor: v.toggleButtonBorderColorFocus,
                color: v.toggleButtonColorFocus,
                borderWidth: borderWidth,
                ':hover': {
                    borderColor: v.toggleButtonBorderColorHover,
                },
            } }), (p.primary && {
            color: v.toggleButtonPrimaryColor,
            backgroundColor: v.toggleButtonPrimaryBackgroundColor,
            borderColor: v.toggleButtonPrimaryBorderColor,
            boxShadow: v.toggleButtonPrimaryBoxShadow,
            borderWidth: "0 0 0 " + siteVariables.borderWidth,
            ':active': {
                backgroundColor: v.toggleButtonPrimaryBackgroundColorActive,
                boxShadow: 'none',
            },
            ':focus': borderFocusStyles[':focus'],
            ':focus-visible': {
                backgroundColor: v.toggleButtonPrimaryBackgroundColorFocus,
            },
            ':hover': {
                color: v.toggleButtonPrimaryHoverColor,
                backgroundColor: v.toggleButtonPrimaryHoverBackgroundColor,
            },
        })), (p.disabled && {
            cursor: 'default',
            color: v.toggleButtonColorDisabled,
            boxShadow: 'none',
            pointerEvents: 'none',
            ':hover': {
                color: v.toggleButtonColorDisabled,
            },
            backgroundColor: v.toggleButtonBackgroundColorDisabled,
            borderWidth: "0 0 0 " + siteVariables.borderWidth,
            borderColor: v.borderColorDisabled,
        })), (p.size === 'small' && {
            height: v.smallDimension,
            width: v.smallDimension,
            minWidth: v.smallMinWidth,
            boxShadow: v.smallBoxShadow,
        }));
    },
};
