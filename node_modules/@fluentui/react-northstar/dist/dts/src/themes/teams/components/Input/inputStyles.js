"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inputStyles = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
exports.inputStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ flexDirection: 'column', justifyContent: 'center', display: 'inline-flex', position: 'relative', outline: 0, verticalAlign: 'middle' }, (p.fluid && { width: '100%' })), (p.labelPosition === 'inline' && {
            flexDirection: 'row',
            alignItems: 'center',
        })));
    },
    input: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ backgroundColor: v.backgroundColor }, (p.inverted && {
            backgroundColor: v.backgroundColorInverted,
        })), { lineHeight: 'unset', color: v.fontColor, borderColor: v.borderColor, borderRadius: v.borderRadius, borderStyle: 'solid', borderWidth: v.borderWidth, outline: 'none', padding: v.inputPadding, position: 'relative' }), (p.fluid && { width: '100%' })), (p.inline && { float: 'left' })), (p.disabled && {
            color: v.colorDisabled,
            boxShadow: 'none',
        })), { '::placeholder': tslib_1.__assign({ color: v.placeholderColor, opacity: 1 }, (p.disabled && {
                color: v.colorDisabled,
            })), ':focus': tslib_1.__assign({}, (!p.error && { borderColor: v.inputFocusBorderColor, borderRadius: v.inputFocusBorderRadius })) }), (!p.hasValue && {
            ':-webkit-autofill:focus': {
                '-webkit-text-fill-color': 'transparent',
            },
        })), (p.clearable && { padding: v.inputPaddingWithIconAtEnd })), (p.hasIcon && {
            padding: p.iconPosition === 'start' ? v.inputPaddingWithIconAtStart : v.inputPaddingWithIconAtEnd,
        })), (p.labelPosition === 'inside' && {
            paddingTop: v.inputInsideLabelPaddingTop,
        })), (p.error && { border: utils_1.pxToRem(1) + " solid " + v.borderColorError })), { '::-ms-clear': {
                display: 'none',
            } }));
    },
    icon: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: v.iconColor, outline: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', position: v.iconPosition, top: 0, bottom: 0 }, (p.error && { color: v.colorError })), (p.requiredAndSuccessful && {
            color: v.successfulColor,
        })), (p.disabled && {
            color: v.colorDisabled,
        })), (p.iconPosition === 'start' && {
            left: v.iconLeft,
        })), (p.iconPosition === 'end' && {
            right: v.iconRight,
        })), (p.clearable &&
            p.hasValue && tslib_1.__assign({ height: '100%', width: utils_1.pxToRem(16), color: v.iconColor }, (p.disabled && {
            color: v.colorDisabled,
        })))));
    },
    inputContainer: function () { return ({
        position: 'relative',
    }); },
};
