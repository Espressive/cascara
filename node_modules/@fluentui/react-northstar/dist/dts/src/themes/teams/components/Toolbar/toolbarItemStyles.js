"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toolbarItemStyles = void 0;
var tslib_1 = require("tslib");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var colors_1 = require("../../colors");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
exports.toolbarItemStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var colors = colors_1.getColorScheme(v.colorScheme);
        var borderWidth = siteVariables.borderWidth;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: siteVariables,
        });
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'relative', backgroundColor: v.background, borderWidth: borderWidth, borderStyle: 'solid', borderColor: 'transparent', borderRadius: v.borderRadius, height: v.itemHeight, minWidth: v.itemHeight, padding: v.itemPadding, color: v.foreground || colors.foreground1, cursor: 'pointer', userSelect: 'none', ':focus': borderFocusStyles[':focus'] }, (p.active && tslib_1.__assign({ color: v.foregroundActive || colors.foregroundActive, backgroundColor: v.backgroundActive }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })))), { ':hover': tslib_1.__assign({ color: v.foregroundHover || colors.foregroundHover, backgroundColor: v.backgroundHover || colors.backgroundHover }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })), ':focus-visible': borderFocusStyles[':focus-visible'] }), (p.disabled && {
            color: v.foregroundDisabled || colors.foregroundDisabled1,
            backgroundColor: v.backgroundDisabled,
            cursor: 'default',
            pointerEvents: 'none',
            ':hover': {
            // empty to overwrite all existing hover styles
            },
        }));
    },
};
