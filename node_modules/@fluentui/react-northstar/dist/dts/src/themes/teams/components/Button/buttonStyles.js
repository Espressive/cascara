"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buttonStyles = void 0;
var tslib_1 = require("tslib");
var _ = require("lodash");
var utils_1 = require("../../../../utils");
var Loader_1 = require("../../../../components/Loader/Loader");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var durations_1 = require("../../animations/durations");
exports.buttonStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, theme = _a.theme;
        var siteVariables = theme.siteVariables;
        var borderWidth = siteVariables.borderWidth;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles(tslib_1.__assign({ variables: siteVariables, borderRadius: siteVariables.borderRadiusMedium, borderPadding: borderWidth }, (p.circular && {
            borderPadding: utils_1.pxToRem(4),
        })));
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ height: v.height, minWidth: _.isNil(p.loading) ? v.minWidth : v.loadingMinWidth, maxWidth: v.maxWidth, color: v.color, backgroundColor: v.backgroundColor, borderRadius: v.borderRadius, display: 'inline-flex', justifyContent: 'center', alignItems: 'center', position: 'relative', padding: v.padding, verticalAlign: 'middle', cursor: 'pointer', transition: durations_1.faster, userSelect: 'none' }, (p.size === 'small' && {
            padding: v.sizeSmallPadding,
            height: v.sizeSmallHeight,
            minWidth: v.sizeSmallMinWidth,
        })), (!p.text && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ outline: 0, borderWidth: borderWidth, borderStyle: 'solid', borderColor: v.borderColor, boxShadow: v.boxShadow, ':hover': {
                color: v.colorHover,
                backgroundColor: v.backgroundColorHover,
                borderColor: v.borderColorHover,
            } }, (!p.disabledFocusable && {
            ':active': {
                transition: durations_1.ultraFast,
                color: v.colorActive,
                backgroundColor: v.backgroundColorActive,
                borderColor: v.borderColorActive,
                boxShadow: 'none',
            },
        })), { ':focus': borderFocusStyles[':focus'], ':focus-visible': tslib_1.__assign(tslib_1.__assign({}, borderFocusStyles[':focus-visible']), { backgroundColor: v.backgroundColorFocus, borderColor: v.borderColorFocus, color: v.colorFocus, borderWidth: borderWidth, ':hover': {
                    borderColor: v.borderColorHover,
                } }) }), (p.size === 'small' && {
            boxShadow: 'none',
        })))), (p.circular &&
            !p.text && tslib_1.__assign({ minWidth: v.height, padding: 0, borderRadius: v.circularBorderRadius }, (p.size === 'small' && {
            minWidth: v.sizeSmallHeight,
        })))), (p.text && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: v.textColor, backgroundColor: 'transparent', borderColor: 'transparent', padding: "0 " + utils_1.pxToRem(8) }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: true })), { ':hover': tslib_1.__assign({ color: v.textColorHover }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })), ':focus': tslib_1.__assign({ boxShadow: 'none' }, borderFocusStyles[':focus']), ':focus-visible': borderFocusStyles[':focus-visible'] }), (p.primary && {
            color: v.textPrimaryColor,
        })))), (p.primary &&
            !p.text && tslib_1.__assign(tslib_1.__assign({ color: v.primaryColor, backgroundColor: v.primaryBackgroundColor, borderColor: v.primaryBorderColor, boxShadow: v.primaryBoxShadow }, (!p.disabledFocusable && {
            ':active': {
                transition: durations_1.ultraFast,
                backgroundColor: v.primaryBackgroundColorActive,
                boxShadow: 'none',
            },
        })), { ':focus': borderFocusStyles[':focus'], ':focus-visible': tslib_1.__assign(tslib_1.__assign({}, borderFocusStyles[':focus-visible']), { backgroundColor: v.primaryBackgroundColorFocus }), ':hover': {
                color: v.primaryColorHover,
                backgroundColor: v.primaryBackgroundColorHover,
            } }))), (p.inverted && tslib_1.__assign(tslib_1.__assign({ backgroundColor: siteVariables.colorScheme.silver.background, borderColor: siteVariables.colorScheme.silver.border, color: siteVariables.colorScheme.silver.foreground }, (!p.disabledFocusable && {
            ':active': {
                transition: durations_1.ultraFast,
                backgroundColor: siteVariables.colorScheme.silver.backgroundPressed,
                color: siteVariables.colorScheme.silver.foregroundHover,
            },
        })), { ':hover': {
                backgroundColor: siteVariables.colorScheme.silver.backgroundHover,
                color: siteVariables.colorScheme.silver.foregroundHover,
            }, ':focus': tslib_1.__assign(tslib_1.__assign({}, borderFocusStyles[':focus']), { boxShadow: 'none' }), ':focus-visible': tslib_1.__assign(tslib_1.__assign({}, borderFocusStyles[':focus-visible']), (!p.disabledFocusable && {
                backgroundColor: siteVariables.colorScheme.silver.backgroundPressed,
                color: siteVariables.colorScheme.silver.foregroundHover,
            })) }))), (p.tinted && tslib_1.__assign(tslib_1.__assign({ backgroundColor: v.tintedBackgroundColor, borderColor: v.tintedBorderColor, color: v.tintedColor }, (!p.disabledFocusable && {
            ':active': {
                transition: durations_1.ultraFast,
                backgroundColor: v.tintedBackgroundColorActive,
            },
        })), { ':hover': {
                color: v.tintedColorHover,
                backgroundColor: v.tintedBackgroundColorHover,
                borderColor: v.tintedBorderColorHover,
            }, ':focus': {
                boxShadow: 'none',
            } }))), (p.disabled && {
            // pointer events intentionally not disabled for focusable disabled buttons
            // so that hover events work
            pointerEvents: 'none',
        })), ((p.disabled || p.disabledFocusable) && tslib_1.__assign(tslib_1.__assign({ cursor: 'default', color: v.colorDisabled, boxShadow: 'none', ':hover': {
                color: v.colorDisabled,
            } }, (p.text && {
            color: v.textColorDisabled,
            backgroundColor: 'transparent',
            ':hover': {
                color: v.textColorDisabled,
            },
        })), (!p.text && {
            backgroundColor: v.backgroundColorDisabled,
            borderColor: v.borderColorDisabled,
        })))), (p.fluid && {
            width: '100%',
            maxWidth: '100%',
        })), (p.iconOnly && tslib_1.__assign(tslib_1.__assign({ minWidth: v.height, padding: 0 }, (!p.inverted && {
            ':hover': tslib_1.__assign(tslib_1.__assign({}, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })), { color: v.textColorIconOnlyHover, background: v.backgroundColorIconOnlyHover }),
        })), (p.size === 'small' && {
            minWidth: v.sizeSmallHeight,
        }))));
    },
    icon: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', alignItems: 'center', justifyContent: 'center', width: v.iconSize, height: v.iconSize }, (p.loading && {
            margin: 0,
            opacity: 0,
            width: 0,
        })), (p.hasContent && tslib_1.__assign({ margin: "0 " + utils_1.pxToRem(10) + " 0 0" }, (p.iconPosition === 'after' && {
            margin: "0 0 0 " + utils_1.pxToRem(10),
        })))));
    },
    loader: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign((_b = {}, _b["& ." + Loader_1.loaderSlotClassNames.indicator] = {
            width: p.size === 'small' ? v.sizeSmallLoaderSize : v.loaderSize,
            height: p.size === 'small' ? v.sizeSmallLoaderSize : v.loaderSize,
        }, _b["& ." + Loader_1.loaderSlotClassNames.svg] = {
            ':before': {
                animationName: {
                    to: {
                        transform: "translate3d(0, " + (p.size === 'small' ? v.sizeSmallLoaderSvgAnimationHeight : v.loaderSvgAnimationHeight) + ", 0)",
                    },
                },
                borderWidth: p.size === 'small' ? v.sizeSmallLoaderBorderSize : v.loaderBorderSize,
                width: p.size === 'small' ? v.sizeSmallLoaderSize : v.loaderSize,
                height: p.size === 'small' ? v.sizeSmallLoaderSvgHeight : v.loaderSvgHeight,
            },
        }, _b), (p.hasContent && {
            marginRight: utils_1.pxToRem(4),
        })));
    },
};
