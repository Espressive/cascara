"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.breadcrumbLinkStyles = void 0;
var tslib_1 = require("tslib");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
exports.breadcrumbLinkStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ variables: siteVariables }, (p.size === 'smaller' && {
            borderPadding: {
                top: v.linkPaddingTop,
                right: v.linkPaddingRightSmaller,
                bottom: v.linkPaddingBottom,
                left: v.linkPaddingLeftSmaller,
            },
        })), (p.size === 'small' && {
            borderPadding: {
                top: v.linkPaddingTop,
                right: v.linkPaddingRightSmall,
                bottom: v.linkPaddingBottom,
                left: v.linkPaddingLeftSmall,
            },
        })), (p.size === 'medium' && {
            borderPadding: {
                top: v.linkPaddingTop,
                right: v.linkPaddingRightMedium,
                bottom: v.linkPaddingBottom,
                left: v.linkPaddingLeftMedium,
            },
        })), (p.size === 'large' && {
            borderPadding: {
                top: v.linkPaddingTop,
                right: v.linkPaddingRightLarge,
                bottom: v.linkPaddingBottom,
                left: v.linkPaddingLeftLarge,
            },
        })));
        return tslib_1.__assign({ userSelect: 'none', display: 'flex', alignItems: 'center', position: 'relative', ':visited': {
                color: 'inherit',
            } }, borderFocusStyles);
    },
};
