"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachmentActionStyles = void 0;
var tslib_1 = require("tslib");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var utils_1 = require("../../../../utils");
var Loader_1 = require("../../../../components/Loader/Loader");
exports.attachmentActionStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, theme = _a.theme;
        var siteVariables = theme.siteVariables;
        var iconFilledStyles = getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false });
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: siteVariables,
            borderRadius: v.actionFocusBorderRadius,
        });
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ height: v.actionHeight, maxWidth: v.actionMaxWidth, display: 'inline-flex', justifyContent: 'center', alignItems: 'center', position: 'relative', verticalAlign: 'middle', cursor: 'pointer', 
            // text button defaults
            color: v.actionColor, backgroundColor: 'transparent', borderColor: 'transparent', padding: 0 }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: true })), { ':focus': tslib_1.__assign({ boxShadow: 'none' }, borderFocusStyles[':focus']), ':focus-visible': tslib_1.__assign(tslib_1.__assign({}, iconFilledStyles), borderFocusStyles[':focus-visible']) }), (p.primary && {
            color: v.actionPrimaryColor,
        })), (p.disabled && {
            cursor: 'default',
            boxShadow: 'none',
            pointerEvents: 'none',
            color: v.actionColorDisabled,
            backgroundColor: 'transparent',
            ':hover': {
                color: v.actionColorDisabled,
            },
        })), { minWidth: v.actionHeight, ':hover': tslib_1.__assign({}, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })) });
    },
    icon: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', alignItems: 'center', justifyContent: 'center', width: v.actionIconSize, height: v.actionIconSize }, (p.loading && {
            margin: 0,
            opacity: 0,
            width: 0,
        })), (p.hasContent && tslib_1.__assign({ margin: "0 " + utils_1.pxToRem(10) + " 0 0" }, (p.iconPosition === 'after' && {
            margin: "0 0 0 " + utils_1.pxToRem(10),
        })))));
    },
    loader: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign((_b = {}, _b["& ." + Loader_1.loaderSlotClassNames.indicator] = {
            width: v.actionLoaderSize,
            height: v.actionLoaderSize,
        }, _b["& ." + Loader_1.loaderSlotClassNames.svg] = {
            ':before': {
                animationName: {
                    to: {
                        transform: "translate3d(0, " + v.actionLoaderSvgAnimationHeight + ", 0)",
                    },
                },
                borderWidth: v.actionLoaderBorderSize,
                width: v.actionLoaderSize,
                height: v.actionLoaderSvgHeight,
            },
        }, _b), (p.hasContent && {
            marginRight: utils_1.pxToRem(4),
        })));
    },
};
