"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.popupContentStyles = void 0;
var tslib_1 = require("tslib");
var getPointerStyles_1 = require("../../getPointerStyles");
exports.popupContentStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ display: 'block', zIndex: v.zIndex }, (p.pointing && tslib_1.__assign({ pointerEvents: 'none' }, getPointerStyles_1.getContainerStyles({
            placement: p.basePlacement,
            padding: v.pointerMargin,
        })))), (p.autoSize && {
            // when autoSize is true, root will have inline style maxWidth and maxHeight set by popper
            display: 'flex',
            overflow: 'hidden',
        })));
    },
    pointer: function (_a) {
        var p = _a.props, v = _a.variables, rtl = _a.rtl;
        return getPointerStyles_1.getPointerStyles({
            backgroundColor: v.backgroundColor,
            borderColor: v.borderColor,
            borderSize: v.borderSize,
            gap: v.pointerGap,
            padding: v.pointerMargin,
            height: v.pointerHeight,
            width: v.pointerWidth,
            placement: p.basePlacement,
            rtl: rtl,
        });
    },
    content: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ display: 'block', background: v.backgroundColor, color: v.color, boxShadow: v.boxShadow, border: v.borderSize + " solid " + v.borderColor, borderRadius: v.borderRadius, padding: v.padding, transform: 'rotate(360deg)' }, (p.pointing && {
            pointerEvents: 'all',
        })), (p.autoSize && {
            overflow: 'auto',
        })));
    },
};
