"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.statusStyles = exports.getSizeStyles = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
var getBackgroundColor = function (state, variables) {
    switch (state) {
        case 'success':
            return variables.successBackgroundColor;
        case 'info':
            return variables.infoBackgroundColor;
        case 'warning':
            return variables.warningBackgroundColor;
        case 'error':
            return variables.errorBackgroundColor;
        case 'unknown':
        default:
            return variables.defaultBackgroundColor;
    }
};
var getTextColor = function (state, variables) {
    switch (state) {
        case 'success':
            return variables.successTextColor;
        case 'info':
            return variables.infoTextColor;
        case 'warning':
            return variables.warningTextColor;
        case 'error':
            return variables.errorTextColor;
        case 'unknown':
        default:
            return variables.defaultTextColor;
    }
};
var sizeToPxValue = {
    smallest: 6,
    smaller: 10,
    small: 10,
    medium: 10,
    large: 10,
    larger: 16,
    largest: 0,
};
var getSizeStyles = function (sizeInPx, variables) {
    var borderWidth = (variables.borderColor && variables.borderWidth) || 0;
    var sizeInRem = utils_1.pxToRem(sizeInPx + 2 * borderWidth);
    return {
        height: sizeInRem,
        width: sizeInRem,
    };
};
exports.getSizeStyles = getSizeStyles;
exports.statusStyles = {
    root: function (_a) {
        var _b = _a.props, color = _b.color, size = _b.size, state = _b.state, variables = _a.variables;
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', alignItems: 'center', justifyContent: 'center' }, exports.getSizeStyles(sizeToPxValue[size], variables)), { verticalAlign: 'middle', borderRadius: '9999px' }), (variables.borderColor && {
            borderColor: variables.borderColor,
            borderWidth: utils_1.pxToRem(variables.borderWidth),
            borderStyle: 'solid',
        })), { backgroundColor: color || getBackgroundColor(state, variables) });
    },
    icon: function (_a) {
        var state = _a.props.state, v = _a.variables;
        return ({
            display: 'inline-flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: v.iconSize,
            height: v.iconSize,
            color: getTextColor(state, v),
            '& > :first-child': {
                height: '100%',
                width: '100%',
                '& svg': {
                    height: '100%',
                    width: '100%',
                },
            },
        });
    },
};
