"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropdownItemStyles = void 0;
var tslib_1 = require("tslib");
var DropdownItem_1 = require("../../../../components/Dropdown/DropdownItem");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var utils_1 = require("../../../../utils");
var checkableIndicatorUrl_1 = require("./checkableIndicatorUrl");
exports.dropdownItemStyles = {
    root: function (_a) {
        var _b, _c;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'flex', alignItems: 'center', minHeight: 0, padding: utils_1.pxToRem(4) + " " + utils_1.pxToRem(11), whiteSpace: 'nowrap', border: v.listItemFocusBorderWidth + " solid transparent", backgroundColor: v.listItemBackgroundColor }, (p.selected && {
            fontWeight: v.listItemSelectedFontWeight,
            color: v.listItemSelectedColor,
        })), { position: 'relative' }), (p.active && tslib_1.__assign(tslib_1.__assign({}, (p.isFromKeyboard && getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables, borderRadius: 0 })[':focus-visible'])), (!p.isFromKeyboard && tslib_1.__assign(tslib_1.__assign({ color: v.listItemColorHover, backgroundColor: v.listItemBackgroundColorHover }, (p.hasHeader && (_b = {},
            _b["& ." + DropdownItem_1.dropdownItemSlotClassNames.header] = {
                color: v.listItemColorHover,
            },
            _b))), (p.hasContent && (_c = {},
            _c["& ." + DropdownItem_1.dropdownItemSlotClassNames.content] = {
                color: v.listItemColorHover,
            },
            _c))))))));
    },
    image: function () { return ({
        margin: utils_1.pxToRem(3) + " " + utils_1.pxToRem(12) + " " + utils_1.pxToRem(3) + " " + utils_1.pxToRem(4),
    }); },
    header: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ flexGrow: 1, lineHeight: v.listItemHeaderLineHeight, fontSize: v.listItemHeaderFontSize, 
            // if the item doesn't have content - i.e. it is header only - then it should use the content color
            color: v.listItemContentColor }, (p.hasContent && {
            // if there is content it needs to be "tightened up" to the header
            marginBottom: utils_1.pxToRem(-1),
            color: v.listItemHeaderColor,
        })), (p.selected && {
            fontWeight: v.listItemSelectedFontWeight,
            color: v.listItemSelectedColor,
        })), { whiteSpace: 'normal' }));
    },
    content: function (_a) {
        var v = _a.variables;
        return ({
            flexGrow: 1,
            lineHeight: v.listItemContentLineHeight,
            fontSize: v.listItemContentFontSize,
            color: v.listItemContentColor,
        });
    },
    checkableIndicator: function (_a) {
        var v = _a.variables;
        return ({
            backgroundImage: checkableIndicatorUrl_1.checkableIndicatorUrl(v.listItemSelectedColor),
            backgroundPosition: 'center',
            backgroundRepeat: 'no-repeat',
            position: 'absolute',
            width: utils_1.pxToRem(24),
            height: utils_1.pxToRem(24),
            right: utils_1.pxToRem(7),
            top: utils_1.pxToRem(-3),
        });
    },
    endMedia: function () { return ({
        flexShrink: 0,
        lineHeight: utils_1.pxToRem(16),
    }); },
    main: function () { return ({
        display: 'flex',
        flexDirection: 'column',
        flexGrow: 1,
        minWidth: 0,
    }); },
};
