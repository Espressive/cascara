"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitButtonStyles = void 0;
var tslib_1 = require("tslib");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
exports.splitButtonStyles = {
    menuButton: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ borderTopRightRadius: 0, borderBottomRightRadius: 0, borderRightWidth: 0, padding: v.padding, minWidth: v.minWidth }, (p.size === 'small' && {
            height: v.smallDimension,
            padding: v.smallPadding,
            minWidth: v.smallMinWidth,
            boxShadow: v.smallBoxShadow,
        })), { ':focus-visible': {
                borderRightWidth: 0,
                ':before': {
                    borderRightWidth: 0,
                },
                ':after': {
                    borderRightWidth: 0,
                },
            }, ':active': {
                animationName: 'unset',
                animationDuration: 'unset',
            } }));
    },
    root: function (_a) {
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: {
                borderRadius: v.focusBorderRadius,
                borderWidth: v.focusBorderWidth,
                focusInnerBorderColor: v.focusInnerBorderColor,
                focusOuterBorderColor: v.focusOuterBorderColor,
                zIndexes: { foreground: v.focusBorderZIndex },
            },
        });
        return {
            borderRadius: v.borderRadius,
            position: 'relative',
            whiteSpace: 'nowrap',
            display: 'inline-block',
            width: 'fit-content',
            ':focus-within': tslib_1.__assign({ boxShadow: 'none' }, (p.isFromKeyboard && tslib_1.__assign({}, borderFocusStyles[':focus-visible']))),
        };
    },
};
