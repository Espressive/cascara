"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropdownStyles = void 0;
var tslib_1 = require("tslib");
var Dropdown_1 = require("../../../../components/Dropdown/Dropdown");
var utils_1 = require("../../../../utils");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var transparentColorStyle = {
    backgroundColor: 'transparent',
    borderColor: 'transparent',
    borderBottomColor: 'transparent',
};
var transparentColorStyleObj = tslib_1.__assign(tslib_1.__assign({}, transparentColorStyle), { ':hover': transparentColorStyle, ':active': transparentColorStyle, ':focus': tslib_1.__assign(tslib_1.__assign({}, transparentColorStyle), { ':active': transparentColorStyle }) });
var getWidth = function (p, v) {
    if (p.fluid) {
        return '100%';
    }
    if (p.inline) {
        return 'initial';
    }
    return v.width;
};
exports.dropdownStyles = {
    root: function (_a) {
        var p = _a.props;
        return (tslib_1.__assign({}, (p.inline && { display: 'inline-flex' })));
    },
    clearIndicator: function (_a) {
        var v = _a.variables, siteVariables = _a.theme.siteVariables;
        return (tslib_1.__assign({ alignItems: 'center', alignSelf: 'center', display: 'flex', justifyContent: 'center', cursor: 'pointer', userSelect: 'none', margin: 0, position: 'absolute', right: utils_1.pxToRem(6), padding: utils_1.pxToRem(2), color: v.color }, getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })));
    },
    container: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'flex', flexWrap: 'wrap', position: 'relative', borderStyle: 'solid', borderColor: v.borderColor, outline: 0, width: getWidth(p, v), borderWidth: p.search ? "0 0 " + v.searchBorderBottomWidth + " 0" : v.borderWidth, color: v.color, backgroundColor: v.backgroundColor, borderRadius: v.containerBorderRadius }, (p.open && p.position === 'above' && { borderRadius: v.openAboveContainerBorderRadius })), (p.open && p.position === 'below' && { borderRadius: v.openBelowContainerBorderRadius })), { ':hover': tslib_1.__assign({ backgroundColor: v.backgroundColorHover, borderColor: v.borderColorHover }, (p.open && {
                borderColor: v.openBorderColorHover,
            })) }), (p.error && {
            border: utils_1.pxToRem(1) + " solid " + v.borderError,
            ':hover': { border: utils_1.pxToRem(1) + " solid " + v.borderError },
        })), { ':active': {
                backgroundColor: v.backgroundColor,
            }, ':focus-within': {
                // when dropdown's selected items are focused
                // keep the focus border style
                borderBottomColor: v.borderColorFocus,
            } }), (p.focused && tslib_1.__assign(tslib_1.__assign({ backgroundColor: v.backgroundColor }, (p.search && {
            borderBottomColor: v.borderColorFocus,
        })), (!p.search &&
            !p.open &&
            p.isFromKeyboard &&
            getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })[':focus-visible'])))), (p.inline && tslib_1.__assign(tslib_1.__assign({}, transparentColorStyleObj), { alignItems: 'center' }))), (p.inverted && {
            backgroundColor: v.invertedBackgroundColor,
            ':hover': {
                backgroundColor: v.invertedBackgroundColorHover,
            },
            ':active': {
                backgroundColor: v.invertedBackgroundColorHover,
            },
            ':focus': {
                backgroundColor: v.invertedBackgroundColorHover,
            },
        })), (p.disabled && {
            backgroundColor: siteVariables.colorScheme.default.backgroundDisabled,
            borderColor: siteVariables.colorScheme.default.borderDisabled,
            userSelect: 'none',
            ':hover': {
                backgroundColor: siteVariables.colorScheme.default.backgroundDisabled,
            },
            ':active': {
                backgroundColor: siteVariables.colorScheme.default.backgroundDisabled,
            },
        })), (_b = {}, _b["& ." + Dropdown_1.dropdownSlotClassNames.triggerButton] = tslib_1.__assign({}, (p.disabled && {
            color: siteVariables.colorScheme.default.foregroundDisabled,
        })), _b)));
    },
    selectedItems: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ display: 'flex', flexWrap: 'wrap', overflowY: 'auto', overflowX: 'hidden', maxHeight: v.selectedItemsMaxHeight, width: '100%' }, (p.hasToggleIndicator && { paddingRight: v.toggleIndicatorSize })), (p.multiple &&
            p.hasItemsSelected && {
            paddingTop: utils_1.pxToRem(1),
            paddingBottom: utils_1.pxToRem(4),
        })));
    },
    triggerButton: function (_a) {
        var p = _a.props, v = _a.variables;
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ overflow: 'hidden', boxShadow: 'none', minHeight: utils_1.pxToRem(32) }, transparentColorStyleObj), { margin: '0', justifyContent: 'left', padding: v.comboboxPaddingButton }), (p.multiple && tslib_1.__assign({ minWidth: 0, flex: 1 }, (p.hasItemsSelected && {
            position: 'absolute',
            top: 0,
            right: 0,
            left: 0,
            bottom: 0,
            height: '100%',
        })))), transparentColorStyleObj), { ':focus': tslib_1.__assign({ color: v.color }, transparentColorStyleObj), ':focus-visible': tslib_1.__assign(tslib_1.__assign({ color: v.color }, transparentColorStyle), { ':after': {
                    borderColor: 'transparent',
                    borderRightWidth: 0,
                }, ':before': {
                    borderColor: 'transparent',
                    borderRightWidth: 0,
                } }), ':active': tslib_1.__assign(tslib_1.__assign({ color: v.color }, transparentColorStyle), { animationName: 'unset', animationDuration: 'unset' }), ':hover': tslib_1.__assign(tslib_1.__assign({}, transparentColorStyle), { color: v.color }) }), (p.inline && {
            paddingLeft: 0,
            paddingRight: 0,
            width: 'initial',
        }));
    },
    list: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ outline: 0, borderStyle: 'solid', borderWidth: p.open ? v.listBorderWidth : '0px', borderColor: v.listBorderColor, zIndex: v.overlayZIndex, maxHeight: v.listMaxHeight, overflowY: 'auto', width: getWidth(p, v), background: v.listBackgroundColor }, (p.position === 'above' && { borderRadius: v.aboveListBorderRadius })), (p.position === 'below' && { borderRadius: v.belowListBorderRadius })), (p.open && {
            boxShadow: v.listBoxShadow,
            padding: v.listPadding,
        })));
    },
    loadingMessage: function (_a) {
        var v = _a.variables;
        return ({
            backgroundColor: v.loadingMessageBackgroundColor,
        });
    },
    noResultsMessage: function (_a) {
        var v = _a.variables;
        return ({
            backgroundColor: v.noResultsMessageBackgroundColor,
        });
    },
    headerMessage: function (_a) {
        var v = _a.variables;
        return ({
            backgroundColor: v.headerMessageBackgroundColor,
        });
    },
    toggleIndicator: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ alignItems: 'center', display: 'flex', justifyContent: 'center', alignSelf: 'center', cursor: 'pointer' }, (p.disabled && {
            cursor: 'default',
        })), { userSelect: 'none', margin: 0, position: 'absolute', right: utils_1.pxToRem(8) }), (p.multiple &&
            p.hasItemsSelected && {
            top: utils_1.pxToRem(8),
        })), { color: v.color }), (p.disabled && { color: v.disabledColor })));
    },
};
