"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.carouselNavigationItemStyles = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
var CarouselNavigationItem_1 = require("../../../../components/Carousel/CarouselNavigationItem");
var colors_1 = require("../../colors");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
exports.carouselNavigationItemStyles = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables;
        var active = p.active, iconOnly = p.iconOnly, primary = p.primary, vertical = p.vertical, thumbnails = p.thumbnails;
        var colors = colors_1.getColorScheme(v.colorScheme, null, primary);
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: 'inherit', display: 'block', cursor: 'pointer', whiteSpace: 'nowrap' }, (iconOnly && {
            border: utils_1.pxToRem(2) + " solid transparent",
        })), (vertical
            ? { padding: v.verticalItemPadding }
            : {
                padding: v.horizontalPadding,
            })), (iconOnly && {
            margin: utils_1.pxToRem(1),
            padding: utils_1.pxToRem(5),
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
        })), (active &&
            iconOnly && tslib_1.__assign({ color: v.iconOnlyColorActive }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })))), { 
            // focus styles
            ':focus-visible': tslib_1.__assign({}, (iconOnly && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ borderRadius: '50%' }, (thumbnails && { borderRadius: '0' })), { borderColor: v.iconOnlyColorActive }), getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })))) }), (iconOnly &&
            primary && {
            color: 'inherit',
            borderColor: v.borderColorActive || colors.borderActive,
        })), { ':focus': {
                outline: 0,
            }, 
            // hover styles
            ':hover': tslib_1.__assign(tslib_1.__assign((_b = { color: 'inherit' }, _b["& ." + CarouselNavigationItem_1.carouselNavigationItemSlotClassNames.indicator] = {
                background: v.indicatorBackgroundColor,
            }, _b), (iconOnly && getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false }))), (primary && iconOnly && { color: 'inherit' })) });
    },
    content: function (_a) {
        var p = _a.props;
        var widthAdjust = p.hasIndicator ? 26 : 0;
        return tslib_1.__assign(tslib_1.__assign({ whiteSpace: 'normal', lineHeight: 1.5, marginTop: utils_1.pxToRem(-4), marginBottom: utils_1.pxToRem(-4), display: 'inline-block' }, (p.thumbnails && tslib_1.__assign({ width: utils_1.pxToRem(60) }, (!p.active && { opacity: 0.4 })))), (p.vertical && {
            width: 'max-content',
            minWidth: utils_1.pxToRem(46 - widthAdjust),
            maxWidth: utils_1.pxToRem(262 - widthAdjust),
            marginRight: utils_1.pxToRem(16),
        }));
    },
    indicator: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ borderRadius: '50%', width: utils_1.pxToRem(7), height: utils_1.pxToRem(7), background: v.indicatorBackgroundColor }, (p.active && {
            background: v.indicatorActiveBackgroundColor,
        })), (p.hasContent && {
            marginRight: utils_1.pxToRem(10),
        })), (!p.iconOnly && {
            // reduce margins so text has the dominant influence on the vertical height
            marginTop: 0,
            marginBottom: utils_1.pxToRem(-8),
            verticalAlign: 'top',
        })));
    },
};
