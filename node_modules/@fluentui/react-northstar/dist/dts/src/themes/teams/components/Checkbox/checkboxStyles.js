"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkboxStyles = void 0;
var tslib_1 = require("tslib");
var Checkbox_1 = require("../../../../components/Checkbox/Checkbox");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var checkboxIndicatorUrl_1 = require("./checkboxIndicatorUrl");
var checkboxIndeterminateIndicatorUrl_1 = require("./checkboxIndeterminateIndicatorUrl");
var utils_1 = require("../../../../utils");
var commonToggleBeforeStyles = function (v) { return ({
    content: "' '",
    display: 'block',
    borderRadius: '50%',
    width: v.toggleIndicatorSize,
    height: v.toggleIndicatorSize,
    transition: 'margin .3s ease',
}); };
exports.checkboxStyles = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, t = _a.theme;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'relative', display: 'inline-grid', gridTemplateColumns: "auto " + v.gap + " 1fr", 
            // IE11: Gap is done via virtual column as in autoprefixer
            msGridColumns: "auto " + v.gap + " 1fr" }, (p.labelPosition === 'start' && {
            gridTemplateColumns: "1fr " + v.gap + " auto",
            msGridColumns: "1fr " + v.gap + " auto",
        })), { cursor: 'pointer', outline: 0, color: v.textColor, padding: v.rootPadding, verticalAlign: 'middle', alignItems: 'start' }), getBorderFocusStyles_1.getBorderFocusStyles({ variables: t.siteVariables, borderRadius: '3px' })), { ':hover': (_b = {
                    color: v.textColorHover
                },
                _b["& ." + Checkbox_1.checkboxSlotClassNames.indicator] = tslib_1.__assign(tslib_1.__assign({}, (!p.toggle && tslib_1.__assign(tslib_1.__assign({}, (p.checked &&
                    p.checked !== 'mixed' && {
                    borderColor: v.checkedBackgroundHover,
                    backgroundImage: checkboxIndicatorUrl_1.checkboxIndicatorUrl(v.checkedIndicatorColor, v.checkedBackgroundHover),
                })), (!p.checked && {
                    borderColor: v.borderColorHover,
                })))), (p.toggle &&
                    !p.disabled && tslib_1.__assign({ borderColor: v.borderColorHover, ':before': tslib_1.__assign(tslib_1.__assign({}, commonToggleBeforeStyles(v)), { borderColor: v.borderColorHover, borderStyle: v.borderStyle, borderWidth: v.borderWidth, margin: v.togglePadding, background: 'transparent' }) }, (p.checked && {
                    borderColor: v.checkedBorderColor,
                    background: v.checkedBackgroundHover,
                    ':before': tslib_1.__assign(tslib_1.__assign({}, commonToggleBeforeStyles(v)), { margin: v.toggleCheckedPadding, background: v.checkedIndicatorColor }),
                })))),
                _b) }), (p.checked && {
            color: v.checkedTextColor,
        })), (p.disabled && {
            cursor: 'default',
            pointerEvents: 'none',
            color: v.disabledColor,
        })));
    },
    checkbox: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ msGridRowAlign: 'center', gridColumn: 1, msGridColumn: 1 }, (p.labelPosition === 'start' && {
            gridColumn: 3,
            msGridColumn: 3,
        })), { boxShadow: 'unset', width: utils_1.pxToRem(16), height: utils_1.pxToRem(16), borderColor: v.borderColor, borderStyle: v.borderStyle, borderRadius: v.borderRadius, borderWidth: v.borderWidth, color: v.indicatorColor, margin: v.margin, padding: v.padding, userSelect: 'none', backgroundImage: checkboxIndicatorUrl_1.checkboxIndicatorUrl(v.indicatorColor, v.background), backgroundPosition: 'center', backgroundRepeat: 'no-repeat' }), (p.checked &&
            p.checked && {
            borderColor: v.checkedBorderColor,
            backgroundImage: checkboxIndicatorUrl_1.checkboxIndicatorUrl(v.checkedIndicatorColor, v.checkedBackground),
        })), (p.checked === 'mixed' && {
            borderColor: v.checkedBorderColor,
            backgroundImage: checkboxIndeterminateIndicatorUrl_1.checkboxIndicatorIndeterminateUrl(v.checkedIndicatorColor, v.checkedBackground),
        })), (p.disabled && {
            backgroundColor: v.disabledBackground,
            borderColor: v.disabledBorderColor,
        })), (p.disabled &&
            p.checked && {
            color: v.disabledCheckedIndicatorColor,
            borderColor: v.disabledBackgroundChecked,
            backgroundImage: checkboxIndicatorUrl_1.checkboxIndicatorUrl(v.disabledCheckedIndicatorColor, v.disabledBackgroundChecked),
        })), (p.disabled &&
            p.checked === 'mixed' && {
            color: v.disabledCheckedIndicatorColor,
            borderColor: v.disabledBackgroundChecked,
            backgroundImage: checkboxIndeterminateIndicatorUrl_1.checkboxIndicatorIndeterminateUrl(v.disabledCheckedIndicatorColor, v.disabledBackgroundChecked),
        })));
    },
    toggle: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ msGridRowAlign: 'center', gridColumn: 1, msGridColumn: 1 }, (p.labelPosition === 'start' && {
            gridColumn: 3,
            msGridColumn: 3,
        })), { boxShadow: 'unset', boxSizing: 'border-box', background: v.background, borderColor: v.borderColor, borderStyle: v.borderStyle, borderRadius: v.toggleBorderRadius, borderWidth: v.borderWidth, margin: v.toggleMargin, userSelect: 'none', width: v.toggleWidth, height: v.toggleHeight, ':before': tslib_1.__assign(tslib_1.__assign({}, commonToggleBeforeStyles(v)), { borderColor: p.disabled ? v.disabledToggleIndicatorColor : v.borderColor, borderStyle: v.borderStyle, borderWidth: v.borderWidth, margin: v.togglePadding }) }), (p.checked && {
            borderColor: v.checkedBorderColor,
            background: v.checkedBackground,
            ':before': tslib_1.__assign(tslib_1.__assign({}, commonToggleBeforeStyles(v)), { margin: v.toggleCheckedPadding, background: v.checkedIndicatorColor }),
        })), (p.disabled && tslib_1.__assign({ background: v.disabledBackground, borderColor: v.disabledBorderColor }, (p.checked && {
            background: v.disabledBackgroundChecked,
            borderColor: 'transparent',
            ':before': tslib_1.__assign(tslib_1.__assign({}, commonToggleBeforeStyles(v)), { margin: v.toggleCheckedPadding, background: v.disabledCheckedIndicatorColor }),
        })))));
    },
    label: function (_a) {
        var p = _a.props;
        return (tslib_1.__assign({ display: 'block', userSelect: 'none', gridColumn: 3, msGridColumn: 3 }, (p.labelPosition === 'start' && {
            gridColumn: 1,
            msGridColumn: 1,
        })));
    },
};
