"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.alertDismissActionStyles = void 0;
var tslib_1 = require("tslib");
var AlertDismissAction_1 = require("../../../../components/Alert/AlertDismissAction");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var dismissIndicatorUrl_1 = require("./dismissIndicatorUrl");
var alertStyles_1 = require("./alertStyles");
var durations_1 = require("../../animations/durations");
var getIndicatorStyles = function (color, outline, size) {
    return {
        width: size,
        height: size,
        backgroundImage: dismissIndicatorUrl_1.dismissIndicatorUrl(color, outline),
        backgroundRepeat: 'no-repeat',
    };
};
exports.alertDismissActionStyles = {
    root: function (_a) {
        var _b, _c, _d;
        var p = _a.props, v = _a.variables, theme = _a.theme;
        var siteVariables = theme.siteVariables;
        var borderWidth = siteVariables.borderWidth;
        var dismissActionIndicatorColor = alertStyles_1.getIntentColorsFromProps(p, v).color;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: {
                borderRadius: v.focusBorderRadius,
                borderWidth: v.focusBorderWidth,
                focusInnerBorderColor: v.focusInnerBorderColor,
                focusOuterBorderColor: v.focusOuterBorderColor,
                zIndexes: { foreground: v.focusBorderZIndex },
            },
            borderPadding: borderWidth,
        });
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ height: v.dismissActionSize, minWidth: v.dismissActionSize, color: v.dismissActionColor || 'currentColor', outline: 0, padding: 0, borderWidth: 0, backgroundColor: v.dismissActionBackgroundColor, borderRadius: v.borderRadius, display: 'inline-flex', justifyContent: 'center', alignItems: 'center', position: 'relative', verticalAlign: 'middle', cursor: 'pointer', transition: durations_1.faster }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: true })), (!p.hasContent && (_b = {},
            _b["& ." + AlertDismissAction_1.alertDismissActionSlotClassNames.content] = tslib_1.__assign({}, getIndicatorStyles(dismissActionIndicatorColor, true, v.dismissActionIndicatorSize)),
            _b))), { ':hover': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ backgroundColor: v.hoverBackgroundColor, color: 'currentColor' }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })), (!p.hasContent && (_c = {},
                _c["& ." + AlertDismissAction_1.alertDismissActionSlotClassNames.content] = tslib_1.__assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v.dismissActionIndicatorSize)),
                _c))), getBorderFocusStyles_1.getBorderFocusStyles({
                variables: {
                    borderRadius: v.dismissActionHoverBorderRadius,
                    borderWidth: v.dismissActionHoverBorderWidth,
                    focusInnerBorderColor: v.dismissActionHoverInnerBorderColor,
                    focusOuterBorderColor: v.dismissActionHoverOuterBorderColor,
                    zIndexes: { foreground: v.dismissActionHoverZIndex },
                },
            })[':focus-visible']), ':focus': borderFocusStyles[':focus'], ':focus-visible': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ backgroundColor: v.focusBackgroundColor, borderColor: v.dismissActionBorderColorFocus, color: v.dismissActionColorFocus, borderWidth: borderWidth }, borderFocusStyles[':focus-visible']), getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })), (!p.hasContent && (_d = {},
                _d["& ." + AlertDismissAction_1.alertDismissActionSlotClassNames.content] = tslib_1.__assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v.dismissActionIndicatorSize)),
                _d))), { ':hover': {
                    borderColor: v.dismissActionBorderColorHover,
                } }) }), (p.disabled && {
            cursor: 'default',
            color: v.dismissActionColorDisabled,
            boxShadow: 'none',
            pointerEvents: 'none',
            ':hover': {
                color: v.dismissActionColorDisabled,
            },
            backgroundColor: v.dismissActionBackgroundColorDisabled,
            borderColor: v.dismissActionBorderColorDisabled,
        }));
    },
    content: function (_a) {
        var p = _a.props, v = _a.variables;
        var dismissActionIndicatorColor = alertStyles_1.getIntentColorsFromProps(p, v).color;
        return tslib_1.__assign({ fontWeight: v.dismissActionContentFontWeight }, (!p.hasContent && tslib_1.__assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v.dismissActionIndicatorSize))));
    },
};
