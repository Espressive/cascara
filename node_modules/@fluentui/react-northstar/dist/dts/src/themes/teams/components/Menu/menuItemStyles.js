"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuItemStyles = exports.pointingBeak = exports.getFocusedStyles = exports.underlinedItem = exports.verticalPointingBottomMargin = exports.horizontalPillsRightMargin = exports.verticalPillsBottomMargin = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
var colors_1 = require("../../colors");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
exports.verticalPillsBottomMargin = utils_1.pxToRem(5);
exports.horizontalPillsRightMargin = utils_1.pxToRem(8);
exports.verticalPointingBottomMargin = utils_1.pxToRem(12);
var underlinedItem = function (color) { return ({
    paddingBottom: 0,
    borderBottom: "solid " + utils_1.pxToRem(4) + " " + color,
    transition: 'color .1s ease',
}); };
exports.underlinedItem = underlinedItem;
var getFocusedStyles = function (_a) {
    var props = _a.props, v = _a.variables, colors = _a.colors;
    var primary = props.primary, underlined = props.underlined, active = props.active, vertical = props.vertical;
    if (active && !underlined && !vertical)
        return {};
    return tslib_1.__assign(tslib_1.__assign({ color: v.colorActive || colors.foregroundActive, background: v.backgroundColorFocus || colors.backgroundFocus }, (primary && {
        color: colors.foregroundFocus,
        background: colors.backgroundFocus,
    })), (vertical && tslib_1.__assign(tslib_1.__assign({ border: "solid 1px " + v.borderColorFocus, outline: "solid 1px " + v.outlineColorFocus, margin: utils_1.pxToRem(1), background: v.verticalBackgroundColorFocus, color: v.colorFocus || colors.foregroundFocus }, (primary && { color: v.color })), (active && tslib_1.__assign({ color: v.colorActive, background: v.backgroundColorActive || colors.backgroundActive }, (primary && { color: colors.foregroundFocus }))))));
};
exports.getFocusedStyles = getFocusedStyles;
var pointingBeak = function (_a) {
    var props = _a.props, v = _a.variables, colors = _a.colors;
    var pointing = props.pointing, primary = props.primary;
    var top;
    var borders;
    var backgroundColor = v.backgroundColorActive || colors.backgroundActive;
    var borderColor = v.borderColor || primary ? v.primaryBorderColor : colors.border;
    if (pointing === 'start') {
        borders = {
            borderTop: "1px solid " + borderColor,
            borderLeft: "1px solid " + borderColor,
        };
        top = '-1px'; // 1px for the border
    }
    else {
        borders = {
            borderBottom: "1px solid " + borderColor,
            borderRight: "1px solid " + borderColor,
        };
        top = '100%';
    }
    return {
        '::after': tslib_1.__assign(tslib_1.__assign({ visibility: 'visible', background: backgroundColor, position: 'absolute', content: '""', top: top, left: '50%', transform: 'translateX(-50%) translateY(-50%) rotate(45deg)', margin: '.5px 0 0', width: utils_1.pxToRem(10), height: utils_1.pxToRem(10), border: 'none' }, borders), { zIndex: v.beakZIndex, transition: 'background .1s ease' }),
    };
};
exports.pointingBeak = pointingBeak;
exports.menuItemStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var active = p.active, iconOnly = p.iconOnly, isFromKeyboard = p.isFromKeyboard, pointing = p.pointing, primary = p.primary, underlined = p.underlined, vertical = p.vertical, disabled = p.disabled;
        var colors = colors_1.getColorScheme(v.colorScheme, null, primary);
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: 'inherit', display: 'block', cursor: 'pointer', whiteSpace: 'nowrap', overflow: 'hidden' }, (pointing &&
            vertical && {
            border: '1px solid transparent',
        })), (iconOnly && {
            border: utils_1.pxToRem(2) + " solid transparent",
        })), { padding: v.horizontalPadding }), (vertical && { padding: v.verticalItemPadding })), (pointing && vertical && { padding: utils_1.pxToRem(8) + " " + utils_1.pxToRem(18) })), (underlined && { padding: utils_1.pxToRem(4) + " 0" })), (iconOnly && {
            margin: utils_1.pxToRem(1),
            padding: utils_1.pxToRem(5),
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            overflow: 'visible',
        })), (active && tslib_1.__assign(tslib_1.__assign({}, (iconOnly && tslib_1.__assign({ color: v.iconOnlyColorActive }, getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })))), (underlined && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: v.activeUnderlinedColor }, exports.underlinedItem(v.activeUnderlinedBorderBottomColor)), (primary && tslib_1.__assign({ color: v.activeUnderlinedPrimaryColor }, exports.underlinedItem(v.borderColorActive || colors.borderActive)))), (!primary && { fontWeight: 700 })))))), (isFromKeyboard && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: 'inherit' }, (iconOnly && tslib_1.__assign(tslib_1.__assign({}, getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })), getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false })))), (primary
            ? tslib_1.__assign({}, (iconOnly && {
                borderColor: v.borderColorActive || colors.borderActive,
            })) : tslib_1.__assign(tslib_1.__assign({}, (underlined && { fontWeight: 700 })), (underlined && active && exports.underlinedItem(v.colorActive))))), (underlined && tslib_1.__assign(tslib_1.__assign({}, getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })), { ':focus-visible': tslib_1.__assign(tslib_1.__assign({}, getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })[':focus-visible']), { borderColor: v.borderColorActive }) }))))), { ':focus': {
                outline: 0,
            }, 
            // hover styles
            ':hover': tslib_1.__assign(tslib_1.__assign({ color: v.colorHover }, (underlined && { color: v.underlinedColorHover })), (!disabled && tslib_1.__assign(tslib_1.__assign({}, (iconOnly && getIconFillOrOutlineStyles_1.getIconFillOrOutlineStyles({ outline: false }))), (primary
                ? tslib_1.__assign(tslib_1.__assign({}, (iconOnly && { color: 'inherit' })), (!active && underlined && exports.underlinedItem(v.underlinedBorderColor || colors.backgroundActive))) : !active && underlined && exports.underlinedItem(v.backgroundColorActive || colors.backgroundActive))))) }), (disabled && {
            cursor: 'default',
        }));
    },
    menu: function (_a) {
        var v = _a.variables;
        return ({ zIndex: v.menuZIndex });
    },
};
