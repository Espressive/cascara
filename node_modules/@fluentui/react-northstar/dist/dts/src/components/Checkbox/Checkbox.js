"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkbox = exports.checkboxSlotClassNames = exports.checkboxClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var state_1 = require("@fluentui/state");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var Text_1 = require("../Text/Text");
exports.checkboxClassName = 'ui-checkbox';
exports.checkboxSlotClassNames = {
    label: exports.checkboxClassName + "__label",
    indicator: exports.checkboxClassName + "__indicator",
};
/**
 * A Checkbox allows a user to make a choice between two mutually exclusive options.
 *
 * @accessibility
 * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.
 */
var Checkbox = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Checkbox.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var checked = props.checked, className = props.className, defaultChecked = props.defaultChecked, design = props.design, disabled = props.disabled, label = props.label, labelPosition = props.labelPosition, indicator = props.indicator, styles = props.styles, toggle = props.toggle, variables = props.variables;
    var _b = react_bindings_1.useStateManager(state_1.createCheckboxManager, {
        mapPropsToInitialState: function () { return ({ checked: defaultChecked }); },
        mapPropsToState: function () { return ({ checked: checked === 'mixed' ? false : checked }); },
    }), state = _b.state, actions = _b.actions;
    var getA11Props = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Checkbox.displayName,
        mapPropsToBehavior: function () { return ({
            checked: state.checked,
            disabled: disabled,
        }); },
        actionHandlers: {
            performClick: function (e) {
                e.preventDefault();
                handleClick(e);
            },
        },
        rtl: context.rtl,
    });
    var _c = react_bindings_1.useStyles(exports.Checkbox.displayName, {
        className: exports.checkboxClassName,
        mapPropsToStyles: function () { return ({
            checked: checked === 'mixed' ? 'mixed' : state.checked,
            disabled: disabled,
            labelPosition: labelPosition,
            toggle: toggle,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _c.classes, resolvedStyles = _c.styles;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Checkbox.handledProps, props);
    var handleChange = function (e) {
        if (!disabled) {
            // Checkbox component doesn't present any `input` component in markup, however all of our
            // components should handle events transparently.
            var checked_1 = !state.checked;
            actions.toggle(checked_1);
            _.invoke(props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { checked: checked_1 }));
        }
    };
    var handleClick = function (e) {
        if (!disabled) {
            var checked_2 = !state.checked;
            actions.toggle(checked_2);
            _.invoke(props, 'onClick', e, tslib_1.__assign(tslib_1.__assign({}, props), { checked: checked_2 }));
            _.invoke(props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { checked: checked_2 }));
        }
    };
    var labelElement = Text_1.Text.create(label, {
        defaultProps: function () {
            return getA11Props('label', {
                styles: resolvedStyles.label,
                className: exports.checkboxSlotClassNames.label,
            });
        },
    });
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign({ className: classes.root, onClick: handleClick, onChange: handleChange }, unhandledProps))),
        labelPosition === 'start' && labelElement,
        Box_1.Box.create(indicator, {
            defaultProps: function () {
                return getA11Props('indicator', {
                    className: exports.checkboxSlotClassNames.indicator,
                    styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,
                });
            },
        }),
        labelPosition === 'end' && labelElement));
    setEnd();
    return element;
};
exports.Checkbox = Checkbox;
exports.Checkbox.displayName = 'Checkbox';
exports.Checkbox.defaultProps = {
    accessibility: accessibility_1.checkboxBehavior,
    indicator: {},
    labelPosition: 'end',
};
exports.Checkbox.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { checked: PropTypes.oneOf([true, false, 'mixed']), defaultChecked: PropTypes.bool, disabled: PropTypes.bool, indicator: customPropTypes.shorthandAllowingChildren, label: customPropTypes.itemShorthand, labelPosition: PropTypes.oneOf(['start', 'end']), onChange: PropTypes.func, onClick: PropTypes.func, toggle: PropTypes.bool });
exports.Checkbox.handledProps = Object.keys(exports.Checkbox.propTypes);
exports.Checkbox.create = utils_1.createShorthandFactory({
    Component: exports.Checkbox,
    mappedProp: 'label',
});
