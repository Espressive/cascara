"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Breadcrumb = exports.breadcrumbClassName = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var PropTypes = require("prop-types");
var react_bindings_1 = require("@fluentui/react-bindings");
var utils_1 = require("../../utils");
var accessibility_1 = require("@fluentui/accessibility");
var BreadcrumbItem_1 = require("./BreadcrumbItem");
var BreadcrumbDivider_1 = require("./BreadcrumbDivider");
var BreadcrumbLink_1 = require("./BreadcrumbLink");
var breadcrumbContext_1 = require("./breadcrumbContext");
var react_component_ref_1 = require("@fluentui/react-component-ref");
exports.breadcrumbClassName = 'ui-breadcrumb';
/**
 * Breadcrumb is a a component that indicates the path of the current page
 *
 * @accessibility
 * Implements [ARIA Breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern.
 * Refers to [this ARIA discussion](https://github.com/w3c/aria-practices/issues/635), and uses arrow key to navigate between each breadcrumb item.
 *
 * @accessibilityIssues
 * [Under NVDA Browse mode - Breadcrumb is not navigable](https://github.com/w3c/aria-practices/issues/635 )
 */
exports.Breadcrumb = react_bindings_1.compose(function (props, ref, composeOptions) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(composeOptions.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, content = props.content, className = props.className, design = props.design, styles = props.styles, variables = props.variables, size = props.size;
    var contextValue = React.useMemo(function () { return ({ size: size }); }, [size]);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: composeOptions.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(composeOptions.displayName, {
        className: composeOptions.className,
        composeOptions: composeOptions,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
            size: size,
        }); },
        rtl: context.rtl,
        unstable_props: props,
    }).classes;
    var unhandledProps = react_bindings_1.useUnhandledProps(composeOptions.handledProps, props);
    var ElementType = react_bindings_1.getElementType(props);
    var result = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        React.createElement(breadcrumbContext_1.BreadcrumbContext.Provider, { value: contextValue },
            React.createElement("div", tslib_1.__assign({}, getA11yProps('container', {
                className: classes.container,
            })), react_bindings_1.childrenExist(children) ? children : content))));
    var wrappedElement = ref ? React.createElement(react_component_ref_1.Ref, { innerRef: ref }, result) : result;
    setEnd();
    return wrappedElement;
}, {
    className: exports.breadcrumbClassName,
    displayName: 'Breadcrumb',
    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'size'],
    mapPropsToStylesProps: function (_a) {
        var size = _a.size;
        return ({
            size: size,
        });
    },
});
exports.Breadcrumb.defaultProps = {
    as: 'nav',
    size: 'medium',
    accessibility: accessibility_1.breadcrumbBehavior,
};
exports.Breadcrumb.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { size: PropTypes.oneOf(['smaller', 'small', 'medium', 'large']) });
exports.Breadcrumb.Item = BreadcrumbItem_1.BreadcrumbItem;
exports.Breadcrumb.Divider = BreadcrumbDivider_1.BreadcrumbDivider;
exports.Breadcrumb.Link = BreadcrumbLink_1.BreadcrumbLink;
exports.Breadcrumb.create = utils_1.createShorthandFactory({
    Component: exports.Breadcrumb,
});
