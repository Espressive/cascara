"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Embed = exports.embedSlotClassNames = exports.embedClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var customPropTypes = require("@fluentui/react-proptypes");
var utils_1 = require("../../utils");
var Image_1 = require("../Image/Image");
var Video_1 = require("../Video/Video");
var Box_1 = require("../Box/Box");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.embedClassName = 'ui-embed';
exports.embedSlotClassNames = {
    control: exports.embedClassName + "__control",
};
/**
 * An Embed displays content from external websites, like a post from external social network.
 *
 * @accessibility
 * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its
 * accessibility section.
 */
var Embed = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Embed.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var alt = props.alt, title = props.title, control = props.control, iframe = props.iframe, placeholder = props.placeholder, video = props.video, variables = props.variables, styles = props.styles, className = props.className, design = props.design;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Embed.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Embed.displayName,
        actionHandlers: {
            performClick: function (event) { return handleClick(event); },
        },
        mapPropsToBehavior: function () { return ({
            alt: alt,
            title: title,
        }); },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultActive,
        value: props.active,
        initialValue: false,
    }), active = _b[0], setACtive = _b[1];
    var _c = React.useState(false), iframeLoaded = _c[0], setIframeLoaded = _c[1];
    var frameRef = React.useRef();
    var handleClick = function (e) {
        e.stopPropagation();
        e.preventDefault();
        var iframeNil = _.isNil(props.iframe);
        var newActive = !active;
        if (iframeNil || (!iframeNil && newActive)) {
            setACtive(newActive);
            _.invoke(props, 'onActiveChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { active: newActive }));
        }
        _.invoke(props, 'onClick', e, tslib_1.__assign(tslib_1.__assign({}, props), { active: newActive }));
    };
    var handleFrameOverrides = function (predefinedProps) { return ({
        onLoad: function (e) {
            _.invoke(predefinedProps, 'onLoad', e);
            setIframeLoaded(true);
            frameRef.current.contentWindow.focus();
        },
    }); };
    var _d = react_bindings_1.useStyles(exports.Embed.displayName, {
        className: exports.embedClassName,
        mapPropsToStyles: function () { return ({
            iframeLoaded: iframeLoaded,
            active: active,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _d.classes, resolvedStyles = _d.styles;
    var placeholderElement = placeholder ? (React.createElement(Image_1.Image, { src: placeholder, styles: resolvedStyles.image, variables: { width: variables.width, height: variables.height } })) : null;
    var hasIframe = !_.isNil(iframe);
    var hasVideo = !_.isNil(video);
    var controlVisible = !active || hasVideo;
    var placeholderVisible = !active || (hasIframe && active && !iframeLoaded);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root, onClick: handleClick }, unhandledProps))),
        active && (React.createElement(React.Fragment, null,
            Video_1.Video.create(video, {
                defaultProps: function () {
                    return getA11yProps('video', {
                        autoPlay: true,
                        controls: false,
                        loop: true,
                        muted: true,
                        poster: placeholder,
                        styles: resolvedStyles.video,
                        variables: {
                            width: variables.width,
                            height: variables.height,
                        },
                    });
                },
            }),
            iframe && (React.createElement(react_component_ref_1.Ref, { innerRef: frameRef }, Box_1.Box.create(iframe, {
                defaultProps: function () {
                    return getA11yProps('iframe', {
                        as: 'iframe',
                        styles: resolvedStyles.iframe,
                    });
                },
                overrideProps: handleFrameOverrides,
            }))))),
        placeholderVisible && placeholderElement,
        controlVisible &&
            Box_1.Box.create(control, {
                defaultProps: function () {
                    return getA11yProps('control', {
                        className: exports.embedSlotClassNames.control,
                        styles: resolvedStyles.control,
                    });
                },
            })));
    setEnd();
    return element;
};
exports.Embed = Embed;
exports.Embed.displayName = 'Embed';
exports.Embed.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    children: false,
    content: false,
})), { active: PropTypes.bool, defaultActive: PropTypes.bool, control: customPropTypes.itemShorthand, iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]), onActiveChange: PropTypes.func, onClick: PropTypes.func, placeholder: PropTypes.string, video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand]) });
exports.Embed.defaultProps = {
    as: 'span',
    accessibility: accessibility_1.embedBehavior,
    control: {},
    variables: {},
};
exports.Embed.handledProps = Object.keys(exports.Embed.propTypes);
exports.Embed.create = utils_1.createShorthandFactory({ Component: exports.Embed });
