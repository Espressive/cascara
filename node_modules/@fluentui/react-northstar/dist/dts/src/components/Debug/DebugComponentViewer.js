"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugComponentViewer = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var DebugLine_1 = require("./DebugLine");
var ScrollToBottom_1 = require("./ScrollToBottom");
var style = {
    padding: '8px',
    whiteSpace: 'pre',
    lineHeight: 1.4,
    background: '#222',
    overflowY: 'auto',
    color: '#CCC',
    fontFamily: 'monospace',
    fontWeight: 'bold',
};
var DebugComponentViewer = function (props) {
    var fiberNav = props.fiberNav, onFiberChanged = props.onFiberChanged, onFiberSelected = props.onFiberSelected;
    var ownerNav = fiberNav.owner || { jsxString: 'unknown' };
    var parentNavs = [];
    if (fiberNav.owner) {
        var parentNav = fiberNav.parent;
        while (parentNav && !parentNav.isEqual(ownerNav)) {
            if (parentNav.fluentUIDebug)
                parentNavs.unshift(parentNav);
            parentNav = parentNav.parent;
        }
    }
    var component = fiberNav.name && React.createElement(DebugLine_1.DebugLine, null, fiberNav.jsxString);
    return (React.createElement(ScrollToBottom_1.ScrollToBottom, { style: style },
        React.createElement(DebugLine_1.DebugLine, tslib_1.__assign({ indent: 0 }, (ownerNav.fluentUIDebug && {
            actionable: true,
            tabIndex: 0,
            onClick: function (e) {
                e.preventDefault();
                onFiberChanged(ownerNav);
            },
            onMouseEnter: function (e) { return onFiberSelected(ownerNav); },
            onMouseLeave: function (e) { return onFiberSelected(null); },
        })), ownerNav.jsxString),
        React.createElement(DebugLine_1.DebugLine, { indent: 1, style: { color: '#ba645e' } }, "render()"),
        parentNavs.map(function (parent, i) { return (React.createElement(DebugLine_1.DebugLine, { key: i, indent: 2 + i, actionable: true, tabIndex: "0", onClick: function (e) {
                e.preventDefault();
                onFiberChanged(parent);
            }, onMouseEnter: function (e) { return onFiberSelected(parent); }, onMouseLeave: function (e) { return onFiberSelected(null); } }, parent.jsxString)); }),
        React.createElement(DebugLine_1.DebugLine, { indent: 3 + (parentNavs.length - 1), active: true, badge: "selected", actionable: true, tabIndex: "0", onClick: function (e) {
                e.preventDefault();
                onFiberChanged(fiberNav);
            }, onMouseEnter: function (e) { return onFiberSelected(fiberNav); }, onMouseLeave: function (e) { return onFiberSelected(null); } }, component)));
};
exports.DebugComponentViewer = DebugComponentViewer;
