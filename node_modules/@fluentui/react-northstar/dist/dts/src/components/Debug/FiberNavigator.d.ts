import { Fiber } from '../../utils/getReactFiberFromNode';
export declare class FiberNavigator {
    __fiber: Fiber;
    static fromFiber: (fiber: any) => FiberNavigator;
    static fromDOMNode: (domNode: any) => FiberNavigator;
    get key(): string;
    get name(): any;
    get parent(): FiberNavigator;
    get owner(): FiberNavigator;
    get domNode(): any;
    get instance(): any;
    get props(): any;
    get state(): any;
    /**
     * Hooks state is represented by a recursive structure where:
     * - `memoizedState` is a current value if applicable
     * - `next` is next hook in order
     * @param node - fiber
     */
    findDebugHookState(node: any): any;
    get reactComponent(): any;
    get elementType(): any;
    get fluentUIDebug(): any;
    get jsxString(): string;
    isEqual(fiberNav: FiberNavigator): boolean;
    find(condition: any, move: any): FiberNavigator;
    findOwner(condition: any): FiberNavigator;
    findParent(condition: any): FiberNavigator;
    get isClassComponent(): boolean;
    get isFunctionComponent(): boolean;
    get isForwardRef(): boolean;
    get isHostComponent(): boolean;
    get isDOMComponent(): boolean;
    get isCompositeComponent(): boolean;
}
