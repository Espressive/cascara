"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Debug = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var PropTypes = require("prop-types");
var React = require("react");
var react_component_event_listener_1 = require("@fluentui/react-component-event-listener");
var utils_1 = require("../../utils");
var styles_1 = require("@fluentui/styles");
var DebugPanel_1 = require("./DebugPanel");
var FiberNavigator_1 = require("./FiberNavigator");
var DebugRect_1 = require("./DebugRect");
var INITIAL_STATE = {
    fiberNav: null,
    selectedFiberNav: null,
    isSelecting: false,
};
var Debug = /** @class */ (function (_super) {
    tslib_1.__extends(Debug, _super);
    function Debug(p, s) {
        var _this = _super.call(this, p, s) || this;
        _this.state = INITIAL_STATE;
        _this.debugReactComponent = function (r) {
            if (!r) {
                console.error("No React component selected. Please select a Fluent UI component from the React's Component panel.");
                return;
            }
            if (!r._reactInternalFiber) {
                console.error('React does not provide data for debugging for this component. Try selecting some Fluent UI component.');
                return;
            }
            if (!r.fluentUIDebug) {
                console.error('Not a debuggable component. Try selecting some Fluent UI component.');
                return;
            }
            var fiberNav = FiberNavigator_1.FiberNavigator.fromFiber(r._reactInternalFiber);
            _this.setState({ fiberNav: fiberNav, isSelecting: false, selectedFiberNav: null });
        };
        _this.debugDOMNode = function (domNode) {
            var fiberNav = FiberNavigator_1.FiberNavigator.fromDOMNode(domNode);
            if (!fiberNav) {
                console.error('No fiber for dom node', domNode);
                return;
            }
            fiberNav = fiberNav.findOwner(function (fiber) { return fiber.fluentUIDebug; });
            if (fiberNav !== _this.state.fiberNav) {
                _this.setState({ fiberNav: fiberNav });
            }
        };
        _this.handleKeyDown = function (e) {
            var code = accessibility_1.getCode(e);
            switch (code) {
                case accessibility_1.keyboardKey.Escape:
                    _this.stopSelecting();
                    break;
                case accessibility_1.keyboardKey.d:
                    if (e.altKey && e.shiftKey) {
                        _this.startSelecting();
                    }
                    break;
            }
        };
        _this.handleMouseMove = function (e) {
            _this.debugDOMNode(e.target);
        };
        _this.handleDOMNodeClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            _this.setState({ isSelecting: false });
        };
        _this.startSelecting = function () {
            var isSelecting = !_this.state.isSelecting;
            _this.setState(tslib_1.__assign(tslib_1.__assign({}, (!isSelecting && INITIAL_STATE)), { isSelecting: isSelecting }));
        };
        _this.stopSelecting = function () {
            _this.setState(INITIAL_STATE);
        };
        _this.selectFiber = function (selectedFiberNav) { return _this.setState({ selectedFiberNav: selectedFiberNav }); };
        _this.changeFiber = function (fiberNav) { return _this.setState({ fiberNav: fiberNav }); };
        _this.positionRight = function () { return _this.setState({ debugPanelPosition: 'right' }); };
        _this.positionLeft = function () { return _this.setState({ debugPanelPosition: 'left' }); };
        _this.close = function () { return _this.setState(INITIAL_STATE); };
        if (process.env.NODE_ENV !== 'production' && styles_1.isDebugEnabled && utils_1.isBrowser()) {
            // eslint-disable-next-line no-undef
            window.openDebugPanel = function () {
                // eslint-disable-next-line no-undef
                _this.debugReactComponent(window.$r);
            };
        }
        return _this;
    }
    Debug.prototype.render = function () {
        var mountDocument = this.props.mountDocument;
        var _a = this.state, fiberNav = _a.fiberNav, selectedFiberNav = _a.selectedFiberNav, isSelecting = _a.isSelecting, debugPanelPosition = _a.debugPanelPosition;
        if (process.env.NODE_ENV !== 'production' && styles_1.isDebugEnabled) {
            return (React.createElement(React.Fragment, null,
                React.createElement(react_component_event_listener_1.EventListener, { listener: this.handleKeyDown, target: mountDocument.body, type: "keydown" }),
                isSelecting && (React.createElement(react_component_event_listener_1.EventListener, { listener: this.handleMouseMove, target: mountDocument.body, type: "mousemove" })),
                isSelecting && fiberNav && fiberNav.domNode && (React.createElement(react_component_event_listener_1.EventListener, { listener: this.handleDOMNodeClick, target: fiberNav.domNode, type: "click" })),
                isSelecting && fiberNav && React.createElement(DebugRect_1.DebugRect, { fiberNav: fiberNav }),
                selectedFiberNav && React.createElement(DebugRect_1.DebugRect, { fiberNav: selectedFiberNav }),
                !isSelecting && fiberNav && fiberNav.instance && (React.createElement(DebugPanel_1.DebugPanel, { fiberNav: fiberNav, onActivateDebugSelectorClick: this.startSelecting, onClose: this.close, 
                    // TODO: Integrate CSS in JS Styles for Host Components (DOM nodes)
                    // cssStyles={stylesForNode(domNode)}
                    debugData: fiberNav.fluentUIDebug, position: debugPanelPosition || 'right', onPositionLeft: this.positionLeft, onPositionRight: this.positionRight, onFiberChanged: this.changeFiber, onFiberSelected: this.selectFiber }))));
        }
        return null;
    };
    Debug.defaultProps = {
        // eslint-disable-next-line no-undef
        mountDocument: utils_1.isBrowser() ? window.document : null,
    };
    Debug.propTypes = {
        mountDocument: PropTypes.object.isRequired,
    };
    return Debug;
}(React.Component));
exports.Debug = Debug;
