"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiberNavigator = void 0;
var react_is_1 = require("react-is");
var getReactFiberFromNode_1 = require("../../utils/getReactFiberFromNode");
var isDOMNode = function (e) { return e && typeof e.tagName === 'string' && e.nodeType === Node.ELEMENT_NODE; };
var FiberNavigator = /** @class */ (function () {
    function FiberNavigator() {
    }
    Object.defineProperty(FiberNavigator.prototype, "key", {
        get: function () {
            return this.__fiber.key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "name", {
        get: function () {
            var _a, _b;
            if (this.isClassComponent || this.isFunctionComponent) {
                return this.__fiber.type.displayName || this.__fiber.type.name;
            }
            if (this.isForwardRef) {
                return (this.__fiber.type.displayName ||
                    this.__fiber.type.name || ((_a = this.__fiber.type.return) === null || _a === void 0 ? void 0 : _a.displayName) || ((_b = this.__fiber.type.return) === null || _b === void 0 ? void 0 : _b.name));
            }
            if (this.isHostComponent) {
                return this.__fiber.stateNode.constructor.name;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "parent", {
        get: function () {
            return FiberNavigator.fromFiber(this.__fiber.return);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "owner", {
        get: function () {
            return FiberNavigator.fromFiber(this.__fiber._debugOwner);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "domNode", {
        get: function () {
            var fiber = this.__fiber;
            do {
                if (isDOMNode(fiber.stateNode)) {
                    return fiber.stateNode;
                }
                fiber = fiber.child;
            } while (fiber);
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "instance", {
        get: function () {
            if (this.isClassComponent) {
                return this.__fiber.stateNode;
            }
            if (this.isFunctionComponent || this.isForwardRef) {
                // assumes functional component w/useRef
                return this.findDebugHookState(this.__fiber.memoizedState);
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "props", {
        get: function () {
            return this.__fiber.memoizedProps;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "state", {
        get: function () {
            return this.__fiber.memoizedState;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Hooks state is represented by a recursive structure where:
     * - `memoizedState` is a current value if applicable
     * - `next` is next hook in order
     * @param node - fiber
     */
    FiberNavigator.prototype.findDebugHookState = function (node) {
        if (node && node.memoizedState && node.memoizedState.current && node.memoizedState.current.fluentUIDebug) {
            return node.memoizedState.current;
        }
        if (node === null || node.next === null) {
            return null;
        }
        return this.findDebugHookState(node.next);
    };
    Object.defineProperty(FiberNavigator.prototype, "reactComponent", {
        get: function () {
            return this.isHostComponent ? this.owner.elementType : this.elementType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "elementType", {
        get: function () {
            return this.__fiber.elementType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "fluentUIDebug", {
        get: function () {
            return this.instance && this.instance.fluentUIDebug ? this.instance.fluentUIDebug : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "jsxString", {
        get: function () {
            return "<" + this.name + " />";
        },
        enumerable: false,
        configurable: true
    });
    //
    // Methods
    //
    FiberNavigator.prototype.isEqual = function (fiberNav) {
        // TODO: do equality check on __fiber instead, however, see fromFiber TODO :/
        return !!fiberNav && fiberNav.instance === this.instance;
    };
    FiberNavigator.prototype.find = function (condition, move) {
        var fiber = FiberNavigator.fromFiber(this.__fiber);
        while (fiber) {
            if (condition(fiber)) {
                return fiber;
            }
            fiber = move(fiber);
        }
        return null;
    };
    FiberNavigator.prototype.findOwner = function (condition) {
        return this.find(condition, function (fiber) { return fiber.owner; });
    };
    FiberNavigator.prototype.findParent = function (condition) {
        return this.find(condition, function (fiber) { return fiber.parent; });
    };
    Object.defineProperty(FiberNavigator.prototype, "isClassComponent", {
        //
        // Component Types
        //
        get: function () {
            // React.Component subclasses have this flag
            // https://reactjs.org/docs/implementation-notes.html
            return typeof this.__fiber.type === 'function' && !!this.__fiber.type.prototype.isReactComponent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "isFunctionComponent", {
        get: function () {
            // React.Component subclasses have this flag
            // https://reactjs.org/docs/implementation-notes.html
            return typeof this.__fiber.type === 'function' && !this.__fiber.type.prototype.isReactComponent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "isForwardRef", {
        get: function () {
            var _a;
            return ((_a = this.__fiber.type) === null || _a === void 0 ? void 0 : _a.$$typeof) === react_is_1.ForwardRef;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "isHostComponent", {
        get: function () {
            // Host components are platform components (i.e. 'div' on web)
            // https://github.com/acdlite/react-fiber-architecture#type-and-key
            return typeof this.__fiber.type === 'string';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "isDOMComponent", {
        //
        // What this fiber component renders
        //
        get: function () {
            return !!this.__fiber.child && FiberNavigator.fromFiber(this.__fiber.child).isHostComponent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiberNavigator.prototype, "isCompositeComponent", {
        // https://github.com/facebook/react/blob/16.8.6/packages/react-dom/src/test-utils/ReactTestUtils.js#L193
        get: function () {
            return this.isDOMComponent ? false : !!this.instance && !!this.instance.render && !!this.instance.setState;
        },
        enumerable: false,
        configurable: true
    });
    // TODO: Fibers can become stale.
    //      The only current fiber is the one found on the DOM node.
    //      There is no way to start at a React Component fiber, go the DOM node,
    //      get the current fiber, and find your way back to the React Component fiber.
    //      Probably need to remove fromFiber and re-implement using only DOM node weak map.
    FiberNavigator.fromFiber = function (fiber) {
        if (!fiber)
            return null;
        var fiberNavigator = new FiberNavigator();
        Object.defineProperty(fiberNavigator, '__fiber', {
            value: fiber,
            enumerable: false,
            writable: false,
            configurable: false,
        });
        return fiberNavigator;
    };
    FiberNavigator.fromDOMNode = function (domNode) {
        var fiber = getReactFiberFromNode_1.getReactFiberFromNode(domNode);
        if (!fiber)
            return null;
        var fiberNavigator = new FiberNavigator();
        Object.defineProperty(fiberNavigator, '__fiber', {
            value: fiber,
            enumerable: false,
            writable: false,
            configurable: false,
        });
        return fiberNavigator;
    };
    return FiberNavigator;
}());
exports.FiberNavigator = FiberNavigator;
