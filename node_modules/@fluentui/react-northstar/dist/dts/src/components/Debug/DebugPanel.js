"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugPanel = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var _ = require("lodash");
var DebugPanelItem_1 = require("./DebugPanelItem");
var utils_1 = require("./utils");
var DebugComponentViewer_1 = require("./DebugComponentViewer");
var DebugPanel = function (props) {
    var cssStyles = props.cssStyles, inputDebugData = props.debugData, fiberNav = props.fiberNav, onActivateDebugSelectorClick = props.onActivateDebugSelectorClick, onClose = props.onClose, position = props.position, onPositionLeft = props.onPositionLeft, onPositionRight = props.onPositionRight, onFiberChanged = props.onFiberChanged, onFiberSelected = props.onFiberSelected;
    var _a = React.useState('root'), slot = _a[0], setSlot = _a[1];
    var left = position === 'left';
    var debugData = _.isNil(inputDebugData) || _.isEmpty(inputDebugData)
        ? {
            componentStyles: {},
            componentVariables: [],
            siteVariables: [],
        }
        : inputDebugData;
    debugData.componentStyles = debugData.componentStyles || {};
    debugData.componentVariables = debugData.componentVariables || [];
    debugData.siteVariables = debugData.siteVariables || [];
    var styleSlots = Object.keys(debugData.componentStyles);
    var siteVariablesUsedInComponentVariables = [];
    debugData.componentVariables
        .map(function (val) { return val.input; })
        .forEach(function (val) {
        return (siteVariablesUsedInComponentVariables = _.concat(siteVariablesUsedInComponentVariables, utils_1.getValues(val, function (val) { return val.indexOf('siteVariables.') > -1; })));
    });
    var uniqUsedSiteVariables = _.uniq(siteVariablesUsedInComponentVariables);
    var siteVariablesDataWithNulls = debugData.siteVariables.map(function (val) { return (tslib_1.__assign(tslib_1.__assign({}, val), { resolved: uniqUsedSiteVariables.reduce(function (acc, next) {
            var key = _.replace(next, 'siteVariables.', '');
            _.set(acc, key, _.get(val['resolved'], key));
            return acc;
        }, {}) })); });
    var siteVariablesData = siteVariablesDataWithNulls.map(function (val) { return (tslib_1.__assign(tslib_1.__assign({}, val), { resolved: utils_1.removeNulls(val.resolved) })); });
    return (React.createElement("div", null,
        React.createElement("div", { style: debugPanelRoot(left) },
            React.createElement("div", { style: debugPanelHeader },
                React.createElement("div", { tabIndex: 0, onClick: onActivateDebugSelectorClick, style: debugPanelArrowIcon }, "\u21F1"),
                React.createElement("div", { style: { float: 'right' } },
                    React.createElement("div", { tabIndex: 0, style: debugPanelIcon(true, left), onClick: onPositionLeft }),
                    React.createElement("div", { tabIndex: 0, style: debugPanelIcon(false, left), onClick: onPositionRight }),
                    React.createElement("div", { tabIndex: 0, onClick: onClose, style: debugPanelCloseIcon }, "\u2715"))),
            React.createElement(DebugComponentViewer_1.DebugComponentViewer, { fiberNav: fiberNav, onFiberChanged: onFiberChanged, onFiberSelected: onFiberSelected }),
            React.createElement("div", { style: debugPanelBody },
                React.createElement("div", { style: debugPanel },
                    React.createElement("div", { style: debugHeaderContainer() },
                        React.createElement("div", { style: debugHeader() }, "Styles"),
                        !_.isEmpty(debugData.componentStyles) && (React.createElement("div", { style: debugPanelSelectContainer() },
                            React.createElement("select", { value: slot, onChange: function (e) { return setSlot(e.target.value); } }, styleSlots.map(function (val) { return (React.createElement("option", { value: val, key: val },
                                "Slot: ",
                                val)); }))))),
                    !_.isEmpty(debugData.componentStyles) ? (React.createElement(DebugPanelItem_1.DebugPanelItem, { data: debugData.componentStyles[slot], valueKey: "styles", idKey: "debugId" })) : (React.createElement("div", { style: debugNoData() }, "None in use"))),
                React.createElement("div", { style: debugPanel },
                    React.createElement("div", { style: debugHeaderContainer() },
                        React.createElement("div", { style: debugHeader() }, "Variables")),
                    !_.isEmpty(debugData.componentVariables) ? (React.createElement(DebugPanelItem_1.DebugPanelItem, { data: debugData.componentVariables, valueKey: "resolved", idKey: "debugId", commentKey: "input", commentKeyPredicate: function (val) { return typeof val === 'string' && val.indexOf('siteVariables.') > -1; } })) : (React.createElement("div", { style: debugNoData() }, "None in use"))),
                React.createElement("div", { style: debugPanel },
                    React.createElement("div", { style: debugHeaderContainer() },
                        React.createElement("div", { style: debugHeader() }, "Site variables")),
                    !_.isEmpty(siteVariablesData) && !_.isEmpty(uniqUsedSiteVariables) ? (React.createElement(DebugPanelItem_1.DebugPanelItem, { data: siteVariablesData, valueKey: "resolved", idKey: "debugId" })) : (React.createElement("div", { style: debugNoData() }, "None in use")))),
            !_.isEmpty(cssStyles) && (React.createElement("div", { style: debugPanel },
                React.createElement("div", { style: debugHeader() }, "HTML Styles"),
                React.createElement("div", { style: { clear: 'both' } }, cssStyles.map(function (l) { return (React.createElement("pre", { key: l }, l)); })))),
            React.createElement("div", { style: { padding: '50px 0' } }))));
};
exports.DebugPanel = DebugPanel;
var debugPanelHeader = {
    position: 'sticky',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '2px 2px 4px',
    top: '0',
    background: '#f3f3f3',
    zIndex: 1,
};
var commonIconStyle = {
    display: 'inline-block',
    cursor: 'pointer',
    color: '#555',
    lineHeight: 1,
    margin: '0 4px',
};
var debugPanelCloseIcon = tslib_1.__assign(tslib_1.__assign({}, commonIconStyle), { fontSize: '20px', outline: '0', cursor: 'pointer' });
var debugPanelArrowIcon = tslib_1.__assign(tslib_1.__assign({}, commonIconStyle), { fontSize: '24px', marginTop: '-4px', outline: '0' });
var debugPanelIcon = function (left, isLeftActive) {
    var _a;
    return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, commonIconStyle), (_a = { borderWidth: '2px', borderStyle: 'solid ', borderColor: '#555' }, _a[left ? 'borderLeftWidth' : 'borderRightWidth'] = '6px', _a.width = '16px', _a.height = '14px', _a)), (left === isLeftActive && {
        borderColor: '#6495ed',
    })));
};
var debugPanelRoot = function (left) {
    var _a;
    return (_a = {
            position: 'fixed'
        },
        _a[left ? 'left' : 'right'] = 0,
        _a.top = 0,
        _a.zIndex = 999999999,
        _a.width = '350px',
        _a.height = '100vh',
        _a.color = '#313941',
        _a.background = '#fff',
        _a.lineHeight = 1.1,
        _a.fontSize = '12px',
        _a.overflowY = 'scroll',
        _a[left ? 'borderRight' : 'borderLeft'] = '1px solid rgba(0, 0, 0, 0.2)',
        _a.boxShadow = '0 0 8px rgba(0, 0, 0, .1)',
        _a);
};
var debugHeaderContainer = function () { return ({
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '8px',
    margin: '0 -4px 4px',
    overflow: 'hidden',
    background: '#f3f3f3',
    borderTop: '1px solid #d0d0d0',
    borderBottom: '1px solid #d0d0d0',
}); };
var debugHeader = function () { return ({
    fontSize: '14px',
    fontWeight: 'bold',
}); };
var debugNoData = function () { return ({
    padding: '8px',
    color: 'rgba(0, 0, 0, 0.75)',
    textAlign: 'center',
    background: 'rgba(0, 0, 0, 0.05)',
    marginBottom: '4px',
}); };
var debugPanelSelectContainer = function () { return ({
    width: 'auto',
}); };
var debugPanelBody = {
    overflowWrap: 'break-word',
    wordWrap: 'break-word',
    wordBreak: 'break-all',
    hyphens: 'auto',
};
var debugPanel = {
    padding: '0 4px',
};
