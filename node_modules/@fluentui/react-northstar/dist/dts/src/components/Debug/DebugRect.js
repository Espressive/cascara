"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugRect = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var cropMarkStyle = {
    position: 'absolute',
    background: '#6495ed88',
};
var DebugRect = /** @class */ (function (_super) {
    tslib_1.__extends(DebugRect, _super);
    function DebugRect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectorRef = React.createRef();
        _this.setDebugSelectorPosition = function () {
            var fiberNav = _this.props.fiberNav;
            if (fiberNav &&
                fiberNav.domNode &&
                fiberNav.domNode.getBoundingClientRect &&
                typeof fiberNav.domNode.getBoundingClientRect === 'function' &&
                _this.selectorRef.current) {
                var rect = fiberNav.domNode.getBoundingClientRect();
                _this.selectorRef.current.style.top = rect.top + "px";
                _this.selectorRef.current.style.left = rect.left + "px";
                _this.selectorRef.current.style.width = rect.width + "px";
                _this.selectorRef.current.style.height = rect.height + "px";
                requestAnimationFrame(_this.setDebugSelectorPosition);
            }
        };
        return _this;
    }
    DebugRect.prototype.componentDidMount = function () {
        this.setDebugSelectorPosition();
    };
    DebugRect.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {
        this.setDebugSelectorPosition();
    };
    DebugRect.prototype.render = function () {
        var _a = this.props, fiberNav = _a.fiberNav, showBackground = _a.showBackground, showClassName = _a.showClassName, showCropMarks = _a.showCropMarks, showElement = _a.showElement, renderLabel = _a.renderLabel;
        if (!fiberNav) {
            return null;
        }
        var label = renderLabel(fiberNav);
        return (React.createElement("pre", { ref: this.selectorRef, style: {
                position: 'fixed',
                padding: 0,
                margin: 0,
                background: showBackground ? '#6495ed11' : 'none',
                outline: '2px solid #6495edcc',
                outlineOffset: '-1px',
                zIndex: 99999999,
                pointerEvents: 'none',
                userSelect: 'none',
            } },
            label && (React.createElement("div", { style: {
                    position: 'absolute',
                    padding: '2px 4px',
                    margin: '-1px 0 0 -1px',
                    bottom: '100%',
                    left: 0,
                    color: '#fff',
                    background: '#6495ed',
                    zIndex: 1,
                } },
                React.createElement("span", { style: { fontWeight: 'bold' } }, renderLabel(fiberNav)))),
            showCropMarks && (React.createElement(React.Fragment, null,
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '12px', height: '1px', top: '0', left: '-20px' }) }),
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '1px', height: '12px', top: '-20px', left: '0' }) }),
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '12px', height: '1px', top: '0', right: '-20px' }) }),
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '1px', height: '12px', top: '-20px', right: '0' }) }),
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '12px', height: '1px', bottom: '0', left: '-20px' }) }),
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '1px', height: '12px', bottom: '-20px', left: '0' }) }),
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '12px', height: '1px', bottom: '0', right: '-20px' }) }),
                React.createElement("div", { style: tslib_1.__assign(tslib_1.__assign({}, cropMarkStyle), { width: '1px', height: '12px', bottom: '-20px', right: '0' }) }))),
            fiberNav.domNode && (showElement || showClassName) && (React.createElement("div", { style: {
                    fontSize: '0.9em',
                    position: 'absolute',
                    padding: '2px 4px',
                    margin: '0 0 1px -1px',
                    top: '100%',
                    left: 0,
                    background: '#6495ed',
                } },
                showElement && (React.createElement("strong", { style: { fontWeight: 'bold', color: 'hsl(160, 100%, 80%)' } }, fiberNav.domNode.tagName && fiberNav.domNode.tagName.toLowerCase())),
                showClassName &&
                    fiberNav.domNode.hasAttribute &&
                    typeof fiberNav.domNode.hasAttribute === 'function' &&
                    fiberNav.domNode.hasAttribute('class') && (React.createElement("span", { style: { color: 'rgba(255, 255, 255, 0.75)' } },
                    ".",
                    (fiberNav.domNode.getAttribute('class') || '').replace(/ +/g, '.')))))));
    };
    DebugRect.defaultProps = {
        showBackground: true,
        showClassName: true,
        showElement: true,
        renderLabel: function (fiberNav) { return "<" + fiberNav.name + " />"; },
    };
    return DebugRect;
}(React.Component));
exports.DebugRect = DebugRect;
