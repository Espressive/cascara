"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugSelector = void 0;
var tslib_1 = require("tslib");
var PropTypes = require("prop-types");
var React = require("react");
var react_component_event_listener_1 = require("@fluentui/react-component-event-listener");
var utils_1 = require("../../utils");
var FiberNavigator_1 = require("./FiberNavigator");
var DebugRect_1 = require("./DebugRect");
var INITIAL_STATE = {
    fiberNav: null,
};
// TODO: This is a copy and trim-down of Debug.tsx
//       Cleanup and use in Debug.tsx before merge:
//         - Make hotkey invocation generic, or take prop for active state
//           since Debug uses ctrl + 'd' and DebugSelector uses ctrl + 'c' in react-builder
//
var DebugSelector = /** @class */ (function (_super) {
    tslib_1.__extends(DebugSelector, _super);
    function DebugSelector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = INITIAL_STATE;
        _this.debugDOMNode = function (domNode) {
            var fiberNav = FiberNavigator_1.FiberNavigator.fromDOMNode(domNode);
            if (!fiberNav) {
                // eslint-disable-next-line no-console
                console.error('No fiber for dom node', domNode);
                return;
            }
            fiberNav = _this.props.filter(fiberNav);
            _this.setCurrentFiberNav(fiberNav);
        };
        _this.setCurrentFiberNav = function (fiberNav) {
            _this.setState(function (prevState) {
                var _a, _b, _c;
                if ((fiberNav === null || fiberNav === void 0 ? void 0 : fiberNav.__fiber) !== ((_a = prevState.fiberNav) === null || _a === void 0 ? void 0 : _a.__fiber)) {
                    (_c = (_b = _this.props).onHover) === null || _c === void 0 ? void 0 : _c.call(_b, fiberNav);
                    return { fiberNav: fiberNav };
                }
                return null;
            });
        };
        _this.handleMouseMove = function (e) {
            _this.debugDOMNode(e.target);
        };
        _this.handleMouseLeave = function (e) {
            _this.setCurrentFiberNav(null);
        };
        _this.handleDOMNodeClick = function (e) {
            var _a, _b;
            e.preventDefault();
            e.stopPropagation();
            (_b = (_a = _this.props).onSelect) === null || _b === void 0 ? void 0 : _b.call(_a, _this.state.fiberNav);
        };
        return _this;
    }
    DebugSelector.prototype.render = function () {
        var _a = this.props, active = _a.active, mountDocument = _a.mountDocument, renderLabel = _a.renderLabel, showBackground = _a.showBackground, showClassName = _a.showClassName, showCropMarks = _a.showCropMarks, showElement = _a.showElement;
        var fiberNav = this.state.fiberNav;
        return (React.createElement(React.Fragment, null,
            active && React.createElement(react_component_event_listener_1.EventListener, { listener: this.handleMouseMove, target: mountDocument.body, type: "mousemove" }),
            active && React.createElement(react_component_event_listener_1.EventListener, { listener: this.handleMouseLeave, target: mountDocument.body, type: "mouseleave" }),
            active && fiberNav && fiberNav.domNode && (React.createElement(react_component_event_listener_1.EventListener, { listener: this.handleDOMNodeClick, target: fiberNav.domNode, type: "click" })),
            active && fiberNav && (React.createElement(DebugRect_1.DebugRect, { showBackground: showBackground, showClassName: showClassName, showElement: showElement, showCropMarks: showCropMarks, fiberNav: fiberNav, renderLabel: renderLabel }))));
    };
    DebugSelector.defaultProps = {
        active: false,
        filter: function (fiberNav) { return fiberNav; },
        // eslint-disable-next-line no-undef
        mountDocument: utils_1.isBrowser() ? window.document : null,
    };
    DebugSelector.propTypes = {
        mountDocument: PropTypes.object.isRequired,
    };
    return DebugSelector;
}(React.Component));
exports.DebugSelector = DebugSelector;
