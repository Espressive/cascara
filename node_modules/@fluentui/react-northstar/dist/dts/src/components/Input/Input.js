"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = exports.inputSlotClassNames = exports.inputClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_icons_northstar_1 = require("@fluentui/react-icons-northstar");
var InputLabel_1 = require("./InputLabel");
var formFieldBaseContext_1 = require("../Form/utils/formFieldBaseContext");
exports.inputClassName = 'ui-input';
exports.inputSlotClassNames = {
    input: exports.inputClassName + "__input",
    icon: exports.inputClassName + "__icon",
};
/**
 * An Input is a field used to elicit an input from a user.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.
 */
exports.Input = react_bindings_1.compose(function (props, ref, composeOptions) {
    var _a;
    var context = react_bindings_1.useFluentContext();
    var _b = react_bindings_1.useTelemetry(composeOptions.displayName, context.telemetry), setStart = _b.setStart, setEnd = _b.setEnd;
    setStart();
    var className = props.className, input = props.input, type = props.type, wrapper = props.wrapper, disabled = props.disabled, fluid = props.fluid, inverted = props.inverted, inline = props.inline, clearable = props.clearable, icon = props.icon, iconPosition = props.iconPosition, design = props.design, styles = props.styles, variables = props.variables, required = props.required, successIndicator = props.successIndicator, error = props.error, errorIndicator = props.errorIndicator, showSuccessIndicator = props.showSuccessIndicator, label = props.label, labelPosition = props.labelPosition;
    var inputRef = React.useRef();
    var labelId = React.useContext(formFieldBaseContext_1.FormFieldBaseContext).labelId;
    var inputId = React.useRef();
    inputId.current = props.id || utils_1.getOrGenerateIdFromShorthand('ui-input-', '', inputId.current);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(composeOptions.handledProps, props);
    var _c = utils_1.partitionHTMLProps(unhandledProps), htmlInputProps = _c[0], restProps = _c[1];
    var _d = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultValue,
        value: props.value,
        initialValue: '',
    }), value = _d[0], setValue = _d[1];
    var hasValue = !!value && ((_a = value) === null || _a === void 0 ? void 0 : _a.length) !== 0;
    var isShowSuccessIndicatorUndefined = typeof showSuccessIndicator === 'undefined';
    var requiredAndSuccessful = isShowSuccessIndicatorUndefined
        ? ((required && hasValue) || showSuccessIndicator) && !error
        : showSuccessIndicator;
    var hasIcon = !!icon || showSuccessIndicator || (required && isShowSuccessIndicatorUndefined) || !_.isNil(error);
    var _e = react_bindings_1.useStyles(composeOptions.displayName, {
        className: exports.inputClassName,
        mapPropsToStyles: function () { return ({
            fluid: fluid,
            inverted: inverted,
            inline: inline,
            disabled: disabled,
            clearable: clearable,
            hasIcon: hasIcon,
            requiredAndSuccessful: requiredAndSuccessful,
            iconPosition: iconPosition,
            hasValue: hasValue,
            labelPosition: labelPosition,
            error: error,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
        composeOptions: composeOptions,
        unstable_props: props,
    }), classes = _e.classes, resolvedStyles = _e.styles;
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: composeOptions.displayName,
        actionHandlers: {
            clear: function (e) {
                if (clearable && value !== '') {
                    e.stopPropagation();
                    e.nativeEvent && e.nativeEvent.stopPropagation();
                    handleOnClear(e);
                }
            },
        },
        mapPropsToBehavior: function () { return ({
            disabled: disabled,
            required: required,
            error: error,
        }); },
        rtl: context.rtl,
    });
    var handleIconOverrides = function (predefinedProps) { return ({
        onClick: function (e) {
            if (!disabled) {
                handleOnClear(e);
                inputRef.current.focus();
            }
            _.invoke(predefinedProps, 'onClick', e, props);
        },
    }); };
    var handleChange = function (e) {
        if (disabled) {
            return;
        }
        var newValue = _.get(e, 'target.value');
        _.invoke(props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { value: newValue }));
        setValue(newValue);
    };
    var handleOnClear = function (e) {
        if (clearable) {
            _.invoke(props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { value: '' }));
            setValue('');
        }
    };
    var computeIcon = function () {
        var _a;
        if (clearable && ((_a = value) === null || _a === void 0 ? void 0 : _a.length) !== 0) {
            return React.createElement(react_icons_northstar_1.CloseIcon, { outline: true });
        }
        if (requiredAndSuccessful) {
            return successIndicator;
        }
        if (error) {
            return errorIndicator;
        }
        return icon || null;
    };
    var labelElement = utils_1.createShorthand(composeOptions.slots.label, label, {
        defaultProps: function () { return ({
            labelPosition: labelPosition,
            label: label,
            required: required,
            htmlFor: inputId.current,
            hasValue: hasValue,
            id: labelId,
        }); },
    });
    var inputElement = Box_1.Box.create({}, {
        defaultProps: function () { return ({
            children: (React.createElement(React.Fragment, null,
                React.createElement(react_component_ref_1.Ref, { innerRef: function (inputElement) {
                        react_component_ref_1.handleRef(inputRef, inputElement);
                        react_component_ref_1.handleRef(props.inputRef, inputElement);
                        react_component_ref_1.handleRef(ref, inputElement);
                    } }, utils_1.createShorthand(composeOptions.slots.control, input || type, {
                    defaultProps: function () {
                        return getA11yProps('input', tslib_1.__assign(tslib_1.__assign({}, htmlInputProps), { as: 'input', disabled: disabled,
                            type: type,
                            required: required, value: value || '', id: inputId.current, className: exports.inputSlotClassNames.input, styles: resolvedStyles.input, onChange: handleChange }));
                    },
                })),
                utils_1.createShorthand(composeOptions.slots.icon, computeIcon(), {
                    defaultProps: function () {
                        return getA11yProps('icon', {
                            className: exports.inputSlotClassNames.icon,
                            styles: resolvedStyles.icon,
                        });
                    },
                    overrideProps: handleIconOverrides,
                }))),
            styles: resolvedStyles.inputContainer,
        }); },
    });
    var element = Box_1.Box.create(wrapper, {
        defaultProps: function () {
            return getA11yProps('root', tslib_1.__assign({ className: classes.root, children: (React.createElement(React.Fragment, null,
                    labelElement,
                    inputElement)), styles: resolvedStyles.root }, restProps));
        },
        overrideProps: {
            as: (wrapper && wrapper.as) || ElementType,
        },
    });
    setEnd();
    return element;
}, {
    className: exports.inputClassName,
    displayName: 'Input',
    slots: {
        control: Box_1.Box,
        icon: Box_1.Box,
        label: InputLabel_1.InputLabel,
    },
    handledProps: [
        'accessibility',
        'as',
        'children',
        'className',
        'design',
        'styles',
        'variables',
        'clearable',
        'defaultValue',
        'disabled',
        'fluid',
        'icon',
        'iconPosition',
        'input',
        'inputRef',
        'inline',
        'inverted',
        'onChange',
        'type',
        'value',
        'wrapper',
        'required',
        'successIndicator',
        'error',
        'errorIndicator',
        'showSuccessIndicator',
        'label',
        'labelPosition',
    ],
});
exports.Input.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { clearable: PropTypes.bool, defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]), disabled: PropTypes.bool, fluid: PropTypes.bool, label: customPropTypes.itemShorthand, labelPosition: PropTypes.oneOf(['inline', 'above', 'inside']), icon: customPropTypes.shorthandAllowingChildren, iconPosition: PropTypes.oneOf(['start', 'end']), input: customPropTypes.itemShorthand, inputRef: customPropTypes.ref, inline: PropTypes.bool, inverted: PropTypes.bool, onChange: PropTypes.func, type: PropTypes.string, value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), wrapper: customPropTypes.wrapperShorthand, required: PropTypes.bool, successIndicator: customPropTypes.shorthandAllowingChildren, error: PropTypes.bool, errorIndicator: customPropTypes.shorthandAllowingChildren, showSuccessIndicator: PropTypes.bool });
exports.Input.defaultProps = {
    accessibility: accessibility_1.inputBehavior,
    type: 'text',
    wrapper: {},
    iconPosition: 'end',
    errorIndicator: React.createElement(react_icons_northstar_1.ExclamationCircleIcon, null),
    successIndicator: React.createElement(react_icons_northstar_1.CheckmarkCircleIcon, { outline: true }),
};
exports.Input.Label = InputLabel_1.InputLabel;
exports.Input.create = utils_1.createShorthandFactory({ Component: exports.Input });
