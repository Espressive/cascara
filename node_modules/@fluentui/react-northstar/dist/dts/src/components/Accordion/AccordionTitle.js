"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccordionTitle = exports.accordionTitleSlotClassNames = exports.accordionTitleClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.accordionTitleClassName = 'ui-accordion__title';
exports.accordionTitleSlotClassNames = {
    contentWrapper: exports.accordionTitleClassName + "__content-wrapper",
};
/**
 * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.
 */
var AccordionTitle = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.AccordionTitle.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var contentRef = props.contentRef, children = props.children, content = props.content, indicator = props.indicator, contentWrapper = props.contentWrapper, disabled = props.disabled, accessibility = props.accessibility, canBeCollapsed = props.canBeCollapsed, as = props.as, active = props.active, accordionContentId = props.accordionContentId, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.AccordionTitle.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.AccordionTitle.displayName,
        actionHandlers: {
            performClick: function (e) {
                e.preventDefault();
                e.stopPropagation();
                handleClick(e);
            },
        },
        mapPropsToBehavior: function () { return ({
            hasContent: !!content,
            canBeCollapsed: canBeCollapsed,
            as: String(as),
            active: active,
            disabled: disabled,
            accordionContentId: accordionContentId,
        }); },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(exports.AccordionTitle.displayName, {
        className: exports.accordionTitleClassName,
        mapPropsToStyles: function () { return ({
            disabled: disabled,
            content: !!content,
            active: active,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var handleClick = function (e) {
        if (!disabled) {
            _.invoke(props, 'onClick', e, props);
        }
    };
    var handleFocus = function (e) {
        e.stopPropagation();
        _.invoke(props, 'onFocus', e, props);
    };
    var handleWrapperOverrides = function (predefinedProps) { return ({
        onFocus: function (e) {
            handleFocus(e);
            _.invoke(predefinedProps, 'onFocus', e, props);
        },
        onClick: function (e) {
            handleClick(e);
            _.invoke(predefinedProps, 'onClick', e, props);
        },
    }); };
    var contentWrapperElement = (React.createElement(react_component_ref_1.Ref, { innerRef: contentRef }, Box_1.Box.create(contentWrapper, {
        defaultProps: function () {
            return getA11yProps('content', {
                className: exports.accordionTitleSlotClassNames.contentWrapper,
                styles: resolvedStyles.contentWrapper,
            });
        },
        overrideProps: function (predefinedProps) { return (tslib_1.__assign({ children: (React.createElement(React.Fragment, null,
                Box_1.Box.create(indicator, {
                    defaultProps: function () {
                        return getA11yProps('indicator', {
                            styles: resolvedStyles.indicator,
                        });
                    },
                }),
                Box_1.Box.create(content, {
                    defaultProps: function () { return ({
                        styles: resolvedStyles.content,
                    }); },
                }))) }, handleWrapperOverrides(predefinedProps))); },
    })));
    var element = (React.createElement(ElementType, tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))), utils_1.childrenExist(children) ? children : contentWrapperElement));
    setEnd();
    return element;
};
exports.AccordionTitle = AccordionTitle;
exports.AccordionTitle.displayName = 'AccordionTitle';
exports.AccordionTitle.shorthandConfig = {
    mappedProp: 'content',
};
exports.AccordionTitle.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ content: 'shorthand' })), { accordionContentId: PropTypes.string, active: PropTypes.bool, contentRef: customPropTypes.ref, contentWrapper: customPropTypes.wrapperShorthand, canBeCollapsed: PropTypes.bool, disabled: PropTypes.bool, index: PropTypes.number, onClick: PropTypes.func, indicator: customPropTypes.shorthandAllowingChildren });
exports.AccordionTitle.handledProps = Object.keys(exports.AccordionTitle.propTypes);
exports.AccordionTitle.defaultProps = {
    accessibility: accessibility_1.accordionTitleBehavior,
    as: 'dt',
    contentRef: _.noop,
    indicator: {},
    contentWrapper: {},
};
exports.AccordionTitle.create = utils_1.createShorthandFactory({ Component: exports.AccordionTitle, mappedProp: 'content' });
