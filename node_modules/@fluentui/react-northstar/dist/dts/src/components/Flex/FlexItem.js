"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlexItem = exports.flexItemClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var styles_1 = require("@fluentui/styles");
var classnames_1 = require("classnames");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var applyStyles = function (element, styles, classes) {
    if (!styles) {
        return element;
    }
    // if element is DOM element
    if (typeof element.type === 'string') {
        return React.cloneElement(element, {
            className: classnames_1.default(element.props.className, classes.root),
        });
    }
    // assuming element is Fluent UI element
    return React.cloneElement(element, {
        styles: styles_1.mergeStyles(styles.root || {}, element.props.styles),
    });
};
exports.flexItemClassName = 'ui-flex__item';
/**
 * A FlexItem is a layout component that customizes alignment of Flex child.
 */
var FlexItem = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.FlexItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var align = props.align, children = props.children, className = props.className, design = props.design, grow = props.grow, flexDirection = props.flexDirection, push = props.push, shrink = props.shrink, size = props.size, styles = props.styles, variables = props.variables;
    var _b = react_bindings_1.useStyles(exports.FlexItem.displayName, {
        className: exports.flexItemClassName,
        mapPropsToStyles: function () { return ({
            align: align,
            grow: grow,
            flexDirection: flexDirection,
            push: push,
            shrink: shrink,
            size: size,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var element;
    // pass calculated bits using Render Props pattern
    if (typeof children === 'function') {
        element = children({
            styles: resolvedStyles.root,
            classes: classes.root,
        });
    }
    else if (_.isNil(children)) {
        element = null;
    }
    else {
        element = applyStyles(React.Children.only(children), resolvedStyles, classes);
    }
    setEnd();
    return element;
};
exports.FlexItem = FlexItem;
exports.FlexItem.displayName = 'FlexItem';
exports.FlexItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    children: false,
    accessibility: false,
    content: false,
})), { children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]), align: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']), size: PropTypes.oneOfType([
        PropTypes.oneOf(['size.half', 'size.quarter', 'size.small', 'size.medium', 'size.large']),
        PropTypes.string,
    ]), shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]), push: PropTypes.bool, 
    /**
     * Will be automatically set by parent Flex component
     */
    flexDirection: PropTypes.oneOf(['row', 'column']) });
// Boolean flag for now, Symbol-based approach may be used instead.
// However, there are  concerns related to browser compatibility if Symbols will be used.
// Completely alternative approach - check class name of React element (and generalize this logic).
exports.FlexItem.__isFlexItem = true;
