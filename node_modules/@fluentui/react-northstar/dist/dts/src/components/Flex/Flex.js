"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flex = exports.flexClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var FlexItem_1 = require("./FlexItem");
exports.flexClassName = 'ui-flex';
/**
 * A Flex is a layout component that arranges group of items aligned towards common direction (either row or column).
 */
var Flex = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Flex.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, className = props.className, column = props.column, debug = props.debug, design = props.design, fill = props.fill, gap = props.gap, hAlign = props.hAlign, inline = props.inline, padding = props.padding, space = props.space, styles = props.styles, variables = props.variables, vAlign = props.vAlign, wrap = props.wrap;
    var classes = react_bindings_1.useStyles(exports.Flex.displayName, {
        className: exports.flexClassName,
        mapPropsToStyles: function () { return ({
            column: column,
            debug: debug,
            fill: fill,
            gap: gap,
            hAlign: hAlign,
            inline: inline,
            padding: padding,
            space: space,
            vAlign: vAlign,
            wrap: wrap,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Flex.handledProps, props);
    var content = React.Children.map(children, function (child) {
        var isFlexItemElement = _.get(child, 'type.__isFlexItem');
        return isFlexItemElement
            ? React.cloneElement(child, {
                flexDirection: column ? 'column' : 'row',
            })
            : child;
    });
    var element = (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, unhandledProps), content));
    setEnd();
    return element;
};
exports.Flex = Flex;
exports.Flex.displayName = 'Flex';
exports.Flex.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    accessibility: false,
    content: false,
})), { inline: PropTypes.bool, column: PropTypes.bool, wrap: PropTypes.bool, hAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']), vAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']), space: PropTypes.oneOf(['around', 'between', 'evenly']), gap: PropTypes.oneOf(['gap.smaller', 'gap.small', 'gap.medium', 'gap.large']), padding: PropTypes.oneOf(['padding.medium']), fill: PropTypes.bool, debug: PropTypes.bool });
exports.Flex.handledProps = Object.keys(exports.Flex.propTypes);
exports.Flex.Item = FlexItem_1.FlexItem;
