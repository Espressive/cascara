"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Text = exports.textClassName = void 0;
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.textClassName = 'ui-text';
/**
 * A Text consistently styles and formats occurrences of text.
 */
var Text = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Text.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, align = props.align, atMention = props.atMention, children = props.children, className = props.className, color = props.color, content = props.content, design = props.design, disabled = props.disabled, error = props.error, important = props.important, size = props.size, styles = props.styles, success = props.success, timestamp = props.timestamp, truncated = props.truncated, temporary = props.temporary, variables = props.variables, weight = props.weight;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Text.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Text.displayName, {
        className: exports.textClassName,
        mapPropsToStyles: function () { return ({
            atMention: atMention,
            color: color,
            important: important,
            timestamp: timestamp,
            truncated: truncated,
            disabled: disabled,
            error: error,
            success: success,
            temporary: temporary,
            align: align,
            weight: weight,
            size: size,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Text.handledProps, props);
    var ElementType = react_bindings_1.getElementType(props);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
};
exports.Text = Text;
exports.Text.displayName = 'Text';
exports.Text.defaultProps = {
    as: 'span',
};
exports.Text.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ color: true })), { atMention: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['me'])]), disabled: PropTypes.bool, error: PropTypes.bool, important: PropTypes.bool, size: customPropTypes.size, weight: PropTypes.oneOf(['light', 'semilight', 'regular', 'semibold', 'bold']), success: PropTypes.bool, temporary: PropTypes.bool, align: customPropTypes.align, timestamp: PropTypes.bool, truncated: PropTypes.bool });
exports.Text.handledProps = Object.keys(exports.Text.propTypes);
exports.Text.create = utils_1.createShorthandFactory({ Component: exports.Text, mappedProp: 'content' });
