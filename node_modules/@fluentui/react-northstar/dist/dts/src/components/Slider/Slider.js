"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slider = exports.sliderSlotClassNames = exports.sliderClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var state_1 = require("@fluentui/state");
var classnames_1 = require("classnames");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var processInputValues = function (p) {
    var min = _.toNumber(p.min);
    var max = _.toNumber(p.max);
    var value = _.toNumber(p.value);
    if (isNaN(min))
        min = Number(exports.Slider.defaultProps.min);
    if (isNaN(max))
        max = Number(exports.Slider.defaultProps.max);
    value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));
    var valueAsPercentage = (100 * (value - min)) / (max - min) + "%";
    return { min: min, max: max, value: value, valueAsPercentage: valueAsPercentage };
};
exports.sliderClassName = 'ui-slider';
exports.sliderSlotClassNames = {
    input: exports.sliderClassName + "__input",
    inputWrapper: exports.sliderClassName + "__input-wrapper",
    rail: exports.sliderClassName + "__rail",
    thumb: exports.sliderClassName + "__thumb",
    track: exports.sliderClassName + "__track",
};
/**
 * A Slider represents an input that allows user to choose a value from within a specific range.
 *
 * @accessibility
 * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.
 * @accessibilityIssues
 * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)
 * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)
 */
var Slider = function (props) {
    var _a;
    var context = react_bindings_1.useFluentContext();
    var _b = react_bindings_1.useTelemetry(exports.Slider.displayName, context.telemetry), setStart = _b.setStart, setEnd = _b.setEnd;
    setStart();
    var accessibility = props.accessibility, min = props.min, max = props.max, value = props.value, getA11yValueMessageOnChange = props.getA11yValueMessageOnChange, defaultValue = props.defaultValue, input = props.input, userInputRef = props.inputRef, step = props.step, className = props.className, styles = props.styles, variables = props.variables, design = props.design, fluid = props.fluid, vertical = props.vertical, disabled = props.disabled;
    var inputRef = React.useRef();
    var _c = react_bindings_1.useStateManager(state_1.createSliderManager, {
        mapPropsToInitialState: function () { return ({
            value: defaultValue,
        }); },
        mapPropsToState: function () { return ({
            value: value,
        }); },
    }), state = _c.state, actions = _c.actions;
    var _d = processInputValues({
        min: min,
        max: max,
        value: state.value || '',
    }), numericMin = _d.min, numericMax = _d.max, numericValue = _d.value, valueAsPercentage = _d.valueAsPercentage;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Slider.displayName,
        rtl: context.rtl,
        mapPropsToBehavior: function () { return ({
            disabled: disabled,
            getA11yValueMessageOnChange: getA11yValueMessageOnChange,
            max: numericMax,
            min: numericMax,
            value: numericValue,
            vertical: vertical,
        }); },
    });
    var _e = react_bindings_1.useStyles(exports.Slider.displayName, {
        className: exports.sliderClassName,
        mapPropsToStyles: function () { return ({
            fluid: fluid,
            vertical: vertical,
            disabled: disabled,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            styles: styles,
            variables: variables,
            design: design,
        }); },
        rtl: context.rtl,
    }), classes = _e.classes, resolvedStyles = _e.styles;
    var handleInputOverrides = function () { return ({
        onChange: function (e) {
            var value = _.get(e, 'target.value');
            _.invoke(props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { value: value }));
            actions.change(value);
        },
        onMouseDown: function (e) {
            utils_1.setWhatInputSource(context.target, 'mouse');
            _.invoke(props, 'onMouseDown', e, props);
        },
    }); };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Slider.handledProps, props);
    var _f = utils_1.partitionHTMLProps(unhandledProps), htmlInputProps = _f[0], restProps = _f[1];
    var type = 'range';
    // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes
    var inputElement = Box_1.Box.create(input || type, {
        defaultProps: function () {
            return getA11Props('input', tslib_1.__assign(tslib_1.__assign({}, htmlInputProps), { as: 'input', className: exports.sliderSlotClassNames.input, min: numericMin, max: numericMax, step: step, styles: resolvedStyles.input, type: type, value: numericValue }));
        },
        overrideProps: handleInputOverrides,
    });
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign({ className: classes.root }, restProps))),
        React.createElement("div", tslib_1.__assign({}, getA11Props('inputWrapper', {
            className: classnames_1.default(exports.sliderSlotClassNames.inputWrapper, classes.inputWrapper),
        })),
            React.createElement("span", tslib_1.__assign({}, getA11Props('rail', { className: classnames_1.default(exports.sliderSlotClassNames.rail, classes.rail) }))),
            React.createElement("span", tslib_1.__assign({}, getA11Props('track', { className: classnames_1.default(exports.sliderSlotClassNames.track, classes.track) }), { style: { width: valueAsPercentage } })),
            React.createElement(react_component_ref_1.Ref, { innerRef: function (inputElement) {
                    react_component_ref_1.handleRef(inputRef, inputElement);
                    react_component_ref_1.handleRef(userInputRef, inputElement);
                } }, inputElement),
            React.createElement("span", tslib_1.__assign({}, getA11Props('thumb', { className: classnames_1.default(exports.sliderSlotClassNames.thumb, classes.thumb) }), { style: (_a = {}, _a[context.rtl ? 'right' : 'left'] = valueAsPercentage, _a) })))));
    setEnd();
    return element;
};
exports.Slider = Slider;
exports.Slider.displayName = 'Slider';
exports.Slider.defaultProps = {
    accessibility: accessibility_1.sliderBehavior,
    getA11yValueMessageOnChange: function (_a) {
        var value = _a.value;
        return String(value);
    },
    max: 100,
    min: 0,
    step: 1,
};
exports.Slider.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ content: false })), { defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), fluid: PropTypes.bool, getA11yValueMessageOnChange: PropTypes.func, input: customPropTypes.itemShorthand, inputRef: customPropTypes.ref, max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), onChange: PropTypes.func, step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), vertical: PropTypes.bool });
exports.Slider.handledProps = Object.keys(exports.Slider.propTypes);
exports.Slider.create = utils_1.createShorthandFactory({ Component: exports.Slider, mappedProp: 'value' });
