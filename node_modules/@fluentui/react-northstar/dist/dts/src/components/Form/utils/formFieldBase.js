"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._FormFieldBase = exports.formFieldBaseClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../../utils");
var Box_1 = require("../../Box/Box");
var react_bindings_1 = require("@fluentui/react-bindings");
var FormLabel_1 = require("../FormLabel");
var FormMessage_1 = require("../FormMessage");
var formFieldBaseContext_1 = require("./formFieldBaseContext");
exports.formFieldBaseClassName = 'ui-form__field__base';
/**
 * A FormFiedBase represents a Form element containing a label and an input.
 */
exports._FormFieldBase = react_bindings_1.compose(function (props, ref, composeOptions) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(composeOptions.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var message = props.message, inline = props.inline, errorMessage = props.errorMessage, control = props.control, label = props.label, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var slotProps = composeOptions.resolveSlotProps(props);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(composeOptions.handledProps, props);
    var messageId = React.useRef();
    messageId.current = utils_1.getOrGenerateIdFromShorthand('error-message-', errorMessage || message, messageId.current);
    var labelId = React.useRef();
    labelId.current = utils_1.getOrGenerateIdFromShorthand('form-label-', label, labelId.current);
    var classes = react_bindings_1.useStyles(exports._FormFieldBase.displayName, {
        className: composeOptions.className,
        composeOptions: composeOptions,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
        unstable_props: props,
    }).classes;
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: composeOptions.displayName,
        mapPropsToBehavior: function () { return ({
            hasErrorMessage: !!errorMessage,
            messageId: messageId.current,
            labelId: labelId.current,
        }); },
        rtl: context.rtl,
    });
    var childProps = React.useMemo(function () { return ({
        labelId: labelId.current,
    }); }, 
    // TODO: create hooks for id to avoid disbaling esling for accessing the value of refs
    // eslint-disable-next-line
    [labelId.current]);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', {
        className: classes.root,
    })),
        utils_1.createShorthand(composeOptions.slots.label, label, {
            defaultProps: function () {
                return getA11yProps('label', tslib_1.__assign({ id: labelId.current, inline: inline }, slotProps.label));
            },
        }),
        React.createElement(formFieldBaseContext_1.FormFieldBaseProvider, { value: childProps }, utils_1.createShorthand(composeOptions.slots.control, control || {}, {
            defaultProps: function () {
                return getA11yProps('control', tslib_1.__assign(tslib_1.__assign({ error: !!errorMessage || null, ref: ref }, unhandledProps), slotProps.control));
            },
        })),
        utils_1.createShorthand(composeOptions.slots.message, errorMessage || message, {
            defaultProps: function () {
                return getA11yProps('message', tslib_1.__assign({ id: messageId.current }, slotProps.message));
            },
        })));
    setEnd();
    return element;
}, {
    className: exports.formFieldBaseClassName,
    displayName: 'FormFieldBase',
    slots: {
        label: FormLabel_1.FormLabel,
        message: FormMessage_1.FormMessage,
        control: Box_1.Box,
    },
    handledProps: [
        'as',
        'accessibility',
        'className',
        'variables',
        'design',
        'styles',
        'inline',
        'errorMessage',
        'message',
    ],
    shorthandConfig: {
        mappedProp: 'control',
    },
});
exports._FormFieldBase.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ children: false })), { inline: PropTypes.bool, message: customPropTypes.itemShorthand, errorMessage: customPropTypes.itemShorthand });
exports._FormFieldBase.defaultProps = {
    accessibility: accessibility_1.formFieldBehavior,
};
