"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.navigateToNewDate = exports.contstraintNavigatedDate = void 0;
var tslib_1 = require("tslib");
var date_time_utilities_1 = require("../../utils/date-time-utilities");
var contstraintNavigatedDate = function (initialDate, targetDate, direction, restrictedDatesOptions, navigateToDisabledDates) {
    if (!targetDate) {
        // if we couldn't find a target date at all, do nothing
        return undefined;
    }
    var findAvailableDateOptions = tslib_1.__assign({ initialDate: initialDate,
        targetDate: targetDate,
        direction: direction }, (!navigateToDisabledDates && restrictedDatesOptions));
    var newNavigatedDate = date_time_utilities_1.findAvailableDate(findAvailableDateOptions);
    if (!newNavigatedDate) {
        // if no dates available in initial direction, try going backwards
        findAvailableDateOptions.direction = -direction;
        newNavigatedDate = date_time_utilities_1.findAvailableDate(findAvailableDateOptions);
    }
    if (!navigateToDisabledDates && date_time_utilities_1.isAfterMaxDate(targetDate, restrictedDatesOptions)) {
        newNavigatedDate = restrictedDatesOptions.maxDate;
    }
    else if (!navigateToDisabledDates && date_time_utilities_1.isBeforeMinDate(targetDate, restrictedDatesOptions)) {
        newNavigatedDate = restrictedDatesOptions.minDate;
    }
    return newNavigatedDate;
};
exports.contstraintNavigatedDate = contstraintNavigatedDate;
var navigateToNewDate = function (originalDate, kind, step, restrictedDatesOptions, navigateToDisabledDates) {
    var targetDate = null;
    var targetDayDirection = step > 0 ? 1 : -1;
    switch (kind) {
        case 'Month': {
            targetDate = date_time_utilities_1.addMonths(originalDate, targetDayDirection);
            break;
        }
        case 'Week': {
            targetDate = date_time_utilities_1.addWeeks(originalDate, targetDayDirection);
            break;
        }
        case 'Day': {
            targetDate = date_time_utilities_1.addDays(originalDate, targetDayDirection);
            break;
        }
        default:
            break;
    }
    return exports.contstraintNavigatedDate(originalDate, targetDate, step, restrictedDatesOptions, navigateToDisabledDates);
};
exports.navigateToNewDate = navigateToNewDate;
