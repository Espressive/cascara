"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatepickerCalendar = exports.datepickerCalendarClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var date_time_utilities_1 = require("../../utils/date-time-utilities");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var DatepickerCalendarGrid_1 = require("./DatepickerCalendarGrid");
var DatepickerCalendarGridRow_1 = require("./DatepickerCalendarGridRow");
var DatepickerCalendarHeader_1 = require("./DatepickerCalendarHeader");
var DatepickerCalendarCell_1 = require("./DatepickerCalendarCell");
var DatepickerCalendarCellButton_1 = require("./DatepickerCalendarCellButton");
var DatepickerCalendarHeaderCell_1 = require("./DatepickerCalendarHeaderCell");
var navigateToNewDate_1 = require("./navigateToNewDate");
exports.datepickerCalendarClassName = 'ui-datepicker__calendar';
var normalizeDateInGrid = function (date) {
    var result = new Date(date.getTime());
    result.setDate(1);
    return result;
};
/**
 * A DatepickerCalendar is used to display dates in sematically grouped way.
 */
var DatepickerCalendar = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.DatepickerCalendar.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var className = props.className, design = props.design, styles = props.styles, variables = props.variables, calendarHeaderCell = props.calendarHeaderCell, calendarCell = props.calendarCell, calendarCellButton = props.calendarCellButton, calendarGrid = props.calendarGrid, calendarGridRow = props.calendarGridRow, dateRangeType = props.dateRangeType, header = props.header, selectedDate = props.selectedDate, navigatedDate = props.navigatedDate, firstDayOfWeek = props.firstDayOfWeek, today = props.today, formatMonthDayYear = props.formatMonthDayYear, formatMonthYear = props.formatMonthYear, shortDays = props.shortDays, days = props.days, minDate = props.minDate, maxDate = props.maxDate, restrictedDates = props.restrictedDates;
    var restrictedDatesOptions = {
        minDate: minDate,
        maxDate: maxDate,
        restrictedDates: restrictedDates,
    };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.DatepickerCalendar.handledProps, props);
    var updateNavigatedDate = function (date) {
        if (!!date) {
            if (!shouldFocusInDayGrid) {
                setShouldFocusInDayGrid(true);
            }
            setGridNavigatedDate(date);
        }
    };
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.DatepickerCalendar.displayName,
        actionHandlers: {
            addWeek: function (e) {
                e.preventDefault();
                var newNavigatedDate = navigateToNewDate_1.navigateToNewDate(gridNavigatedDate, 'Week', 1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
            subtractWeek: function (e) {
                e.preventDefault();
                var newNavigatedDate = navigateToNewDate_1.navigateToNewDate(gridNavigatedDate, 'Week', -1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
            addDay: function (e) {
                e.preventDefault();
                var newNavigatedDate = navigateToNewDate_1.navigateToNewDate(gridNavigatedDate, 'Day', 1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
            subtractDay: function (e) {
                e.preventDefault();
                var newNavigatedDate = navigateToNewDate_1.navigateToNewDate(gridNavigatedDate, 'Day', -1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
            moveToStartOfWeek: function (e) {
                e.preventDefault();
                var targetDate = date_time_utilities_1.getStartDateOfWeek(gridNavigatedDate, firstDayOfWeek);
                var newNavigatedDate = navigateToNewDate_1.contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
            moveToEndOfWeek: function (e) {
                e.preventDefault();
                var targetDate = date_time_utilities_1.getEndDateOfWeek(gridNavigatedDate, firstDayOfWeek);
                var newNavigatedDate = navigateToNewDate_1.contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
            moveToStartOfColumn: function (e) {
                var _a;
                e.preventDefault();
                var targetDayOfWeek = gridNavigatedDate.getDay();
                var targetDate = (_a = _.find(visibleGrid[0], function (day) { return day.originalDate.getDay() === targetDayOfWeek; })) === null || _a === void 0 ? void 0 : _a.originalDate;
                var newNavigatedDate = navigateToNewDate_1.contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
            moveToEndOfColumn: function (e) {
                var _a;
                e.preventDefault();
                var targetDayOfWeek = gridNavigatedDate.getDay();
                var targetDate = (_a = _.find(visibleGrid[visibleGrid.length - 1], function (day) { return day.originalDate.getDay() === targetDayOfWeek; })) === null || _a === void 0 ? void 0 : _a.originalDate;
                var newNavigatedDate = navigateToNewDate_1.contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);
                updateNavigatedDate(newNavigatedDate);
            },
        },
        rtl: context.rtl,
    });
    var _b = React.useState(function () { return new Date((navigatedDate || today || new Date()).getTime()); }), gridNavigatedDate = _b[0], setGridNavigatedDate = _b[1];
    var _c = React.useState(function () {
        return normalizeDateInGrid(gridNavigatedDate);
    }), normalizedGridDate = _c[0], setNormalizedGridDate = _c[1];
    var _d = React.useState(true), shouldFocusInDayGrid = _d[0], setShouldFocusInDayGrid = _d[1];
    var classes = react_bindings_1.useStyles(exports.DatepickerCalendar.displayName, {
        className: exports.datepickerCalendarClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var visibleGrid = React.useMemo(function () {
        var dayGridOptions = {
            selectedDate: selectedDate,
            navigatedDate: normalizedGridDate,
            weeksToShow: props.weeksToShow,
            firstDayOfWeek: props.firstDayOfWeek,
            firstWeekOfYear: props.firstWeekOfYear,
            dateRangeType: props.dateRangeType,
            daysToSelectInDayView: props.daysToSelectInDayView,
            today: props.today,
            showWeekNumbers: props.showWeekNumbers,
            workWeekDays: props.workWeekDays,
            minDate: props.minDate,
            maxDate: props.maxDate,
            restrictedDates: props.restrictedDates,
        };
        var grid = date_time_utilities_1.getDayGrid(dayGridOptions);
        return grid.slice(1, grid.length - 1); // slicing off first and last weeks, cause we don't use them for transitions
    }, [selectedDate, normalizedGridDate, props]);
    React.useEffect(function () {
        var newNormalizedDate = normalizeDateInGrid(gridNavigatedDate);
        if (date_time_utilities_1.compareDatePart(newNormalizedDate, normalizedGridDate)) {
            // Do not change the grid immediately the month changes but only once the date stops being visible.
            var gridContainsNavigatedDate = visibleGrid.find(function (week) {
                return week.find(function (day) { return date_time_utilities_1.compareDatePart(day.originalDate, gridNavigatedDate) === 0; });
            });
            if (!gridContainsNavigatedDate) {
                setNormalizedGridDate(newNormalizedDate);
            }
        }
    }, [gridNavigatedDate, visibleGrid, normalizedGridDate]);
    var dateFormatting = {
        months: props.months,
        shortMonths: props.shortMonths,
        days: props.days,
        shortDays: props.shortDays,
    };
    var focusDateRef = React.useRef(null);
    var changeMonth = function (nextMonth) {
        var newNavigatedDate = navigateToNewDate_1.navigateToNewDate(normalizedGridDate, 'Month', nextMonth ? 1 : -1, restrictedDatesOptions, true);
        if (!!newNavigatedDate) {
            setGridNavigatedDate(newNavigatedDate);
            setShouldFocusInDayGrid(false);
            setNormalizedGridDate(normalizeDateInGrid(newNavigatedDate));
        }
    };
    var prevMonthOutOfBounds = minDate ? date_time_utilities_1.compareDatePart(minDate, date_time_utilities_1.getMonthStart(normalizedGridDate)) >= 0 : false;
    var nextMonthOutOfBounds = maxDate ? date_time_utilities_1.compareDatePart(date_time_utilities_1.getMonthEnd(normalizedGridDate), maxDate) >= 0 : false;
    React.useEffect(function () {
        var _a;
        if (shouldFocusInDayGrid) {
            (_a = focusDateRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }, [gridNavigatedDate, normalizedGridDate, shouldFocusInDayGrid]);
    var renderCell = function (day, content) {
        return utils_1.createShorthand(DatepickerCalendarCell_1.DatepickerCalendarCell, calendarCell, {
            defaultProps: function () {
                var _a;
                return getA11yProps('calendarCell', {
                    content: content,
                    key: day.key,
                    selected: day.isSelected,
                    disabled: !day.isInBounds,
                    quiet: !day.isInMonth,
                    today: date_time_utilities_1.compareDates(day.originalDate, (_a = props.today) !== null && _a !== void 0 ? _a : new Date()),
                });
            },
        });
    };
    var renderCellButton = function (day, dateRange) {
        return utils_1.createShorthand(DatepickerCalendarCellButton_1.DatepickerCalendarCellButton, calendarCellButton, {
            defaultProps: function () {
                var _a;
                return getA11yProps('calendarCell', {
                    content: day.date,
                    'aria-label': formatMonthDayYear(day.originalDate, dateFormatting),
                    selected: day.isSelected,
                    disabled: !day.isInBounds,
                    quiet: !day.isInMonth,
                    today: date_time_utilities_1.compareDates(day.originalDate, (_a = props.today) !== null && _a !== void 0 ? _a : new Date()),
                });
            },
            overrideProps: function (predefinedProps) { return ({
                onFocus: function (e) {
                    setGridNavigatedDate(day.originalDate);
                    _.invoke(predefinedProps, 'onFocus', e, predefinedProps);
                },
                onClick: function (e) {
                    _.invoke(props, 'onDateChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { value: day, selectedDateRange: dateRangeType !== date_time_utilities_1.DateRangeType.Day ? dateRange : [day] }));
                    _.invoke(predefinedProps, 'onClick', e, predefinedProps);
                },
                ref: date_time_utilities_1.compareDates(gridNavigatedDate, day.originalDate) ? focusDateRef : null,
            }); },
        });
    };
    var renderWeekRow = function (week) { return _.map(week, function (day) { return renderCell(day, renderCellButton(day, week)); }); };
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        utils_1.createShorthand(DatepickerCalendarHeader_1.DatepickerCalendarHeader, header, {
            defaultProps: function () { return ({
                label: formatMonthYear(normalizedGridDate, dateFormatting),
                'aria-label': formatMonthYear(normalizedGridDate, dateFormatting),
                disabledNextButton: nextMonthOutOfBounds,
                disabledPreviousButton: prevMonthOutOfBounds,
                prevMonthAriaLabel: props.prevMonthAriaLabel,
                nextMonthAriaLabel: props.nextMonthAriaLabel,
            }); },
            overrideProps: function (predefinedProps) { return ({
                onPreviousClick: function (e, data) {
                    changeMonth(false);
                    _.invoke(predefinedProps, 'onPreviousClick', e, data);
                },
                onNextClick: function (e, data) {
                    changeMonth(true);
                    _.invoke(predefinedProps, 'onNextClick', e, data);
                },
            }); },
        }),
        utils_1.createShorthand(DatepickerCalendarGrid_1.DatepickerCalendarGrid, calendarGrid, {
            defaultProps: function () {
                return getA11yProps('calendarGrid', {
                    content: (React.createElement(React.Fragment, null,
                        React.createElement("thead", null, utils_1.createShorthand(DatepickerCalendarGridRow_1.DatepickerCalendarGridRow, calendarGridRow, {
                            defaultProps: function () {
                                return getA11yProps('calendarGridRow', {
                                    children: _.times(date_time_utilities_1.DAYS_IN_WEEK, function (dayNumber) {
                                        return utils_1.createShorthand(DatepickerCalendarHeaderCell_1.DatepickerCalendarHeaderCell, calendarHeaderCell, {
                                            defaultProps: function () {
                                                return getA11yProps('calendarHeaderCell', {
                                                    'aria-label': days[(dayNumber + firstDayOfWeek) % date_time_utilities_1.DAYS_IN_WEEK],
                                                    content: shortDays[(dayNumber + firstDayOfWeek) % date_time_utilities_1.DAYS_IN_WEEK],
                                                    key: dayNumber,
                                                });
                                            },
                                        });
                                    }),
                                });
                            },
                        })),
                        React.createElement("tbody", null, _.map(visibleGrid, function (week) {
                            return utils_1.createShorthand(DatepickerCalendarGridRow_1.DatepickerCalendarGridRow, calendarGridRow, {
                                defaultProps: function () {
                                    return getA11yProps('calendarGridRow', {
                                        children: renderWeekRow(week),
                                        isRowSelectionActive: dateRangeType === date_time_utilities_1.DateRangeType.Week,
                                        key: week[0].key,
                                    });
                                },
                            });
                        })))),
                });
            },
        })));
    setEnd();
    return element;
};
exports.DatepickerCalendar = DatepickerCalendar;
exports.DatepickerCalendar.displayName = 'DatepickerCalendar';
exports.DatepickerCalendar.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { calendarCell: customPropTypes.itemShorthand, calendarCellButton: customPropTypes.itemShorthand, calendarHeaderCell: customPropTypes.itemShorthand, header: customPropTypes.itemShorthand, calendarGrid: customPropTypes.itemShorthand, calendarGridRow: customPropTypes.itemShorthand, onDateChange: PropTypes.func, selectedDate: PropTypes.instanceOf(Date), navigatedDate: PropTypes.instanceOf(Date), minDate: PropTypes.instanceOf(Date), maxDate: PropTypes.instanceOf(Date), restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)), firstDayOfWeek: PropTypes.oneOf(Object.keys(date_time_utilities_1.DayOfWeek).map(function (name) { return date_time_utilities_1.DayOfWeek[name]; })), firstWeekOfYear: PropTypes.oneOf(Object.keys(date_time_utilities_1.FirstWeekOfYear).map(function (name) { return date_time_utilities_1.FirstWeekOfYear[name]; })), dateRangeType: PropTypes.oneOf(Object.keys(date_time_utilities_1.DateRangeType).map(function (name) { return date_time_utilities_1.DateRangeType[name]; })), daysToSelectInDayView: PropTypes.number, today: PropTypes.instanceOf(Date), showWeekNumbers: PropTypes.bool, workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(date_time_utilities_1.DayOfWeek).map(function (name) { return date_time_utilities_1.DayOfWeek[name]; }))), weeksToShow: PropTypes.number, formatDay: PropTypes.func, formatYear: PropTypes.func, formatMonthDayYear: PropTypes.func, formatMonthYear: PropTypes.func, parseDate: PropTypes.func, months: PropTypes.arrayOf(PropTypes.string), shortMonths: PropTypes.arrayOf(PropTypes.string), days: PropTypes.arrayOf(PropTypes.string), shortDays: PropTypes.arrayOf(PropTypes.string), isRequiredErrorMessage: PropTypes.string, invalidInputErrorMessage: PropTypes.string, isOutOfBoundsErrorMessage: PropTypes.string, goToToday: PropTypes.string, openCalendarTitle: PropTypes.string, inputPlaceholder: PropTypes.string, prevMonthAriaLabel: PropTypes.string, nextMonthAriaLabel: PropTypes.string, prevYearAriaLabel: PropTypes.string, nextYearAriaLabel: PropTypes.string, prevYearRangeAriaLabel: PropTypes.string, nextYearRangeAriaLabel: PropTypes.string, monthPickerHeaderAriaLabel: PropTypes.string, yearPickerHeaderAriaLabel: PropTypes.string, closeButtonAriaLabel: PropTypes.string, weekNumberFormatString: PropTypes.string, selectedDateFormatString: PropTypes.string, todayDateFormatString: PropTypes.string, inputAriaLabel: PropTypes.string, inputBoundedFormatString: PropTypes.string, inputMinBoundedFormatString: PropTypes.string, inputMaxBoundedFormatString: PropTypes.string });
exports.DatepickerCalendar.defaultProps = tslib_1.__assign({ accessibility: accessibility_1.datepickerCalendarBehavior, firstDayOfWeek: date_time_utilities_1.DayOfWeek.Monday, firstWeekOfYear: date_time_utilities_1.FirstWeekOfYear.FirstDay, dateRangeType: date_time_utilities_1.DateRangeType.Day, header: {}, calendarCell: {}, calendarCellButton: {}, calendarHeaderCell: {}, calendarGrid: {}, calendarGridRow: {} }, date_time_utilities_1.DEFAULT_CALENDAR_STRINGS);
exports.DatepickerCalendar.handledProps = Object.keys(exports.DatepickerCalendar.propTypes);
