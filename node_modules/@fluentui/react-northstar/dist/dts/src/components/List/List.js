"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = exports.listClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var listContext_1 = require("./listContext");
var ListItem_1 = require("./ListItem");
var ListItemContent_1 = require("./ListItemContent");
var ListItemContentMedia_1 = require("./ListItemContentMedia");
var ListItemEndMedia_1 = require("./ListItemEndMedia");
var ListItemHeader_1 = require("./ListItemHeader");
var ListItemHeaderMedia_1 = require("./ListItemHeaderMedia");
var ListItemMedia_1 = require("./ListItemMedia");
exports.listClassName = 'ui-list';
/**
 * A List displays a group of related sequential items.
 *
 * @accessibility
 * List may follow one of the following accessibility semantics:
 * - Static non-navigable list. Implements [ARIA list](https://www.w3.org/TR/wai-aria-1.1/#list) role.
 * - Selectable list: allows the user to select item from a list of choices. Implements [ARIA Listbox](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox) design pattern.
 * @accessibilityIssues
 * [NVDA - Browse Mode does not work with listbox #12350](https://github.com/nvaccess/nvda/issues/12350)
 * [JAWS - Listbox options are not reachable in Virtual Cursor PC mode #517](https://github.com/FreedomScientific/VFO-standards-support/issues/517)
 * [JAWS - Aria-selected is not narrated for the single-select listbox, when selection is NOT moved with focus #440](https://github.com/FreedomScientific/VFO-standards-support/issues/440)
 */
var List = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.List.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, as = props.as, children = props.children, className = props.className, debug = props.debug, design = props.design, horizontal = props.horizontal, items = props.items, navigable = props.navigable, selectable = props.selectable, styles = props.styles, truncateContent = props.truncateContent, truncateHeader = props.truncateHeader, variables = props.variables, wrap = props.wrap;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultSelectedIndex,
        value: props.selectedIndex,
        initialValue: -1,
    }), selectedIndex = _b[0], setSelectedIndex = _b[1];
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.List.displayName,
        mapPropsToBehavior: function () { return ({
            horizontal: horizontal,
            navigable: navigable,
            selectable: selectable,
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.List.displayName, {
        className: exports.listClassName,
        mapPropsToStyles: function () { return ({ isListTag: as === 'ol' || as === 'ul', debug: debug, horizontal: horizontal }); },
        mapPropsToInlineStyles: function () { return ({ className: className, design: design, styles: styles, variables: variables }); },
        rtl: context.rtl,
    }).classes;
    var latestProps = React.useRef(props);
    latestProps.current = props;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.List.handledProps, props);
    var hasContent = utils_1.childrenExist(children) || (items && items.length > 0);
    var onItemClick = React.useCallback(function (e, itemIndex) {
        if (latestProps.current.selectable) {
            setSelectedIndex(itemIndex);
            _.invoke(latestProps.current, 'onSelectedIndexChange', e, tslib_1.__assign(tslib_1.__assign({}, latestProps.current), { selectedIndex: itemIndex }));
        }
    }, [latestProps, setSelectedIndex]);
    var childProps = {
        debug: debug,
        navigable: navigable,
        onItemClick: onItemClick,
        selectable: selectable,
        selectedIndex: selectedIndex,
        truncateContent: truncateContent,
        truncateHeader: truncateHeader,
        variables: variables,
    };
    var renderItems = function () { return _.map(items, function (item, index) { return ListItem_1.ListItem.create(item, { defaultProps: function () { return ({ index: index }); } }); }); };
    var element = getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))),
        React.createElement(listContext_1.ListContextProvider, { value: childProps }, hasContent && wrap(utils_1.childrenExist(children) ? children : renderItems()))));
    setEnd();
    return element;
};
exports.List = List;
exports.List.displayName = 'List';
exports.List.defaultProps = {
    as: 'ul',
    accessibility: accessibility_1.listBehavior,
    wrap: function (children) { return children; },
};
exports.List.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { debug: PropTypes.bool, items: customPropTypes.collectionShorthand, selectable: customPropTypes.every([customPropTypes.disallow(['navigable']), PropTypes.bool]), navigable: customPropTypes.every([customPropTypes.disallow(['selectable']), PropTypes.bool]), truncateContent: PropTypes.bool, truncateHeader: PropTypes.bool, selectedIndex: PropTypes.number, defaultSelectedIndex: PropTypes.number, onSelectedIndexChange: PropTypes.func, horizontal: PropTypes.bool, wrap: PropTypes.func });
exports.List.handledProps = Object.keys(exports.List.propTypes);
exports.List.Item = ListItem_1.ListItem;
exports.List.ItemContent = ListItemContent_1.ListItemContent;
exports.List.ItemContentMedia = ListItemContentMedia_1.ListItemContentMedia;
exports.List.ItemEndMedia = ListItemEndMedia_1.ListItemEndMedia;
exports.List.ItemHeader = ListItemHeader_1.ListItemHeader;
exports.List.ItemHeaderMedia = ListItemHeaderMedia_1.ListItemHeaderMedia;
exports.List.ItemMedia = ListItemMedia_1.ListItemMedia;
exports.List.create = utils_1.createShorthandFactory({ Component: exports.List, mappedArrayProp: 'items' });
