"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatItem = exports.chatItemSlotClassNames = exports.chatItemClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var chatDensityContext_1 = require("./chatDensityContext");
var chatItemContext_1 = require("./chatItemContext");
exports.chatItemClassName = 'ui-chat__item';
exports.chatItemSlotClassNames = {
    message: exports.chatItemClassName + "__message",
    gutter: exports.chatItemClassName + "__gutter",
};
/**
 * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).
 */
var ChatItem = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.ChatItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var chatDensity = chatDensityContext_1.useChatDensityContext();
    var accessibility = props.accessibility, attached = props.attached, children = props.children, className = props.className, contentPosition = props.contentPosition, _b = props.density, density = _b === void 0 ? chatDensity : _b, design = props.design, gutter = props.gutter, message = props.message, styles = props.styles, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.ChatItem.displayName,
        rtl: context.rtl,
    });
    var _c = react_bindings_1.useStyles(exports.ChatItem.displayName, {
        className: exports.chatItemClassName,
        mapPropsToStyles: function () { return ({
            attached: attached,
            contentPosition: contentPosition,
            density: density,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _c.classes, resolvedStyles = _c.styles;
    var renderContent = function () {
        var gutterElement = Box_1.Box.create(gutter, {
            defaultProps: function () {
                return getA11Props('gutter', {
                    className: exports.chatItemSlotClassNames.gutter,
                    styles: resolvedStyles.gutter,
                });
            },
        });
        var messageElement = Box_1.Box.create(message, {
            defaultProps: function () {
                return getA11Props('message', {
                    className: exports.chatItemSlotClassNames.message,
                    styles: resolvedStyles.message,
                });
            },
        });
        return (React.createElement(chatItemContext_1.ChatItemContextProvider, { value: { attached: attached } },
            (contentPosition === 'start' || density === 'compact') && gutterElement,
            messageElement,
            contentPosition === 'end' && density === 'comfy' && gutterElement));
    };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.ChatItem.handledProps, props);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children) ? children : renderContent()));
    setEnd();
    return element;
};
exports.ChatItem = ChatItem;
exports.ChatItem.displayName = 'ChatItem';
exports.ChatItem.defaultProps = {
    as: 'li',
    contentPosition: 'start',
    attached: false,
};
exports.ChatItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ content: false })), { attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]), contentPosition: PropTypes.oneOf(['start', 'end']), density: PropTypes.oneOf(['comfy', 'compact']), gutter: customPropTypes.itemShorthand, message: customPropTypes.itemShorthand });
exports.ChatItem.handledProps = Object.keys(exports.ChatItem.propTypes);
exports.ChatItem.create = utils_1.createShorthandFactory({ Component: exports.ChatItem, mappedProp: 'message' });
