"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItemContent = exports.menuItemContentClassName = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var react_bindings_1 = require("@fluentui/react-bindings");
var PropTypes = require("prop-types");
var utils_1 = require("../../utils");
var menuContext_1 = require("./menuContext");
exports.menuItemContentClassName = 'ui-menu__itemcontent';
/**
 * A MenuItemContent allows a user to have a dedicated component that can be targeted from the theme.
 */
exports.MenuItemContent = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.MenuItemContent.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var parentProps = react_bindings_1.useContextSelectors(menuContext_1.MenuContext, {
        vertical: function (v) { return v.vertical; },
    }); // TODO: we should improve typings for the useContextSelectors
    var className = props.className, children = props.children, design = props.design, styles = props.styles, variables = props.variables, content = props.content, hasMenu = props.hasMenu, hasIcon = props.hasIcon, vertical = props.vertical, inSubmenu = props.inSubmenu;
    var classes = react_bindings_1.useStyles(exports.MenuItemContent.displayName, {
        className: exports.menuItemContentClassName,
        mapPropsToStyles: function () { return ({
            hasMenu: hasMenu,
            hasIcon: hasIcon,
            vertical: vertical || parentProps.vertical,
            inSubmenu: inSubmenu,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var getA11Props = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.MenuItemContent.displayName,
        rtl: context.rtl,
    });
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.MenuItemContent.handledProps, props);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), { ref: ref }), unhandledProps))), react_bindings_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
});
exports.MenuItemContent.displayName = 'MenuItemContent';
exports.MenuItemContent.defaultProps = {
    as: 'span',
};
exports.MenuItemContent.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { hasIcon: PropTypes.bool, hasMenu: PropTypes.bool, vertical: PropTypes.bool, inSubmenu: PropTypes.bool });
exports.MenuItemContent.shorthandConfig = {
    mappedProp: 'content',
};
exports.MenuItemContent.handledProps = Object.keys(exports.MenuItemContent.propTypes);
