"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = exports.menuClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var MenuItem_1 = require("./MenuItem");
var MenuDivider_1 = require("./MenuDivider");
var MenuItemIcon_1 = require("./MenuItemIcon");
var MenuItemContent_1 = require("./MenuItemContent");
var MenuItemIndicator_1 = require("./MenuItemIndicator");
var MenuItemWrapper_1 = require("./MenuItemWrapper");
var menuContext_1 = require("./menuContext");
var react_component_ref_1 = require("@fluentui/react-component-ref");
exports.menuClassName = 'ui-menu';
function useActualProps(props) {
    var actualProps = React.useRef(props);
    React.useEffect(function () {
        actualProps.current = props;
    });
    return actualProps;
}
function useSlotProps(slotName, slotsProps) {
    var slotProps = slotsProps[slotName];
    return React.useMemo(function () { return slotProps; }, 
    // `slotProps` has a stable order of keys so an amount of dependencies will not change between renders
    // eslint-disable-next-line react-hooks/exhaustive-deps
    _.values(slotProps));
}
/**
 * A Menu is a component that offers a grouped list of choices to the user.
 *
 * @accessibility
 * Implements ARIA [Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu), [Toolbar](https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar) or [Tabs](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) design pattern, depending on the behavior used.
 * @accessibilityIssues
 * [JAWS - navigation instruction for menubar](https://github.com/FreedomScientific/VFO-standards-support/issues/203)
 * [JAWS - navigation instruction for menu with aria-orientation="horizontal"](https://github.com/FreedomScientific/VFO-standards-support/issues/204)
 * [JAWS [VC] doesn't narrate menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/324)
 * [JAWS [app mode] focus moves to second menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/325)
 * [Enter into a tablist JAWS narrates: To switch pages, press Control+PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/337)
 * 51114083 VoiceOver+Web narrate wrong position in menu / total count of menu items, when pseudo element ::after or ::before is used
 */
exports.Menu = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Menu.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var iconOnly = props.iconOnly, items = props.items, pills = props.pills, pointing = props.pointing, primary = props.primary, underlined = props.underlined, vertical = props.vertical, submenu = props.submenu, children = props.children, variables = props.variables, styles = props.styles, fluid = props.fluid, className = props.className, design = props.design, secondary = props.secondary, accessibility = props.accessibility;
    var ElementType = react_bindings_1.getElementType(props);
    var slotProps = {
        divider: {
            inSubmenu: props.submenu,
            pills: props.pills,
            pointing: props.pointing,
            primary: props.primary,
            secondary: props.secondary,
            vertical: props.vertical,
        },
        item: {
            iconOnly: props.iconOnly,
            indicator: props.indicator,
            inSubmenu: props.submenu,
            pills: props.pills,
            pointing: props.pointing,
            primary: props.primary,
            secondary: props.secondary,
            vertical: props.vertical,
            underlined: props.underlined,
        },
    };
    var itemProps = useSlotProps('item', slotProps);
    var dividerProps = useSlotProps('divider', slotProps);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Menu.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Menu.displayName,
        mapPropsToBehavior: function () { return ({
            vertical: vertical,
        }); },
        rtl: context.rtl,
    });
    var actualProps = useActualProps(props);
    var classes = react_bindings_1.useStyles(exports.Menu.displayName, {
        className: exports.menuClassName,
        mapPropsToStyles: function () { return ({
            iconOnly: iconOnly,
            fluid: fluid,
            pointing: pointing,
            pills: pills,
            primary: primary,
            underlined: underlined,
            vertical: vertical,
            secondary: secondary,
            submenu: submenu,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
        unstable_props: props,
    }).classes;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultActiveIndex,
        value: props.activeIndex,
        initialValue: undefined,
    }), activeIndex = _b[0], setIndex = _b[1];
    var setActiveIndex = React.useCallback(function (e, activeIndex) {
        _.invoke(actualProps.current, 'onActiveIndexChange', e, tslib_1.__assign(tslib_1.__assign({}, actualProps.current), { activeIndex: activeIndex }));
        setIndex(activeIndex);
    }, [actualProps, setIndex]);
    var handleClick = React.useCallback(function (e, itemProps) {
        var index = itemProps.index;
        setActiveIndex(e, index);
        _.invoke(actualProps.current, 'onItemClick', e, itemProps);
    }, [actualProps, setActiveIndex]);
    var handleSelect = React.useCallback(function (e, index) {
        setActiveIndex(e, index);
    }, [setActiveIndex]);
    var handleItemOverrides = function (predefinedProps) { return ({
        onActiveChanged: function (e, props) {
            var index = props.index, active = props.active;
            if (active) {
                setActiveIndex(e, index);
            }
            else if (activeIndex === index) {
                setActiveIndex(e, null);
            }
            _.invoke(predefinedProps, 'onActiveChanged', e, props);
        },
        variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
    }); };
    var handleDividerOverrides = function (predefinedProps) { return ({
        variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
    }); };
    var renderItems = function () {
        var itemsCount = _.filter(items, function (item) { return utils_1.getKindProp(item, 'item') !== 'divider'; }).length;
        var itemPosition = 0;
        return _.map(items, function (item, index) {
            var kind = utils_1.getKindProp(item, 'item');
            if (kind === 'divider') {
                return utils_1.createShorthand(MenuDivider_1.MenuDivider, item, {
                    defaultProps: function () { return getA11yProps('divider', {}); },
                    overrideProps: handleDividerOverrides,
                });
            }
            itemPosition++;
            return utils_1.createShorthand(MenuItem_1.MenuItem, item, {
                defaultProps: function () {
                    return getA11yProps('item', {
                        index: index,
                        itemPosition: itemPosition,
                        itemsCount: itemsCount,
                    });
                },
                overrideProps: handleItemOverrides,
            });
        });
    };
    var childBehaviors = accessibility && accessibility(props).childBehaviors;
    var childProps = {
        activeIndex: +activeIndex,
        onItemClick: handleClick,
        onItemSelect: handleSelect,
        vertical: vertical,
        variables: variables,
        slotProps: {
            item: itemProps,
            divider: dividerProps,
        },
        behaviors: {
            item: childBehaviors === null || childBehaviors === void 0 ? void 0 : childBehaviors.item,
            divider: childBehaviors === null || childBehaviors === void 0 ? void 0 : childBehaviors.divider,
        },
    };
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))),
        React.createElement(menuContext_1.MenuContextProvider, { value: childProps }, utils_1.childrenExist(children) ? children : renderItems())));
    var wrappedElement = ref ? React.createElement(react_component_ref_1.Ref, { innerRef: ref }, element) : element;
    setEnd();
    return wrappedElement;
});
exports.Menu.displayName = 'Menu';
exports.Menu.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), defaultActiveIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), fluid: PropTypes.bool, iconOnly: PropTypes.bool, items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']), onItemClick: PropTypes.func, onActiveIndexChange: PropTypes.func, pills: PropTypes.bool, pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]), primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), underlined: PropTypes.bool, vertical: PropTypes.bool, submenu: PropTypes.bool, indicator: customPropTypes.shorthandAllowingChildren });
exports.Menu.handledProps = Object.keys(exports.Menu.propTypes);
exports.Menu.defaultProps = {
    as: 'ul',
    accessibility: accessibility_1.menuBehavior,
};
exports.Menu.Item = MenuItem_1.MenuItem;
exports.Menu.ItemIcon = MenuItemIcon_1.MenuItemIcon;
exports.Menu.ItemContent = MenuItemContent_1.MenuItemContent;
exports.Menu.ItemWrapper = MenuItemWrapper_1.MenuItemWrapper;
exports.Menu.ItemIndicator = MenuItemIndicator_1.MenuItemIndicator;
exports.Menu.Divider = MenuDivider_1.MenuDivider;
exports.Menu.create = utils_1.createShorthandFactory({ Component: exports.Menu, mappedArrayProp: 'items' });
exports.Menu.shorthandConfig = { mappedArrayProp: 'items' };
