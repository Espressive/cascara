"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItemWrapper = exports.menuItemWrapperClassName = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var utils_1 = require("../../utils");
exports.menuItemWrapperClassName = 'ui-menu__itemwrapper';
/**
 * A MenuItemWrapper allows a user to have a dedicated component that can be targeted from the theme.
 */
exports.MenuItemWrapper = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.MenuItemWrapper.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var className = props.className, children = props.children, design = props.design, styles = props.styles, variables = props.variables, content = props.content, active = props.active, disabled = props.disabled, iconOnly = props.iconOnly, isFromKeyboard = props.isFromKeyboard, pills = props.pills, pointing = props.pointing, secondary = props.secondary, underlined = props.underlined, vertical = props.vertical, primary = props.primary, on = props.on;
    var classes = react_bindings_1.useStyles(exports.MenuItemWrapper.displayName, {
        className: exports.menuItemWrapperClassName,
        mapPropsToStyles: function () { return ({
            active: active,
            disabled: disabled,
            iconOnly: iconOnly,
            isFromKeyboard: isFromKeyboard,
            pills: pills,
            pointing: pointing,
            secondary: secondary,
            underlined: underlined,
            vertical: vertical,
            primary: primary,
            on: on,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var getA11Props = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.MenuItemWrapper.displayName,
        rtl: context.rtl,
    });
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.MenuItemWrapper.handledProps, props);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign({ className: classes.root, ref: ref }, unhandledProps))), react_bindings_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
});
exports.MenuItemWrapper.displayName = 'MenuItemWrapper';
exports.MenuItemWrapper.defaultProps = {
    as: 'li',
};
exports.MenuItemWrapper.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { active: PropTypes.bool, disabled: PropTypes.bool, iconOnly: PropTypes.bool, isFromKeyboard: PropTypes.bool, pills: PropTypes.bool, pointing: PropTypes.oneOf(['start', 'end', true, false]), primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), underlined: PropTypes.bool, vertical: PropTypes.bool });
exports.MenuItemWrapper.handledProps = Object.keys(exports.MenuItemWrapper.propTypes);
exports.MenuItemWrapper.shorthandConfig = {
    mappedProp: 'content',
};
