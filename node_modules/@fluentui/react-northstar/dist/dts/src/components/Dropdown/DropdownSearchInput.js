"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropdownSearchInput = exports.dropdownSearchInputSlotClassNames = exports.dropdownSearchInputClassName = void 0;
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var classnames_1 = require("classnames");
var utils_1 = require("../../utils");
var Input_1 = require("../Input/Input");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.dropdownSearchInputClassName = 'ui-dropdown__searchinput';
exports.dropdownSearchInputSlotClassNames = {
    input: exports.dropdownSearchInputClassName + "__input",
    wrapper: exports.dropdownSearchInputClassName + "__wrapper",
};
/**
 * A DropdownSearchInput represents item of 'search' Dropdown.
 * Used to display the search input field.
 */
var DropdownSearchInput = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.DropdownSearchInput.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibilityComboboxProps = props.accessibilityComboboxProps, accessibilityInputProps = props.accessibilityInputProps, inputRef = props.inputRef, inline = props.inline, placeholder = props.placeholder, disabled = props.disabled, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.DropdownSearchInput.handledProps, props);
    var resolvedStyles = react_bindings_1.useStyles(exports.DropdownSearchInput.displayName, {
        className: exports.dropdownSearchInputClassName,
        mapPropsToStyles: function () { return ({ inline: inline }); },
        mapPropsToInlineStyles: function () { return ({ className: className, design: design, styles: styles, variables: variables }); },
    }).styles;
    var handleFocus = function (e) {
        _.invoke(props, 'onFocus', e, props);
    };
    var handleInputKeyDown = function (e) {
        _.invoke(props, 'onInputKeyDown', e, props);
    };
    var handleInputBlur = function (e) {
        _.invoke(props, 'onInputBlur', e, props);
    };
    var handleKeyUp = function (e) {
        _.invoke(props, 'onKeyUp', e, props);
    };
    var element = (React.createElement(Input_1.Input, tslib_1.__assign({ disabled: disabled, inputRef: inputRef, onFocus: handleFocus, onKeyUp: handleKeyUp }, unhandledProps, { wrapper: tslib_1.__assign(tslib_1.__assign({ className: classnames_1.default(exports.dropdownSearchInputSlotClassNames.wrapper, className), styles: resolvedStyles.root }, accessibilityComboboxProps), unhandledProps.wrapper), input: tslib_1.__assign(tslib_1.__assign({ type: 'text', className: exports.dropdownSearchInputSlotClassNames.input, styles: resolvedStyles.input, placeholder: placeholder, onBlur: handleInputBlur, onKeyDown: handleInputKeyDown }, accessibilityInputProps), unhandledProps.input) })));
    setEnd();
    return element;
};
exports.DropdownSearchInput = DropdownSearchInput;
exports.DropdownSearchInput.displayName = 'DropdownSearchInput';
exports.DropdownSearchInput.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    accessibility: false,
    children: false,
    content: false,
})), { accessibilityInputProps: PropTypes.object, accessibilityComboboxProps: PropTypes.object, disabled: PropTypes.bool, inline: PropTypes.bool, inputRef: customPropTypes.ref, onFocus: PropTypes.func, onInputBlur: PropTypes.func, onInputKeyDown: PropTypes.func, onKeyUp: PropTypes.func, placeholder: PropTypes.string });
exports.DropdownSearchInput.handledProps = Object.keys(exports.DropdownSearchInput.propTypes);
exports.DropdownSearchInput.create = utils_1.createShorthandFactory({ Component: exports.DropdownSearchInput });
