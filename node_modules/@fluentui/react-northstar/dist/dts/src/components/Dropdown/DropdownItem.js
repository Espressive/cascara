"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropdownItem = exports.dropdownItemSlotClassNames = exports.dropdownItemClassName = void 0;
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var accessibility_1 = require("@fluentui/accessibility");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var react_bindings_1 = require("@fluentui/react-bindings");
var classnames_1 = require("classnames");
var utils_1 = require("../../utils");
var Image_1 = require("../Image/Image");
var Box_1 = require("../Box/Box");
exports.dropdownItemClassName = 'ui-dropdown__item';
exports.dropdownItemSlotClassNames = {
    main: exports.dropdownItemClassName + "__main",
    content: exports.dropdownItemClassName + "__content",
    header: exports.dropdownItemClassName + "__header",
    image: exports.dropdownItemClassName + "__image",
    checkableIndicator: exports.dropdownItemClassName + "__checkable-indicator",
};
/**
 * A DropdownItem represents an option of Dropdown list.
 * Displays an item with optional rich media metadata.
 */
var DropdownItem = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.DropdownItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var active = props.active, accessibilityItemProps = props.accessibilityItemProps, className = props.className, content = props.content, design = props.design, header = props.header, image = props.image, isFromKeyboard = props.isFromKeyboard, styles = props.styles, checkable = props.checkable, checkableIndicator = props.checkableIndicator, selected = props.selected, variables = props.variables;
    var _b = react_bindings_1.useStyles(exports.DropdownItem.displayName, {
        className: exports.dropdownItemClassName,
        mapPropsToStyles: function () { return ({
            active: active,
            isFromKeyboard: isFromKeyboard,
            selected: selected,
            hasContent: !!content,
            hasHeader: !!header,
        }); },
        mapPropsToInlineStyles: function () { return ({ className: className, design: design, styles: styles, variables: variables }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.DropdownItem.handledProps, props);
    var handleClick = function (e) {
        _.invoke(props, 'onClick', e, props);
    };
    var contentElement = Box_1.Box.create(content, {
        defaultProps: function () { return ({
            className: exports.dropdownItemSlotClassNames.content,
            styles: resolvedStyles.content,
        }); },
    });
    var headerElement = Box_1.Box.create(header, {
        defaultProps: function () { return ({
            className: exports.dropdownItemSlotClassNames.header,
            styles: resolvedStyles.header,
        }); },
    });
    var endMediaElement = selected && checkable
        ? Box_1.Box.create(checkableIndicator, {
            defaultProps: function () { return ({
                className: exports.dropdownItemSlotClassNames.checkableIndicator,
                styles: resolvedStyles.checkableIndicator,
                accessibility: accessibility_1.indicatorBehavior,
            }); },
        })
        : null;
    var imageElement = Box_1.Box.create(Image_1.Image.create(image, {
        defaultProps: function () { return ({
            avatar: true,
            className: exports.dropdownItemSlotClassNames.image,
            styles: resolvedStyles.image,
        }); },
    }), {
        defaultProps: function () { return ({
            className: exports.dropdownItemSlotClassNames.image,
            styles: resolvedStyles.media,
        }); },
    });
    var element = (React.createElement(ElementType, tslib_1.__assign({ className: classes.root, onClick: handleClick }, accessibilityItemProps, unhandledProps),
        imageElement,
        React.createElement("div", { className: classnames_1.default(exports.dropdownItemSlotClassNames.main, classes.main) },
            headerElement,
            contentElement),
        endMediaElement));
    setEnd();
    return element;
};
exports.DropdownItem = DropdownItem;
exports.DropdownItem.displayName = 'DropdownItem';
exports.DropdownItem.defaultProps = {
    as: 'li',
    checkableIndicator: {},
};
exports.DropdownItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    accessibility: false,
    children: false,
    content: false,
})), { accessibilityItemProps: PropTypes.object, active: PropTypes.bool, content: customPropTypes.itemShorthand, checkable: PropTypes.bool, checkableIndicator: customPropTypes.shorthandAllowingChildren, disabled: PropTypes.bool, header: customPropTypes.itemShorthand, image: customPropTypes.itemShorthandWithoutJSX, onClick: PropTypes.func, isFromKeyboard: PropTypes.bool, selected: PropTypes.bool });
exports.DropdownItem.handledProps = Object.keys(exports.DropdownItem.propTypes);
exports.DropdownItem.create = utils_1.createShorthandFactory({ Component: exports.DropdownItem, mappedProp: 'header' });
