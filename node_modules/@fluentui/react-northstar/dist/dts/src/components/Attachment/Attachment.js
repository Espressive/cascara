"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attachment = exports.attachmentClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var AttachmentAction_1 = require("./AttachmentAction");
var AttachmentBody_1 = require("./AttachmentBody");
var AttachmentDescription_1 = require("./AttachmentDescription");
var AttachmentHeader_1 = require("./AttachmentHeader");
var AttachmentIcon_1 = require("./AttachmentIcon");
exports.attachmentClassName = 'ui-attachment';
/**
 * An Attachment represents a file or media attachment, which may contain some metadata or actions.
 */
exports.Attachment = react_bindings_1.compose(function (props, ref, composeOptions) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(composeOptions.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, action = props.action, actionable = props.actionable, body = props.body, className = props.className, description = props.description, design = props.design, disabled = props.disabled, header = props.header, icon = props.icon, onClick = props.onClick, progress = props.progress, styles = props.styles, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: composeOptions.displayName,
        actionHandlers: {
            performClick: function (e) {
                if (e.currentTarget === e.target) {
                    e.stopPropagation();
                    handleClick(e);
                }
            },
        },
        mapPropsToBehavior: function () { return ({ actionable: actionable }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(composeOptions.displayName, {
        className: exports.attachmentClassName,
        mapPropsToStyles: function () { return ({
            actionable: actionable || !!onClick,
            disabled: disabled,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
        composeOptions: composeOptions,
        unstable_props: props,
    }).classes;
    var slotProps = composeOptions.resolveSlotProps(props);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(composeOptions.handledProps, props);
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        _.invoke(props, 'onClick', e, props);
    };
    var element = getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign({ className: classes.root, onClick: handleClick, ref: ref }, unhandledProps))),
        utils_1.createShorthand(composeOptions.slots.icon, icon, {
            defaultProps: function () { return slotProps.icon; },
            overrideProps: function (predefinedProps) { return ({
                variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
            }); },
        }),
        (header || description) &&
            utils_1.createShorthand(composeOptions.slots.body, body, {
                defaultProps: function () { return slotProps.body; },
                overrideProps: function (predefinedProps) { return ({
                    content: (React.createElement(React.Fragment, null,
                        utils_1.createShorthand(composeOptions.slots.header, header, {
                            defaultProps: function () { return slotProps.header; },
                            overrideProps: function (predefinedProps) { return ({
                                variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
                            }); },
                        }),
                        utils_1.createShorthand(composeOptions.slots.description, description, {
                            defaultProps: function () { return slotProps.description; },
                            overrideProps: function (predefinedProps) { return ({
                                variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
                            }); },
                        }))),
                    variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
                }); },
            }),
        utils_1.createShorthand(composeOptions.slots.action, action, {
            defaultProps: function () { return slotProps.action; },
            overrideProps: function (predefinedProps) { return ({
                variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
            }); },
        }),
        !_.isNil(progress) && React.createElement("div", { className: "ui-attachment__progress", style: { width: progress + "%" } })));
    setEnd();
    return element;
}, {
    className: exports.attachmentClassName,
    displayName: 'Attachment',
    slots: {
        action: AttachmentAction_1.AttachmentAction,
        body: AttachmentBody_1.AttachmentBody,
        description: AttachmentDescription_1.AttachmentDescription,
        header: AttachmentHeader_1.AttachmentHeader,
        icon: AttachmentIcon_1.AttachmentIcon,
    },
    handledProps: [
        'accessibility',
        'action',
        'actionable',
        'as',
        'body',
        'children',
        'className',
        'description',
        'design',
        'header',
        'icon',
        'onClick',
        'progress',
        'styles',
        'variables',
    ],
});
exports.Attachment.create = utils_1.createShorthandFactory({ Component: exports.Attachment, mappedProp: 'header' });
exports.Attachment.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { action: customPropTypes.itemShorthand, actionable: PropTypes.bool, body: customPropTypes.itemShorthand, description: customPropTypes.itemShorthand, header: customPropTypes.itemShorthand, icon: customPropTypes.shorthandAllowingChildren, onClick: PropTypes.func, progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number]) });
exports.Attachment.defaultProps = {
    accessibility: accessibility_1.attachmentBehavior,
    body: {},
};
exports.Attachment.Action = AttachmentAction_1.AttachmentAction;
exports.Attachment.Body = AttachmentBody_1.AttachmentBody;
exports.Attachment.Description = AttachmentDescription_1.AttachmentDescription;
exports.Attachment.Header = AttachmentHeader_1.AttachmentHeader;
exports.Attachment.Icon = AttachmentIcon_1.AttachmentIcon;
