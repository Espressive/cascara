"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dialog = exports.dialogSlotClassNames = exports.dialogClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_nesting_registry_1 = require("@fluentui/react-component-nesting-registry");
var react_component_event_listener_1 = require("@fluentui/react-component-event-listener");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var body_scroll_lock_1 = require("body-scroll-lock");
var utils_1 = require("../../utils");
var Button_1 = require("../Button/Button");
var ButtonGroup_1 = require("../Button/ButtonGroup");
var Box_1 = require("../Box/Box");
var Header_1 = require("../Header/Header");
var Portal_1 = require("../Portal/Portal");
var Flex_1 = require("../Flex/Flex");
var DialogFooter_1 = require("./DialogFooter");
exports.dialogClassName = 'ui-dialog';
exports.dialogSlotClassNames = {
    header: exports.dialogClassName + "__header",
    headerAction: exports.dialogClassName + "__headerAction",
    content: exports.dialogClassName + "__content",
    overlay: exports.dialogClassName + "__overlay",
    footer: exports.dialogClassName + "__footer",
};
/**
 * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.
 * Dialogs are purposefully interruptive, so they should be used sparingly.
 *
 * @accessibility
 * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.
 * @accessibilityIssues
 * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)
 * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)
 * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)
 * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)
 */
var Dialog = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Dialog.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, content = props.content, header = props.header, actions = props.actions, cancelButton = props.cancelButton, closeOnOutsideClick = props.closeOnOutsideClick, confirmButton = props.confirmButton, headerAction = props.headerAction, overlay = props.overlay, trapFocus = props.trapFocus, trigger = props.trigger, footer = props.footer, backdrop = props.backdrop, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Dialog.handledProps, props);
    var contentRef = React.useRef();
    var overlayRef = React.useRef();
    var triggerRef = React.useRef();
    var contentId = React.useRef();
    contentId.current = utils_1.getOrGenerateIdFromShorthand('dialog-content-', content, contentId.current);
    var headerId = React.useRef();
    headerId.current = utils_1.getOrGenerateIdFromShorthand('dialog-header-', header, headerId.current);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Dialog.displayName,
        actionHandlers: {
            closeAndFocusTrigger: function (e) {
                handleDialogCancel(e);
                e.stopPropagation();
                _.invoke(triggerRef, 'current.focus');
            },
            close: function (e) { return handleDialogCancel(e); },
        },
        mapPropsToBehavior: function () { return ({
            headerId: headerId.current,
            contentId: contentId.current,
            trapFocus: trapFocus,
            trigger: trigger,
        }); },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(exports.Dialog.displayName, {
        className: exports.dialogClassName,
        mapPropsToStyles: function () { return ({
            backdrop: backdrop,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var _c = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultOpen,
        value: props.open,
        initialValue: false,
    }), open = _c[0], setOpen = _c[1];
    React.useEffect(function () {
        var target = contentRef === null || contentRef === void 0 ? void 0 : contentRef.current;
        if (open) {
            body_scroll_lock_1.disableBodyScroll(target);
        }
        return function () {
            if (open) {
                body_scroll_lock_1.enableBodyScroll(target);
            }
        };
    }, [open]);
    var handleDialogCancel = function (e) {
        _.invoke(props, 'onCancel', e, tslib_1.__assign(tslib_1.__assign({}, props), { open: false }));
        setOpen(false);
    };
    var handleDialogConfirm = function (e) {
        _.invoke(props, 'onConfirm', e, tslib_1.__assign(tslib_1.__assign({}, props), { open: false }));
        setOpen(false);
    };
    var handleDialogOpen = function (e) {
        _.invoke(props, 'onOpen', e, tslib_1.__assign(tslib_1.__assign({}, props), { open: true }));
        setOpen(true);
    };
    var handleCancelButtonOverrides = function (predefinedProps) { return ({
        onClick: function (e, buttonProps) {
            _.invoke(predefinedProps, 'onClick', e, buttonProps);
            handleDialogCancel(e);
        },
    }); };
    var handleConfirmButtonOverrides = function (predefinedProps) { return ({
        onClick: function (e, buttonProps) {
            _.invoke(predefinedProps, 'onClick', e, buttonProps);
            handleDialogConfirm(e);
        },
    }); };
    var handleOverlayClick = function (e) {
        // Dialog has different conditions to close than Popup, so we don't need to iterate across all
        // refs
        var isInsideContentClick = utils_1.doesNodeContainClick(contentRef.current, e, context.target);
        var isInsideOverlayClick = utils_1.doesNodeContainClick(overlayRef.current, e, context.target);
        var shouldClose = !isInsideContentClick && isInsideOverlayClick;
        if (shouldClose) {
            handleDialogCancel(e);
        }
    };
    var handleDocumentKeydown = function (getRefs) { return function (e) {
        // if focus was lost from Dialog, for e.g. when click on Dialog's content
        // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus
        var lastOverlayRef = getRefs().pop();
        var isLastOpenedDialog = lastOverlayRef && lastOverlayRef.current === overlayRef.current;
        var targetIsBody = e.target.nodeName === 'BODY';
        if (targetIsBody && accessibility_1.getCode(e) === accessibility_1.keyboardKey.Escape && isLastOpenedDialog) {
            handleDialogCancel(e);
            _.invoke(triggerRef, 'current.focus');
        }
    }; };
    var cancelElement = utils_1.createShorthand(Button_1.Button, cancelButton, {
        overrideProps: handleCancelButtonOverrides,
    });
    var confirmElement = utils_1.createShorthand(Button_1.Button, confirmButton, {
        defaultProps: function () { return ({
            primary: true,
        }); },
        overrideProps: handleConfirmButtonOverrides,
    });
    var dialogActions = (cancelElement || confirmElement) &&
        ButtonGroup_1.ButtonGroup.create(actions, {
            defaultProps: function () { return ({
                styles: resolvedStyles.actions,
            }); },
            overrideProps: {
                content: (React.createElement(Flex_1.Flex, { gap: "gap.smaller" },
                    cancelElement,
                    confirmElement)),
            },
        });
    var dialogContent = (React.createElement(react_component_ref_1.Ref, { innerRef: contentRef },
        React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('popup', tslib_1.__assign({ className: classes.root }, unhandledProps))),
            Header_1.Header.create(header, {
                defaultProps: function () {
                    return getA11yProps('header', {
                        as: 'h2',
                        className: exports.dialogSlotClassNames.header,
                        styles: resolvedStyles.header,
                    });
                },
            }),
            utils_1.createShorthand(Button_1.Button, headerAction, {
                defaultProps: function () {
                    return getA11yProps('headerAction', {
                        className: exports.dialogSlotClassNames.headerAction,
                        styles: resolvedStyles.headerAction,
                        text: true,
                        iconOnly: true,
                    });
                },
            }),
            Box_1.Box.create(content, {
                defaultProps: function () {
                    return getA11yProps('content', {
                        styles: resolvedStyles.content,
                        className: exports.dialogSlotClassNames.content,
                    });
                },
            }),
            DialogFooter_1.DialogFooter.create(footer, {
                overrideProps: {
                    content: dialogActions,
                    className: exports.dialogSlotClassNames.footer,
                    styles: resolvedStyles.footer,
                },
            }))));
    var triggerAccessibility = {
        // refactor this when unstable_behaviorDefinition gets merged
        attributes: accessibility(props).attributes.trigger,
        keyHandlers: accessibility(props).keyActions.trigger,
    };
    var element = (React.createElement(Portal_1.Portal, { onTriggerClick: handleDialogOpen, open: open, trapFocus: trapFocus, trigger: trigger, triggerAccessibility: triggerAccessibility, triggerRef: triggerRef },
        React.createElement(react_component_nesting_registry_1.Unstable_NestingAuto, null, function (getRefs, nestingRef) { return (React.createElement(React.Fragment, null,
            React.createElement(react_component_ref_1.Ref, { innerRef: function (contentNode) {
                    overlayRef.current = contentNode;
                    nestingRef.current = contentNode;
                } }, Box_1.Box.create(overlay, {
                defaultProps: function () { return ({
                    className: exports.dialogSlotClassNames.overlay,
                    styles: resolvedStyles.overlay,
                }); },
                overrideProps: { content: dialogContent },
            })),
            closeOnOutsideClick && (React.createElement(react_component_event_listener_1.EventListener, { listener: handleOverlayClick, target: context.target, type: "click", capture: true })),
            React.createElement(react_component_event_listener_1.EventListener, { listener: handleDocumentKeydown(getRefs), target: context.target, type: "keydown", capture: true }))); })));
    setEnd();
    return element;
};
exports.Dialog = Dialog;
exports.Dialog.displayName = 'Dialog';
exports.Dialog.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    children: false,
    content: 'shorthand',
})), { actions: customPropTypes.itemShorthand, backdrop: PropTypes.bool, headerAction: customPropTypes.itemShorthand, cancelButton: customPropTypes.itemShorthand, closeOnOutsideClick: PropTypes.bool, confirmButton: customPropTypes.itemShorthand, defaultOpen: PropTypes.bool, header: customPropTypes.itemShorthand, onCancel: PropTypes.func, onConfirm: PropTypes.func, onOpen: PropTypes.func, open: PropTypes.bool, overlay: customPropTypes.itemShorthand, trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]), trigger: PropTypes.any });
exports.Dialog.defaultProps = {
    accessibility: accessibility_1.dialogBehavior,
    actions: {},
    backdrop: true,
    closeOnOutsideClick: true,
    overlay: {},
    footer: {},
    trapFocus: true,
};
exports.Dialog.handledProps = Object.keys(exports.Dialog.propTypes);
exports.Dialog.Footer = DialogFooter_1.DialogFooter;
exports.Dialog.create = utils_1.createShorthandFactory({
    Component: exports.Dialog,
});
