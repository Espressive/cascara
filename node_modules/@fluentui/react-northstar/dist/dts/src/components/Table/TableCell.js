"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableCell = exports.tableCellSlotClassNames = exports.tableCellClassName = void 0;
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var accessibility_1 = require("@fluentui/accessibility");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
var Box_1 = require("../Box/Box");
exports.tableCellClassName = 'ui-table__cell';
exports.tableCellSlotClassNames = {
    content: exports.tableCellClassName + "__content",
};
/**
 * Component represents a table cell.
 */
var TableCell = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.TableCell.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var cellRef = React.useRef();
    var children = props.children, content = props.content, truncateContent = props.truncateContent, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var hasChildren = utils_1.childrenExist(children);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.TableCell.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.TableCell.displayName,
        actionHandlers: {
            focusCell: function (e) {
                e.preventDefault();
                cellRef.current.focus();
            },
            performClick: function (e) {
                if (e.currentTarget === e.target) {
                    _.invoke(props, 'onClick', e, props);
                    e.preventDefault();
                }
            },
        },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(exports.TableCell.displayName, {
        className: exports.tableCellClassName,
        mapPropsToStyles: function () { return ({
            truncateContent: truncateContent,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var element = (React.createElement(react_component_ref_1.Ref, { innerRef: cellRef }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))), hasChildren
        ? children
        : Box_1.Box.create(content, {
            defaultProps: function () { return ({ className: exports.tableCellSlotClassNames.content, styles: resolvedStyles.content }); },
        })))));
    setEnd();
    return element;
};
exports.TableCell = TableCell;
exports.TableCell.displayName = 'TableCell';
exports.TableCell.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { content: customPropTypes.every([
        customPropTypes.disallow(['children']),
        PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),
    ]), truncateContent: PropTypes.bool });
exports.TableCell.handledProps = Object.keys(exports.TableCell.propTypes);
exports.TableCell.defaultProps = {
    accessibility: accessibility_1.tableCellBehavior,
};
exports.TableCell.create = utils_1.createShorthandFactory({ Component: exports.TableCell, mappedProp: 'content' });
