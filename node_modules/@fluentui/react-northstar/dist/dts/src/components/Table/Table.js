"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = exports.tableSlotClassNames = exports.tableClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var _ = require("lodash");
var React = require("react");
var utils_1 = require("../../utils");
var TableRow_1 = require("./TableRow");
var TableCell_1 = require("./TableCell");
exports.tableClassName = 'ui-table';
exports.tableSlotClassNames = {
    header: exports.tableClassName + "__header",
};
/**
 * A Table is used to display data in tabular layout
 * * @accessibility
 * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.
 * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)
 * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:
 * \- editable content
 * \- multiple actionable elements
 * \- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.
 * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)
 * @accessibilityIssues
 * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)
 * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)
 * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)
 * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)
 * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)
 * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)
 * VoiceOver doesn't narrate aria-rowcount value in table or grid
 */
var Table = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Table.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, rows = props.rows, header = props.header, compact = props.compact, accessibility = props.accessibility, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var hasChildren = utils_1.childrenExist(children);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Table.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Table.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Table.displayName, {
        className: exports.tableClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var renderRows = function () {
        return _.map(rows, function (row) {
            return TableRow_1.TableRow.create(row, {
                defaultProps: function () {
                    return getA11yProps('row', {
                        compact: compact,
                        onClick: function (e, props) {
                            _.invoke(row, 'onClick', e, props);
                        },
                    });
                },
                overrideProps: function (predefinedProps) { return ({
                    variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
                }); },
            });
        });
    };
    var renderHeader = function () {
        return TableRow_1.TableRow.create(header, {
            defaultProps: function () {
                return getA11yProps('row', {
                    header: true,
                    compact: compact,
                    className: exports.tableSlotClassNames.header,
                });
            },
            overrideProps: function (predefinedProps) { return ({
                variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
            }); },
        });
    };
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        hasChildren && children,
        !hasChildren && renderHeader(),
        !hasChildren && renderRows()));
    setEnd();
    return element;
};
exports.Table = Table;
exports.Table.displayName = 'Table';
exports.Table.Cell = TableCell_1.TableCell;
exports.Table.Row = TableRow_1.TableRow;
exports.Table.create = utils_1.createShorthandFactory({
    Component: exports.Table,
});
exports.Table.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { header: customPropTypes.itemShorthand, rows: customPropTypes.collectionShorthand, compact: PropTypes.bool });
exports.Table.handledProps = Object.keys(exports.Table.propTypes);
exports.Table.defaultProps = {
    accessibility: accessibility_1.tableBehavior,
};
