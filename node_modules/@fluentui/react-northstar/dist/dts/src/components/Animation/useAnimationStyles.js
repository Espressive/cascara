"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAnimationStyles = exports.animationClassName = void 0;
var react_bindings_1 = require("@fluentui/react-bindings");
var _ = require("lodash");
var animationCache = new WeakMap();
exports.animationClassName = 'ui-animation';
var useAnimationStyles = function (displayName, props) {
    var _a = react_bindings_1.useFluentContext(), theme = _a.theme, rtl = _a.rtl, disableAnimations = _a.disableAnimations, renderer = _a.renderer, performance = _a.performance;
    if (disableAnimations) {
        return {
            className: exports.animationClassName,
            animationDuration: '0ms',
            animationDelay: '0ms',
        };
    }
    var animation = {
        name: props.name,
        keyframeParams: props.keyframeParams,
        duration: props.duration,
        delay: props.delay,
        iterationCount: props.iterationCount,
        direction: props.direction,
        fillMode: props.fillMode,
        playState: props.playState,
        timingFunction: props.timingFunction,
    };
    var cacheEnabled = performance.enableStylesCaching;
    var cachePerTheme = {};
    var cacheKey = '';
    if (cacheEnabled) {
        if (!animationCache.has(theme)) {
            animationCache.set(theme, {});
        }
        cachePerTheme = animationCache.get(theme);
        cacheKey = JSON.stringify(animation);
        if (cachePerTheme[cacheKey]) {
            return cachePerTheme[cacheKey];
        }
    }
    var _b = react_bindings_1.unstable_getStyles({
        allDisplayNames: [displayName],
        className: exports.animationClassName,
        primaryDisplayName: displayName,
        componentProps: {},
        inlineStylesProps: {
            styles: react_bindings_1.unstable_createAnimationStyles(animation, theme),
        },
        disableAnimations: disableAnimations,
        renderer: renderer,
        rtl: rtl,
        performance: {
            enableSanitizeCssPlugin: false,
            enableStylesCaching: false,
            enableVariablesCaching: false,
            enableBooleanVariablesCaching: false,
        },
        saveDebug: _.noop,
        theme: theme,
        telemetry: undefined,
    }), classes = _b.classes, styles = _b.styles;
    var result = {
        className: classes.root,
        animationDuration: styles.root.animationDuration,
        animationDelay: styles.root.animationDelay,
    };
    if (cacheEnabled) {
        cachePerTheme[cacheKey] = result;
        animationCache.set(theme, cachePerTheme);
    }
    return result;
};
exports.useAnimationStyles = useAnimationStyles;
