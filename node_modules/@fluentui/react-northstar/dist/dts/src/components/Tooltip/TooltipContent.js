"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TooltipContent = exports.tooltipContentClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var positioner_1 = require("../../utils/positioner");
exports.tooltipContentClassName = 'ui-tooltip__content';
/**
 * A TooltipContent contains the content of a Tooltip component.
 */
var TooltipContent = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.TooltipContent.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, content = props.content, design = props.design, open = props.open, placement = props.placement, pointing = props.pointing, pointerRef = props.pointerRef, styles = props.styles, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.TooltipContent.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.TooltipContent.displayName, {
        className: exports.tooltipContentClassName,
        mapPropsToStyles: function () { return ({
            basePlacement: positioner_1.getBasePlacement(placement, context.rtl),
            open: open,
            pointing: pointing,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.TooltipContent.handledProps, props);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps))),
        open && pointing && React.createElement("div", { className: classes.pointer, ref: pointerRef }),
        React.createElement("div", tslib_1.__assign({}, getA11Props('content', { className: classes.content })), utils_1.childrenExist(children) ? children : content)));
    setEnd();
    return element;
};
exports.TooltipContent = TooltipContent;
exports.TooltipContent.displayName = 'TooltipContent';
exports.TooltipContent.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { placement: PropTypes.oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]), pointing: PropTypes.bool, pointerRef: customPropTypes.ref });
exports.TooltipContent.handledProps = Object.keys(exports.TooltipContent.propTypes);
exports.TooltipContent.create = utils_1.createShorthandFactory({ Component: exports.TooltipContent, mappedProp: 'content' });
