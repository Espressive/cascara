"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loader = exports.loaderSlotClassNames = exports.loaderClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var react_bindings_1 = require("@fluentui/react-bindings");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var Text_1 = require("../Text/Text");
exports.loaderClassName = 'ui-loader';
exports.loaderSlotClassNames = {
    indicator: exports.loaderClassName + "__indicator",
    label: exports.loaderClassName + "__label",
    svg: exports.loaderClassName + "__svg",
};
/**
 * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.
 *
 * @accessibility
 * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.
 */
var Loader = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Loader.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var delay = props.delay, label = props.label, indicator = props.indicator, svg = props.svg, inline = props.inline, labelPosition = props.labelPosition, className = props.className, design = props.design, styles = props.styles, variables = props.variables, size = props.size;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Loader.handledProps, props);
    var delayTimer = React.useRef();
    var _b = React.useState(props.delay === 0), visible = _b[0], setVisible = _b[1];
    var labelId = React.useRef();
    labelId.current = utils_1.getOrGenerateIdFromShorthand('loader-label-', label, labelId.current);
    var _c = react_bindings_1.useStyles(exports.Loader.displayName, {
        className: exports.loaderClassName,
        mapPropsToStyles: function () { return ({
            inline: inline,
            labelPosition: labelPosition,
            size: size,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _c.classes, resolvedStyles = _c.styles;
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Loader.displayName,
        mapPropsToBehavior: function () { return ({
            labelId: labelId.current,
        }); },
        rtl: context.rtl,
    });
    React.useEffect(function () {
        if (delay > 0) {
            // @ts-ignore We have a collision between types from DOM and @types/node
            delayTimer.current = setTimeout(function () {
                setVisible(true);
            }, delay);
        }
        return function () { return clearTimeout(delayTimer.current); };
    }, [delay]);
    var svgElement = Box_1.Box.create(svg, {
        defaultProps: function () { return ({ className: exports.loaderSlotClassNames.svg, styles: resolvedStyles.svg }); },
    });
    var element = visible && (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        Box_1.Box.create(indicator, {
            defaultProps: function () {
                return getA11yProps('indicator', {
                    children: svgElement,
                    className: exports.loaderSlotClassNames.indicator,
                    styles: resolvedStyles.indicator,
                });
            },
        }),
        Text_1.Text.create(label, {
            defaultProps: function () {
                return getA11yProps('label', {
                    className: exports.loaderSlotClassNames.label,
                    styles: resolvedStyles.label,
                    id: labelId.current,
                });
            },
        })));
    setEnd();
    return element;
};
exports.Loader = Loader;
exports.Loader.displayName = 'Loader';
exports.Loader.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    children: false,
    content: false,
})), { delay: PropTypes.number, indicator: customPropTypes.itemShorthand, inline: PropTypes.bool, label: customPropTypes.itemShorthand, labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']), size: customPropTypes.size, svg: customPropTypes.itemShorthand });
exports.Loader.defaultProps = {
    accessibility: accessibility_1.loaderBehavior,
    delay: 0,
    indicator: {},
    labelPosition: 'below',
    svg: '',
    size: 'medium',
};
exports.Loader.handledProps = Object.keys(exports.Loader.propTypes);
exports.Loader.create = utils_1.createShorthandFactory({ Component: exports.Loader, mappedProp: 'label' });
exports.Loader.shorthandConfig = { mappedProp: 'label' };
