"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioGroupItem = exports.radioGroupItemSlotClassNames = exports.radioGroupItemClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_icons_northstar_1 = require("@fluentui/react-icons-northstar");
exports.radioGroupItemClassName = 'ui-radiogroup__item';
exports.radioGroupItemSlotClassNames = {
    indicator: exports.radioGroupItemClassName + "__indicator",
    label: exports.radioGroupItemClassName + "__label",
};
/**
 * A RadioGroupItem represents single input element within a RadioGroup.
 *
 * @accessibility
 * Radio items need to be grouped to correctly handle accessibility.
 */
var RadioGroupItem = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.RadioGroupItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var label = props.label, checkedIndicator = props.checkedIndicator, indicator = props.indicator, disabled = props.disabled, vertical = props.vertical, className = props.className, design = props.design, styles = props.styles, variables = props.variables, shouldFocus = props.shouldFocus;
    var elementRef = React.useRef();
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.RadioGroupItem.handledProps, props);
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultChecked,
        value: props.checked,
        initialValue: false,
    }), checked = _b[0], setChecked = _b[1];
    var prevChecked = React.useRef(checked);
    var handleClick = function (e) {
        _.invoke(props, 'onClick', e, props);
        setChecked(function (prevChecked) {
            return !prevChecked;
        });
    };
    // This behavior is not conformant with native input radio, it was added to avoid breaking change
    // and it should be fixed to be conformant with native, only calling onChange when item is clicked (checked will always be true)
    React.useEffect(function () {
        if (prevChecked.current !== checked) {
            _.invoke(props, 'onChange', undefined, tslib_1.__assign(tslib_1.__assign({}, props), { checked: checked }));
            prevChecked.current = checked;
        }
    });
    React.useEffect(function () {
        if (checked && shouldFocus)
            elementRef.current.focus();
    }, [checked, shouldFocus]);
    var _c = react_bindings_1.useStyles(exports.RadioGroupItem.displayName, {
        className: exports.radioGroupItemClassName,
        mapPropsToStyles: function () { return ({
            vertical: vertical,
            disabled: disabled,
            checked: checked,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _c.classes, resolvedStyles = _c.styles;
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.RadioGroupItem.displayName,
        actionHandlers: {
            performClick: function (e) {
                if (utils_1.shouldPreventDefaultOnKeyDown(e)) {
                    e.preventDefault();
                }
                handleClick(e);
            },
        },
        mapPropsToBehavior: function () { return ({
            checked: checked,
            disabled: disabled,
        }); },
        rtl: context.rtl,
    });
    var handleChange = function (e) {
        // RadioGroupItem component doesn't present any `input` component in markup, however all of our
        // components should handle events transparently.
        _.invoke(props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { checked: checked }));
    };
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(react_component_ref_1.Ref, { innerRef: elementRef },
        React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root, onClick: handleClick, onChange: handleChange }, unhandledProps))),
            Box_1.Box.create(checked ? checkedIndicator : indicator, {
                defaultProps: function () { return ({
                    className: exports.radioGroupItemSlotClassNames.indicator,
                    styles: resolvedStyles.indicator,
                }); },
            }),
            Box_1.Box.create(label, {
                defaultProps: function () { return ({
                    as: 'span',
                    className: exports.radioGroupItemSlotClassNames.label,
                    styles: resolvedStyles.label,
                }); },
            }))));
    setEnd();
    return element;
};
exports.RadioGroupItem = RadioGroupItem;
exports.RadioGroupItem.displayName = 'RadioGroupItem';
exports.RadioGroupItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { checked: PropTypes.bool, defaultChecked: PropTypes.bool, disabled: PropTypes.bool, indicator: customPropTypes.shorthandAllowingChildren, checkedIndicator: customPropTypes.shorthandAllowingChildren, label: customPropTypes.itemShorthand, name: PropTypes.string, onClick: PropTypes.func, onChange: PropTypes.func, shouldFocus: PropTypes.bool, value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), vertical: PropTypes.bool });
exports.RadioGroupItem.defaultProps = {
    accessibility: accessibility_1.radioGroupItemBehavior,
    indicator: React.createElement(react_icons_northstar_1.RadioButtonIcon, { outline: true }),
    checkedIndicator: React.createElement(react_icons_northstar_1.RadioButtonIcon, null),
};
exports.RadioGroupItem.handledProps = Object.keys(exports.RadioGroupItem.propTypes);
exports.RadioGroupItem.create = utils_1.createShorthandFactory({ Component: exports.RadioGroupItem, mappedProp: 'label' });
