"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioGroup = exports.radioGroupClassName = void 0;
var tslib_1 = require("tslib");
// TODO:
// vertical - padding variable?
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var RadioGroupItem_1 = require("./RadioGroupItem");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.radioGroupClassName = 'ui-radiogroup';
/**
 * A RadioGroup allows user to select a value from a small set of mutually exclusive options.
 *
 * @accessibility
 * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.
 * @accessibilityIssues
 * [JAWS narrates instruction message on each radio in radiogroup](https://github.com/FreedomScientific/VFO-standards-support/issues/473)
 */
var RadioGroup = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.RadioGroup.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, vertical = props.vertical, items = props.items, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.RadioGroup.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.RadioGroup.displayName,
        actionHandlers: {
            nextItem: function (event) { return setCheckedItem(event, 1); },
            prevItem: function (event) { return setCheckedItem(event, -1); },
        },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.RadioGroup.displayName, {
        className: exports.radioGroupClassName,
        mapPropsToStyles: function () { return ({
            vertical: vertical,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultCheckedValue,
        value: props.checkedValue,
        initialValue: undefined,
    }), checkedValue = _b[0], setCheckedValue = _b[1];
    var _c = React.useState(false), shouldFocus = _c[0], setShouldFocus = _c[1];
    var getItemProps = function (item) {
        return item.props || item;
    };
    var setCheckedItem = function (event, direction) {
        var nextItem = findNextEnabledCheckedItem(direction);
        if (nextItem) {
            checkedValueChange({
                nextCheckedValue: nextItem.value,
                shouldFocus: true,
                event: event,
                itemProps: nextItem,
            });
        }
        event.preventDefault();
    };
    var findNextEnabledCheckedItem = function (direction) {
        if (!props.items || !props.items.length) {
            return undefined;
        }
        var currentIndex = 
        // if none of the values selected, set current index to the first item
        checkedValue !== undefined ? _.findIndex(props.items, function (item) { return getItemProps(item).value === checkedValue; }) : 0;
        for (var newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {
            if (newIndex < 0) {
                newIndex = props.items.length - 1;
            }
            else if (newIndex >= props.items.length) {
                newIndex = 0;
            }
            if (newIndex === currentIndex) {
                return undefined;
            }
            var itemProps = getItemProps(props.items[newIndex]);
            if (!itemProps.disabled) {
                return itemProps;
            }
        }
        return undefined;
    };
    var handleItemOverrides = function (predefinedProps) { return ({
        checked: typeof checkedValue !== 'undefined' && checkedValue === predefinedProps.value,
        onClick: function (event, itemProps) {
            var value = itemProps.value, disabled = itemProps.disabled;
            if (!disabled && value !== checkedValue) {
                checkedValueChange({ nextCheckedValue: value, shouldFocus: false, event: event, itemProps: itemProps });
            }
            _.invoke(predefinedProps, 'onClick', event, itemProps);
        },
        shouldFocus: shouldFocus,
    }); };
    var renderItems = function (vertical) {
        var isNoneValueSelected = checkedValue === undefined;
        return _.map(items, function (item, index) {
            return RadioGroupItem_1.RadioGroupItem.create(item, {
                defaultProps: function () {
                    return getA11yProps('item', tslib_1.__assign({ vertical: vertical }, (index === 0 && isNoneValueSelected && { tabIndex: 0 })));
                },
                overrideProps: handleItemOverrides,
            });
        });
    };
    var checkedValueChange = function (_a) {
        var nextCheckedValue = _a.nextCheckedValue, shouldFocus = _a.shouldFocus, event = _a.event, itemProps = _a.itemProps;
        setCheckedValue(nextCheckedValue);
        setShouldFocus(shouldFocus);
        _.invoke(props, 'onCheckedValueChange', event, itemProps);
    };
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, unhandledProps), utils_1.rtlTextContainer.getAttributes({ forElements: [children] })))), utils_1.childrenExist(children) ? children : renderItems(vertical)));
    setEnd();
    return element;
};
exports.RadioGroup = RadioGroup;
exports.RadioGroup.displayName = 'RadioGroup';
exports.RadioGroup.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), items: customPropTypes.collectionShorthand, onCheckedValueChange: PropTypes.func, vertical: PropTypes.bool });
exports.RadioGroup.defaultProps = {
    accessibility: accessibility_1.radioGroupBehavior,
};
exports.RadioGroup.handledProps = Object.keys(exports.RadioGroup.propTypes);
exports.RadioGroup.Item = RadioGroupItem_1.RadioGroupItem;
exports.RadioGroup.create = utils_1.createShorthandFactory({
    Component: exports.RadioGroup,
});
