"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitButtonToggle = exports.splitButtonToggleClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.splitButtonToggleClassName = 'ui-splitbutton__toggle';
/**
 * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */
var SplitButtonToggle = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.SplitButtonToggle.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, as = props.as, children = props.children, content = props.content, disabled = props.disabled, primary = props.primary, className = props.className, size = props.size, styles = props.styles, variables = props.variables, design = props.design;
    var hasChildren = utils_1.childrenExist(children);
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.SplitButtonToggle.displayName,
        mapPropsToBehavior: function () { return ({
            as: String(as),
            disabled: disabled,
        }); },
        actionHandlers: {
            performClick: function (event) {
                event.preventDefault();
                handleClick(event);
            },
        },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.SplitButtonToggle.displayName, {
        className: exports.splitButtonToggleClassName,
        mapPropsToStyles: function () { return ({
            primary: primary,
            disabled: disabled,
            size: size,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.SplitButtonToggle.handledProps, props);
    var ElementType = react_bindings_1.getElementType(props);
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        _.invoke(props, 'onClick', e, props);
    };
    var result = (React.createElement(ElementType, tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), getA11Props('root', tslib_1.__assign({ onClick: handleClick, disabled: disabled, className: classes.root }, unhandledProps))), hasChildren ? children : content));
    setEnd();
    return result;
};
exports.SplitButtonToggle = SplitButtonToggle;
exports.SplitButtonToggle.defaultProps = {
    as: 'button',
    accessibility: accessibility_1.buttonBehavior,
};
exports.SplitButtonToggle.displayName = 'SplitButtonToggle';
exports.SplitButtonToggle.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({})), { disabled: PropTypes.bool, onClick: PropTypes.func, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), size: customPropTypes.size });
exports.SplitButtonToggle.handledProps = Object.keys(exports.SplitButtonToggle.propTypes);
exports.SplitButtonToggle.create = utils_1.createShorthandFactory({ Component: exports.SplitButtonToggle, mappedProp: 'content' });
