"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitButton = exports.splitButtonClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var positioner_1 = require("../../utils/positioner");
var utils_1 = require("../../utils");
var SplitButtonToggle_1 = require("./SplitButtonToggle");
var Button_1 = require("../Button/Button");
var MenuButton_1 = require("../MenuButton/MenuButton");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.splitButtonClassName = 'ui-splitbutton';
/**
 * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.
 */
var SplitButton = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.SplitButton.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var button = props.button, disabled = props.disabled, menu = props.menu, primary = props.primary, secondary = props.secondary, toggleButton = props.toggleButton, size = props.size, position = props.position, align = props.align, flipBoundary = props.flipBoundary, overflowBoundary = props.overflowBoundary, popperRef = props.popperRef, positionFixed = props.positionFixed, offset = props.offset, unstable_disableTether = props.unstable_disableTether, unstable_pinned = props.unstable_pinned, autoSize = props.autoSize, className = props.className, design = props.design, styles = props.styles, accessibility = props.accessibility, variables = props.variables;
    var targetRef = React.useRef();
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.SplitButton.handledProps, props);
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultOpen,
        value: props.open,
        initialValue: false,
    }), open = _b[0], setOpen = _b[1];
    var _c = React.useState(false), isFromKeyboard = _c[0], setIsFromKeyboard = _c[1];
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.SplitButton.displayName,
        mapPropsToBehavior: function () { return ({
            open: open,
        }); },
        rtl: context.rtl,
    });
    var _d = react_bindings_1.useStyles(exports.SplitButton.displayName, {
        className: exports.splitButtonClassName,
        mapPropsToStyles: function () { return ({
            isFromKeyboard: isFromKeyboard,
            size: size,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _d.classes, resolvedStyles = _d.styles;
    var handleMenuButtonOverrides = function (predefinedProps) { return ({
        onMenuItemClick: function (e, menuItemProps) {
            setOpen(false);
            _.invoke(props, 'onOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { open: false }));
            _.invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);
            _.invoke(props, 'onMenuItemClick', e, menuItemProps);
        },
        onOpenChange: function (e, popupProps) {
            e.stopPropagation();
            setOpen(popupProps.open);
            _.invoke(props, 'onOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { open: popupProps.open }));
        },
    }); };
    var handleMenuButtonTriggerOverrides = function (predefinedProps) { return ({
        onClick: function (e, buttonProps) {
            _.invoke(predefinedProps, 'onClick', e, buttonProps);
            _.invoke(props, 'onMainButtonClick', e, buttonProps);
        },
        onFocus: function (e, buttonProps) {
            _.invoke(predefinedProps, 'onFocus', e, buttonProps);
            setIsFromKeyboard(utils_1.isFromKeyboard());
        },
    }); };
    var element = (React.createElement(react_component_ref_1.Ref, { innerRef: targetRef },
        React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
            MenuButton_1.MenuButton.create({}, {
                defaultProps: function () {
                    return getA11yProps('menuButton', {
                        menu: menu,
                        on: [],
                        open: open,
                        trigger: utils_1.createShorthand(Button_1.Button, button, {
                            defaultProps: function () { return ({
                                styles: resolvedStyles.menuButton,
                                primary: primary,
                                secondary: secondary,
                                disabled: disabled,
                            }); },
                            overrideProps: handleMenuButtonTriggerOverrides,
                        }),
                        target: targetRef.current,
                        position: position,
                        align: align,
                        flipBoundary: flipBoundary,
                        overflowBoundary: overflowBoundary,
                        popperRef: popperRef,
                        positionFixed: positionFixed,
                        offset: offset,
                        unstable_disableTether: unstable_disableTether,
                        unstable_pinned: unstable_pinned,
                        autoSize: autoSize,
                    });
                },
                overrideProps: handleMenuButtonOverrides,
            }),
            SplitButtonToggle_1.SplitButtonToggle.create(toggleButton, {
                defaultProps: function () {
                    return getA11yProps('toggleButton', {
                        disabled: disabled,
                        primary: primary,
                        secondary: secondary,
                        size: size,
                    });
                },
                overrideProps: function (predefinedProps) { return ({
                    onClick: function (e, buttonProps) {
                        _.invoke(predefinedProps, 'onClick', e, buttonProps);
                        setOpen(function (isOpen) {
                            var open = !isOpen;
                            _.invoke(props, 'onOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { open: open }));
                            return open;
                        });
                    },
                }); },
            }))));
    setEnd();
    return element;
};
exports.SplitButton = SplitButton;
exports.SplitButton.displayName = 'SplitButton';
exports.SplitButton.Toggle = SplitButtonToggle_1.SplitButtonToggle;
exports.SplitButton.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { button: customPropTypes.itemShorthand, defaultOpen: PropTypes.bool, menu: PropTypes.oneOfType([
        customPropTypes.itemShorthand,
        PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),
    ]), onMainButtonClick: PropTypes.func, onMenuItemClick: PropTypes.func, onOpenChange: PropTypes.func, open: PropTypes.bool, size: customPropTypes.size, popperRef: customPropTypes.ref, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), toggleButton: customPropTypes.itemShorthand, position: PropTypes.oneOf(positioner_1.POSITIONS), align: PropTypes.oneOf(positioner_1.ALIGNMENTS), flipBoundary: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.arrayOf(PropTypes.object),
        PropTypes.oneOf(['clippingParents', 'window', 'scrollParent']),
    ]), overflowBoundary: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.arrayOf(PropTypes.object),
        PropTypes.oneOf(['clippingParents', 'window', 'scrollParent']),
    ]), positionFixed: PropTypes.bool, offset: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.arrayOf(PropTypes.number),
    ]), unstable_disableTether: PropTypes.oneOf([true, false, 'all']), unstable_pinned: PropTypes.bool, autoSize: PropTypes.oneOf(positioner_1.AUTOSIZES) });
exports.SplitButton.defaultProps = {
    accessibility: accessibility_1.splitButtonBehavior,
    toggleButton: {},
    position: 'below',
    align: 'start',
};
exports.SplitButton.handledProps = Object.keys(exports.SplitButton.propTypes);
exports.SplitButton.create = utils_1.createShorthandFactory({
    Component: exports.SplitButton,
});
