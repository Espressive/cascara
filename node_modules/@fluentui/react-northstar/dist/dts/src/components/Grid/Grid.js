"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grid = exports.gridClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
exports.gridClassName = 'ui-grid';
/**
 * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.
 */
var Grid = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Grid.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, columns = props.columns, content = props.content, design = props.design, rows = props.rows, styles = props.styles, variables = props.variables;
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Grid.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Grid.displayName, {
        className: exports.gridClassName,
        mapPropsToStyles: function () { return ({ columns: columns, rows: rows }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Grid.handledProps, props);
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
};
exports.Grid = Grid;
exports.Grid.displayName = 'Grid';
exports.Grid.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), content: customPropTypes.every([
        customPropTypes.disallow(['children']),
        PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),
    ]), rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]) });
exports.Grid.handledProps = Object.keys(exports.Grid.propTypes);
