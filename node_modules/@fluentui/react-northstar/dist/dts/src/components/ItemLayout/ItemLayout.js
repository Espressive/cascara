"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemLayout = exports.itemLayoutSlotClassNames = exports.itemLayoutClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var React = require("react");
var PropTypes = require("prop-types");
var classnames_1 = require("classnames");
var utils_1 = require("../../utils");
var Layout_1 = require("../Layout/Layout");
exports.itemLayoutClassName = 'ui-itemlayout';
exports.itemLayoutSlotClassNames = {
    header: exports.itemLayoutClassName + "__header",
    headerMedia: exports.itemLayoutClassName + "__headerMedia",
    main: exports.itemLayoutClassName + "__main",
    content: exports.itemLayoutClassName + "__content",
    contentMedia: exports.itemLayoutClassName + "__contentMedia",
    media: exports.itemLayoutClassName + "__media",
    endMedia: exports.itemLayoutClassName + "__endMedia",
};
/**
 * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.
 */
var ItemLayout = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.ItemLayout.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var as = props.as, debug = props.debug, endMedia = props.endMedia, media = props.media, renderMainArea = props.renderMainArea, rootCSS = props.rootCSS, mediaCSS = props.mediaCSS, endMediaCSS = props.endMediaCSS, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.ItemLayout.handledProps, props);
    var _b = react_bindings_1.useStyles(exports.ItemLayout.displayName, {
        className: exports.itemLayoutClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var startArea = media;
    var mainArea = renderMainArea(props, classes);
    var endArea = endMedia;
    var mergedMediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.media, classes.media);
    var mergedEndMediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.endMedia, classes.endMedia);
    var element = (React.createElement(Layout_1.Layout, tslib_1.__assign({ as: as, className: classes.root, styles: resolvedStyles.root, rootCSS: rootCSS, alignItems: "center", gap: utils_1.pxToRem(8), debug: debug, reducing: true, start: startArea && (React.createElement("span", { style: mediaCSS, className: mergedMediaClasses }, utils_1.rtlTextContainer.createFor({ element: startArea }))), main: mainArea, end: endArea && (React.createElement("span", { style: endMediaCSS, className: mergedEndMediaClasses }, utils_1.rtlTextContainer.createFor({ element: endArea }))) }, unhandledProps)));
    setEnd();
    return element;
};
exports.ItemLayout = ItemLayout;
exports.ItemLayout.displayName = 'ItemLayout';
exports.ItemLayout.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    accessibility: false,
    children: false,
    content: false,
})), { contentMedia: PropTypes.any, content: PropTypes.any, debug: PropTypes.bool, header: PropTypes.any, endMedia: PropTypes.any, headerMedia: PropTypes.any, media: PropTypes.any, renderContentArea: PropTypes.func, renderHeaderArea: PropTypes.func, renderMainArea: PropTypes.func, rootCSS: PropTypes.object, mediaCSS: PropTypes.object, headerCSS: PropTypes.object, headerMediaCSS: PropTypes.object, contentCSS: PropTypes.object, contentMediaCSS: PropTypes.object, endMediaCSS: PropTypes.object });
exports.ItemLayout.defaultProps = {
    renderMainArea: function (props, classes) {
        var renderHeaderArea = props.renderHeaderArea, renderContentArea = props.renderContentArea;
        var headerArea = renderHeaderArea(props, classes);
        var contentArea = renderContentArea(props, classes);
        return (React.createElement("div", { className: exports.itemLayoutSlotClassNames.main, style: {
                gridTemplateRows: '1fr 1fr',
            } },
            headerArea,
            contentArea));
    },
    renderHeaderArea: function (props, classes) {
        var debug = props.debug, header = props.header, headerMedia = props.headerMedia, headerCSS = props.headerCSS, headerMediaCSS = props.headerMediaCSS;
        var mergedClasses = classnames_1.default(exports.itemLayoutSlotClassNames.header, classes.header);
        var mediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.headerMedia, classes.headerMedia);
        return !header && !headerMedia ? null : (React.createElement(Layout_1.Layout, { className: mergedClasses, alignItems: "end", gap: utils_1.pxToRem(8), debug: debug, main: utils_1.rtlTextContainer.createFor({ element: header }), rootCSS: headerCSS, end: headerMedia && (React.createElement("span", { style: headerMediaCSS, className: mediaClasses }, utils_1.rtlTextContainer.createFor({ element: headerMedia }))) }));
    },
    renderContentArea: function (props, classes) {
        var debug = props.debug, content = props.content, contentMedia = props.contentMedia, contentCSS = props.contentCSS, contentMediaCSS = props.contentMediaCSS;
        var mergedClasses = classnames_1.default(exports.itemLayoutSlotClassNames.content, classes.content);
        var mediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.contentMedia, classes.contentMedia);
        return !content && !contentMedia ? null : (React.createElement(Layout_1.Layout, { className: mergedClasses, alignItems: "start", gap: utils_1.pxToRem(8), debug: debug, rootCSS: contentCSS, main: utils_1.rtlTextContainer.createFor({ element: content }), end: contentMedia && (React.createElement("span", { style: contentMediaCSS, className: mediaClasses }, utils_1.rtlTextContainer.createFor({ element: contentMedia }))) }));
    },
};
exports.ItemLayout.handledProps = Object.keys(exports.ItemLayout.propTypes);
exports.ItemLayout.create = utils_1.createShorthandFactory({ Component: exports.ItemLayout, mappedProp: 'content' });
