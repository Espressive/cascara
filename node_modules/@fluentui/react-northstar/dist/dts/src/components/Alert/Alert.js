"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alert = exports.alertSlotClassNames = exports.alertClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var Text_1 = require("../Text/Text");
var ButtonGroup_1 = require("../Button/ButtonGroup");
var AlertDismissAction_1 = require("./AlertDismissAction");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.alertClassName = 'ui-alert';
exports.alertSlotClassNames = {
    content: exports.alertClassName + "__content",
    actions: exports.alertClassName + "__actions",
    icon: exports.alertClassName + "__icon",
    header: exports.alertClassName + "__header",
    body: exports.alertClassName + "__body",
};
/**
 * An Alert displays a brief, important message to attract a user's attention without interrupting their current task.
 *
 * @accessibility
 * Implements [ARIA Alert](https://www.w3.org/TR/wai-aria-practices-1.1/#alert) design pattern.
 */
var Alert = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Alert.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var warning = props.warning, danger = props.danger, info = props.info, success = props.success, attached = props.attached, fitted = props.fitted, dismissible = props.dismissible, variables = props.variables, className = props.className, design = props.design, styles = props.styles, children = props.children, actions = props.actions, dismissAction = props.dismissAction, content = props.content, icon = props.icon, header = props.header, body = props.body;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultVisible,
        value: props.visible,
        initialValue: true,
    }), visible = _b[0], setVisible = _b[1];
    var bodyId = React.useState(_.uniqueId('alert-body-'))[0];
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Alert.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Alert.displayName,
        mapPropsToBehavior: function () { return ({
            warning: warning,
            danger: danger,
            bodyId: bodyId,
            visible: visible,
        }); },
        rtl: context.rtl,
    });
    var _c = react_bindings_1.useStyles(exports.Alert.displayName, {
        className: exports.alertClassName,
        mapPropsToStyles: function () { return ({
            warning: warning,
            danger: danger,
            info: info,
            success: success,
            attached: attached,
            fitted: fitted,
            dismissible: dismissible,
            visible: visible,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _c.classes, resolvedStyles = _c.styles;
    var handleDismissOverrides = function (predefinedProps) { return ({
        onClick: function (e, buttonProps) {
            _.invoke(predefinedProps, 'onClick', e, buttonProps);
            _.invoke(props, 'onVisibleChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { visible: false }));
            setVisible(false);
        },
    }); };
    var handleFocus = function (e) {
        _.invoke(props, 'onFocus', e, props);
    };
    var renderContent = function () {
        var bodyContent = (React.createElement(React.Fragment, null,
            Text_1.Text.create(header, {
                defaultProps: function () {
                    return getA11yProps('header', {
                        className: exports.alertSlotClassNames.header,
                        styles: resolvedStyles.header,
                    });
                },
            }),
            Box_1.Box.create(content, {
                defaultProps: function () {
                    return getA11yProps('content', {
                        className: exports.alertSlotClassNames.content,
                        styles: resolvedStyles.content,
                    });
                },
            })));
        return (React.createElement(React.Fragment, null,
            Box_1.Box.create(icon, {
                defaultProps: function () {
                    return getA11yProps('icon', {
                        className: exports.alertSlotClassNames.icon,
                        styles: resolvedStyles.icon,
                    });
                },
            }),
            Box_1.Box.create(body, {
                defaultProps: function () {
                    return getA11yProps('body', {
                        className: exports.alertSlotClassNames.body,
                        styles: resolvedStyles.body,
                        id: bodyId,
                    });
                },
                overrideProps: {
                    children: bodyContent,
                },
            }),
            ButtonGroup_1.ButtonGroup.create(actions, {
                defaultProps: function () {
                    return getA11yProps('actions', {
                        className: exports.alertSlotClassNames.actions,
                        styles: resolvedStyles.actions,
                    });
                },
            }),
            dismissible &&
                AlertDismissAction_1.AlertDismissAction.create(dismissAction, {
                    defaultProps: function () {
                        return getA11yProps('dismissAction', {
                            danger: danger,
                            warning: warning,
                            info: info,
                            success: success,
                            variables: variables,
                        });
                    },
                    overrideProps: handleDismissOverrides,
                })));
    };
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root, onFocus: handleFocus }, unhandledProps))), utils_1.childrenExist(children) ? children : renderContent()));
    setEnd();
    return element;
};
exports.Alert = Alert;
exports.Alert.defaultProps = {
    accessibility: accessibility_1.alertBehavior,
    dismissAction: {},
    body: {},
};
exports.Alert.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ content: 'shorthand' })), { actions: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]), icon: customPropTypes.shorthandAllowingChildren, header: customPropTypes.itemShorthand, attached: PropTypes.oneOf([true, false, 'top', 'bottom']), fitted: PropTypes.bool, danger: PropTypes.bool, defaultVisible: PropTypes.bool, dismissible: PropTypes.bool, dismissAction: customPropTypes.shorthandAllowingChildren, info: PropTypes.bool, onVisibleChange: PropTypes.func, onFocus: PropTypes.func, success: PropTypes.bool, visible: PropTypes.bool, warning: PropTypes.bool, body: customPropTypes.shorthandAllowingChildren });
exports.Alert.displayName = 'Alert';
exports.Alert.handledProps = Object.keys(exports.Alert.propTypes);
exports.Alert.create = utils_1.createShorthandFactory({
    Component: exports.Alert,
});
exports.Alert.DismissAction = AlertDismissAction_1.AlertDismissAction;
