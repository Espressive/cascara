"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarMenu = exports.toolbarMenuClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var ToolbarMenuRadioGroup_1 = require("./ToolbarMenuRadioGroup");
var ToolbarMenuDivider_1 = require("./ToolbarMenuDivider");
var ToolbarMenuItem_1 = require("./ToolbarMenuItem");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarMenuClassName = 'ui-toolbar__menu';
/**
 * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.
 *
 * @accessibility
 * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.
 */
exports.ToolbarMenu = react_bindings_1.compose(function (props, ref, composeOptions) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(composeOptions.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, className = props.className, children = props.children, design = props.design, items = props.items, styles = props.styles, variables = props.variables;
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var mergedVariables = react_bindings_1.mergeVariablesOverrides(parentVariables, variables);
    var slotProps = composeOptions.resolveSlotProps(props);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: composeOptions.displayName,
        actionHandlers: {
            performClick: function (e) {
                _.invoke(props, 'onClick', e, props);
            },
        },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(composeOptions.displayName, {
        className: composeOptions.className,
        composeOptions: composeOptions,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: mergedVariables,
        }); },
        rtl: context.rtl,
        unstable_props: props,
    }).classes;
    var handleItemOverrides = function (predefinedProps) { return ({
        onClick: function (e, itemProps) {
            _.invoke(predefinedProps, 'onClick', e, itemProps);
            _.invoke(props, 'onItemClick', e, tslib_1.__assign(tslib_1.__assign({}, itemProps), { menuOpen: !!itemProps.menu }));
        },
    }); };
    var handleRadioGroupOverrides = function (predefinedProps) { return ({
        onItemClick: function (e, itemProps) {
            _.invoke(predefinedProps, 'onItemClick', e, itemProps);
            _.invoke(props, 'onItemClick', e, itemProps);
        },
    }); };
    var renderItems = function () {
        return _.map(items, function (item) {
            var kind = _.get(item, 'kind', 'item');
            switch (kind) {
                case 'divider':
                    return utils_1.createShorthand(composeOptions.slots.divider, item, {
                        defaultProps: function () { return slotProps.divider; },
                    });
                case 'group':
                    return utils_1.createShorthand(composeOptions.slots.group, item, {
                        defaultProps: function () { return slotProps.group; },
                        overrideProps: handleRadioGroupOverrides,
                    });
                case 'toggle':
                    return utils_1.createShorthand(composeOptions.slots.toggle, item, {
                        defaultProps: function () { return slotProps.toggle; },
                        overrideProps: handleItemOverrides,
                    });
                default:
                    return utils_1.createShorthand(composeOptions.slots.item, item, {
                        defaultProps: function () { return slotProps.item; },
                        overrideProps: handleItemOverrides,
                    });
            }
        });
    };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(composeOptions.handledProps, props);
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({}, unhandledProps), { className: classes.root }))),
        React.createElement(toolbarVariablesContext_1.ToolbarVariablesProvider, { value: mergedVariables }, utils_1.childrenExist(children) ? children : renderItems())));
    setEnd();
    // TODO: As ElementType is wrapped with FocusZone which doesn't ref forwarding we have to use Ref
    return ref ? React.createElement(react_component_ref_1.Ref, { innerRef: ref }, element) : element;
}, {
    displayName: 'ToolbarMenu',
    className: exports.toolbarMenuClassName,
    slots: {
        item: ToolbarMenuItem_1.ToolbarMenuItem,
        divider: ToolbarMenuDivider_1.ToolbarMenuDivider,
        group: ToolbarMenuRadioGroup_1.ToolbarMenuRadioGroup,
        toggle: ToolbarMenuItem_1.ToolbarMenuItem,
    },
    slotProps: function (props) { return ({
        item: {
            submenuIndicator: props.submenuIndicator,
            inSubmenu: props.submenu,
        },
        toggle: {
            accessibility: accessibility_1.toolbarMenuItemCheckboxBehavior,
        },
    }); },
    shorthandConfig: {
        mappedArrayProp: 'items',
    },
    handledProps: [
        'accessibility',
        'as',
        'children',
        'className',
        'content',
        'design',
        'items',
        'onItemClick',
        'styles',
        'submenu',
        'submenuIndicator',
        'variables',
    ],
});
exports.ToolbarMenu.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']), onItemClick: PropTypes.func, submenu: PropTypes.bool, submenuIndicator: customPropTypes.shorthandAllowingChildren });
exports.ToolbarMenu.defaultProps = {
    accessibility: accessibility_1.toolbarMenuBehavior,
    as: 'ul',
};
