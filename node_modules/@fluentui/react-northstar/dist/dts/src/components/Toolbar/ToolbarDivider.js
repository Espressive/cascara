"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarDivider = exports.toolbarDividerClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var React = require("react");
var utils_1 = require("../../utils");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarDividerClassName = 'ui-toolbar__divider';
/**
 * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.
 */
exports.ToolbarDivider = react_bindings_1.compose(function (props, ref, composeOptions) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(composeOptions.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: composeOptions.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(composeOptions.displayName, {
        className: composeOptions.className,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: react_bindings_1.mergeVariablesOverrides(parentVariables, variables),
        }); },
        rtl: context.rtl,
        composeOptions: composeOptions,
        unstable_props: props,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(composeOptions.handledProps, props);
    var element = React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ ref: ref }, unhandledProps), { className: classes.root }))));
    setEnd();
    return element;
}, {
    displayName: 'ToolbarDivider',
    className: exports.toolbarDividerClassName,
    shorthandConfig: {
        mappedProp: 'content',
    },
    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design'],
});
exports.ToolbarDivider.propTypes = utils_1.commonPropTypes.createCommon();
