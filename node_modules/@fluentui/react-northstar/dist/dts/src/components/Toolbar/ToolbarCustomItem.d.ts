import { Accessibility } from '@fluentui/accessibility';
import { ComponentEventHandler } from '../../types';
import { ChildrenComponentProps, ContentComponentProps, UIComponentProps } from '../../utils';
export interface ToolbarCustomItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<never>;
    /** A custom item can remove element padding, vertically or horizontally. */
    fitted?: boolean | 'horizontally' | 'vertically';
    /** A custom item can be focused. */
    focusable?: boolean;
    /** A custom item can't be actionable. */
    onClick?: never;
    /**
     * Called after user's focus. Will be called only if the item is focusable.
     * @param event - React's original SyntheticEvent.
     * @param data - All props.
     */
    onFocus?: ComponentEventHandler<ToolbarCustomItemProps>;
    /**
     * Called after item blur. Will be called only if the item is focusable.
     * @param event - React's original SyntheticEvent.
     * @param data - All props.
     */
    onBlur?: ComponentEventHandler<ToolbarCustomItemProps>;
}
export declare type ToolbarCustomItemStylesProps = Required<Pick<ToolbarCustomItemProps, 'fitted'>>;
export declare const toolbarCustomItemClassName = "ui-toolbar__customitem";
/**
 * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.
 */
export declare const ToolbarCustomItem: import("@fluentui/react-bindings").ComponentWithAs<"div", ToolbarCustomItemProps>;
