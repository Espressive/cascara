"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarMenuRadioGroup = exports.toolbarMenuRadioGroupClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var ToolbarMenuItem_1 = require("./ToolbarMenuItem");
var ToolbarMenuRadioGroupWrapper_1 = require("./ToolbarMenuRadioGroupWrapper");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars
/**
 * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.
 */
exports.ToolbarMenuRadioGroup = react_bindings_1.compose(function (props, ref, composeOptions) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(composeOptions.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, activeIndex = props.activeIndex, className = props.className, design = props.design, items = props.items, styles = props.styles, variables = props.variables, wrapper = props.wrapper;
    var slotProps = composeOptions.resolveSlotProps(props);
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var mergedVariables = react_bindings_1.mergeVariablesOverrides(parentVariables, variables);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: composeOptions.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(composeOptions.displayName, {
        className: composeOptions.className,
        composeOptions: composeOptions,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: mergedVariables,
        }); },
        rtl: context.rtl,
        unstable_props: props,
    }).classes;
    var handleItemOverrides = function (predefinedProps) { return ({
        onClick: function (e, itemProps) {
            _.invoke(predefinedProps, 'onClick', e, itemProps);
            _.invoke(props, 'onItemClick', e, itemProps);
        },
        wrapper: null,
    }); };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(composeOptions.handledProps, props);
    var content = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({}, unhandledProps), { className: classes.root, ref: ref }))),
        React.createElement(toolbarVariablesContext_1.ToolbarVariablesProvider, { value: mergedVariables }, _.map(items, function (item, index) {
            return utils_1.createShorthand(ToolbarMenuItem_1.ToolbarMenuItem, item, {
                defaultProps: function () { return ({
                    accessibility: accessibility_1.toolbarMenuItemRadioBehavior,
                    as: 'li',
                    active: activeIndex === index,
                    index: index,
                }); },
                overrideProps: handleItemOverrides,
            });
        }))));
    var element = utils_1.createShorthand(composeOptions.slots.wrapper, wrapper, {
        defaultProps: function () { return getA11yProps('wrapper', slotProps.wrapper || {}); },
        overrideProps: {
            children: content,
        },
    });
    setEnd();
    return element;
}, {
    className: exports.toolbarMenuRadioGroupClassName,
    displayName: 'ToolbarMenuRadioGroup',
    slots: {
        wrapper: ToolbarMenuRadioGroupWrapper_1.ToolbarMenuRadioGroupWrapper,
    },
    handledProps: [
        'accessibility',
        'as',
        'children',
        'className',
        'content',
        'design',
        'styles',
        'variables',
        'activeIndex',
        'items',
        'onItemClick',
        'wrapper',
    ],
});
exports.ToolbarMenuRadioGroup.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { activeIndex: PropTypes.number, items: customPropTypes.collectionShorthand, onItemClick: PropTypes.func, wrapper: customPropTypes.itemShorthand });
exports.ToolbarMenuRadioGroup.defaultProps = {
    as: 'ul',
    accessibility: accessibility_1.toolbarMenuRadioGroupBehavior,
    wrapper: {},
};
