"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTree = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var react_bindings_1 = require("@fluentui/react-bindings");
var flattenTree_1 = require("./flattenTree");
var _ = require("lodash");
/**
 * This hook returns a stable `getItemById()` function that will lookup in latest `flatTree`.
 * This is used to have stable callbacks that can be passed to React's Context.
 */
function useGetItemById(flatTree) {
    // An exception is thrown there to ensure that a proper callback will assigned to ref
    var callbackRef = React.useRef(function () {
        throw new Error('Callback is not assigned yet');
    });
    // We are assigning a callback during render as it can be used during render and in event handlers. In dev mode we
    // are freezing objects to prevent their mutations
    callbackRef.current = function (itemId) {
        return process.env.NODE_ENV === 'production' ? flatTree[itemId] : Object.freeze(flatTree[itemId]);
    };
    return React.useCallback(function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return callbackRef.current.apply(callbackRef, args);
    }, []);
}
function useStableProps(props) {
    var stableProps = React.useRef(props);
    React.useEffect(function () {
        stableProps.current = props;
    });
    return stableProps;
}
function useTree(options) {
    // We need this because we want to handle `expanded` prop on `items`, should be deprecated and removed
    var deprecated_initialActiveItemIds = React.useMemo(function () { return deprecated_getInitialActiveItemIds(options.items); }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []);
    var _a = react_bindings_1.useAutoControlled({
        defaultValue: options.defaultActiveItemIds,
        value: options.activeItemIds,
        initialValue: deprecated_initialActiveItemIds,
    }), activeItemIds = _a[0], setActiveItemIdsState = _a[1];
    // selectedItemIds is only valid for leaf nodes.
    // For non-leaf nodes, their 'selected' states are defered from all their descendents
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: options.defaultSelectedItemIds,
        value: options.selectedItemIds,
        initialValue: [],
    }), selectedItemIds = _b[0], setSelectedItemIdsState = _b[1];
    // We want to set `visibleItemIds` to simplify rendering later
    var _c = React.useMemo(function () { return flattenTree_1.flattenTree(options.items, activeItemIds, selectedItemIds); }, [
        activeItemIds,
        options.items,
        selectedItemIds,
    ]), flatTree = _c.flatTree, visibleItemIds = _c.visibleItemIds;
    var getItemById = useGetItemById(flatTree);
    var stableProps = useStableProps(options);
    var toggleItemActive = React.useCallback(function (e, idToToggle) {
        var item = getItemById(idToToggle);
        if (!item || !item.hasSubtree) {
            // leaf node does not have the concept of active/inactive
            return;
        }
        setActiveItemIdsState(function (activeItemIds) {
            var _a, _b, _c;
            var nextActiveItemIds;
            var isActiveId = activeItemIds.indexOf(idToToggle) !== -1;
            if (isActiveId) {
                nextActiveItemIds = _.without(activeItemIds, idToToggle);
            }
            else {
                nextActiveItemIds = tslib_1.__spreadArrays(activeItemIds, [idToToggle]);
                if (options.exclusive) {
                    // remove active siblings, if any, from activeItemIds
                    var parent_1 = (_a = getItemById(idToToggle)) === null || _a === void 0 ? void 0 : _a.parent;
                    var activeSibling = (_c = (_b = getItemById(parent_1)) === null || _b === void 0 ? void 0 : _b.childrenIds) === null || _c === void 0 ? void 0 : _c.find(function (id) { return id !== idToToggle && nextActiveItemIds.indexOf(id) >= 0; });
                    if (activeSibling != null) {
                        nextActiveItemIds = _.without(nextActiveItemIds, activeSibling);
                    }
                }
            }
            _.invoke(stableProps.current, 'onActiveItemIdsChange', e, tslib_1.__assign(tslib_1.__assign({}, stableProps.current), { activeItemIds: nextActiveItemIds }));
            return nextActiveItemIds;
        });
    }, [getItemById, options.exclusive, setActiveItemIdsState, stableProps]);
    var expandSiblings = React.useCallback(function (e, focusedItemId) {
        if (options.exclusive) {
            return;
        }
        var focusedItem = getItemById(focusedItemId);
        if (!focusedItem) {
            return;
        }
        var parentItem = getItemById(focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.parent);
        var siblingsIds = parentItem === null || parentItem === void 0 ? void 0 : parentItem.childrenIds;
        if (!siblingsIds) {
            return;
        }
        setActiveItemIdsState(function (activeItemIds) {
            var nextActiveItemIds = _.uniq(activeItemIds.concat(siblingsIds));
            _.invoke(stableProps.current, 'onActiveItemIdsChange', e, tslib_1.__assign(tslib_1.__assign({}, stableProps.current), { activeItemIds: nextActiveItemIds }));
            return nextActiveItemIds;
        });
    }, [getItemById, options.exclusive, setActiveItemIdsState, stableProps]);
    var toggleItemSelect = React.useCallback(function (e, idToToggle) {
        var item = getItemById(idToToggle);
        if (!item) {
            return;
        }
        var leafs = getLeafNodes(getItemById, idToToggle);
        setSelectedItemIdsState(function (selectedItemIds) {
            var nextSelectedItemIds = item.selected === true
                ? _.without.apply(_, tslib_1.__spreadArrays([selectedItemIds], leafs)) : _.uniq(selectedItemIds.concat(leafs)); // add all leaves to selected
            _.invoke(stableProps.current, 'onSelectedItemIdsChange', e, tslib_1.__assign(tslib_1.__assign({}, stableProps.current), { selectedItemIds: nextSelectedItemIds }));
            return nextSelectedItemIds;
        });
    }, [getItemById, setSelectedItemIdsState, stableProps]);
    // Maintains stable collection of refs to avoid unnecessary React context updates
    var nodes = React.useRef({});
    var registerItemRef = React.useCallback(function (id, node) {
        nodes.current[id] = node;
    }, []);
    var getItemRef = React.useCallback(function (id) { return nodes.current[id]; }, []);
    // can be used for keyboard navigation ===
    var focusItemById = React.useCallback(function (id) {
        var _a, _b;
        var itemRef = getItemRef(id);
        if (itemRef instanceof HTMLElement) {
            if ((_a = getItemById(id)) === null || _a === void 0 ? void 0 : _a.hasSubtree) {
                itemRef.focus();
            }
            else {
                // when node is leaf, need to focus on the inner treeTitle
                (_b = itemRef.firstElementChild) === null || _b === void 0 ? void 0 : _b.focus();
            }
        }
    }, [getItemById, getItemRef]);
    var searchByFirstChar = React.useCallback(function (startIndex, endIndex, char) {
        var _a, _b, _c, _d;
        for (var i = startIndex; i < endIndex; ++i) {
            // get first charater of tree node using the same way aria does (https://www.w3.org/TR/wai-aria-practices-1.1/examples/treeview/treeview-2/js/treeitemLinks.js)
            var itemFirstChar = (_d = (_c = (_b = (_a = getItemRef(visibleItemIds[i])) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) === null || _c === void 0 ? void 0 : _c.charAt(0)) === null || _d === void 0 ? void 0 : _d.toLowerCase();
            if (itemFirstChar === char.toLowerCase()) {
                return i;
            }
        }
        return -1;
    }, [getItemRef, visibleItemIds]);
    var getToFocusIDByFirstCharacter = React.useCallback(function (e, idToStartSearch) {
        // Get start index for search
        var starIndex = visibleItemIds.indexOf(idToStartSearch) + 1;
        if (starIndex === visibleItemIds.length) {
            starIndex = 0;
        }
        // Check following nodes in tree
        var toFocusIndex = searchByFirstChar(starIndex, visibleItemIds.length, e.key);
        // If not found in following nodes, check from beginning
        if (toFocusIndex === -1) {
            toFocusIndex = searchByFirstChar(0, starIndex - 1, e.key);
        }
        if (toFocusIndex === -1) {
            return idToStartSearch;
        }
        return visibleItemIds[toFocusIndex];
    }, [searchByFirstChar, visibleItemIds]);
    return {
        flatTree: flatTree,
        getItemById: getItemById,
        activeItemIds: activeItemIds,
        visibleItemIds: visibleItemIds,
        registerItemRef: registerItemRef,
        getItemRef: getItemRef,
        toggleItemActive: toggleItemActive,
        focusItemById: focusItemById,
        expandSiblings: expandSiblings,
        toggleItemSelect: toggleItemSelect,
        getToFocusIDByFirstCharacter: getToFocusIDByFirstCharacter,
    };
}
exports.useTree = useTree;
function deprecated_getInitialActiveItemIds(items) {
    if (!items) {
        return [];
    }
    var result = [];
    items.forEach(function (item) {
        if (item.expanded) {
            result.push(item.id);
        }
        if (item.items) {
            result = result.concat(deprecated_getInitialActiveItemIds(item.items));
        }
    });
    return result;
}
function getLeafNodes(getItemById, rootId) {
    var leafs = [];
    var traverseDown = function (id) {
        var _a, _b;
        if ((_a = getItemById(id)) === null || _a === void 0 ? void 0 : _a.childrenIds) {
            (_b = getItemById(id)) === null || _b === void 0 ? void 0 : _b.childrenIds.forEach(function (child) {
                traverseDown(child);
            });
        }
        else {
            leafs.push(id);
        }
    };
    traverseDown(rootId);
    return leafs;
}
