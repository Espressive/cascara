"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tree = exports.treeClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var TreeItem_1 = require("./TreeItem");
var TreeTitle_1 = require("./TreeTitle");
var utils_1 = require("../../utils");
var useTree_1 = require("./hooks/useTree");
var context_1 = require("./context");
exports.treeClassName = 'ui-tree';
/**
 * A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 * @accessibilityIssues
 * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)
 * [Aria-selected and aria-checked are not output correctly for trees #432](https://github.com/FreedomScientific/VFO-standards-support/issues/432)
 * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)
 * [VoiceOver narrates "selected false" for DOM with role=option and no aria-selected attribute](http://www.openradar.me/FB8050959)
 * [VoiceOver does not support Aria 1.2 listbox role owning unselectable group role](http://www.openradar.me/FB8050958)
 */
var Tree = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Tree.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var selectable = props.selectable, children = props.children, renderedItems = props.renderedItems, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Tree.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Tree.displayName,
        rtl: context.rtl,
        mapPropsToBehavior: function () { return ({
            selectable: selectable,
        }); },
    });
    var classes = react_bindings_1.useStyles(exports.Tree.displayName, {
        className: exports.treeClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var _b = useTree_1.useTree(props), visibleItemIds = _b.visibleItemIds, getItemById = _b.getItemById, registerItemRef = _b.registerItemRef, toggleItemActive = _b.toggleItemActive, focusItemById = _b.focusItemById, expandSiblings = _b.expandSiblings, toggleItemSelect = _b.toggleItemSelect, getToFocusIDByFirstCharacter = _b.getToFocusIDByFirstCharacter;
    var contextValue = React.useMemo(function () { return ({
        getItemById: getItemById,
        registerItemRef: registerItemRef,
        toggleItemActive: toggleItemActive,
        expandSiblings: expandSiblings,
        focusItemById: focusItemById,
        toggleItemSelect: toggleItemSelect,
        getToFocusIDByFirstCharacter: getToFocusIDByFirstCharacter,
    }); }, [
        getItemById,
        registerItemRef,
        toggleItemActive,
        focusItemById,
        expandSiblings,
        toggleItemSelect,
        getToFocusIDByFirstCharacter,
    ]);
    var renderContent = function () {
        return visibleItemIds.map(function (id) {
            var item = getItemById(id);
            var expanded = item.expanded, parent = item.parent, level = item.level, index = item.index, treeSize = item.treeSize;
            return TreeItem_1.TreeItem.create(item.item, {
                defaultProps: function () {
                    return getA11yProps('item', {
                        renderItemTitle: props.renderItemTitle,
                    });
                },
                overrideProps: {
                    expanded: expanded,
                    parent: parent,
                    key: id,
                    level: level,
                    index: index,
                    treeSize: treeSize,
                    selectable: selectable ? item.item.selectable : false,
                },
            });
        });
    };
    var element = (React.createElement(context_1.TreeContext.Provider, { value: contextValue }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children) ? children : renderedItems ? renderedItems(renderContent()) : renderContent()))));
    setEnd();
    return element;
};
exports.Tree = Tree;
exports.Tree.displayName = 'Tree';
exports.Tree.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { activeItemIds: customPropTypes.collectionShorthand, selectedItemIds: customPropTypes.collectionShorthand, defaultActiveItemIds: customPropTypes.collectionShorthand, defaultSelectedItemIds: customPropTypes.collectionShorthand, exclusive: PropTypes.bool, selectable: PropTypes.bool, items: customPropTypes.collectionObjectShorthand, onActiveItemIdsChange: PropTypes.func, onSelectedItemIdsChange: PropTypes.func, renderItemTitle: PropTypes.func, renderedItems: PropTypes.func });
exports.Tree.Item = TreeItem_1.TreeItem;
exports.Tree.Title = TreeTitle_1.TreeTitle;
exports.Tree.defaultProps = {
    accessibility: accessibility_1.treeBehavior,
};
exports.Tree.handledProps = Object.keys(exports.Tree.propTypes);
exports.Tree.create = utils_1.createShorthandFactory({
    Component: exports.Tree,
    mappedArrayProp: 'items',
});
