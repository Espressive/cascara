"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeItem = exports.treeItemClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var utils_1 = require("../../utils");
var TreeTitle_1 = require("./TreeTitle");
var context_1 = require("./context");
exports.treeItemClassName = 'ui-tree__item';
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
var TreeItem = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.TreeItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, contentRef = props.contentRef, design = props.design, title = props.title, renderItemTitle = props.renderItemTitle, expanded = props.expanded, level = props.level, index = props.index, styles = props.styles, variables = props.variables, treeSize = props.treeSize, selectionIndicator = props.selectionIndicator, selectable = props.selectable, id = props.id, parent = props.parent;
    var _b = React.useContext(context_1.TreeContext), getItemById = _b.getItemById, registerItemRef = _b.registerItemRef, toggleItemActive = _b.toggleItemActive, focusItemById = _b.focusItemById, expandSiblings = _b.expandSiblings, toggleItemSelect = _b.toggleItemSelect, getToFocusIDByFirstCharacter = _b.getToFocusIDByFirstCharacter;
    var _c = getItemById(id), selected = _c.selected, hasSubtree = _c.hasSubtree, childrenIds = _c.childrenIds;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        actionHandlers: {
            performClick: function (e) {
                if (utils_1.shouldPreventDefaultOnKeyDown(e)) {
                    e.preventDefault();
                }
                e.stopPropagation();
                toggleItemActive(e, id);
                _.invoke(props, 'onTitleClick', e, props);
            },
            focusParent: function (e) {
                e.preventDefault();
                e.stopPropagation();
                handleFocusParent(e);
            },
            collapse: function (e) {
                e.preventDefault();
                e.stopPropagation();
                toggleItemActive(e, id);
            },
            expand: function (e) {
                e.preventDefault();
                e.stopPropagation();
                toggleItemActive(e, id);
            },
            focusFirstChild: function (e) {
                e.preventDefault();
                e.stopPropagation();
                handleFocusFirstChild(e);
            },
            expandSiblings: function (e) {
                e.preventDefault();
                e.stopPropagation();
                handleSiblingsExpand(e);
            },
            performSelection: function (e) {
                e.preventDefault();
                e.stopPropagation();
                handleSelection(e);
            },
        },
        debugName: exports.TreeItem.displayName,
        mapPropsToBehavior: function () { return ({
            expanded: expanded,
            level: level,
            index: index,
            hasSubtree: hasSubtree,
            treeSize: treeSize,
            selected: selected === true,
            selectable: selectable,
            indeterminate: selected === 'indeterminate',
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.TreeItem.displayName, {
        className: exports.treeItemClassName,
        mapPropsToStyles: function () { return ({
            level: level,
            selectable: selectable,
        }); },
        mapPropsToInlineStyles: function () { return ({ className: className, design: design, styles: styles, variables: variables }); },
        rtl: context.rtl,
    }).classes;
    var handleSelection = function (e) {
        if (selectable) {
            toggleItemSelect(e, id);
        }
        _.invoke(props, 'onTitleClick', e, props);
    };
    var handleFocusFirstChild = function (e) {
        _.invoke(props, 'onFocusFirstChild', e, props);
        focusItemById(childrenIds === null || childrenIds === void 0 ? void 0 : childrenIds[0]);
    };
    var handleFocusParent = function (e) {
        _.invoke(props, 'onFocusParent', e, props);
        focusItemById(parent);
    };
    var handleSiblingsExpand = function (e) {
        _.invoke(props, 'onSiblingsExpand', e, props);
        expandSiblings(e, props.id);
    };
    var handleTitleOverrides = function (predefinedProps) { return ({
        id: id,
        onClick: function (e, titleProps) {
            _.invoke(props, 'onTitleClick', e, props);
            _.invoke(predefinedProps, 'onClick', e, titleProps);
        },
    }); };
    var handleClick = function (e) {
        if (e.target === e.currentTarget) {
            // onClick listener for mouse click on treeItem DOM only,
            // which could be triggered by VO+space on selectable tree parent node
            handleSelection(e);
        }
        _.invoke(props, 'onClick', e, props);
    };
    var handleKeyDown = function (e) {
        if (e.key && e.key.length === 1 && e.key.match(/\S/) && e.key !== '*') {
            e.preventDefault();
            e.stopPropagation();
            var toFocusID = getToFocusIDByFirstCharacter(e, props.id);
            if (toFocusID !== props.id) {
                focusItemById(toFocusID);
            }
        }
        _.invoke(props, 'onKeyDown', e, props);
    };
    var ref = React.useCallback(function (node) {
        registerItemRef(id, node);
        react_component_ref_1.handleRef(contentRef, node);
    }, [id, contentRef, registerItemRef]);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.TreeItem.handledProps, props);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root, id: id, selected: selected === true, onClick: handleClick, onKeyDown: handleKeyDown }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children)
        ? children
        : TreeTitle_1.TreeTitle.create(title, {
            defaultProps: function () {
                return getA11Props('title', tslib_1.__assign(tslib_1.__assign({ hasSubtree: hasSubtree, as: hasSubtree ? 'span' : 'a', level: level,
                    treeSize: treeSize,
                    expanded: expanded,
                    index: index, selected: selected === true, selectable: selectable,
                    parent: parent }, (hasSubtree && {
                    indeterminate: selected === 'indeterminate',
                })), { selectionIndicator: selectionIndicator }));
            },
            render: renderItemTitle,
            overrideProps: handleTitleOverrides,
        })));
    var elementWithRef = React.createElement(react_component_ref_1.Ref, { innerRef: ref }, element);
    setEnd();
    return elementWithRef;
};
exports.TreeItem = TreeItem;
exports.TreeItem.displayName = 'TreeItem';
exports.TreeItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { contentRef: customPropTypes.ref, id: PropTypes.string.isRequired, index: PropTypes.number, items: customPropTypes.collectionShorthand, level: PropTypes.number, onFocusFirstChild: PropTypes.func, onFocusParent: PropTypes.func, onTitleClick: PropTypes.func, onSiblingsExpand: PropTypes.func, expanded: PropTypes.bool, parent: PropTypes.string, renderItemTitle: PropTypes.func, treeSize: PropTypes.number, title: customPropTypes.itemShorthand, selectionIndicator: customPropTypes.shorthandAllowingChildren, selectable: PropTypes.bool, onKeyDown: PropTypes.func });
exports.TreeItem.defaultProps = {
    accessibility: accessibility_1.treeItemBehavior,
    selectable: true,
};
exports.TreeItem.handledProps = Object.keys(exports.TreeItem.propTypes);
exports.TreeItem.create = utils_1.createShorthandFactory({
    Component: exports.TreeItem,
    mappedProp: 'title',
});
