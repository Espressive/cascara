"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarouselNavigation = exports.carouselNavigationClassName = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var PropTypes = require("prop-types");
var React = require("react");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var utils_1 = require("../../utils");
var CarouselNavigationItem_1 = require("./CarouselNavigationItem");
exports.carouselNavigationClassName = 'ui-carousel__navigation';
/**
 * A Carousel navigation helps switching between Carousel items.
 */
var CarouselNavigation = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.CarouselNavigation.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, variables = props.variables, children = props.children, className = props.className, design = props.design, activeIndex = props.activeIndex, iconOnly = props.iconOnly, items = props.items, primary = props.primary, secondary = props.secondary, vertical = props.vertical, thumbnails = props.thumbnails, styles = props.styles;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.CarouselNavigation.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.CarouselNavigation.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.CarouselNavigation.displayName, {
        className: exports.carouselNavigationClassName,
        mapPropsToStyles: function () { return ({
            activeIndex: activeIndex,
            iconOnly: iconOnly,
            primary: primary,
            vertical: vertical,
            thumbnails: thumbnails,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var handleItemOverrides = function (variables) { return function (predefinedProps) { return ({
        onClick: function (e, itemProps) {
            _.invoke(props, 'onItemClick', e, itemProps);
            _.invoke(predefinedProps, 'onClick', e, itemProps);
        },
        variables: react_bindings_1.mergeVariablesOverrides(variables, predefinedProps.variables),
    }); }; };
    var renderItems = function () {
        return _.map(items, function (item, index) {
            return CarouselNavigationItem_1.CarouselNavigationItem.create(item, {
                defaultProps: function () {
                    return getA11yProps('item', {
                        active: index === activeIndex,
                        iconOnly: iconOnly,
                        index: index,
                        primary: primary,
                        secondary: secondary,
                        vertical: vertical,
                        thumbnails: thumbnails,
                    });
                },
                overrideProps: handleItemOverrides(variables),
            });
        });
    };
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps)), utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), utils_1.childrenExist(children) ? children : renderItems()));
    setEnd();
    return element;
};
exports.CarouselNavigation = CarouselNavigation;
exports.CarouselNavigation.displayName = 'CarouselNavigation';
exports.CarouselNavigation.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), iconOnly: PropTypes.bool, thumbnails: PropTypes.bool, items: customPropTypes.collectionShorthand, onItemClick: PropTypes.func, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), vertical: PropTypes.bool });
exports.CarouselNavigation.defaultProps = {
    accessibility: accessibility_1.tabListBehavior,
    as: 'ul',
};
exports.CarouselNavigation.handledProps = Object.keys(exports.CarouselNavigation.propTypes);
exports.CarouselNavigation.create = utils_1.createShorthandFactory({
    Component: exports.CarouselNavigation,
    mappedArrayProp: 'items',
});
