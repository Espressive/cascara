"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvatarLabel = exports.avatarlabelClassName = void 0;
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Label_1 = require("../Label/Label");
exports.avatarlabelClassName = Label_1.labelClassName;
/**
 * A AvatarLabel allows user to classify content.
 */
var AvatarLabel = function (props) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.AvatarLabel.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, content = props.content, design = props.design, styles = props.styles, variables = props.variables, square = props.square, size = props.size, circular = props.circular;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.AvatarLabel.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.AvatarLabel.displayName, {
        className: exports.avatarlabelClassName,
        mapPropsToStyles: function () { return ({
            square: square,
            size: size,
            circular: circular,
        }); },
        mapPropsToInlineStyles: function () { return ({ className: className, design: design, styles: styles, variables: variables }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.AvatarLabel.handledProps, props);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
};
exports.AvatarLabel = AvatarLabel;
exports.AvatarLabel.displayName = 'AvatarLabel';
exports.AvatarLabel.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { square: PropTypes.bool, size: customPropTypes.size, circular: PropTypes.bool });
exports.AvatarLabel.handledProps = Object.keys(exports.AvatarLabel.propTypes);
exports.AvatarLabel.defaultProps = {
    as: 'span',
};
exports.AvatarLabel.shorthandConfig = {
    mappedProp: 'content',
};
