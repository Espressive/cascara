import { Telemetry } from '@fluentui/react-bindings';
import { Renderer } from '@fluentui/react-northstar-styles-renderer';
import { ThemePrepared } from '@fluentui/styles';
import { MountRendererProps, ComponentType } from 'enzyme';
import * as React from 'react';
export declare const EmptyThemeProvider: React.FunctionComponent<{
    disableAnimations?: boolean;
    telemetry?: Telemetry;
    renderer?: Renderer;
    theme?: ThemePrepared;
    rtl?: boolean;
}>;
export declare const mountWithProvider: <C extends React.Component<{}, {}, any>, P = C["props"], S = C["state"]>(node: React.ReactElement<P, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>, options?: MountRendererProps) => import("enzyme").ReactWrapper<P, Readonly<{}>, React.Component<{}, {}, any>>;
export declare const mountWithProviderAndGetComponent: <C extends React.Component<{}, {}, any>, P = C["props"], S = C["state"]>(Component: ComponentType<P>, elementToMount: React.ReactElement<P, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>, options?: MountRendererProps) => import("enzyme").ReactWrapper<P, any, React.Component<{}, {}, any>>;
