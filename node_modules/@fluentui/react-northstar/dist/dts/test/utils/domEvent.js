"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scroll = exports.resize = exports.mouseUp = exports.mouseOver = exports.mouseLeave = exports.mouseEnter = exports.keyDown = exports.click = exports.fire = void 0;
// But at runtime it has to be imported like this
var simulant = require('simulant');
// ----------------------------------------
// Simulate DOM Events on real DOM nodes
// ----------------------------------------
/**
 * Generic method for dispatching an event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param eventType - A DOMString
 * @param data - Additional event data.
 * @returns The event
 */
var fire = function (node, eventType, data) {
    if (data === void 0) { data = {}; }
    var DOMNode = typeof node === 'string' ? document.querySelector(node) : node;
    var event = simulant(eventType, data);
    return simulant.fire(DOMNode, event);
};
exports.fire = fire;
/**
 * Dispatch a 'click' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var click = function (node, data) { return exports.fire(node, 'click', data); };
exports.click = click;
/**
 * Dispatch a 'keydown' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var keyDown = function (node, data) { return exports.fire(node, 'keydown', data); };
exports.keyDown = keyDown;
/**
 * Dispatch a 'mouseenter' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var mouseEnter = function (node, data) { return exports.fire(node, 'mouseenter', data); };
exports.mouseEnter = mouseEnter;
/**
 * Dispatch a 'mouseleave' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var mouseLeave = function (node, data) { return exports.fire(node, 'mouseleave', data); };
exports.mouseLeave = mouseLeave;
/**
 * Dispatch a 'mouseover' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var mouseOver = function (node, data) { return exports.fire(node, 'mouseover', data); };
exports.mouseOver = mouseOver;
/**
 * Dispatch a 'mouseup' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var mouseUp = function (node, data) { return exports.fire(node, 'mouseup', data); };
exports.mouseUp = mouseUp;
/**
 * Dispatch a 'resize' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var resize = function (node, data) { return exports.fire(node, 'resize', data); };
exports.resize = resize;
/**
 * Dispatch a 'scroll' event on a DOM node.
 * @param node - A querySelector string or DOM node.
 * @param data - Additional event data.
 * @returns The event
 */
var scroll = function (node, data) { return exports.fire(node, 'scroll', data); };
exports.scroll = scroll;
