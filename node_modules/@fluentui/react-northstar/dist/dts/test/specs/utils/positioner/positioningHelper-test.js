"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var positioningHelper_1 = require("src/utils/positioner/positioningHelper");
describe('positioningHelper', function () {
    var testPositioningHelper = function (_a) {
        var align = _a.align, position = _a.position, expectedPlacement = _a.expectedPlacement, _b = _a.rtl, rtl = _b === void 0 ? false : _b;
        return it("positioningHelper " + position + " position argument is transformed to " + expectedPlacement + " Popper's placement", function () {
            var actualPlacement = positioningHelper_1.getPlacement(align, position, rtl);
            expect(actualPlacement).toEqual(expectedPlacement);
        });
    };
    var testPositioningHelperInRtl = function (_a) {
        var align = _a.align, position = _a.position, expectedPlacement = _a.expectedPlacement;
        return testPositioningHelper({ align: align, position: position, expectedPlacement: expectedPlacement, rtl: true });
    };
    describe('handles positioningHelper position argument correctly in ltr', function () {
        testPositioningHelper({ position: 'above', align: 'start', expectedPlacement: 'top-start' });
        testPositioningHelper({ position: 'above', align: 'center', expectedPlacement: 'top' });
        testPositioningHelper({ position: 'above', align: 'end', expectedPlacement: 'top-end' });
        testPositioningHelper({ position: 'below', align: 'start', expectedPlacement: 'bottom-start' });
        testPositioningHelper({ position: 'below', align: 'center', expectedPlacement: 'bottom' });
        testPositioningHelper({ position: 'below', align: 'end', expectedPlacement: 'bottom-end' });
        testPositioningHelper({ position: 'before', align: 'top', expectedPlacement: 'left-start' });
        testPositioningHelper({ position: 'before', align: 'center', expectedPlacement: 'left' });
        testPositioningHelper({ position: 'before', align: 'bottom', expectedPlacement: 'left-end' });
        testPositioningHelper({ position: 'after', align: 'top', expectedPlacement: 'right-start' });
        testPositioningHelper({ position: 'after', align: 'center', expectedPlacement: 'right' });
        testPositioningHelper({ position: 'after', align: 'bottom', expectedPlacement: 'right-end' });
    });
    describe('handles positioningHelper position argument correctly in rtl', function () {
        testPositioningHelperInRtl({ position: 'above', align: 'start', expectedPlacement: 'top-end' });
        testPositioningHelperInRtl({ position: 'above', align: 'center', expectedPlacement: 'top' });
        testPositioningHelperInRtl({ position: 'above', align: 'end', expectedPlacement: 'top-start' });
        testPositioningHelperInRtl({
            position: 'below',
            align: 'start',
            expectedPlacement: 'bottom-end',
        });
        testPositioningHelperInRtl({ position: 'below', align: 'center', expectedPlacement: 'bottom' });
        testPositioningHelperInRtl({
            position: 'below',
            align: 'end',
            expectedPlacement: 'bottom-start',
        });
        testPositioningHelperInRtl({
            position: 'before',
            align: 'top',
            expectedPlacement: 'right-start',
        });
        testPositioningHelperInRtl({ position: 'before', align: 'center', expectedPlacement: 'right' });
        testPositioningHelperInRtl({
            position: 'before',
            align: 'bottom',
            expectedPlacement: 'right-end',
        });
        testPositioningHelperInRtl({ position: 'after', align: 'top', expectedPlacement: 'left-start' });
        testPositioningHelperInRtl({ position: 'after', align: 'center', expectedPlacement: 'left' });
        testPositioningHelperInRtl({
            position: 'after',
            align: 'bottom',
            expectedPlacement: 'left-end',
        });
    });
    describe('positioningHelper offset argument transformed correctly in RTL', function () {
        it('flips an axis value RTL for an array', function () {
            expect(positioningHelper_1.applyRtlToOffset([10, 10])).toEqual([-10, 10]);
        });
        it('flips an axis value RTL for a function', function () {
            var offsetFn = function () { return [10, 10]; };
            var flippedFn = positioningHelper_1.applyRtlToOffset(offsetFn);
            expect(flippedFn({})).toEqual([-10, 10]);
        });
    });
});
