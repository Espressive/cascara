"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var dateValues_1 = require("../../../../../src/utils/date-time-utilities/dateValues/dateValues");
var dateMath_1 = require("../../../../../src/utils/date-time-utilities/dateMath/dateMath");
var DateGrid = require("../../../../../src/utils/date-time-utilities/dateGrid/getDayGrid");
describe('getDayGrid', function () {
    var defaultDate = new Date('Apr 1 2016');
    var defaultOptions = {
        selectedDate: defaultDate,
        navigatedDate: defaultDate,
        firstDayOfWeek: dateValues_1.DayOfWeek.Sunday,
        firstWeekOfYear: dateValues_1.FirstWeekOfYear.FirstDay,
        dateRangeType: dateValues_1.DateRangeType.Day,
    };
    var transitionWeekCount = 2;
    /**
     * Adding custom date normalization, since we need to ensure the consistency across different timezones and locales
     * and setting timezone via TZ environment variable currently does not work
     * on Windows (see https://github.com/nodejs/node/issues/4230 and https://github.com/nodejs/node/issues/31478)
     * */
    var normalizeDay = function (day) {
        var date = day.originalDate;
        var offset = day.originalDate.getTimezoneOffset();
        date.setUTCMinutes(-offset);
        date.setUTCSeconds(0);
        date.setUTCMilliseconds(0);
        return {
            date: day.date,
            isInBounds: day.isInBounds,
            isInMonth: day.isInMonth,
            isSelected: day.isSelected,
            isToday: day.isToday,
            key: date.toUTCString(),
            originalDate: date,
        };
    };
    var countDays = function (days, condition) {
        var count = 0;
        for (var _i = 0, days_1 = days; _i < days_1.length; _i++) {
            var week = days_1[_i];
            for (var _a = 0, week_1 = week; _a < week_1.length; _a++) {
                var day = week_1[_a];
                if (condition(day)) {
                    count += 1;
                }
            }
        }
        return count;
    };
    it('returns matrix with days', function () {
        var result = DateGrid.getDayGrid(defaultOptions);
        var resultUTC = result.map(function (week) { return week.map(function (day) { return normalizeDay(day); }); });
        expect(resultUTC).toMatchSnapshot();
    });
    it('returns grid starting with proper day', function () {
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { firstDayOfWeek: dateValues_1.DayOfWeek.Wednesday }));
        expect(result[0][0].originalDate.getDay()).toBe(dateValues_1.DayOfWeek.Wednesday);
    });
    it('returns grid with proper amount of weeks', function () {
        var weekCount = 6;
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { weeksToShow: weekCount }));
        expect(result.length).toBe(weekCount + transitionWeekCount);
    });
    it('returns grid with proper amount of selected days', function () {
        var daysToSelect = 6;
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { dateRangeType: dateValues_1.DateRangeType.Day, daysToSelectInDayView: daysToSelect }));
        expect(countDays(result, function (day) { return day.isSelected; })).toBe(daysToSelect);
    });
    it('returns grid with no selected days', function () {
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { selectedDate: new Date(0) }));
        expect(countDays(result, function (day) { return day.isSelected; })).toBe(0);
    });
    it('returns grid with proper amount of weeks', function () {
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { minDate: dateMath_1.addDays(defaultDate, -1), maxDate: dateMath_1.addDays(defaultDate, 1) }));
        expect(countDays(result, function (day) { return day.isInBounds; })).toBe(3);
    });
    it('returns grid with proper today', function () {
        var today = dateMath_1.addDays(defaultDate, 5);
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { today: today }));
        expect(countDays(result, function (day) { return day.isToday; })).toBe(1);
        expect(countDays(result, function (day) { return dateMath_1.compareDates(today, day.originalDate) && day.isToday; })).toBe(1);
    });
    it('returns grid with proper amount of work week days when over multiple work weeks', function () {
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { workWeekDays: [dateValues_1.DayOfWeek.Saturday, dateValues_1.DayOfWeek.Sunday, dateValues_1.DayOfWeek.Monday], dateRangeType: dateValues_1.DateRangeType.WorkWeek, firstDayOfWeek: dateValues_1.DayOfWeek.Monday }));
        expect(countDays(result, function (day) { return day.isSelected; })).toBe(7);
    });
    it('returns grid with proper amount of work week days when over single work weeks', function () {
        var result = DateGrid.getDayGrid(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), { workWeekDays: [dateValues_1.DayOfWeek.Saturday, dateValues_1.DayOfWeek.Sunday, dateValues_1.DayOfWeek.Monday], dateRangeType: dateValues_1.DateRangeType.WorkWeek, firstDayOfWeek: dateValues_1.DayOfWeek.Tuesday }));
        expect(countDays(result, function (day) { return day.isSelected; })).toBe(3);
    });
});
