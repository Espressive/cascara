"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FocusContainer_1 = require("src/utils/accessibility/FocusHandling/FocusContainer");
var createFocusContainer = function (_a) {
    var _b = _a === void 0 ? {
        itemsCount: 0,
    } : _a, itemsCount = _b.itemsCount, setFocusAtFn = _b.setFocusAtFn;
    return new FocusContainer_1.ContainerFocusHandler(function () { return itemsCount; }, setFocusAtFn || (function () { }));
};
describe('Focus Container', function () {
    test('inits with focused item index 0', function () {
        var focusContainer = createFocusContainer();
        expect(focusContainer).toBeDefined();
        expect(focusContainer.getFocusedIndex()).toBe(0);
    });
    describe('sync item index', function () {
        test('should set focus item index', function () {
            var focusContainer = createFocusContainer({ itemsCount: 5 });
            focusContainer.syncFocusedIndex(4);
            expect(focusContainer.getFocusedIndex()).toBe(4);
        });
        test('should not set focus index function', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 5, setFocusAtFn: setFocusAt });
            focusContainer.syncFocusedIndex(4);
            expect(setFocusAt).not.toBeCalled();
        });
    });
    describe('move previous', function () {
        test('should decrement index of focused item', function () {
            var focusContainer = createFocusContainer({ itemsCount: 5 });
            focusContainer.syncFocusedIndex(4);
            focusContainer.movePrevious();
            expect(focusContainer.getFocusedIndex()).toBe(3);
        });
        test('should call set focus index function if there are any items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 5, setFocusAtFn: setFocusAt });
            focusContainer.movePrevious();
            expect(setFocusAt).toBeCalled();
        });
        test('should skip call to set focus index function if there are no items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 0, setFocusAtFn: setFocusAt });
            focusContainer.movePrevious();
            expect(setFocusAt).not.toBeCalled();
        });
        test('focused item index should not ever become less than 0', function () {
            var focusContainer = createFocusContainer({ itemsCount: 5 });
            focusContainer.syncFocusedIndex(0);
            focusContainer.movePrevious();
            expect(focusContainer.getFocusedIndex()).toBe(0);
        });
    });
    describe('move next', function () {
        test('should increment index of focused item', function () {
            var focusContainer = createFocusContainer({ itemsCount: 5 });
            focusContainer.syncFocusedIndex(3);
            focusContainer.moveNext();
            expect(focusContainer.getFocusedIndex()).toBe(4);
        });
        test('should call set focus index function if there are any items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 5, setFocusAtFn: setFocusAt });
            focusContainer.moveNext();
            expect(setFocusAt).toBeCalled();
        });
        test('should skip call to set focus index function if there are no items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 0, setFocusAtFn: setFocusAt });
            focusContainer.moveNext();
            expect(setFocusAt).not.toBeCalled();
        });
        test('focused item index should not exceed range of valid indexes', function () {
            var focusContainer = createFocusContainer({ itemsCount: 5 });
            focusContainer.syncFocusedIndex(4);
            focusContainer.moveNext();
            expect(focusContainer.getFocusedIndex()).toBe(4);
        });
    });
    describe('move first', function () {
        test('should set focused item index to 0', function () {
            var focusContainer = createFocusContainer({ itemsCount: 5 });
            focusContainer.syncFocusedIndex(3);
            focusContainer.moveFirst();
            expect(focusContainer.getFocusedIndex()).toBe(0);
        });
        test('should call set focus index function if there are any items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 5, setFocusAtFn: setFocusAt });
            focusContainer.moveFirst();
            expect(setFocusAt).toBeCalled();
        });
        test('should skip call to set focus index function if there are no items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 0, setFocusAtFn: setFocusAt });
            focusContainer.moveFirst();
            expect(setFocusAt).not.toBeCalled();
        });
    });
    describe('move last', function () {
        test('should set focused item index to last index of valid range', function () {
            var focusContainer = createFocusContainer({ itemsCount: 5 });
            focusContainer.syncFocusedIndex(2);
            focusContainer.moveLast();
            expect(focusContainer.getFocusedIndex()).toBe(4);
        });
        test('should call set focus index function if there are any items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 5, setFocusAtFn: setFocusAt });
            focusContainer.moveLast();
            expect(setFocusAt).toBeCalled();
        });
        test('should skip call to set focus index function if there are no items', function () {
            var setFocusAt = jest.fn();
            var focusContainer = createFocusContainer({ itemsCount: 0, setFocusAtFn: setFocusAt });
            focusContainer.moveLast();
            expect(setFocusAt).not.toBeCalled();
        });
    });
});
