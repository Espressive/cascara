"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeProviderContexts_1 = require("src/utils/mergeProviderContexts");
describe('getRenderer', function () {
    var createRenderer = jest.fn().mockImplementation(function (target) { return ({ target: target }); });
    test("without \"target\" defaults to a document", function () {
        // will be "undefined" as we call createRenderer() with "undefined"
        expect(mergeProviderContexts_1.getRenderer(createRenderer)).toHaveProperty('target', undefined);
    });
    test("with \"target\" equals a default document will use its renderer", function () {
        // will be "undefined" as we call createRenderer() with "undefined"
        expect(mergeProviderContexts_1.getRenderer(createRenderer)).toHaveProperty('target', undefined);
    });
    test("creates a new renderer for a new \"target\" and keeps it", function () {
        var target = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);
        expect(mergeProviderContexts_1.getRenderer(createRenderer, target)).toHaveProperty('target', target);
    });
});
describe('mergePerformanceOptions', function () {
    test("options from \"sources\" always override", function () {
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true }, {})).toMatchObject({
            enableVariablesCaching: true,
        });
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true }, undefined)).toMatchObject({
            enableVariablesCaching: true,
        });
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true, enableStylesCaching: true }, { enableStylesCaching: false })).toMatchObject({});
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true, enableStylesCaching: true }, { enableStylesCaching: undefined })).toMatchObject({});
    });
});
describe('mergeContexts', function () {
    var createRenderer = jest.fn();
    test("always returns an object", function () {
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, {}, {})).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, null, null)).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, undefined, undefined)).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, null, undefined)).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, undefined, null)).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, {}, undefined)).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, undefined, {})).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, {}, null)).toMatchObject({});
        expect(mergeProviderContexts_1.mergeProviderContexts(createRenderer, null, {})).toMatchObject({});
    });
    test('gracefully handles merging a theme in with undefined values', function () {
        var target = {
            theme: {
                siteVariables: { color: 'black' },
                componentVariables: { Button: { color: 'black' } },
                componentStyles: { Button: { root: { color: 'black' } } },
            },
            rtl: true,
            disableAnimations: false,
        };
        var source = {
            theme: undefined,
            rtl: undefined,
            disableAnimations: undefined,
        };
        expect(function () { return mergeProviderContexts_1.mergeProviderContexts(createRenderer, target, source); }).not.toThrow();
    });
    test('gracefully handles merging onto a theme with undefined values', function () {
        var target = {
            theme: undefined,
            rtl: undefined,
            disableAnimations: undefined,
        };
        var source = {
            theme: {
                siteVariables: { color: 'black' },
                componentVariables: { Button: { color: 'black' } },
                componentStyles: { Button: { root: { color: 'black' } } },
            },
            rtl: true,
            disableAnimations: false,
        };
        expect(function () { return mergeProviderContexts_1.mergeProviderContexts(createRenderer, target, source); }).not.toThrow();
    });
});
