"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fontSizeUtility_1 = require("src/utils/fontSizeUtility");
describe('fontSizeUtility', function () {
    describe('round', function () {
        it('rounds values to 4 decimals', function () {
            expect(fontSizeUtility_1.round(3)).toBe(3);
            expect(fontSizeUtility_1.round(3.14)).toBe(3.14);
            expect(fontSizeUtility_1.round(3.14159265359)).toBe(3.1416);
            expect(fontSizeUtility_1.round(-3.14159265359)).toBe(-3.1416);
        });
    });
    describe('pxToRem', function () {
        it('returns 1rem for 16px with a default HTML font size of 16px', function () {
            expect(fontSizeUtility_1.pxToRem(16)).toEqual('1rem');
        });
        it('returns 1rem with base font size of 10px', function () {
            expect(fontSizeUtility_1.pxToRem(10, 10)).toEqual('1rem');
        });
        it('returns 0.714rem with a base font size of 14px', function () {
            expect(fontSizeUtility_1.pxToRem(10, 14)).toEqual('0.7143rem');
        });
        it('returns 1.25rem with a base font size of 8px', function () {
            expect(fontSizeUtility_1.pxToRem(10, 8)).toEqual('1.25rem');
        });
        it('returns 0rem when pxToRem is called with 0', function () {
            expect(fontSizeUtility_1.pxToRem(0)).toEqual('0rem');
        });
        it('should handle negative input values and return negative conversion result', function () {
            expect(fontSizeUtility_1.pxToRem(-16, 16)).toEqual('-1rem');
        });
    });
    describe('getDocumentRemSize', function () {
        it('fallbacks to a default value when "documentElement" contains an invalid entry', function () {
            Object.defineProperty(document, 'documentElement', {
                configurable: true,
                get: function () {
                    return null;
                },
            });
            expect(document.documentElement).toBe(null);
            expect(fontSizeUtility_1.getDocumentRemSize()).toEqual(16);
        });
    });
});
