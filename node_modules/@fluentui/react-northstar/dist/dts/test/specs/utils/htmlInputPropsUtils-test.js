"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var htmlPropsUtils_1 = require("src/utils/htmlPropsUtils");
var props = {
    autoFocus: false,
    className: 'foo',
    placeholder: 'baz',
    required: true,
};
describe('partitionHTMLProps', function () {
    test('should return two arrays with objects', function () {
        expect(htmlPropsUtils_1.partitionHTMLProps(props)).toHaveLength(2);
    });
    test('should split props by definition', function () {
        var _a = htmlPropsUtils_1.partitionHTMLProps(props), htmlProps = _a[0], restProps = _a[1];
        expect(htmlProps).toEqual({
            autoFocus: false,
            placeholder: 'baz',
            required: true,
        });
        expect(restProps).toEqual({ className: 'foo' });
    });
    test('should split props by own definition', function () {
        var _a = htmlPropsUtils_1.partitionHTMLProps(props, {
            htmlProps: ['placeholder', 'required'],
        }), htmlProps = _a[0], restProps = _a[1];
        expect(htmlProps).toEqual({ placeholder: 'baz', required: true });
        expect(restProps).toEqual({ autoFocus: false, className: 'foo' });
    });
    describe('aria', function () {
        test('split aria props by default to htmlProps', function () {
            var _a = htmlPropsUtils_1.partitionHTMLProps({
                'aria-atomic': false,
                'aria-busy': true,
                className: 'foo',
                role: 'bar',
            }), htmlProps = _a[0], restProps = _a[1];
            expect(htmlProps).toEqual({
                'aria-atomic': false,
                'aria-busy': true,
                role: 'bar',
            });
            expect(restProps).toEqual({ className: 'foo' });
        });
        test('split aria props by default to restProps when disabled', function () {
            var _a = htmlPropsUtils_1.partitionHTMLProps({
                'aria-atomic': false,
                'aria-busy': true,
                className: 'foo',
                role: 'bar',
            }, { includeAria: false }), htmlProps = _a[0], restProps = _a[1];
            expect(htmlProps).toEqual({});
            expect(restProps).toEqual({
                'aria-atomic': false,
                'aria-busy': true,
                className: 'foo',
                role: 'bar',
            });
        });
    });
});
