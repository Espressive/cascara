"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.implementsShorthandProp = exports.DefaultShorthandTestOptions = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var utils_1 = require("test/utils");
var positioner_1 = require("src/utils/positioner");
var implementsPopperProps_1 = require("test/specs/commonTests/implementsPopperProps");
exports.DefaultShorthandTestOptions = {
    mapsValueToProp: 'content',
};
exports.implementsShorthandProp = (function (Component) {
    return function implementsShorthandProp(shorthandProp, ShorthandComponent, options) {
        if (options === void 0) { options = exports.DefaultShorthandTestOptions; }
        var mapsValueToProp = options.mapsValueToProp;
        var displayName = ShorthandComponent.displayName;
        var checkPropsMatch = function (props, matchedProps) {
            return Object.keys(matchedProps).every(function (propName) { return matchedProps[propName] === props[propName]; });
        };
        var expectContainsSingleShorthandElement = function (wrapper, withProps) {
            return expect(wrapper.find(ShorthandComponent).filterWhere(function (node) { return checkPropsMatch(node.props(), withProps); }).length).toEqual(1);
        };
        var expectShorthandPropsAreHandled = function (withProps) {
            var _a, _b;
            var props = tslib_1.__assign(tslib_1.__assign({}, options.requiredProps), (_a = {}, _a[shorthandProp] = withProps, _a));
            var matchedProps = typeof withProps === 'string' ? (_b = {}, _b[mapsValueToProp] = withProps, _b) : withProps;
            expectContainsSingleShorthandElement(utils_1.mountWithProvider(React.createElement(Component, tslib_1.__assign({}, props))), matchedProps);
        };
        describe("shorthand property '" + shorthandProp + "' with default value of '" + displayName + "' component", function () {
            test("is defined", function () {
                expect(Component.propTypes[shorthandProp]).toBeTruthy();
            });
            if (options.mapsValueToProp) {
                test("string value is handled as " + displayName + "'s " + mapsValueToProp, function () {
                    expectShorthandPropsAreHandled('shorthand prop value');
                });
            }
            test("object value is spread as " + displayName + "'s props", function () {
                expectShorthandPropsAreHandled(tslib_1.__assign(tslib_1.__assign({}, options.requiredShorthandProps), { foo: 'foo value', bar: 'bar value' }));
            });
        });
        if (options.implementsPopper) {
            describe('implements all positioning props for Popper', function () {
                Object.entries(implementsPopperProps_1.positioningProps).forEach(function (_a) {
                    var positioningProp = _a[0], positioningValue = _a[1];
                    test("\"" + positioningProp + "\" is passed to a Popper component", function () {
                        var _a, _b;
                        var wrapper = utils_1.mountWithProvider(React.createElement(Component, tslib_1.__assign(tslib_1.__assign({}, options.requiredProps), (_a = {}, _a[shorthandProp] = tslib_1.__assign(tslib_1.__assign({}, options.requiredShorthandProps), { popper: (_b = {}, _b[positioningProp] = positioningValue, _b) }), _a))));
                        // Popper will be a parent of shorthand
                        var popper = wrapper.find(ShorthandComponent).closest(positioner_1.Popper);
                        expect(popper.prop(positioningProp)).toBe(positioningValue);
                    });
                });
            });
        }
    };
});
