"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlesAccessibility = exports.getRenderedAttribute = void 0;
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var React = require("react");
var test_utils_1 = require("react-dom/test-utils");
var utils_1 = require("test/utils");
var eventTarget_1 = require("./eventTarget");
var getRenderedAttribute = function (renderedComponent, propName, partSelector) {
    var target = partSelector ? renderedComponent.render().find(partSelector) : renderedComponent.render();
    return target.first().prop(propName);
};
exports.getRenderedAttribute = getRenderedAttribute;
var overriddenRootRole = 'test-mock-role';
var TestBehavior = function (props) { return ({
    attributes: {
        root: {
            role: overriddenRootRole,
        },
    },
}); };
/**
 * Assert Component handles accessibility attributes correctly.
 * @param Component - A component that should conform.
 */
var handlesAccessibility = function (Component, options) {
    if (options === void 0) { options = {}; }
    var _a = options.requiredProps, requiredProps = _a === void 0 ? {} : _a, defaultRootRole = options.defaultRootRole, _b = options.partSelector, partSelector = _b === void 0 ? '' : _b, _c = options.usesWrapperSlot, usesWrapperSlot = _c === void 0 ? false : _c;
    test('gets default accessibility when no override used', function () {
        var rendered = utils_1.mountWithProviderAndGetComponent(Component, React.createElement(Component, tslib_1.__assign({}, requiredProps)));
        var role = exports.getRenderedAttribute(rendered, 'role', partSelector);
        expect(role).toBe(defaultRootRole);
    });
    test('does not get role when overrides to null', function () {
        var rendered = utils_1.mountWithProviderAndGetComponent(Component, React.createElement(Component, tslib_1.__assign({}, requiredProps, { accessibility: null })));
        var role = exports.getRenderedAttribute(rendered, 'role', partSelector);
        expect(role).toBeFalsy();
    });
    if (!partSelector) {
        // temporarily disabled as we do not support overriding of attributes applied to parts
        test('gets correct role when overrides accessibility', function () {
            var testRole = 'test-mock-role';
            var element = usesWrapperSlot ? (React.createElement(Component, tslib_1.__assign({}, requiredProps, { wrapper: { role: testRole } }))) : (React.createElement(Component, tslib_1.__assign({}, requiredProps, { accessibility: TestBehavior })));
            var rendered = utils_1.mountWithProviderAndGetComponent(Component, element);
            var role = exports.getRenderedAttribute(rendered, 'role', partSelector);
            expect(role).toBe(testRole);
        });
        test('gets correct role when overrides role', function () {
            var testRole = 'test-role';
            var element = usesWrapperSlot ? (React.createElement(Component, tslib_1.__assign({}, requiredProps, { wrapper: { role: testRole } }))) : (React.createElement(Component, tslib_1.__assign({}, requiredProps, { role: testRole })));
            var rendered = utils_1.mountWithProviderAndGetComponent(Component, element);
            var role = exports.getRenderedAttribute(rendered, 'role', partSelector);
            expect(role).toBe(testRole);
        });
        test('gets correct role when overrides both accessibility and role', function () {
            var testRole = 'test-role';
            var element = usesWrapperSlot ? (React.createElement(Component, tslib_1.__assign({}, requiredProps, { accessibility: TestBehavior, wrapper: { role: testRole } }))) : (React.createElement(Component, tslib_1.__assign({}, requiredProps, { accessibility: TestBehavior, role: testRole })));
            var rendered = utils_1.mountWithProviderAndGetComponent(Component, element);
            var role = exports.getRenderedAttribute(rendered, 'role', partSelector);
            expect(role).toBe(testRole);
        });
        test("handles \"onKeyDown\" overrides", function () {
            var _a;
            var eventHandler = jest.fn();
            var actionBehavior = function () { return ({
                keyActions: {
                    root: {
                        mockAction: {
                            keyCombinations: [{ keyCode: accessibility_1.keyboardKey.Enter }],
                        },
                    },
                },
            }); };
            var wrapperProps = tslib_1.__assign(tslib_1.__assign({}, requiredProps), (_a = { accessibility: actionBehavior }, _a[eventTarget_1.EVENT_TARGET_ATTRIBUTE] = true, _a.onKeyDown = eventHandler, _a));
            var wrapper = utils_1.mountWithProvider(React.createElement(Component, tslib_1.__assign({}, wrapperProps)));
            var component = wrapper.find(Component);
            test_utils_1.act(function () {
                eventTarget_1.getEventTargetComponent(component, 'onKeyDown').simulate('keydown', {
                    keyCode: accessibility_1.keyboardKey.Enter,
                });
            });
            expect(eventHandler).toBeCalledTimes(1);
        });
    }
};
exports.handlesAccessibility = handlesAccessibility;
