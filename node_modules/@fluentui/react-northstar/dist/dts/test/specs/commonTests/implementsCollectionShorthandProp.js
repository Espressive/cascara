"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.implementsCollectionShorthandProp = exports.DefaultCollectionShorthandTestOptions = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var utils_1 = require("test/utils");
var _ = require("lodash");
exports.DefaultCollectionShorthandTestOptions = {
    mapsValueToProp: 'content',
};
exports.implementsCollectionShorthandProp = (function (Component) {
    return function implementsCollectionShorthandProp(shorthandPropertyName, ShorthandComponent, options) {
        if (options === void 0) { options = exports.DefaultCollectionShorthandTestOptions; }
        var mapsValueToProp = options.mapsValueToProp;
        describe("shorthand property for '" + ShorthandComponent.displayName + "'", function () {
            test("is defined", function () {
                expect(Component.propTypes[shorthandPropertyName]).toBeTruthy();
            });
            if (options.mapsValueToProp) {
                test("array of string values is spread as " + ShorthandComponent.displayName + "s' " + mapsValueToProp, function () {
                    var _a;
                    var shorthandValue = ['some value', 'some other value'];
                    var props = (_a = {}, _a[shorthandPropertyName] = shorthandValue, _a);
                    var wrapper = utils_1.mountWithProvider(React.createElement(Component, tslib_1.__assign({}, props)));
                    var shorthandComponents = wrapper.find(ShorthandComponent.displayName);
                    expect(shorthandComponents.first().prop(mapsValueToProp)).toEqual(_.first(shorthandValue));
                    expect(shorthandComponents.last().prop(mapsValueToProp)).toEqual(_.last(shorthandValue));
                });
            }
            test("object value is spread as " + ShorthandComponent.displayName + "'s props", function () {
                var _a;
                var shorthandValue = [
                    { key: 'first', foo: 'foo value', bar: 'bar value' },
                    { key: 'last', foo: 'foo last value', bar: 'bar last value' },
                ];
                var props = (_a = {}, _a[shorthandPropertyName] = shorthandValue, _a);
                var wrapper = utils_1.mountWithProvider(React.createElement(Component, tslib_1.__assign({}, props)));
                var shorthandComponents = wrapper.find(ShorthandComponent.displayName);
                var allShorthandPropertiesArePassedToFirstShorthandComponent = Object.keys(_.first(shorthandValue)).every(function (propertyName) {
                    return propertyName === 'key' ||
                        _.first(shorthandValue)[propertyName] === shorthandComponents.first().prop(propertyName);
                });
                var allShorthandPropertiesArePassedToLastShorthandComponent = Object.keys(_.last(shorthandValue)).every(function (propertyName) {
                    return propertyName === 'key' ||
                        _.last(shorthandValue)[propertyName] === shorthandComponents.last().prop(propertyName);
                });
                expect(allShorthandPropertiesArePassedToFirstShorthandComponent).toBe(true);
                expect(allShorthandPropertiesArePassedToLastShorthandComponent).toBe(true);
            });
        });
    };
});
