"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var colorUtils_1 = require("src/themes/colorUtils");
var generateColorSchemeValues = function (color) { return ({
    foreground: color,
    background: color,
    border: color,
    shadow: color,
    foregroundHover: color,
    backgroundHover: color,
    borderHover: color,
    shadowHover: color,
    foregroundActive: color,
    backgroundActive: color,
    borderActive: color,
    shadowActive: color,
    foregroundFocus: color,
    backgroundFocus: color,
    borderFocus: color,
    shadowFocus: color,
    foregroundPressed: color,
    backgroundPressed: color,
    borderPressed: color,
    shadowPressed: color,
    foregroundDisabled: color,
    backgroundDisabled: color,
    borderDisabled: color,
    shadowDisabled: color,
}); };
describe('colorUtils', function () {
    describe('extendColorScheme', function () {
        test('replaced the defined color tokens with the overrides definition', function () {
            var baseColorScheme = {
                default: generateColorSchemeValues('grey'),
                primary: generateColorSchemeValues('purple'),
            };
            var overrides = {
                default: {
                    foreground: 'black',
                },
                primary: {
                    background: 'blue',
                },
            };
            expect(colorUtils_1.extendColorScheme(baseColorScheme, overrides)).toMatchObject({
                default: tslib_1.__assign(tslib_1.__assign({}, baseColorScheme.default), { foreground: 'black' }),
                primary: tslib_1.__assign(tslib_1.__assign({}, baseColorScheme.primary), { background: 'blue' }),
            });
        });
        test('extends the defined color tokens with new values if provided in the overrides', function () {
            var baseColorScheme = {
                default: generateColorSchemeValues('grey'),
                primary: generateColorSchemeValues('primary'),
            };
            var overrides = {
                primary: {
                    background1: 'red',
                },
            };
            expect(colorUtils_1.extendColorScheme(baseColorScheme, overrides)).toMatchObject({
                default: tslib_1.__assign({}, baseColorScheme.defualt),
                primary: tslib_1.__assign(tslib_1.__assign({}, baseColorScheme.primary), { background1: 'red' }),
            });
        });
    });
    describe('pickValuesFromColorScheme', function () {
        test('picks the provided values from the color scheme', function () {
            var baseColorScheme = {
                default: generateColorSchemeValues('grey'),
                primary: generateColorSchemeValues('purple'),
            };
            var componentAreas = ['foreground', 'background'];
            expect(colorUtils_1.pickValuesFromColorScheme(baseColorScheme, componentAreas)).toMatchObject({
                default: {
                    foreground: 'grey',
                    background: 'grey',
                },
                primary: {
                    foreground: 'purple',
                    background: 'purple',
                },
            });
        });
    });
});
