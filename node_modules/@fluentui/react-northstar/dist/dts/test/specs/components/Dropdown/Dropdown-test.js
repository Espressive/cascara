"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var test_utils_1 = require("react-dom/test-utils");
var test_utils_2 = require("./test-utils");
var Dropdown_1 = require("src/components/Dropdown/Dropdown");
var DropdownSelectedItem_1 = require("src/components/Dropdown/DropdownSelectedItem");
var commonTests_1 = require("test/specs/commonTests");
var implementsPopperProps_1 = require("test/specs/commonTests/implementsPopperProps");
var utils_1 = require("test/utils");
var List_1 = require("src/components/List/List");
jest.dontMock('@fluentui/keyboard-key');
jest.useFakeTimers();
describe('Dropdown', function () {
    commonTests_1.isConformant(Dropdown_1.Dropdown, {
        testPath: __filename,
        hasAccessibilityProp: false,
        constructorName: 'Dropdown',
        autoControlledProps: ['highlightedIndex', 'open', 'searchQuery', 'activeSelectedIndex', 'value'],
    });
    commonTests_1.implementsShorthandProp(Dropdown_1.Dropdown)('list', List_1.List, {
        implementsPopper: true,
        requiredProps: { open: true },
    });
    implementsPopperProps_1.implementsPopperProps(Dropdown_1.Dropdown, {
        requiredProps: { open: true },
    });
    describe('clearable', function () {
        it('value is cleared at Icon click', function () {
            var _a = test_utils_2.renderDropdown({
                clearable: true,
                defaultValue: test_utils_2.items[0],
            }), triggerButtonNode = _a.triggerButtonNode, clickOnClearIndicator = _a.clickOnClearIndicator;
            clickOnClearIndicator();
            expect(triggerButtonNode).toHaveTextContent('');
        });
        it('calls onChange on Icon click with an `empty` value', function () {
            var onChange = jest.fn();
            var clickOnClearIndicator = test_utils_2.renderDropdown({
                onChange: onChange,
                defaultValue: test_utils_2.items[0],
                clearable: true,
            }).clickOnClearIndicator;
            clickOnClearIndicator();
            expect(onChange).toBeCalledTimes(1);
            expect(onChange).toHaveBeenCalledWith(expect.objectContaining({ type: 'click' }), expect.objectContaining({
                activeSelectedIndex: undefined,
                highlightedIndex: null,
                open: false,
                searchQuery: undefined,
                value: null,
            }));
        });
        it('should have the indicator tabbable if not a search', function () {
            var getClearIndicatorNode = test_utils_2.renderDropdown({
                clearable: true,
                defaultValue: test_utils_2.items[0],
            }).getClearIndicatorNode;
            expect(getClearIndicatorNode()).toHaveAttribute('tabindex', '0');
            expect(getClearIndicatorNode()).toHaveAttribute('role', 'button');
        });
        it('should not have the indicator tabbable if a search', function () {
            var getClearIndicatorNode = test_utils_2.renderDropdown({
                clearable: true,
                defaultValue: test_utils_2.items[0],
                search: true,
            }).getClearIndicatorNode;
            expect(getClearIndicatorNode()).not.toHaveAttribute('tabindex');
            expect(getClearIndicatorNode()).not.toHaveAttribute('role', 'button');
        });
    });
    describe('open', function () {
        it('it takes the value of the controlled prop', function () {
            var _a = test_utils_2.renderDropdown({ open: true }), getItemNodes = _a.getItemNodes, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
            clickOnItemAtIndex(0);
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
        });
        it('it takes the value of the default prop but can be changed', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), getItemNodes = _a.getItemNodes, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
            clickOnItemAtIndex(0);
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "true" when opened by trigger button click', function () {
            var _a = test_utils_2.renderDropdown(), getItemNodes = _a.getItemNodes, clickOnTriggerButton = _a.clickOnTriggerButton;
            clickOnTriggerButton();
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
        });
        it('is "false" when closed by trigger button click', function () {
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
            }), clickOnTriggerButton = _a.clickOnTriggerButton, getItemNodes = _a.getItemNodes;
            clickOnTriggerButton();
            expect(getItemNodes()).toHaveLength(0);
        });
        it('calls onOpenChange with a value that represents the open state', function () {
            var onOpenChange = jest.fn();
            var clickOnTriggerButton = test_utils_2.renderDropdown({
                onOpenChange: onOpenChange,
            }).clickOnTriggerButton;
            clickOnTriggerButton();
            expect(onOpenChange).toBeCalledTimes(1);
            expect(onOpenChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                open: true,
            }));
            clickOnTriggerButton();
            expect(onOpenChange).toBeCalledTimes(2);
            expect(onOpenChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                open: false,
            }));
        });
        it('is "true" when opened by toggle indicator click', function () {
            var _a = test_utils_2.renderDropdown(), clickOnToggleIndicator = _a.clickOnToggleIndicator, getItemNodes = _a.getItemNodes;
            clickOnToggleIndicator();
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
        });
        it('is "false" when closed by toggle indicator click', function () {
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
            }), clickOnToggleIndicator = _a.clickOnToggleIndicator, getItemNodes = _a.getItemNodes;
            clickOnToggleIndicator();
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "false" when closed by hitting Escape in search input', function () {
            var _a = test_utils_2.renderDropdown({
                search: true,
                defaultOpen: true,
            }), keyDownOnSearchInput = _a.keyDownOnSearchInput, getItemNodes = _a.getItemNodes;
            keyDownOnSearchInput('Escape');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "false" when closed by hitting Escape in items list', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), keyDownOnItemsList = _a.keyDownOnItemsList, getItemNodes = _a.getItemNodes;
            expect(test_utils_2.items).toHaveLength(test_utils_2.items.length);
            keyDownOnItemsList('Escape');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "false" when an item has been selected', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), clickOnItemAtIndex = _a.clickOnItemAtIndex, getItemNodes = _a.getItemNodes;
            clickOnItemAtIndex(0);
            expect(getItemNodes()).toHaveLength(0);
        });
        it('when set to "true" by trigger button click will move focus to the items list', function () {
            var _a = test_utils_2.renderDropdown(), clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnTriggerButton();
            expect(itemsListNode).toHaveFocus();
        });
        it('is "false" when blurred by Tab on items list', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), getItemNodes = _a.getItemNodes, keyDownOnItemsList = _a.keyDownOnItemsList;
            keyDownOnItemsList('Tab');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "false" when blurred by Shift+Tab on items list', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), getItemNodes = _a.getItemNodes, keyDownOnItemsList = _a.keyDownOnItemsList;
            keyDownOnItemsList('Tab', { shiftKey: true });
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "false" when blurred by Tab on search input', function () {
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                search: true,
            }), getItemNodes = _a.getItemNodes, keyDownOnSearchInput = _a.keyDownOnSearchInput;
            keyDownOnSearchInput('Tab');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "false" when blurred by Shift+Tab on search input', function () {
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                search: true,
            }), getItemNodes = _a.getItemNodes, keyDownOnSearchInput = _a.keyDownOnSearchInput;
            keyDownOnSearchInput('Tab', { shiftKey: true });
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "true" when you start typing in the search input', function () {
            var _a = test_utils_2.renderDropdown({
                search: true,
            }), getItemNodes = _a.getItemNodes, changeSearchInput = _a.changeSearchInput;
            changeSearchInput('item');
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
        });
        it('is "false" when you remove the query from the search input', function () {
            var _a = test_utils_2.renderDropdown({
                search: true,
                defaultOpen: true,
                defaultSearchQuery: 'item',
            }), getItemNodes = _a.getItemNodes, changeSearchInput = _a.changeSearchInput;
            changeSearchInput('');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is "true" when opened by space bar on trigger button', function () {
            var _a = test_utils_2.renderDropdown({}), getItemNodes = _a.getItemNodes, keyDownOnTriggerButton = _a.keyDownOnTriggerButton;
            keyDownOnTriggerButton(' ');
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
        });
        it('is "true" when opened by arrow down on trigger button', function () {
            var _a = test_utils_2.renderDropdown({}), getItemNodes = _a.getItemNodes, keyDownOnTriggerButton = _a.keyDownOnTriggerButton;
            keyDownOnTriggerButton('ArrowDown');
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
        });
        it('is "true" when opened by arrow up on trigger button', function () {
            var _a = test_utils_2.renderDropdown({}), getItemNodes = _a.getItemNodes, keyDownOnTriggerButton = _a.keyDownOnTriggerButton;
            keyDownOnTriggerButton('ArrowUp');
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
        });
    });
    describe('highlightedIndex', function () {
        afterEach(function () {
            test_utils_1.act(function () {
                jest.runAllTimers();
            });
        });
        it('is null when opened by click', function () {
            var _a = test_utils_2.renderDropdown(), clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnTriggerButton();
            expect(itemsListNode).not.toHaveAttribute('aria-activedescendant');
        });
        it('is null when opened by toggle indicator click', function () {
            var _a = test_utils_2.renderDropdown(), clickOnToggleIndicator = _a.clickOnToggleIndicator, itemsListNode = _a.itemsListNode;
            clickOnToggleIndicator();
            expect(itemsListNode).not.toHaveAttribute('aria-activedescendant');
        });
        it('is first item index when opened by arrow down key', function () {
            var _a = test_utils_2.renderDropdown(), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowDown');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('is last item index when opened by arrow up key', function () {
            var _a = test_utils_2.renderDropdown(), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowUp');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(test_utils_2.items.length - 1)));
        });
        it('has the provided prop value when opened by click', function () {
            var highlightedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                highlightedIndex: highlightedIndex,
            }), clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnTriggerButton();
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(highlightedIndex)));
        });
        it('has the provided prop value when opened by arrow down key', function () {
            var highlightedIndex = 1;
            var _a = test_utils_2.renderDropdown({
                highlightedIndex: highlightedIndex,
            }), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowDown');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(highlightedIndex)));
        });
        it('has the provided prop value when opened by arrow up key', function () {
            var highlightedIndex = 1;
            var _a = test_utils_2.renderDropdown({
                highlightedIndex: highlightedIndex,
            }), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowUp');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(highlightedIndex)));
        });
        it('is defaultHighlightedIndex prop value at first opening, then null', function () {
            var defaultHighlightedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                defaultHighlightedIndex: defaultHighlightedIndex,
            }), clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnTriggerButton();
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(defaultHighlightedIndex)));
            clickOnTriggerButton();
            clickOnTriggerButton();
            expect(itemsListNode).not.toHaveAttribute('aria-activedescendant');
        });
        it('is 0 on every open when highlightFirstItemOnOpen prop is provided', function () {
            var _a = test_utils_2.renderDropdown({
                highlightFirstItemOnOpen: true,
            }), clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnTriggerButton();
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
            clickOnTriggerButton();
            clickOnTriggerButton();
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('is set to 0 on searchQuery change and when highlightFirstItemOnOpen prop is provided', function () {
            var _a = test_utils_2.renderDropdown({
                highlightFirstItemOnOpen: true,
                search: true,
            }), changeSearchInput = _a.changeSearchInput, keyDownOnSearchInput = _a.keyDownOnSearchInput, searchInputNode = _a.searchInputNode;
            changeSearchInput('i');
            expect(searchInputNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
            keyDownOnSearchInput('ArrowDown');
            expect(searchInputNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(1)));
            changeSearchInput('it');
            expect(searchInputNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('is null on searchQuery change and when highlightFirstItemOnOpen prop is not provided', function () {
            var _a = test_utils_2.renderDropdown({
                search: true,
            }), changeSearchInput = _a.changeSearchInput, keyDownOnSearchInput = _a.keyDownOnSearchInput, searchInputNode = _a.searchInputNode;
            changeSearchInput('i');
            expect(searchInputNode).not.toHaveAttribute('aria-activedescendant');
            keyDownOnSearchInput('ArrowDown');
            expect(searchInputNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
            changeSearchInput('it');
            expect(searchInputNode).not.toHaveAttribute('aria-activedescendant');
        });
        it('is the index of the value previously selected when opened', function () {
            var highlightedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                value: test_utils_2.items[highlightedIndex],
            }), clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnTriggerButton();
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(highlightedIndex)));
        });
        it('is the index of the (value previously selected + 1) when opened by arrow down', function () {
            var highlightedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                value: test_utils_2.items[highlightedIndex],
            }), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowDown');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(highlightedIndex + 1)));
        });
        it('is the index of the (value previously selected - 1) when opened by arrow up', function () {
            var highlightedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                value: test_utils_2.items[highlightedIndex],
            }), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowUp');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(highlightedIndex - 1)));
        });
        it('is changed correctly on arrow down navigation', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            for (var index = 0; index < test_utils_2.items.length; index++) {
                keyDownOnItemsList('ArrowDown');
                expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(index)));
            }
        });
        it('is changed correctly on arrow up navigation', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            for (var index = test_utils_2.items.length - 1; index >= 0; index--) {
                keyDownOnItemsList('ArrowUp');
                expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(index)));
            }
        });
        it('is changed correctly on arrow down and shift navigation', function () {
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowDown', { shiftKey: true });
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(4)));
        });
        it('is changed correctly on arrow up and shift navigation', function () {
            var _a = test_utils_2.renderDropdown({
                defaultHighlightedIndex: test_utils_2.items.length - 1,
                defaultOpen: true,
            }), keyDownOnTriggerButton = _a.keyDownOnTriggerButton, itemsListNode = _a.itemsListNode;
            keyDownOnTriggerButton('ArrowUp', { shiftKey: true });
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('is changed correctly on home key navigation', function () {
            var _a = test_utils_2.renderDropdown({
                defaultHighlightedIndex: 2,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('Home');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('is changed correctly on end key navigation', function () {
            var _a = test_utils_2.renderDropdown({
                defaultHighlightedIndex: 2,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('End');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(test_utils_2.items.length - 1)));
        });
        it('wraps to start and end on navigation', function () {
            var _a = test_utils_2.renderDropdown({
                defaultHighlightedIndex: 0,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('ArrowUp');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(test_utils_2.items.length - 1)));
            keyDownOnItemsList('ArrowDown');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('is updated correctly when hovering over items', function () {
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
            }), mouseOverItemAtIndex = _a.mouseOverItemAtIndex, itemsListNode = _a.itemsListNode;
            mouseOverItemAtIndex(1);
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(1)));
            mouseOverItemAtIndex(3);
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(3)));
        });
        it('is updated correctly when hovering over items and using arrow keys to navigate', function () {
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
            }), mouseOverItemAtIndex = _a.mouseOverItemAtIndex, keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            mouseOverItemAtIndex(1);
            keyDownOnItemsList('ArrowDown');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(2)));
            mouseOverItemAtIndex(4);
            keyDownOnItemsList('ArrowUp');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(3)));
        });
        it('jumps to the item starting with the character key pressed', function () {
            var items = ['Athos', 'Porthos', 'Aramis', "D'Artagnan"];
            var _a = test_utils_2.renderDropdown({
                items: items,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('P');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(1)));
        });
        it('jumps starting from the current highlightedIndex on character key press', function () {
            var items = ['Athos', 'Porthos', 'Aramis', "D'Artagnan"];
            var _a = test_utils_2.renderDropdown({
                items: items,
                defaultHighlightedIndex: 1,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('A');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(2)));
        });
        it('wraps to the start of the list when no options remain', function () {
            var items = ['Athos', 'Porthos', 'Aramis', "D'Artagnan"];
            var _a = test_utils_2.renderDropdown({
                items: items,
                defaultHighlightedIndex: 2,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('A');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('jumps from item to item when pressing the same key with enough time in between', function () {
            var items = ['Athos', 'Porthos', 'Aramis', "D'Artagnan"];
            var _a = test_utils_2.renderDropdown({
                items: items,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('A');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
            test_utils_1.act(function () {
                jest.runAllTimers();
            });
            keyDownOnItemsList('A');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(2)));
            test_utils_1.act(function () {
                jest.runAllTimers();
            });
            keyDownOnItemsList('A');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
        });
        it('jumps to the item starting with the keys tapped in rapid succession', function () {
            var items = ['Albert', 'Alfred', 'Alena', 'Ali'];
            var _a = test_utils_2.renderDropdown({
                items: items,
                defaultOpen: true,
            }), keyDownOnItemsList = _a.keyDownOnItemsList, itemsListNode = _a.itemsListNode;
            keyDownOnItemsList('A');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
            jest.advanceTimersByTime(500 /* charKeyPressedCleanupTime */ / 2);
            keyDownOnItemsList('L');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(0)));
            jest.advanceTimersByTime(500 /* charKeyPressedCleanupTime */ / 2);
            keyDownOnItemsList('E');
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(2)));
            test_utils_1.act(function () {
                jest.runAllTimers();
            });
        });
        it('does not open with highlightedIndex after selecting item in multiple mode', function () {
            var itemSelectedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                multiple: true,
            }), clickOnItemAtIndex = _a.clickOnItemAtIndex, clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnItemAtIndex(itemSelectedIndex);
            clickOnTriggerButton();
            expect(itemsListNode).not.toHaveAttribute('aria-activedescendant');
        });
        it('opens with highlightedIndex after selecting item in non-multiple mode', function () {
            var itemSelectedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
            }), clickOnItemAtIndex = _a.clickOnItemAtIndex, clickOnTriggerButton = _a.clickOnTriggerButton, itemsListNode = _a.itemsListNode;
            clickOnItemAtIndex(itemSelectedIndex);
            clickOnTriggerButton();
            expect(itemsListNode).toHaveAttribute('aria-activedescendant', expect.stringMatching(test_utils_2.getItemIdRegexByIndex(2)));
        });
    });
    describe('value', function () {
        it('it takes the value of the controlled prop', function () {
            var value = test_utils_2.items[2];
            var _a = test_utils_2.renderDropdown({ value: value, defaultOpen: true }), triggerButtonNode = _a.triggerButtonNode, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            expect(triggerButtonNode).toHaveTextContent(value);
            clickOnItemAtIndex(0);
            expect(triggerButtonNode).toHaveTextContent(value);
        });
        it('it takes the value of the default prop but can be changed', function () {
            var defaultValue = test_utils_2.items[2];
            var itemToBeClickedIndex = 1;
            var _a = test_utils_2.renderDropdown({
                defaultValue: defaultValue,
                defaultOpen: true,
            }), triggerButtonNode = _a.triggerButtonNode, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            expect(triggerButtonNode).toHaveTextContent(defaultValue);
            clickOnItemAtIndex(itemToBeClickedIndex);
            expect(triggerButtonNode).toHaveTextContent(test_utils_2.items[itemToBeClickedIndex]);
        });
        it('has onChange and onSearchQueryChange called when item is added', function () {
            var itemToClickIndex = 2;
            var onChange = jest.fn();
            var onSearchQueryChange = jest.fn();
            var clickOnItemAtIndex = test_utils_2.renderDropdown({ open: true, onChange: onChange, onSearchQueryChange: onSearchQueryChange }).clickOnItemAtIndex;
            clickOnItemAtIndex(itemToClickIndex);
            expect(onChange).toHaveBeenCalledTimes(1);
            expect(onChange).toHaveBeenCalledWith(null, expect.objectContaining({
                value: test_utils_2.items[itemToClickIndex],
            }));
            expect(onSearchQueryChange).toHaveBeenCalledTimes(1);
            expect(onSearchQueryChange).toHaveBeenCalledWith(null, expect.objectContaining({
                searchQuery: test_utils_2.items[itemToClickIndex],
            }));
        });
        it('has onChange called when item is added or removed on multiple', function () {
            // it will actually be the third, since one is already removed from the list due to defaultValue.
            var itemToClickIndex = 2;
            var defaultSelectedItemIndex = 1;
            var onChange = jest.fn();
            var _a = test_utils_2.renderDropdown({
                open: true,
                defaultValue: [test_utils_2.items[defaultSelectedItemIndex]],
                onChange: onChange,
                multiple: true,
            }), clickOnItemAtIndex = _a.clickOnItemAtIndex, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex;
            clickOnItemAtIndex(itemToClickIndex - 1);
            expect(onChange).toHaveBeenCalledTimes(1);
            expect(onChange).toHaveBeenCalledWith(null, expect.objectContaining({
                value: [test_utils_2.items[defaultSelectedItemIndex], test_utils_2.items[itemToClickIndex]],
            }));
            keyDownOnSelectedItemAtIndex(0, 'Delete');
            expect(onChange).toHaveBeenCalledTimes(2);
            expect(onChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                value: [test_utils_2.items[itemToClickIndex]],
            }));
        });
        it('It shows no matches message when all iems are selected', function () {
            // it will actually be the third, since one is already removed from the list due to defaultValue.
            var noResultsMessage = 'no items';
            var _a = test_utils_2.renderDropdown({
                items: ['item0', 'item1'],
                open: true,
                search: true,
                multiple: true,
                noResultsMessage: noResultsMessage,
            }), clickOnItemAtIndex = _a.clickOnItemAtIndex, clickOnToggleIndicator = _a.clickOnToggleIndicator, itemsListNode = _a.itemsListNode;
            // Select all
            clickOnItemAtIndex(0);
            clickOnItemAtIndex(0);
            // open
            clickOnToggleIndicator();
            expect(itemsListNode.textContent).toBe(noResultsMessage);
        });
        it('has onChange and onSearchQueryChange called with null value by hitting Escape in search input', function () {
            var onChange = jest.fn();
            var onSearchQueryChange = jest.fn();
            var keyDownOnSearchInput = test_utils_2.renderDropdown({
                search: true,
                onChange: onChange,
                onSearchQueryChange: onSearchQueryChange,
                defaultValue: test_utils_2.items[2],
                defaultSearchQuery: test_utils_2.items[2],
            }).keyDownOnSearchInput;
            keyDownOnSearchInput('Escape');
            expect(onChange).toHaveBeenCalledTimes(1);
            expect(onChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                value: null,
            }));
            expect(onSearchQueryChange).toHaveBeenCalledTimes(1);
            expect(onSearchQueryChange).toHaveBeenLastCalledWith(null, expect.objectContaining({ searchQuery: '' }));
        });
        it('onChange is called after onSearchQueryChange', function () {
            var onChange = jest.fn();
            var onSearchQueryChange = jest.fn();
            var keyDownOnSearchInput = test_utils_2.renderDropdown({
                defaultValue: test_utils_2.items[2],
                defaultSearchQuery: test_utils_2.items[2],
                onChange: onChange,
                onSearchQueryChange: onSearchQueryChange,
                search: true,
            }).keyDownOnSearchInput;
            keyDownOnSearchInput('Escape');
            expect(onChange.mock.invocationCallOrder[0]).toBeGreaterThan(onSearchQueryChange.mock.invocationCallOrder[0]);
        });
        it('is set by clicking on item', function () {
            var itemSelectedIndex = 2;
            var _a = test_utils_2.renderDropdown({ defaultOpen: true }), triggerButtonNode = _a.triggerButtonNode, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            clickOnItemAtIndex(itemSelectedIndex);
            expect(triggerButtonNode).toHaveTextContent(test_utils_2.items[itemSelectedIndex]);
        });
        it('is set by using Enter on highlighted item', function () {
            var itemSelectedIndex = 1;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: itemSelectedIndex,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList;
            keyDownOnItemsList('Enter');
            expect(triggerButtonNode).toHaveTextContent(test_utils_2.items[itemSelectedIndex]);
        });
        it('is set by using Tab on highlighted item', function () {
            var itemSelectedIndex = 3;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: itemSelectedIndex,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList;
            keyDownOnItemsList('Tab');
            expect(triggerButtonNode).toHaveTextContent(test_utils_2.items[itemSelectedIndex]);
        });
        it('is set by using Shift+Tab on highlighted item', function () {
            var itemSelectedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: itemSelectedIndex,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList;
            keyDownOnItemsList('Tab', { shiftKey: true });
            expect(triggerButtonNode).toHaveTextContent(test_utils_2.items[itemSelectedIndex]);
        });
        it('is not set by clicking on disabled item', function () {
            var inputItems = [{ header: 'item1' }, { header: 'item2', disabled: true }];
            var _a = test_utils_2.renderDropdown({
                items: inputItems,
                defaultOpen: true,
            }), triggerButtonNode = _a.triggerButtonNode, clickOnItemAtIndex = _a.clickOnItemAtIndex, getItemNodes = _a.getItemNodes;
            clickOnItemAtIndex(1);
            expect(triggerButtonNode).toHaveTextContent('');
            expect(getItemNodes()).toHaveLength(2);
        });
        // ToDo: investigate why 'Enter' still selects disabled item, manually it does not.
        it.skip('is not set by using Enter on highlighted disabled item', function () {
            var inputItems = [{ header: 'item1' }, { header: 'item2', disabled: true }];
            var _a = test_utils_2.renderDropdown({
                items: inputItems,
                defaultOpen: true,
                defaultHighlightedIndex: 1,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList, getItemNodes = _a.getItemNodes;
            keyDownOnItemsList('Enter');
            expect(triggerButtonNode).toHaveTextContent('');
            expect(getItemNodes()).toHaveLength(2);
        });
        it('is not set by using Spacebar on highlighted disabled item', function () {
            var inputItems = [{ header: 'item1' }, { header: 'item2', disabled: true }];
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                items: inputItems,
                defaultHighlightedIndex: 1,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList, getItemNodes = _a.getItemNodes;
            keyDownOnItemsList(' ');
            expect(triggerButtonNode).toHaveTextContent('');
            expect(getItemNodes()).toHaveLength(2);
        });
        it('is not set by using Tab on highlighted selected item', function () {
            var inputItems = [{ header: 'item1' }, { header: 'item2', disabled: true }];
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                items: inputItems,
                defaultHighlightedIndex: 1,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList, getItemNodes = _a.getItemNodes;
            keyDownOnItemsList('Tab');
            expect(triggerButtonNode).toHaveTextContent('');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is not set by using Shift+Tab on highlighted disabled item', function () {
            var inputItems = [{ header: 'item1' }, { header: 'item2', disabled: true }];
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                items: inputItems,
                defaultHighlightedIndex: 1,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList, getItemNodes = _a.getItemNodes;
            keyDownOnItemsList('Tab', { shiftKey: true });
            expect(triggerButtonNode).toHaveTextContent('');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('is set correctly in multiple selection by using Tab on highlighted item', function () {
            var itemSelectedIndex = 3;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: itemSelectedIndex,
                defaultValue: test_utils_2.items[4],
                multiple: true,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList, getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, getSelectedItemNodes = _a.getSelectedItemNodes;
            keyDownOnItemsList('Tab');
            expect(triggerButtonNode).toHaveTextContent('');
            expect(getSelectedItemNodes()).toHaveLength(2);
            expect(getSelectedItemNodeAtIndex(1)).toHaveTextContent(test_utils_2.items[3]);
            expect(getSelectedItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[4]);
        });
        it('is set correctly in multiple selection by using Shift+Tab on highlighted item', function () {
            var itemSelectedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: itemSelectedIndex,
                defaultValue: test_utils_2.items[4],
                multiple: true,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnItemsList = _a.keyDownOnItemsList, getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, getSelectedItemNodes = _a.getSelectedItemNodes;
            keyDownOnItemsList('Tab', { shiftKey: true });
            expect(triggerButtonNode).toHaveTextContent('');
            expect(getSelectedItemNodes()).toHaveLength(2);
            expect(getSelectedItemNodeAtIndex(1)).toHaveTextContent(test_utils_2.items[2]);
            expect(getSelectedItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[4]);
        });
        it('is not cleared when hitting Escape if not search', function () {
            var defaultValue = test_utils_2.items[0];
            var _a = test_utils_2.renderDropdown({
                defaultValue: defaultValue,
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnTriggerButton = _a.keyDownOnTriggerButton;
            keyDownOnTriggerButton('Escape');
            expect(triggerButtonNode).toHaveTextContent(defaultValue);
        });
        it('is not cleared when hitting Escape if search but multiple', function () {
            var defaultValue = [test_utils_2.items[0], test_utils_2.items[1]];
            var _a = test_utils_2.renderDropdown({
                defaultValue: defaultValue,
                search: true,
                multiple: true,
                defaultSearchQuery: 'test',
            }), getSelectedItemNodes = _a.getSelectedItemNodes, keyDownOnSearchInput = _a.keyDownOnSearchInput, searchInputNode = _a.searchInputNode;
            keyDownOnSearchInput('Escape');
            expect(searchInputNode).toHaveTextContent('');
            expect(getSelectedItemNodes()).toHaveLength(2);
        });
        it('is replaced when another item is selected', function () {
            var defaultValue = test_utils_2.items[0];
            var itemSelectedIndex = 2;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultValue: defaultValue,
            }), triggerButtonNode = _a.triggerButtonNode, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            expect(triggerButtonNode).toHaveTextContent(defaultValue);
            clickOnItemAtIndex(itemSelectedIndex);
            expect(triggerButtonNode).toHaveTextContent(test_utils_2.items[itemSelectedIndex]);
        });
        it('has an array of items if more items are selected and the multiple prop is supplied', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                defaultValue: [test_utils_2.items[0], test_utils_2.items[1]],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex;
            expect(getSelectedItemNodes()).toHaveLength(2);
            expect(getSelectedItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[0]);
            expect(getSelectedItemNodeAtIndex(1)).toHaveTextContent(test_utils_2.items[1]);
        });
        it('removes last item on backspace when query is emtpy', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                search: true,
                defaultValue: [test_utils_2.items[0], test_utils_2.items[1]],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, keyDownOnSearchInput = _a.keyDownOnSearchInput;
            keyDownOnSearchInput('Backspace');
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getSelectedItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[0]);
        });
        it('does not remove last item on backspace when query is not empty', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                search: true,
                defaultSearchQuery: 'bla',
                defaultValue: [test_utils_2.items[0], test_utils_2.items[1]],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, keyDownOnSearchInput = _a.keyDownOnSearchInput, searchInputNode = _a.searchInputNode;
            searchInputNode.setSelectionRange(1, 2);
            keyDownOnSearchInput('Backspace');
            expect(getSelectedItemNodes()).toHaveLength(2);
        });
        it('removes last item on backspace when selection range is 0, 0', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                search: true,
                defaultSearchQuery: 'bla',
                defaultValue: [test_utils_2.items[0], test_utils_2.items[1]],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, keyDownOnSearchInput = _a.keyDownOnSearchInput, searchInputNode = _a.searchInputNode;
            searchInputNode.setSelectionRange(0, 0);
            keyDownOnSearchInput('Backspace');
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getSelectedItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[0]);
        });
        it('does not remove last item on backspace when selection range is 0, (y>0)', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                search: true,
                defaultSearchQuery: 'bla',
                defaultValue: [test_utils_2.items[0], test_utils_2.items[1]],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, keyDownOnSearchInput = _a.keyDownOnSearchInput, searchInputNode = _a.searchInputNode;
            searchInputNode.setSelectionRange(0, 1);
            keyDownOnSearchInput('Backspace');
            expect(getSelectedItemNodes()).toHaveLength(2);
        });
        it('has the item removed if it receives delete key down', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                search: true,
                defaultValue: [test_utils_2.items[0], test_utils_2.items[1]],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex;
            keyDownOnSelectedItemAtIndex(0, 'Delete');
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getSelectedItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[1]);
        });
        it('has the item removed if it receives click on remove icon', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                search: true,
                defaultValue: [test_utils_2.items[0], test_utils_2.items[1]],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, wrapper = _a.wrapper;
            utils_1.findIntrinsicElement(wrapper, "." + DropdownSelectedItem_1.dropdownSelectedItemSlotClassNames.icon).at(0).simulate('click');
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getSelectedItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[1]);
        });
        it('keeps selection when the same item is selected', function () {
            var selectedItemIndex = 0;
            var selectedItem = test_utils_2.items[selectedItemIndex];
            var _a = test_utils_2.renderDropdown({
                defaultValue: selectedItem,
                defaultOpen: true,
            }), clickOnItemAtIndex = _a.clickOnItemAtIndex, triggerButtonNode = _a.triggerButtonNode, clickOnTriggerButton = _a.clickOnTriggerButton, keyDownOnItemsList = _a.keyDownOnItemsList;
            clickOnItemAtIndex(selectedItemIndex);
            expect(triggerButtonNode).toHaveTextContent(selectedItem);
            clickOnTriggerButton();
            keyDownOnItemsList('Enter');
            expect(triggerButtonNode).toHaveTextContent(selectedItem);
            clickOnTriggerButton();
            keyDownOnItemsList('Tab');
            expect(triggerButtonNode).toHaveTextContent(selectedItem);
        });
    });
    describe('getA11ySelectionMessage', function () {
        afterEach(function () {
            jest.runAllTimers();
        });
        it('creates message container element', function () {
            var getA11yMessageContainerNode = test_utils_2.renderDropdown({ getA11ySelectionMessage: {} }).getA11yMessageContainerNode;
            expect(getA11yMessageContainerNode()).toMatchInlineSnapshot("\n        <div\n          aria-live=\"polite\"\n          aria-relevant=\"additions text\"\n          role=\"status\"\n          style=\"border: 0px; height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;\"\n        />\n      ");
        });
        it('has the onAdd message inserted and cleared after an item has been added to selection', function () {
            var itemToBeClickedIndex = 1;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                getA11ySelectionMessage: { onAdd: function (item) { return item + " has been added"; } },
            }), getA11yMessageContainerNode = _a.getA11yMessageContainerNode, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            clickOnItemAtIndex(itemToBeClickedIndex);
            expect(getA11yMessageContainerNode()).toHaveTextContent(test_utils_2.items[itemToBeClickedIndex] + " has been added");
            test_utils_1.act(function () {
                jest.runAllTimers();
            });
            expect(getA11yMessageContainerNode()).toHaveTextContent('');
        });
        it('has the onRemove message inserted and cleared after an item has been removed from selection', function () {
            var itemSelectedByDefaultIndex = 2;
            var _a = test_utils_2.renderDropdown({
                defaultOpen: true,
                multiple: true,
                defaultValue: [test_utils_2.items[itemSelectedByDefaultIndex]],
                getA11ySelectionMessage: { onRemove: function (item) { return item + " has been removed"; } },
            }), getA11yMessageContainerNode = _a.getA11yMessageContainerNode, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex;
            keyDownOnSelectedItemAtIndex(0, 'Delete');
            expect(getA11yMessageContainerNode()).toHaveTextContent(test_utils_2.items[itemSelectedByDefaultIndex] + " has been removed");
            test_utils_1.act(function () {
                jest.runAllTimers();
            });
            expect(getA11yMessageContainerNode()).toHaveTextContent('');
        });
    });
    describe('searchQuery', function () {
        it('it takes the value of the controlled prop', function () {
            var searchQuery = "can't touch this";
            var _a = test_utils_2.renderDropdown({ searchQuery: searchQuery, search: true }), changeSearchInput = _a.changeSearchInput, searchInputNode = _a.searchInputNode;
            expect(searchInputNode).toHaveValue(searchQuery);
            changeSearchInput('but I can try!');
            expect(searchInputNode).toHaveValue(searchQuery);
        });
        it('it takes the value of the default prop but can be changed', function () {
            var defaultSearchQuery = "maybe you can't touch this";
            var finalSearchQuery = 'you underestimate my power';
            var _a = test_utils_2.renderDropdown({
                defaultSearchQuery: defaultSearchQuery,
                search: true,
            }), changeSearchInput = _a.changeSearchInput, searchInputNode = _a.searchInputNode;
            expect(searchInputNode).toHaveValue(defaultSearchQuery);
            changeSearchInput(finalSearchQuery);
            expect(searchInputNode).toHaveValue(finalSearchQuery);
        });
        it("updates component's state on props updates", function () {
            var newSearchQueryProp = 'bar';
            var _a = test_utils_2.renderDropdown({
                searchQuery: 'foo',
                search: true,
            }), wrapper = _a.wrapper, searchInputNode = _a.searchInputNode;
            wrapper.setProps({ searchQuery: newSearchQueryProp });
            expect(searchInputNode).toHaveValue(newSearchQueryProp);
        });
        it('closes dropdown when changed to empty string', function () {
            var _a = test_utils_2.renderDropdown({
                defaultSearchQuery: 'foo',
                defaultOpen: true,
                search: true,
            }), getItemNodes = _a.getItemNodes, changeSearchInput = _a.changeSearchInput;
            changeSearchInput('');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('has onSearchQueryChange called each time the input is changed', function () {
            var onSearchQueryChange = jest.fn();
            var changeSearchInput = test_utils_2.renderDropdown({ search: true, onSearchQueryChange: onSearchQueryChange }).changeSearchInput;
            changeSearchInput('ala');
            expect(onSearchQueryChange).toHaveBeenCalledTimes(1);
            expect(onSearchQueryChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                searchQuery: 'ala',
            }));
            changeSearchInput('alladin');
            expect(onSearchQueryChange).toHaveBeenCalledTimes(2);
            expect(onSearchQueryChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                searchQuery: 'alladin',
            }));
        });
        it('has onSearchQueryChange called with empty string by hitting Escape in search input', function () {
            var onSearchQueryChange = jest.fn();
            var keyDownOnSearchInput = test_utils_2.renderDropdown({ search: true, onSearchQueryChange: onSearchQueryChange, defaultSearchQuery: 'foo' }).keyDownOnSearchInput;
            keyDownOnSearchInput('Escape');
            expect(onSearchQueryChange).toHaveBeenCalledTimes(1);
            expect(onSearchQueryChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                searchQuery: '',
            }));
        });
        it('has onChange called with null when changed to empty string and there was item selected', function () {
            var onChange = jest.fn();
            var onSearchQueryChange = jest.fn();
            var _a = test_utils_2.renderDropdown({
                defaultValue: test_utils_2.items[0],
                defaultOpen: true,
                search: true,
                clearable: true,
                onChange: onChange,
                onSearchQueryChange: onSearchQueryChange,
                defaultSearchQuery: test_utils_2.items[0],
            }), changeSearchInput = _a.changeSearchInput, getClearIndicatorWrapper = _a.getClearIndicatorWrapper;
            changeSearchInput('');
            expect(getClearIndicatorWrapper().length).toEqual(0);
            expect(onChange).toHaveBeenCalledTimes(1);
            expect(onChange).toHaveBeenCalledWith(null, expect.objectContaining({
                value: null,
                open: false,
            }));
            expect(onSearchQueryChange).toHaveBeenCalledTimes(1);
            expect(onSearchQueryChange).toHaveBeenLastCalledWith(null, expect.objectContaining({
                searchQuery: '',
            }));
        });
        it('is the string equivalent of selected item in single search', function () {
            var itemSelectedIndex = 2;
            var itemsAsObjects = test_utils_2.items.map(function (item) { return ({ value: item, key: item }); });
            var _a = test_utils_2.renderDropdown({
                search: true,
                defaultOpen: true,
                items: itemsAsObjects,
                itemToString: function (itemObject) { return itemObject.value; },
            }), searchInputNode = _a.searchInputNode, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            clickOnItemAtIndex(itemSelectedIndex);
            expect(searchInputNode).toHaveValue(itemsAsObjects[itemSelectedIndex].value);
        });
        it('is set to empty by hitting Escape in search input', function () {
            var _a = test_utils_2.renderDropdown({
                defaultSearchQuery: 'foo',
                search: true,
            }), keyDownOnSearchInput = _a.keyDownOnSearchInput, searchInputNode = _a.searchInputNode;
            keyDownOnSearchInput('Escape');
            expect(searchInputNode).toHaveValue('');
        });
        it('is set to empty when item is selected in multiple search', function () {
            var _a = test_utils_2.renderDropdown({
                search: true,
                multiple: true,
                defaultOpen: true,
            }), clickOnItemAtIndex = _a.clickOnItemAtIndex, searchInputNode = _a.searchInputNode, getSelectedItemNodes = _a.getSelectedItemNodes, changeSearchInput = _a.changeSearchInput;
            changeSearchInput('item');
            expect(searchInputNode).toHaveValue('item');
            clickOnItemAtIndex(2);
            expect(searchInputNode).toHaveValue('');
            expect(getSelectedItemNodes()).toHaveLength(1);
        });
    });
    describe('activeSelectedIndex', function () {
        it('is set on active item click', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[2]],
            }), getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, clickOnSelectedItemAtIndex = _a.clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(0);
            expect(getSelectedItemNodeAtIndex(0)).toHaveFocus();
        });
        it('is set as last index on left arrow from the search query', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
                search: true,
            }), getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, keyDownOnSearchInput = _a.keyDownOnSearchInput;
            keyDownOnSearchInput('ArrowLeft');
            expect(getSelectedItemNodeAtIndex(2)).toHaveFocus();
        });
        it('is set as last index on left arrow from the trigger button', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
            }), getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, keyDownOnTriggerButton = _a.keyDownOnTriggerButton;
            keyDownOnTriggerButton('ArrowLeft');
            expect(getSelectedItemNodeAtIndex(2)).toHaveFocus();
        });
        it('is updated on arrow navigation after being set by click', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
            }), getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex, clickOnSelectedItemAtIndex = _a.clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(2);
            keyDownOnSelectedItemAtIndex(2, 'ArrowLeft');
            expect(getSelectedItemNodeAtIndex(1)).toHaveFocus();
        });
        it('stays as "0" on left arrow from the first selected item', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
            }), getSelectedItemNodeAtIndex = _a.getSelectedItemNodeAtIndex, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex, clickOnSelectedItemAtIndex = _a.clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(0);
            keyDownOnSelectedItemAtIndex(0, 'ArrowLeft');
            expect(getSelectedItemNodeAtIndex(0)).toHaveFocus();
        });
        it('gets unset on right arrow from the last selected item and moves focus to trigger button', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex, clickOnSelectedItemAtIndex = _a.clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(2);
            keyDownOnSelectedItemAtIndex(2, 'ArrowRight');
            expect(triggerButtonNode).toHaveFocus();
        });
        it('gets unset on the removal of selected item and moves focus to trigger button', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
            }), triggerButtonNode = _a.triggerButtonNode, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex, clickOnSelectedItemAtIndex = _a.clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(2);
            keyDownOnSelectedItemAtIndex(2, 'Delete');
            expect(triggerButtonNode).toHaveFocus();
        });
        it('gets unset on right arrow from the last selected item and moves focus to search input', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
                search: true,
            }), searchInputNode = _a.searchInputNode, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex, clickOnSelectedItemAtIndex = _a.clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(2);
            keyDownOnSelectedItemAtIndex(2, 'ArrowRight');
            expect(searchInputNode).toHaveFocus();
        });
        it('gets unset on the removal of selected item and moves focus to search input', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                value: [test_utils_2.items[0], test_utils_2.items[1], test_utils_2.items[2]],
                search: true,
            }), searchInputNode = _a.searchInputNode, keyDownOnSelectedItemAtIndex = _a.keyDownOnSelectedItemAtIndex, clickOnSelectedItemAtIndex = _a.clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(2);
            keyDownOnSelectedItemAtIndex(2, 'Delete');
            expect(searchInputNode).toHaveFocus();
        });
    });
    describe('focused', function () {
        it('is "true" when focus is on trigger button', function () {
            var _a = test_utils_2.renderDropdown(), rootNode = _a.rootNode, focusTriggerButton = _a.focusTriggerButton;
            focusTriggerButton();
            expect(rootNode).toHaveAttribute('data-test-focused', 'true');
        });
        it('is "true" when focus is on search input', function () {
            var _a = test_utils_2.renderDropdown({ search: true }), rootNode = _a.rootNode, focusSearchInput = _a.focusSearchInput;
            focusSearchInput();
            expect(rootNode).toHaveAttribute('data-test-focused', 'true');
        });
        it('is "true" when focus is on the list', function () {
            var _a = test_utils_2.renderDropdown({ open: true }), rootNode = _a.rootNode, focusItemsList = _a.focusItemsList;
            focusItemsList();
            expect(rootNode).toHaveAttribute('data-test-focused', 'true');
        });
    });
    describe('toggleIndicatorNode', function () {
        it('moves focus to list at click', function () {
            var _a = test_utils_2.renderDropdown(), clickOnToggleIndicator = _a.clickOnToggleIndicator, itemsListNode = _a.itemsListNode;
            clickOnToggleIndicator();
            expect(itemsListNode).toHaveFocus();
        });
        it('moves focus to input in search mode', function () {
            var _a = test_utils_2.renderDropdown({ search: true }), clickOnToggleIndicator = _a.clickOnToggleIndicator, searchInputNode = _a.searchInputNode;
            clickOnToggleIndicator();
            expect(searchInputNode).toHaveFocus();
        });
    });
    describe('moveFocusOnTab', function () {
        // only way to check Tab is prevented in unit tests.
        var preventDefault = jest.fn();
        afterEach(function () {
            preventDefault.mockReset();
        });
        it('keeps focus on trigger button when not passed', function () {
            var keyDownOnItemsList = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: 0,
                multiple: true,
            }).keyDownOnItemsList;
            keyDownOnItemsList('Tab', { preventDefault: preventDefault });
            expect(preventDefault).toBeCalled();
        });
        it('keeps focus on input when not passed', function () {
            var keyDownOnSearchInput = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: 0,
                multiple: true,
                search: true,
            }).keyDownOnSearchInput;
            keyDownOnSearchInput('Tab', { preventDefault: preventDefault });
            expect(preventDefault).toBeCalled();
        });
        it('allows focus to move to next item from search input when passed', function () {
            var keyDownOnSearchInput = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: 0,
                multiple: true,
                search: true,
                moveFocusOnTab: true,
            }).keyDownOnSearchInput;
            keyDownOnSearchInput('Tab', { preventDefault: preventDefault });
            expect(preventDefault).not.toBeCalled();
        });
        it('allows focus to move to next item from items list when passed', function () {
            var keyDownOnItemsList = test_utils_2.renderDropdown({
                defaultOpen: true,
                defaultHighlightedIndex: 0,
                multiple: true,
                moveFocusOnTab: true,
            }).keyDownOnItemsList;
            keyDownOnItemsList('Tab', { preventDefault: preventDefault });
            expect(preventDefault).not.toBeCalled();
        });
    });
    describe('multiple', function () {
        it('can be switched to "multiple"', function () {
            var _a = test_utils_2.renderDropdown({ value: test_utils_2.items[0] }), wrapper = _a.wrapper, getSelectedItemNodes = _a.getSelectedItemNodes;
            expect(getSelectedItemNodes()).toHaveLength(0);
            wrapper.setProps({ multiple: true });
            expect(getSelectedItemNodes()).toHaveLength(1);
        });
        it('does not contain duplicates after an item is selected', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                open: true,
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getItemNodes = _a.getItemNodes, clickOnItemAtIndex = _a.clickOnItemAtIndex;
            clickOnItemAtIndex(0);
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length - 1);
            clickOnItemAtIndex(0);
            expect(getSelectedItemNodes()).toHaveLength(2);
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length - 2);
        });
        it('does not contain duplicates when value is set', function () {
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                open: true,
                value: test_utils_2.items[0],
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getItemNodes = _a.getItemNodes;
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length - 1);
        });
        it('contains duplicates by default', function () {
            var items = [{ key: '1', header: 'James Smith' }];
            var value = [{ key: '1', header: 'John Locke' }];
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                open: true,
                value: value,
                items: items,
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getItemNodes = _a.getItemNodes;
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getItemNodes()).toHaveLength(items.length);
        });
        it('does not contain duplicates when proper itemToValue prop is used', function () {
            var items = [{ id: '1', header: 'James Smith' }];
            var value = [{ id: '1', header: 'John Locke' }];
            var itemToValue = function (item) {
                if (!item || !React.isValidElement(item)) {
                    return '';
                }
                return item.id;
            };
            var _a = test_utils_2.renderDropdown({
                multiple: true,
                open: true,
                value: value,
                items: items,
                itemToValue: itemToValue,
            }), getSelectedItemNodes = _a.getSelectedItemNodes, getItemNodes = _a.getItemNodes;
            expect(getSelectedItemNodes()).toHaveLength(1);
            expect(getItemNodes()).toHaveLength(items.length - 1);
        });
    });
    describe('items', function () {
        it('have onClick called when passed stop event from being propagated', function () {
            var onClick = jest.fn();
            var stopPropagation = jest.fn();
            var mockedEvent = { stopPropagation: stopPropagation };
            var items = [{ header: 'Venom', onClick: onClick }];
            var clickOnItemAtIndex = test_utils_2.renderDropdown({ items: items, defaultOpen: true }).clickOnItemAtIndex;
            clickOnItemAtIndex(0, mockedEvent);
            expect(onClick).toBeCalledTimes(1);
            expect(onClick).toHaveBeenCalledWith(expect.objectContaining(mockedEvent), expect.objectContaining({
                header: 'Venom',
            }));
            expect(stopPropagation).toBeCalledTimes(1);
        });
        it('when selected have onClick called when passed stop event from being propagated', function () {
            var onClick = jest.fn();
            var stopPropagation = jest.fn();
            var mockedEvent = { stopPropagation: stopPropagation };
            var items = [{ header: 'Venom', onClick: onClick }];
            var clickOnSelectedItemAtIndex = test_utils_2.renderDropdown({
                items: items,
                multiple: true,
                value: items,
                defaultOpen: true,
            }).clickOnSelectedItemAtIndex;
            clickOnSelectedItemAtIndex(0, mockedEvent);
            expect(onClick).toBeCalledTimes(1);
            expect(onClick).toHaveBeenCalledWith(expect.objectContaining(mockedEvent), expect.objectContaining({
                header: 'Venom',
            }));
            expect(stopPropagation).toBeCalledTimes(1);
        });
    });
    describe('renderSelectedItem', function () {
        it('is called in multiple selection', function () {
            var renderSelectedItem = jest.fn();
            var value = [test_utils_2.items[0], test_utils_2.items[1]];
            test_utils_2.renderDropdown({ renderSelectedItem: renderSelectedItem, multiple: true, value: value });
            expect(renderSelectedItem).toBeCalledTimes(value.length);
        });
    });
    describe('searchInput', function () {
        it("merges refs from user's input", function () {
            var inputRef = React.createRef();
            var keyDownOnSearchInput = test_utils_2.renderDropdown({
                defaultSearchQuery: 'Foo',
                multiple: true,
                search: true,
                searchInput: { inputRef: inputRef },
            }).keyDownOnSearchInput;
            keyDownOnSearchInput('Backspace');
            // This test asserts also on internals that a condition that uses internal `inputRef` will pass.
            expect(inputRef.current).toBeInstanceOf(HTMLInputElement);
        });
    });
    describe('disabled', function () {
        it('allows no action on the trigger button', function () {
            var _a = test_utils_2.renderDropdown({
                disabled: true,
            }), clickOnTriggerButton = _a.clickOnTriggerButton, focusTriggerButton = _a.focusTriggerButton, getItemNodes = _a.getItemNodes, triggerButtonNode = _a.triggerButtonNode, keyDownOnTriggerButton = _a.keyDownOnTriggerButton;
            expect(triggerButtonNode).toHaveAttribute('disabled');
            clickOnTriggerButton();
            expect(getItemNodes()).toHaveLength(0);
            focusTriggerButton();
            expect(triggerButtonNode).not.toHaveFocus();
            keyDownOnTriggerButton('ArrowDown');
            expect(getItemNodes()).toHaveLength(0);
        });
        it('allows no action on the search input', function () {
            var _a = test_utils_2.renderDropdown({
                disabled: true,
                search: true,
            }), keyDownOnSearchInput = _a.keyDownOnSearchInput, clickOnSearchInput = _a.clickOnSearchInput, focusSearchInput = _a.focusSearchInput, getItemNodes = _a.getItemNodes, searchInputNode = _a.searchInputNode;
            expect(searchInputNode).toHaveAttribute('disabled');
            keyDownOnSearchInput('ArrowDown');
            expect(getItemNodes()).toHaveLength(0);
            focusSearchInput();
            expect(searchInputNode).not.toHaveFocus();
            clickOnSearchInput();
            expect(searchInputNode).not.toHaveFocus();
        });
        it('allows no action on the toggle indicator', function () {
            var _a = test_utils_2.renderDropdown({
                disabled: true,
            }), clickOnToggleIndicator = _a.clickOnToggleIndicator, toggleIndicatorNode = _a.toggleIndicatorNode, getItemNodes = _a.getItemNodes;
            clickOnToggleIndicator();
            expect(getItemNodes()).toHaveLength(0);
            toggleIndicatorNode.focus();
            expect(toggleIndicatorNode).not.toHaveFocus();
        });
    });
    describe('footer and header messages', function () {
        it('shows loadingMessage when status is loading', function () {
            var loadingMessage = 'loading results';
            var getItemNodeAtIndex = test_utils_2.renderDropdown({
                open: true,
                loadingMessage: loadingMessage,
                loading: true,
            }).getItemNodeAtIndex;
            expect(getItemNodeAtIndex(test_utils_2.items.length)).toHaveTextContent(loadingMessage);
        });
        it('shows noResultsMessage when status is no results', function () {
            var noResultsMessage = 'oups we found nothing';
            var getItemNodeAtIndex = test_utils_2.renderDropdown({
                open: true,
                noResultsMessage: noResultsMessage,
                items: [],
            }).getItemNodeAtIndex;
            expect(getItemNodeAtIndex(0)).toHaveTextContent(noResultsMessage);
        });
        it('shows headerMessage when status is custom', function () {
            var headerMessage = 'just some status';
            var getItemNodeAtIndex = test_utils_2.renderDropdown({
                open: true,
                headerMessage: headerMessage,
            }).getItemNodeAtIndex;
            expect(getItemNodeAtIndex(0)).toHaveTextContent(headerMessage);
        });
        it('can juggle between messages depending on the status', function () {
            var headerMessage = 'just some status';
            var noResultsMessage = 'oups we found nothing';
            var loadingMessage = 'loading results';
            var _a = test_utils_2.renderDropdown({
                open: true,
                noResultsMessage: noResultsMessage,
                loadingMessage: loadingMessage,
            }), getItemNodeAtIndex = _a.getItemNodeAtIndex, getItemNodes = _a.getItemNodes, rerender = _a.rerender;
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length);
            rerender({ headerMessage: headerMessage });
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length + 1);
            expect(getItemNodeAtIndex(0)).toHaveTextContent(headerMessage);
            rerender({ loading: true });
            expect(getItemNodes()).toHaveLength(test_utils_2.items.length + 2);
            expect(getItemNodeAtIndex(0)).toHaveTextContent(headerMessage);
            expect(getItemNodeAtIndex(test_utils_2.items.length + 1)).toHaveTextContent(loadingMessage);
            rerender({ items: [] });
            expect(getItemNodes()).toHaveLength(2);
            expect(getItemNodeAtIndex(0)).toHaveTextContent(headerMessage);
            expect(getItemNodeAtIndex(1)).toHaveTextContent(loadingMessage);
            rerender({ loading: false });
            expect(getItemNodes()).toHaveLength(2);
            expect(getItemNodeAtIndex(0)).toHaveTextContent(headerMessage);
            expect(getItemNodeAtIndex(1)).toHaveTextContent(noResultsMessage);
            rerender({ items: [test_utils_2.items[0]] });
            expect(getItemNodes()).toHaveLength(2);
            expect(getItemNodeAtIndex(0)).toHaveTextContent(headerMessage);
            expect(getItemNodeAtIndex(1)).toHaveTextContent(test_utils_2.items[0]);
            rerender({ headerMessage: undefined });
            expect(getItemNodes()).toHaveLength(1);
            expect(getItemNodeAtIndex(0)).toHaveTextContent(test_utils_2.items[0]);
        });
    });
});
