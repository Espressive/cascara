"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.items = exports.renderDropdown = exports.getItemIdRegexByIndex = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var _ = require("lodash");
var Dropdown_1 = require("src/components/Dropdown/Dropdown");
var DropdownSearchInput_1 = require("src/components/Dropdown/DropdownSearchInput");
var utils_1 = require("test/utils");
var items = ['item0', 'item1', 'item2', 'item3', 'item4', 'item5'];
exports.items = items;
var renderDropdown = function (props) {
    if (props === void 0) { props = {}; }
    var wrapper = utils_1.mountWithProvider(React.createElement(Dropdown_1.Dropdown, tslib_1.__assign({ items: items }, props)));
    var triggerButtonWrapper = utils_1.findIntrinsicElement(wrapper, "." + Dropdown_1.dropdownSlotClassNames.triggerButton);
    var toggleIndicatorWrapper = utils_1.findIntrinsicElement(wrapper, "." + Dropdown_1.dropdownSlotClassNames.toggleIndicator);
    var searchInputWrapper = utils_1.findIntrinsicElement(wrapper, "." + DropdownSearchInput_1.dropdownSearchInputSlotClassNames.input);
    var itemsListWrapper = utils_1.findIntrinsicElement(wrapper, "." + Dropdown_1.dropdownSlotClassNames.itemsList);
    var getItemsWrapper = function () { return utils_1.findIntrinsicElement(wrapper, "." + Dropdown_1.dropdownSlotClassNames.item); };
    var getSelectedItemsWrapper = function () { return utils_1.findIntrinsicElement(wrapper, "." + Dropdown_1.dropdownSlotClassNames.selectedItem); };
    var getSelectedItemWrapperAtIndex = function (index) { return getSelectedItemsWrapper().at(index); };
    var getItemWrapperAtIndex = function (index) { return getItemsWrapper().at(index); };
    var getClearIndicatorWrapper = function () { return utils_1.findIntrinsicElement(wrapper, "." + Dropdown_1.dropdownSlotClassNames.clearIndicator); };
    return {
        wrapper: wrapper,
        rerender: function (props) { return wrapper.setProps(props); },
        rootNode: wrapper.getDOMNode(),
        triggerButtonNode: triggerButtonWrapper.length ? triggerButtonWrapper.getDOMNode() : null,
        toggleIndicatorNode: toggleIndicatorWrapper.length ? toggleIndicatorWrapper.getDOMNode() : null,
        itemsListNode: itemsListWrapper.getDOMNode(),
        searchInputNode: searchInputWrapper.length ? searchInputWrapper.getDOMNode() : null,
        getA11yMessageContainerNode: function () { return utils_1.findIntrinsicElement(wrapper, '[role="status"]').getDOMNode(); },
        getItemNodes: function () { return getItemsWrapper().map(function (nodeWrapper) { return nodeWrapper.getDOMNode(); }); },
        getItemNodeAtIndex: function (index) { return getItemWrapperAtIndex(index).getDOMNode(); },
        getSelectedItemNodes: function () { return getSelectedItemsWrapper().map(function (nodeWrapper) { return nodeWrapper.getDOMNode(); }); },
        getSelectedItemNodeAtIndex: function (index) { return getSelectedItemWrapperAtIndex(index).getDOMNode(); },
        getClearIndicatorWrapper: getClearIndicatorWrapper,
        getClearIndicatorNode: function () { return getClearIndicatorWrapper().getDOMNode(); },
        mouseOverItemAtIndex: function (index) { return getItemWrapperAtIndex(index).simulate('mousemove'); },
        changeSearchInput: function (value) {
            searchInputWrapper.simulate('change', { target: { value: value } });
        },
        clickOnTriggerButton: function () {
            triggerButtonWrapper.simulate('click');
        },
        clickOnToggleIndicator: function () {
            toggleIndicatorWrapper.simulate('click');
        },
        clickOnSearchInput: function () {
            searchInputWrapper.simulate('click');
        },
        clickOnItemAtIndex: function (index, optional) {
            if (optional === void 0) { optional = {}; }
            getItemWrapperAtIndex(index).simulate('click', _.merge({
                nativeEvent: { stopImmediatePropagation: jest.fn() },
            }, optional));
        },
        clickOnClearIndicator: function () {
            getClearIndicatorWrapper().simulate('click');
        },
        clickOnSelectedItemAtIndex: function (index, optional) {
            if (optional === void 0) { optional = {}; }
            getSelectedItemWrapperAtIndex(index).simulate('click', _.merge({
                nativeEvent: { stopImmediatePropagation: jest.fn() },
            }, optional));
        },
        keyDownOnSearchInput: function (key, optional) {
            return searchInputWrapper.simulate('keydown', tslib_1.__assign({ key: key }, optional));
        },
        keyDownOnItemsList: function (key, optional) { return itemsListWrapper.simulate('keydown', tslib_1.__assign({ key: key }, optional)); },
        keyDownOnTriggerButton: function (key, optional) {
            return triggerButtonWrapper.simulate('keydown', tslib_1.__assign({ key: key }, optional));
        },
        keyDownOnSelectedItemAtIndex: function (index, key, optional) {
            getSelectedItemWrapperAtIndex(index).simulate('keydown', tslib_1.__assign({ key: key }, optional));
        },
        focusTriggerButton: function () {
            triggerButtonWrapper.simulate('focus');
        },
        focusSearchInput: function () {
            searchInputWrapper.simulate('focus');
        },
        focusItemsList: function () {
            itemsListWrapper.simulate('focus');
        },
    };
};
exports.renderDropdown = renderDropdown;
var getItemIdRegexByIndex = function (index) { return new RegExp("downshift-\\d+-item-" + index); };
exports.getItemIdRegexByIndex = getItemIdRegexByIndex;
