"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var List_1 = require("src/components/List/List");
var implementsCollectionShorthandProp_1 = require("../../commonTests/implementsCollectionShorthandProp");
var ListItem_1 = require("src/components/List/ListItem");
var listImplementsCollectionShorthandProp = implementsCollectionShorthandProp_1.implementsCollectionShorthandProp(List_1.List);
describe('List', function () {
    commonTests_1.isConformant(List_1.List, {
        testPath: __filename,
        constructorName: 'List',
    });
    commonTests_1.handlesAccessibility(List_1.List, { defaultRootRole: 'list' });
    listImplementsCollectionShorthandProp('items', ListItem_1.ListItem, { mapsValueToProp: 'content' });
    var getItems = function (onClick) { return [
        { key: 'robert', content: 'Robert', onClick: onClick },
        { key: 'celeste', content: 'Celeste' },
        { key: 'cecil', content: 'Cecil' },
    ]; };
    describe('items', function () {
        it('renders children', function () {
            var listItems = utils_1.mountWithProvider(React.createElement(List_1.List, { items: getItems() })).find('ListItem');
            expect(listItems.length).toBe(3);
            expect(listItems.first().props().content).toBe('Robert');
            expect(listItems.last().props().content).toBe('Cecil');
        });
        it('calls onClick handler for item', function () {
            var onClick = jest.fn();
            var listItems = utils_1.mountWithProvider(React.createElement(List_1.List, { items: getItems(onClick) })).find('ListItem');
            listItems.first().find('li').first().simulate('click');
            expect(onClick).toHaveBeenCalled();
        });
    });
    describe('selectedIndex', function () {
        it('should not be set by default', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(List_1.List, { selectable: true, items: getItems() }));
            expect(wrapper.find('li').filterWhere(function (item) { return Boolean(item.prop('aria-selected')); })).toHaveLength(0);
        });
        it('can be set a default value', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(List_1.List, { selectable: true, defaultSelectedIndex: 0, items: getItems() }));
            expect(wrapper.find('li').at(0).prop('aria-selected')).toBe(true);
        });
        it('should be set when item is clicked', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(List_1.List, { selectable: true, defaultSelectedIndex: 0, items: getItems() }));
            expect(wrapper.find('li').at(0).prop('aria-selected')).toBe(true);
            wrapper.find('li').at(1).simulate('click');
            expect(wrapper.find('li').at(0).prop('aria-selected')).toBe(false);
            expect(wrapper.find('li').at(1).prop('aria-selected')).toBe(true);
        });
        it('calls onClick handler for item if `selectable`', function () {
            var onClick = jest.fn();
            var onSelectedIndexChange = jest.fn();
            var listItems = utils_1.mountWithProvider(React.createElement(List_1.List, { items: getItems(onClick), onSelectedIndexChange: onSelectedIndexChange, selectable: true })).find('ListItem');
            listItems.first().find('li').first().simulate('click');
            expect(onClick).toHaveBeenCalled();
            expect(onClick).toHaveBeenCalledWith(expect.objectContaining({ type: 'click' }), expect.objectContaining({ index: 0 }));
            expect(onSelectedIndexChange).toHaveBeenCalled();
            expect(onSelectedIndexChange).toHaveBeenCalledWith(expect.objectContaining({ type: 'click' }), expect.objectContaining({ selectedIndex: 0 }));
        });
    });
});
