"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var validateDate_1 = require("../../../../src/components/Datepicker/validateDate");
var date_time_utilities_1 = require("../../../../src/utils/date-time-utilities");
describe('validateDate', function () {
    var referenceDate = new Date(2020, 0, 1);
    var restrictedDates = { restrictedDates: [referenceDate] };
    it('returns no error if not restricted', function () {
        var result = validateDate_1.validateDate(referenceDate, null, {}, date_time_utilities_1.DEFAULT_CALENDAR_STRINGS, false);
        expect(result).toBeFalsy();
    });
    it('returns error if restricted', function () {
        var result = validateDate_1.validateDate(referenceDate, null, restrictedDates, date_time_utilities_1.DEFAULT_CALENDAR_STRINGS, false);
        expect(result).toBe(date_time_utilities_1.DEFAULT_CALENDAR_STRINGS.isOutOfBoundsErrorMessage);
    });
    it('returns error if wrong format', function () {
        var result = validateDate_1.validateDate(null, 'wrong', restrictedDates, date_time_utilities_1.DEFAULT_CALENDAR_STRINGS, false);
        expect(result).toBe(date_time_utilities_1.DEFAULT_CALENDAR_STRINGS.invalidInputErrorMessage);
    });
    it('returns no error if empty and not required', function () {
        var result = validateDate_1.validateDate(null, null, restrictedDates, date_time_utilities_1.DEFAULT_CALENDAR_STRINGS, false);
        expect(result).toBeFalsy();
    });
    it('returns error if empty and required', function () {
        var result = validateDate_1.validateDate(null, null, restrictedDates, date_time_utilities_1.DEFAULT_CALENDAR_STRINGS, true);
        expect(result).toBe(date_time_utilities_1.DEFAULT_CALENDAR_STRINGS.isRequiredErrorMessage);
    });
});
