"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var accessibility_1 = require("@fluentui/accessibility");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var Tree_1 = require("src/components/Tree/Tree");
var TreeTitle_1 = require("src/components/Tree/TreeTitle");
var TreeItem_1 = require("src/components/Tree/TreeItem");
var react_icons_northstar_1 = require("@fluentui/react-icons-northstar");
var items = [
    {
        id: '1',
        title: '1',
        items: [
            {
                id: '11',
                title: '11',
            },
            {
                id: '12',
                title: '12',
                items: [
                    {
                        id: '121',
                        title: '121',
                    },
                ],
            },
        ],
    },
    {
        id: '2',
        title: '2',
        items: [
            {
                id: '21',
                title: {
                    content: '21',
                    children: function (Component, _a) {
                        var content = _a.content, expanded = _a.expanded, hasSubtree = _a.hasSubtree, restProps = tslib_1.__rest(_a, ["content", "expanded", "hasSubtree"]);
                        return (React.createElement(Component, tslib_1.__assign({ expanded: expanded, hasSubtree: hasSubtree }, restProps),
                            expanded ? React.createElement(react_icons_northstar_1.TriangleDownIcon, null) : React.createElement(react_icons_northstar_1.TriangleEndIcon, null),
                            content));
                    },
                },
                items: [
                    {
                        id: '211',
                        title: '211',
                    },
                ],
            },
            {
                id: '22',
                title: '22',
            },
        ],
    },
    {
        id: '3',
        title: '3',
    },
];
var getTitles = function (wrapper) {
    return wrapper.find("." + TreeTitle_1.treeTitleClassName).filterWhere(function (n) { return typeof n.type() === 'string'; });
};
var getItems = function (wrapper) {
    return wrapper.find("." + TreeItem_1.treeItemClassName).filterWhere(function (n) { return typeof n.type() === 'string'; });
};
var checkOpenTitles = function (wrapper, expected) {
    var titles = getTitles(wrapper);
    expect(titles.length).toEqual(expected.length);
    expected.forEach(function (expectedTitle, index) {
        expect(titles.at(index).getDOMNode().textContent).toEqual(expectedTitle);
    });
};
describe('Tree', function () {
    commonTests_1.isConformant(Tree_1.Tree, {
        testPath: __filename,
        constructorName: 'Tree',
        autoControlledProps: ['activeItemIds', 'selectedItemIds'],
    });
    describe('activeItemIds', function () {
        it('should contain index of item open at click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '3']);
            getTitles(wrapper)
                .at(3) // title 2
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '21', '22', '3']);
        });
        it('should have index of item removed when closed at click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items, defaultActiveItemIds: ['1', '2'] }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '2', '21', '22', '3']);
        });
        it('should contain only one index at a time if exclusive', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items, exclusive: true }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '3']);
            getTitles(wrapper)
                .at(3) // title 2
                .simulate('click');
            checkOpenTitles(wrapper, ['1', '2', '21', '22', '3']);
        });
        it('should contain index of item open by ArrowRight', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items }));
            getItems(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: accessibility_1.keyboardKey.ArrowRight });
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '3']);
        });
        it('should have index of item removed if closed by ArrowLeft', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items, defaultActiveItemIds: ['1', '2'] }));
            getItems(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: accessibility_1.keyboardKey.ArrowLeft });
            checkOpenTitles(wrapper, ['1', '2', '21', '22', '3']);
        });
        it('should have all TreeItems with a subtree open on asterisk key', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: accessibility_1.keyboardKey['*'] });
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '21', '22', '3']);
        });
        it('should expand subtrees only on current level on asterisk key', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items, defaultActiveItemIds: ['1'] }));
            getTitles(wrapper)
                .at(1) // title 11
                .simulate('keydown', { keyCode: accessibility_1.keyboardKey['*'] });
            checkOpenTitles(wrapper, ['1', '11', '12', '121', '2', '3']);
        });
        it('should not be changed on asterisk key if all siblings are already expanded', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items, defaultActiveItemIds: ['1', '2', '3'] }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('keydown', { keyCode: accessibility_1.keyboardKey['*'] });
            checkOpenTitles(wrapper, ['1', '11', '12', '2', '21', '22', '3']);
        });
        it('should have items expanded based on their expanded prop', function () {
            var itemsClone = JSON.parse(JSON.stringify(items));
            itemsClone[0]['expanded'] = true;
            itemsClone[0]['items'][1]['expanded'] = true;
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: itemsClone }));
            checkOpenTitles(wrapper, ['1', '11', '12', '121', '2', '3']);
        });
        it('should have multiple items on the same level expanded based on their expanded prop', function () {
            var itemsClone = JSON.parse(JSON.stringify(items));
            itemsClone[0]['expanded'] = true;
            itemsClone[0]['items'][1]['expanded'] = true;
            itemsClone[1]['expanded'] = true;
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: itemsClone }));
            checkOpenTitles(wrapper, ['1', '11', '12', '121', '2', '21', '22', '3']);
        });
        it('should have expanded prop from items overriden by controlling activeItemIds', function () {
            var itemsClone = JSON.parse(JSON.stringify(items));
            itemsClone[0]['expanded'] = true;
            itemsClone[0]['items'][1]['expanded'] = true;
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: itemsClone, activeItemIds: ['2', '21'] }));
            checkOpenTitles(wrapper, ['1', '2', '21', '211', '22', '3']);
        });
        it('should propagate correct items through onActiveItemIdsChange', function () {
            var itemsClone = JSON.parse(JSON.stringify(items));
            var onActiveItemIdsChange = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: itemsClone, activeItemIds: ['2', '21'], onActiveItemIdsChange: onActiveItemIdsChange }));
            getTitles(wrapper)
                .at(0) // title 1
                .simulate('click');
            expect(onActiveItemIdsChange).toHaveBeenCalledWith(expect.objectContaining({ type: 'click' }), expect.objectContaining({ activeItemIds: expect.arrayContaining(['2', '21', '1']) }));
        });
        it('should expand on click when TreeTitle renders children components ', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items }));
            // open title '2'
            getTitles(wrapper).at(1).simulate('click');
            // click on icon of title '21'
            var icon = wrapper.find("." + react_icons_northstar_1.svgIconClassName).filterWhere(function (n) { return typeof n.type() === 'string'; });
            icon.simulate('click');
            checkOpenTitles(wrapper, ['1', '2', '21', '211', '22', '3']);
        });
    });
    describe('onTitleClick', function () {
        var mockRootTitleClick = jest.fn();
        var mockLeafTitleClick = jest.fn();
        var items = [
            {
                id: 'root',
                title: 'root',
                onTitleClick: mockRootTitleClick,
                items: [
                    {
                        id: 'leaf',
                        title: 'leaf',
                        onTitleClick: mockLeafTitleClick,
                    },
                ],
            },
        ];
        var getRoot = function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items, defaultActiveItemIds: ['root'] }));
            return getItems(wrapper).at(0);
        };
        var getLeaf = function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tree_1.Tree, { items: items, defaultActiveItemIds: ['root'] }));
            return getTitles(wrapper).at(1);
        };
        beforeEach(function () {
            mockLeafTitleClick.mockClear();
            mockRootTitleClick.mockClear();
        });
        it('should be called on click for leaf item', function () {
            getLeaf().simulate('click');
            expect(mockLeafTitleClick).toHaveBeenCalledTimes(1);
        });
        it('should be called on click for non-leaf item', function () {
            getRoot().simulate('click');
            expect(mockRootTitleClick).toHaveBeenCalledTimes(1);
        });
        it.each(['Enter', ' '])('should be called on "%s" key for leaf item', function (key) {
            getLeaf().simulate('keydown', { key: key });
            expect(mockLeafTitleClick).toHaveBeenCalledTimes(1);
        });
        it.each(['Enter', ' '])('should be called on "%s" key for non-leaf item', function (key) {
            getRoot().simulate('keydown', { key: key });
            expect(mockRootTitleClick).toHaveBeenCalledTimes(1);
        });
    });
});
