"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var MenuButton_1 = require("src/components/MenuButton/MenuButton");
var Box_1 = require("src/components/Box/Box");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("../../../utils");
var a11y_testing_1 = require("@fluentui/a11y-testing");
var mockMenu = { items: ['1', '2', '3'] };
describe('MenuButton', function () {
    commonTests_1.isConformant(MenuButton_1.MenuButton, { testPath: __filename, constructorName: 'MenuButton', autoControlledProps: ['open'] });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(MenuButton_1.MenuButton);
        describe('onOpenChange', function () {
            test('is called on click', function () {
                var onOpenChange = jest.fn();
                utils_1.mountWithProvider(React.createElement(MenuButton_1.MenuButton, { trigger: React.createElement("button", null), menu: mockMenu, onOpenChange: onOpenChange }))
                    .find('button')
                    .simulate('click');
                expect(onOpenChange).toHaveBeenCalledTimes(1);
                expect(onOpenChange.mock.calls[0][1]).toMatchObject({ open: true });
            });
            test('is called on click when controlled', function () {
                var onOpenChange = jest.fn();
                utils_1.mountWithProvider(React.createElement(MenuButton_1.MenuButton, { open: false, trigger: React.createElement("button", null), menu: mockMenu, onOpenChange: onOpenChange }))
                    .find('button')
                    .simulate('click');
                expect(onOpenChange).toHaveBeenCalledTimes(1);
                expect(onOpenChange.mock.calls[0][1]).toMatchObject({ open: true });
            });
        });
        describe('ID handling', function () {
            test('trigger id is used', function () {
                var menuButton = utils_1.mountWithProvider(React.createElement(MenuButton_1.MenuButton, { trigger: React.createElement("button", { id: "test-id" }), menu: mockMenu }));
                var button = menuButton.find('button');
                button.simulate('click');
                var menu = menuButton.find('ul');
                var triggerId = button.prop('id');
                expect(triggerId).toEqual('test-id');
                expect(menu.prop('aria-labelledby')).toEqual(triggerId);
            });
            test('trigger id is generated if not provided', function () {
                var menuButton = utils_1.mountWithProvider(React.createElement(MenuButton_1.MenuButton, { trigger: React.createElement("button", null), menu: mockMenu }));
                var button = menuButton.find('button');
                button.simulate('click');
                var menu = menuButton.find('ul');
                var triggerId = button.prop('id');
                expect(triggerId).toMatch(/menubutton-trigger-\d+/);
                expect(menu.prop('aria-labelledby')).toEqual(triggerId);
            });
            test('menu id is used', function () {
                var menuId = 'test-id';
                var menuButton = utils_1.mountWithProvider(React.createElement(MenuButton_1.MenuButton, { trigger: React.createElement("button", null), menu: tslib_1.__assign(tslib_1.__assign({}, mockMenu), { id: menuId }) }));
                menuButton.find('button').simulate('click');
                expect(menuButton.find('ul').prop('id')).toEqual(menuId);
                expect(menuButton.find('button').prop('aria-controls')).toEqual(menuId);
            });
            test('menu id is generated if not provided', function () {
                var menuButton = utils_1.mountWithProvider(React.createElement(MenuButton_1.MenuButton, { trigger: React.createElement("button", null), menu: mockMenu }));
                menuButton.find('button').simulate('click');
                var menuId = menuButton.find('ul').prop('id');
                expect(menuId).toMatch(/menubutton-menu-\d+/);
                expect(menuButton.find('button').prop('aria-controls')).toEqual(menuId);
            });
        });
    });
});
describe('MenuButtonBehavior', function () {
    var menuToRender = { id: 'menuID', 'data-slotid': 'menu', items: ['1', '2', '3'] };
    var menuToRenderWithoutID = { 'data-slotid': 'menu', items: ['1', '2', '3'] };
    var triggerButton = React.createElement("button", { "data-slotid": "trigger", id: "triggerElementID" });
    var triggerButtonWithoutID = React.createElement("button", { "data-slotid": "trigger" });
    describe('trigger slot - tabbable - Button', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerButton, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionTriggerSlotTabbable, testFacade);
        expect(errors).toEqual([]);
    });
    describe('trigger slot - tabbable - Box as button', function () {
        var triggerWithoutTabIndex = React.createElement(Box_1.Box, { "data-slotid": "trigger", id: "triggerElementID", as: "button" });
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerWithoutTabIndex, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionTriggerSlotTabbable, testFacade);
        expect(errors).toEqual([]);
    });
    describe('trigger slot - tabbable - Anchor', function () {
        var triggerWithoutTabIndex = (React.createElement("a", { href: "", "data-slotid": "trigger", id: "triggerElementID" }, "triggerLink"));
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerWithoutTabIndex, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionTriggerSlotTabbable, testFacade);
        expect(errors).toEqual([]);
    });
    describe('trigger slot - NO tabbable - Anchor without href', function () {
        var triggerAnchorWtihoutHref = (React.createElement("a", { "data-slotid": "trigger", id: "triggerElementID" }, "triggerLink"));
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerAnchorWtihoutHref, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionTriggerSlotNotTabbable, testFacade);
        expect(errors).toEqual([]);
    });
    describe('trigger slot - NO tabbable - Span', function () {
        var triggerWithoutTabIndex = (React.createElement("span", { "data-slotid": "trigger", id: "triggerElementID" }, "text to trigger popup"));
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerWithoutTabIndex, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionTriggerSlotNotTabbable, testFacade);
        expect(errors).toEqual([]);
    });
    describe('trigger slot - doesnt override tabIndex if exists', function () {
        var triggerWithTabIndex = React.createElement("button", { "data-slotid": "trigger", id: "triggerElementID", tabIndex: -1 });
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerWithTabIndex, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionTriggerWithTabIndex, testFacade);
        expect(errors).toEqual([]);
    });
    describe('trigger slot - autogenerate ID', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerButtonWithoutID, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionTriggerSlotWithoutID, testFacade);
        expect(errors).toEqual([]);
    });
    describe('menu slot', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerButton, menu: menuToRender });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionMenuSlot, testFacade);
        expect(errors).toEqual([]);
    });
    describe('menu slot - autogenerate ID', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(MenuButton_1.MenuButton, { trigger: triggerButton, menu: menuToRenderWithoutID });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.menuButtonBehaviorDefinitionMenuSlotWithoutID, testFacade);
        expect(errors).toEqual([]);
    });
});
