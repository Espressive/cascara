"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commonTests_1 = require("test/specs/commonTests");
var ToolbarRadioGroup_1 = require("src/components/Toolbar/ToolbarRadioGroup");
var utils_1 = require("test/utils");
var React = require("react");
describe('ToolbarRadioGroup', function () {
    commonTests_1.isConformant(ToolbarRadioGroup_1.ToolbarRadioGroup, { testPath: __filename, constructorName: 'ToolbarRadioGroup' });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(ToolbarRadioGroup_1.ToolbarRadioGroup, {
            defaultRootRole: 'radiogroup',
        });
    });
    describe('allows cycling between items using UP/DOWN arrow keys', function () {
        var arrowUp = 38;
        var arrowDown = 40;
        var getShorthandItems = function (props) { return [
            {
                key: 'test-key1',
                tabIndex: props && props.focusedItem === 0 ? 0 : -1,
                disabled: props && props.disabledItem === 0,
            },
            {
                key: 'test-key2',
                tabIndex: props && props.focusedItem === 1 ? 0 : -1,
                disabled: props && props.disabledItem === 1,
            },
            {
                key: 'test-key3',
                tabIndex: props && props.focusedItem === 2 ? 0 : -1,
                disabled: props && props.disabledItem === 2,
            },
        ]; };
        var testKeyDown = function (testName, items, keyCode, expectedFocusedIndex) {
            it("keyDown test - " + testName, function () {
                var radioButtons = utils_1.mountWithProvider(React.createElement(ToolbarRadioGroup_1.ToolbarRadioGroup, { items: items })).find('button');
                var expectedActiveElement = radioButtons.at(expectedFocusedIndex).getDOMNode();
                expect(document.activeElement).not.toBe(expectedActiveElement);
                radioButtons.first().simulate('keyDown', { preventDefault: function () { }, keyCode: keyCode, which: keyCode });
                expect(document.activeElement).toBe(expectedActiveElement);
            });
        };
        testKeyDown('should move focus to next, second item', getShorthandItems({ focusedItem: 0 }), arrowDown, 1);
        testKeyDown('should move focus to next, third item', getShorthandItems({ focusedItem: 1 }), arrowDown, 2);
        testKeyDown('should move focus to previous, first item', getShorthandItems({ focusedItem: 1 }), arrowUp, 0);
        testKeyDown('should move focus to first item when the focused item is the last one', getShorthandItems({ focusedItem: 2 }), arrowDown, 0);
        testKeyDown('should move focus to last item when the focused item is the first one', getShorthandItems({ focusedItem: 0 }), arrowUp, 2);
    });
});
