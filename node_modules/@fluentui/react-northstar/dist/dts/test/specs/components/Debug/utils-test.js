"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("src/components/Debug/utils");
describe('debugUtils', function () {
    describe('find', function () {
        test('returns true if key matches search', function () {
            var _a;
            var search = 'color';
            var key = 'color';
            var obj = (_a = {}, _a[key] = 'red', _a);
            expect(utils_1.find(obj, key, search)).toEqual(true);
        });
        test('returns true if value matches search', function () {
            var _a;
            var search = 'red';
            var key = 'color';
            var obj = (_a = {}, _a[key] = 'red', _a);
            expect(utils_1.find(obj, key, search)).toEqual(true);
        });
        test('returns false if value does not match search', function () {
            var _a;
            var search = 'red';
            var key = 'color';
            var obj = (_a = {}, _a[key] = 'blue', _a);
            expect(utils_1.find(obj, key, search)).toEqual(false);
        });
        test('returns true if key includes search', function () {
            var _a;
            var search = 'color';
            var key = 'backgroundColor';
            var obj = (_a = {}, _a[key] = 'red', _a);
            expect(utils_1.find(obj, key, search)).toEqual(true);
        });
        test('returns true if value includes search', function () {
            var _a;
            var search = 'red';
            var key = 'backgroundColor';
            var obj = (_a = {}, _a[key] = 'darkred', _a);
            expect(utils_1.find(obj, key, search)).toEqual(true);
        });
    });
    describe('isOverridden', function () {
        test('returns true if there is override', function () {
            var _a, _b;
            var key = 'color';
            var data = (_a = {},
                _a[key] = 'red',
                _a);
            var overrides = (_b = {},
                _b[key] = 'blue',
                _b);
            expect(utils_1.isOverridden(data, key, overrides)).toEqual(true);
        });
        test('returns false if is not override', function () {
            var _a;
            var key = 'color';
            var data = (_a = {},
                _a[key] = 'red',
                _a);
            var overrides = {
                backgroundColor: 'blue',
            };
            expect(utils_1.isOverridden(data, key, overrides)).toEqual(false);
        });
        test('gracefully handles null and undefine', function () {
            var _a, _b, _c;
            var key = 'color';
            var data = (_a = {},
                _a[key] = 'red',
                _a);
            var overrides = null;
            expect(utils_1.isOverridden(data, key, overrides)).toEqual(false);
            expect(function () { return utils_1.isOverridden(data, key, overrides); }).not.toThrow();
            overrides = undefined;
            expect(utils_1.isOverridden(data, key, overrides)).toEqual(false);
            expect(function () { return utils_1.isOverridden(data, key, overrides); }).not.toThrow();
            overrides = (_b = {},
                _b[key] = null,
                _b);
            expect(utils_1.isOverridden(data, key, overrides)).toEqual(false);
            expect(function () { return utils_1.isOverridden(data, key, overrides); }).not.toThrow();
            overrides = (_c = {},
                _c[key] = undefined,
                _c);
            expect(utils_1.isOverridden(data, key, overrides)).toEqual(false);
            expect(function () { return utils_1.isOverridden(data, key, overrides); }).not.toThrow();
        });
    });
    describe('filter', function () {
        test('filters primitives correctly by keys', function () {
            var search = 'backgroundColor';
            var data = {
                color: 'red',
                backgroundColor: 'white',
            };
            expect(utils_1.filter(data, search)).toMatchObject({
                backgroundColor: 'white',
            });
        });
        test('filters primitives correctly by value', function () {
            var search = 'white';
            var data = {
                color: 'red',
                backgroundColor: 'white',
            };
            expect(utils_1.filter(data, search)).toMatchObject({
                backgroundColor: 'white',
            });
        });
        test('filters primitives correctly by key (includes)', function () {
            var search = 'color';
            var data = {
                color: 'red',
                backgroundColor: 'white',
            };
            expect(utils_1.filter(data, search)).toMatchObject(data);
        });
        test('filters objects correctly by key', function () {
            var search = 'color';
            var data = {
                color: 'red',
                backgroundColor: 'white',
                ':hover': {
                    color: 'red',
                    border: '1px',
                },
            };
            expect(utils_1.filter(data, search)).toMatchObject(data);
        });
        test('filters objects correctly by object key', function () {
            var search = ':hover';
            var data = {
                color: 'red',
                backgroundColor: 'white',
                ':hover': {
                    color: 'red',
                    border: '1px',
                },
            };
            expect(utils_1.filter(data, search)).toMatchObject({
                ':hover': {
                    color: 'red',
                    border: '1px',
                },
            });
        });
        test('filters objects correctly by value', function () {
            var search = 'red';
            var data = {
                color: 'red',
                backgroundColor: 'white',
                ':hover': {
                    color: 'red',
                    border: '1px',
                },
            };
            expect(utils_1.filter(data, search)).toMatchObject({
                color: 'red',
                ':hover': {
                    color: 'red',
                    border: '1px',
                },
            });
        });
    });
    describe('getValues', function () {
        var prefix = 'prefix.';
        var predicate = function (val) { return val.indexOf(prefix) === 0; };
        test('returns value if it is string', function () {
            var val = prefix + "value";
            expect(utils_1.getValues(val, predicate)).toEqual([val]);
        });
        test('returns value if it is object', function () {
            var val = prefix + "value";
            expect(utils_1.getValues({ someKey: val }, predicate)).toEqual([val]);
        });
        test('returns empty array if predicate does not match on primitive value', function () {
            var val = "value";
            expect(utils_1.getValues(val, predicate)).toEqual([]);
        });
        test('returns empty array if predicate does not match on object', function () {
            var val = "value";
            expect(utils_1.getValues({ someKey: val }, predicate)).toEqual([]);
        });
        test('returns array with all matching values', function () {
            var data = {
                key1: prefix + "value1",
                key2: 'value2',
                key3: {
                    key4: 'value4',
                    key5: prefix + "value5",
                    key6: {
                        key7: prefix + "value7",
                        key8: "value8",
                    },
                },
            };
            expect(utils_1.getValues(data, predicate)).toEqual([prefix + "value1", prefix + "value5", prefix + "value7"]);
        });
    });
    describe('removeNulls', function () {
        test('removes nulls values on first level', function () {
            var data = {
                key1: null,
                key2: 'value2',
            };
            expect(utils_1.removeNulls(data)).toMatchObject({ key2: 'value2' });
        });
        test('removes nested nulls values', function () {
            var data = {
                key1: {
                    key2: null,
                    key3: 'value2',
                },
            };
            expect(utils_1.removeNulls(data)).toMatchObject({
                key1: {
                    key3: 'value2',
                },
            });
        });
        test('removes nested object if all values are removed', function () {
            var data = {
                key1: {
                    key2: null,
                    key3: null,
                },
                key4: 'value4',
            };
            expect(utils_1.removeNulls(data)).toMatchObject({ key4: 'value4' });
        });
    });
});
