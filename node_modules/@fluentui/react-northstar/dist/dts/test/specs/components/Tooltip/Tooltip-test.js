"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Tooltip_1 = require("src/components/Tooltip/Tooltip");
var TooltipContent_1 = require("src/components/Tooltip/TooltipContent");
var Button_1 = require("src/components/Button/Button");
var utils_1 = require("../../../utils");
var implementsPopperProps_1 = require("test/specs/commonTests/implementsPopperProps");
describe('Tooltip', function () {
    implementsPopperProps_1.implementsPopperProps(Tooltip_1.Tooltip, {
        requiredProps: { open: true },
    });
    test('aria-labelledby is not added on trigger if aria-label is passed to trigger shorthand', function () {
        var ariaLabelTestValue = 'test-aria-label';
        var wrapper = utils_1.mountWithProvider(React.createElement(Tooltip_1.Tooltip, { defaultOpen: true, trigger: React.createElement(Button_1.Button, { "aria-label": ariaLabelTestValue }) }));
        var trigger = utils_1.findIntrinsicElement(wrapper, "." + Button_1.buttonClassName);
        expect(trigger.getDOMNode()).toHaveAttribute('aria-label', ariaLabelTestValue);
        expect(trigger.getDOMNode()).not.toHaveAttribute('aria-labelledby');
    });
    describe('content', function () {
        it('uses "id" if "content" with "id" is passed', function () {
            var contentId = 'element-id';
            var wrapper = utils_1.mountWithProvider(React.createElement(Tooltip_1.Tooltip, { defaultOpen: true, trigger: React.createElement(Button_1.Button, null), content: { id: contentId } }));
            var content = utils_1.findIntrinsicElement(wrapper, "." + TooltipContent_1.tooltipContentClassName);
            expect(content.prop('id')).toBe(contentId);
        });
        it('uses computed "id" if "content" is passed without "id"', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Tooltip_1.Tooltip, { defaultOpen: true, trigger: React.createElement(Button_1.Button, null), content: "Welcome" }));
            var content = utils_1.findIntrinsicElement(wrapper, "." + TooltipContent_1.tooltipContentClassName);
            expect(content.prop('id')).toMatch(/tooltip-content-\d+/);
        });
    });
    describe('onOpenChange', function () {
        test('is called on hover', function () {
            var onOpenChange = jest.fn();
            utils_1.mountWithProvider(React.createElement(Tooltip_1.Tooltip, { trigger: React.createElement(Button_1.Button, null), content: "Hi", onOpenChange: onOpenChange }))
                .find('button')
                .simulate('mouseEnter');
            expect(onOpenChange).toHaveBeenCalledTimes(1);
            expect(onOpenChange).toHaveBeenCalledWith(expect.objectContaining({ type: 'mouseenter' }), expect.objectContaining({ open: true }));
        });
        // https://github.com/microsoft/fluent-ui-react/pull/619
        test('is called on hover when controlled', function () {
            var onOpenChange = jest.fn();
            utils_1.mountWithProvider(React.createElement(Tooltip_1.Tooltip, { open: false, trigger: React.createElement(Button_1.Button, null), content: "Hi", onOpenChange: onOpenChange }))
                .find('button')
                .simulate('mouseEnter');
            expect(onOpenChange).toHaveBeenCalledTimes(1);
            expect(onOpenChange).toHaveBeenCalledWith(expect.objectContaining({ type: 'mouseenter' }), expect.objectContaining({ open: true }));
        });
    });
    test('it should call trigger events', function () {
        var onKeyDown = jest.fn();
        utils_1.mountWithProvider(React.createElement(Tooltip_1.Tooltip, { open: false, trigger: React.createElement(Button_1.Button, { onKeyDown: onKeyDown }), content: "Hi" }))
            .find('button')
            .simulate('keydown', { keyCode: 13 });
        expect(onKeyDown).toHaveBeenCalledTimes(1);
        expect(onKeyDown).toHaveBeenCalledWith(expect.objectContaining({ type: 'keydown' }));
    });
});
describe('open', function () {
    it('is passed to "Popper" as "enabled"', function () {
        var wrapper = utils_1.mountWithProvider(React.createElement(Tooltip_1.Tooltip, { trigger: React.createElement("button", null), content: "Foo" }));
        expect(wrapper.find('Popper').prop('enabled')).toBe(false);
        wrapper.setProps({ open: true });
        expect(wrapper.find('Popper').prop('enabled')).toBe(true);
    });
});
