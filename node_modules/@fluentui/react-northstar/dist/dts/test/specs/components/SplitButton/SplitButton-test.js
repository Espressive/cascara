"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var accessibility_1 = require("@fluentui/accessibility");
var SplitButton_1 = require("src/components/SplitButton/SplitButton");
var SplitButtonToggle_1 = require("src/components/SplitButton/SplitButtonToggle");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("../../../utils");
var Menu_1 = require("src/components/Menu/Menu");
var MenuItem_1 = require("src/components/Menu/MenuItem");
var MenuButton_1 = require("src/components/MenuButton/MenuButton");
var Button_1 = require("src/components/Button/Button");
var implementsPopperProps_1 = require("test/specs/commonTests/implementsPopperProps");
var mockMenu = { items: ['1', '2', '3'] };
var getToggleButton = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + SplitButtonToggle_1.splitButtonToggleClassName);
};
var getMainButton = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + MenuButton_1.menuButtonClassName + " ." + Button_1.buttonClassName);
};
var getMenuItems = function (wrapper) { return utils_1.findIntrinsicElement(wrapper, "." + MenuItem_1.menuItemClassName); };
var getMenu = function (wrapper) { return utils_1.findIntrinsicElement(wrapper, "." + Menu_1.menuClassName); };
describe('SplitButton', function () {
    commonTests_1.isConformant(SplitButton_1.SplitButton, { testPath: __filename, constructorName: 'SplitButton', autoControlledProps: ['open'] });
    implementsPopperProps_1.implementsPopperProps(SplitButton_1.SplitButton, { requiredProps: { open: true } });
    describe('open', function () {
        test('is toggled between true and false on toggle button click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test" }));
            var toggleButton = getToggleButton(wrapper);
            toggleButton.simulate('click');
            expect(getMenuItems(wrapper)).toHaveLength(mockMenu.items.length);
            toggleButton.simulate('click');
            expect(getMenuItems(wrapper)).toHaveLength(0);
        });
        test('is false when clicking menu item', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", defaultOpen: true }));
            getMenuItems(wrapper).at(0).simulate('click');
            expect(getMenuItems(wrapper)).toHaveLength(0);
        });
        test('is true when Alt+ArrowDown is sent to the main button', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test" }));
            getMainButton(wrapper).simulate('keydown', { keyCode: accessibility_1.keyboardKey.ArrowDown, altKey: true });
            expect(getMenuItems(wrapper)).toHaveLength(mockMenu.items.length);
        });
        test('is false when Alt+ArrowUp is sent to the menu', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", defaultOpen: true }));
            getMenu(wrapper).simulate('keydown', { keyCode: accessibility_1.keyboardKey.ArrowUp, altKey: true });
            expect(getMenuItems(wrapper)).toHaveLength(0);
            expect(document.activeElement).toBe(getMainButton(wrapper).getDOMNode());
        });
        test('is false when Escape is sent to the menu', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", defaultOpen: true }));
            getMenu(wrapper).simulate('keydown', { keyCode: accessibility_1.keyboardKey.Escape });
            expect(getMenuItems(wrapper)).toHaveLength(0);
            expect(document.activeElement).toBe(getMainButton(wrapper).getDOMNode());
        });
        test('is false when Tab is sent to the menu', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", defaultOpen: true }));
            getMenu(wrapper).simulate('keydown', { keyCode: accessibility_1.keyboardKey.Tab, shiftKey: false });
            expect(getMenuItems(wrapper)).toHaveLength(0);
        });
        test('is false when Enter is sent to the menu', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", defaultOpen: true }));
            getMenu(wrapper).simulate('keydown', { keyCode: accessibility_1.keyboardKey.Enter });
            getMenuItems(wrapper).at(0).simulate('click');
            expect(getMenuItems(wrapper)).toHaveLength(0);
        });
        test('is false when Shift+Tab is sent to the menu', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", defaultOpen: true }));
            getMenu(wrapper).simulate('keydown', { keyCode: accessibility_1.keyboardKey.Tab, shiftKey: true });
            expect(getMenuItems(wrapper)).toHaveLength(0);
        });
    });
    test('onMenuItemClick', function () {
        var onMenuItemClick = jest.fn();
        var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", onMenuItemClick: onMenuItemClick, defaultOpen: true }));
        getMenuItems(wrapper).at(0).simulate('click');
        expect(onMenuItemClick).toHaveBeenCalledTimes(1);
    });
    test('onMainButtonClick', function () {
        var onMainButtonClick = jest.fn();
        var wrapper = utils_1.mountWithProvider(React.createElement(SplitButton_1.SplitButton, { menu: mockMenu, button: "test", onMainButtonClick: onMainButtonClick }));
        getMainButton(wrapper).simulate('click');
        expect(onMainButtonClick).toHaveBeenCalledTimes(1);
        expect(onMainButtonClick).toHaveBeenCalledWith(expect.any(Object), expect.objectContaining({ content: 'test' }));
    });
});
