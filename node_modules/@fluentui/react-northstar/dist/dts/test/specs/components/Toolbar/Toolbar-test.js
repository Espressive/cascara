"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Toolbar_1 = require("src/components/Toolbar/Toolbar");
var accessibility_1 = require("@fluentui/accessibility");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var react_icons_northstar_1 = require("@fluentui/react-icons-northstar");
var boldButtonId = 'item1';
var italicButtonId = 'item2';
var BaseComponent = function (props) {
    var _a = React.useState(false), bold = _a[0], setBold = _a[1];
    var _b = React.useState(true), italic = _b[0], setItalic = _b[1];
    var getItems = function () { return [
        {
            accessibility: accessibility_1.toggleButtonBehavior,
            active: bold,
            icon: React.createElement(react_icons_northstar_1.BoldIcon, tslib_1.__assign({}, { outline: true })),
            title: 'Toggle bold',
            onClick: function () { return setBold(!bold); },
            id: boldButtonId,
            key: 'toolbar-item-1',
        },
        {
            accessibility: accessibility_1.toggleButtonBehavior,
            active: italic,
            icon: React.createElement(react_icons_northstar_1.ItalicIcon, tslib_1.__assign({}, { outline: true })),
            title: 'Toggle italic',
            onClick: function () { return setItalic(!italic); },
            id: italicButtonId,
            key: 'toolbar-item-2',
        },
    ]; };
    return React.createElement(Toolbar_1.Toolbar, { items: getItems() });
};
describe('Toolbar', function () {
    commonTests_1.isConformant(Toolbar_1.Toolbar, {
        testPath: __filename,
        constructorName: 'Toolbar',
        requiredProps: { overflow: true },
    });
    describe('aria-pressed is changing accordingly to state', function () {
        it('renders children', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(BaseComponent, null));
            var boldToolbarButton = utils_1.findIntrinsicElement(wrapper, "#" + boldButtonId);
            var italicToolbarButton = utils_1.findIntrinsicElement(wrapper, "#" + italicButtonId);
            expect(commonTests_1.getRenderedAttribute(boldToolbarButton, 'aria-pressed', '')).toBe('false');
            expect(commonTests_1.getRenderedAttribute(italicToolbarButton, 'aria-pressed', '')).toBe('true');
            boldToolbarButton.simulate('click');
            italicToolbarButton.simulate('click');
            expect(commonTests_1.getRenderedAttribute(boldToolbarButton, 'aria-pressed', '')).toBe('true');
            expect(commonTests_1.getRenderedAttribute(italicToolbarButton, 'aria-pressed', '')).toBe('false');
        });
    });
    describe('overflowItem', function () {
        it('popper props can be overriden', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Toolbar_1.Toolbar, { items: [], overflow: true, overflowOpen: true, overflowItem: { menu: { popper: { position: 'below' } } } }));
            expect(wrapper.find('Popper').prop('positionFixed')).toBe(true);
            expect(wrapper.find('Popper').prop('position')).toBe('below');
        });
    });
});
