"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var utils_1 = require("test/utils");
var useTree_1 = require("../../../../src/components/Tree/hooks/useTree");
var test_utils_1 = require("react-dom/test-utils");
var items = [
    {
        id: '1',
        title: '1',
        items: [
            {
                id: '11',
                title: '11',
            },
        ],
    },
    {
        id: '2',
        title: '2',
        items: [
            {
                id: '21',
                title: '21',
                items: [
                    {
                        id: '211',
                        title: '211',
                    },
                ],
            },
            {
                id: '22',
                title: '22',
            },
        ],
    },
    {
        id: '3',
        title: '3',
        items: [
            {
                id: '31',
                title: '31',
            },
            {
                id: '32',
                title: '32',
                selectable: false,
            },
            {
                id: '33',
                title: '33',
            },
        ],
    },
];
var TestHook = function (_a) {
    var callback = _a.callback;
    callback();
    return null;
};
var testHook = function (callback) {
    utils_1.mountWithProvider(React.createElement(TestHook, { callback: callback }));
};
// UTs on useTree focus on select state.
// Because other parts in useTree is covered by useVirtualTree (which use useTree)
describe('useTree', function () {
    var useTreeResult;
    beforeEach(function () {
        testHook(function () {
            useTreeResult = useTree_1.useTree({
                items: items,
                defaultActiveItemIds: ['1'],
                defaultSelectedItemIds: ['211', '22'],
            });
        });
    });
    test('should set item select state correctly according to defaultSelectedItemIds', function () {
        expect(useTreeResult.getItemById('1').selected).toBe(false);
        expect(useTreeResult.getItemById('11').selected).toBe(false);
        expect(useTreeResult.getItemById('2').selected).toBe(true);
        expect(useTreeResult.getItemById('21').selected).toBe(true);
        expect(useTreeResult.getItemById('211').selected).toBe(true);
        expect(useTreeResult.getItemById('22').selected).toBe(true);
        expect(useTreeResult.getItemById('3').selected).toBe(false);
        expect(useTreeResult.getItemById('31').selected).toBe(false);
        expect(useTreeResult.getItemById('32').selected).toBe(false);
        expect(useTreeResult.getItemById('33').selected).toBe(false);
    });
    test('should update item select state when toggleItemSelect is called from parent node', function () {
        test_utils_1.act(function () {
            useTreeResult.toggleItemSelect({}, '2'); // all items under 2 should become unselected
        });
        ['2', '21', '211', '22'].forEach(function (id) {
            expect(useTreeResult.getItemById(id).selected).toBe(false);
        });
    });
    test('should update item select state correctly when unselectable items present', function () {
        test_utils_1.act(function () {
            useTreeResult.toggleItemSelect({}, '31');
        });
        expect(useTreeResult.getItemById('31').selected).toBe(true);
        expect(useTreeResult.getItemById('32').selected).toBe(false);
        expect(useTreeResult.getItemById('33').selected).toBe(false);
        expect(useTreeResult.getItemById('3').selected).toBe('indeterminate');
        test_utils_1.act(function () {
            useTreeResult.toggleItemSelect({}, '33');
        });
        expect(useTreeResult.getItemById('31').selected).toBe(true);
        expect(useTreeResult.getItemById('32').selected).toBe(false);
        expect(useTreeResult.getItemById('33').selected).toBe(true);
        expect(useTreeResult.getItemById('3').selected).toBe(true);
    });
});
