"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var date_time_utilities_1 = require("../../../../src/utils/date-time-utilities");
var navigateToNewDate_1 = require("../../../../src/components/Datepicker/navigateToNewDate");
describe('navigateToNewDate', function () {
    var referenceDate = new Date(2020, 0, 10);
    it('Navigation works for day', function () {
        var result = navigateToNewDate_1.navigateToNewDate(referenceDate, 'Day', 1, {}, false);
        expect(date_time_utilities_1.compareDatePart(result, new Date(2020, 0, 11))).toBeFalsy();
    });
    it('Navigation works for week', function () {
        var result = navigateToNewDate_1.navigateToNewDate(referenceDate, 'Week', -1, {}, false);
        expect(date_time_utilities_1.compareDatePart(result, new Date(2020, 0, 3))).toBeFalsy();
    });
    it('Navigation works for month', function () {
        var result = navigateToNewDate_1.navigateToNewDate(referenceDate, 'Month', 1, {}, false);
        expect(date_time_utilities_1.compareDatePart(result, new Date(2020, 1, 10))).toBeFalsy();
    });
    it('Restricted week jump can jump by bigger steps', function () {
        var result = navigateToNewDate_1.navigateToNewDate(referenceDate, 'Week', 7, { restrictedDates: [new Date(2020, 0, 17)] }, false);
        expect(date_time_utilities_1.compareDatePart(result, new Date(2020, 0, 24))).toBeFalsy();
    });
    it('Restricted day backward jumps back to min', function () {
        var result = navigateToNewDate_1.navigateToNewDate(referenceDate, 'Day', -1, { minDate: referenceDate }, false);
        expect(date_time_utilities_1.compareDatePart(result, referenceDate)).toBeFalsy();
    });
    it('Restricted month forward jumps back to max', function () {
        var result = navigateToNewDate_1.navigateToNewDate(referenceDate, 'Month', 1, { maxDate: referenceDate }, false);
        expect(date_time_utilities_1.compareDatePart(result, referenceDate)).toBeFalsy();
    });
    it('Restricted week does not jump when can navigate to disabled dates', function () {
        var result = navigateToNewDate_1.navigateToNewDate(referenceDate, 'Week', 7, { restrictedDates: [new Date(2020, 0, 17)] }, true);
        expect(date_time_utilities_1.compareDatePart(result, new Date(2020, 0, 17))).toBeFalsy();
    });
});
