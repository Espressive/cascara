"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var utils_1 = require("test/utils");
var Portal_1 = require("src/components/Portal/Portal");
var PortalInner_1 = require("src/components/Portal/PortalInner");
var test_utils_1 = require("react-dom/test-utils");
describe('Portal', function () {
    var testPortalInnerIsOpen = function (rootWrapper, visible) {
        expect(rootWrapper.find(PortalInner_1.PortalInner).length).toBe(visible ? 1 : 0);
    };
    var testPortalOpenState = function (rootWrapper, content, isOpen) {
        var portalIsOpen = isOpen;
        testPortalInnerIsOpen(rootWrapper, portalIsOpen);
        expect(rootWrapper.contains(content)).toBe(portalIsOpen);
    };
    it('translates open prop to state', function () {
        var content = React.createElement("p", null);
        var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null) }));
        testPortalOpenState(wrapper, content, false);
        var openPortalWrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), open: true }));
        testPortalOpenState(openPortalWrapper, content, true);
    });
    describe('click', function () {
        it('opens the portal on trigger click when true', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), trigger: React.createElement("button", null, "button") }));
            testPortalInnerIsOpen(wrapper, false);
            wrapper.find('button').simulate('click');
            testPortalInnerIsOpen(wrapper, true);
        });
        it('closes the portal on click when set', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), defaultOpen: true, trigger: React.createElement("button", null, "button") }));
            testPortalInnerIsOpen(wrapper, true);
            wrapper.find('button').simulate('click');
            testPortalInnerIsOpen(wrapper, false);
        });
    });
    describe('document click', function () {
        it('closes the portal', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var wrapper;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), defaultOpen: true }));
                        testPortalInnerIsOpen(wrapper, true);
                        return [4 /*yield*/, utils_1.nextFrame()];
                    case 1:
                        _a.sent();
                        test_utils_1.act(function () {
                            utils_1.domEvent.click(document.body);
                        });
                        wrapper.update();
                        testPortalInnerIsOpen(wrapper, false);
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not close on click inside', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", { id: "inner" }), defaultOpen: true }));
            testPortalInnerIsOpen(wrapper, true);
            test_utils_1.act(function () {
                utils_1.domEvent.click('#inner');
            });
            wrapper.update();
            testPortalInnerIsOpen(wrapper, true);
        });
    });
    describe('onMount', function () {
        it('called when portal opens', function () {
            var onMount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onMount: onMount }));
            wrapper.setProps({ open: true });
            expect(onMount).toHaveBeenCalledTimes(1);
        });
    });
    describe('onUnmount', function () {
        it('is called when portal closes', function () {
            var onUnmount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onUnmount: onUnmount, open: true }));
            wrapper.setProps({ open: false });
            expect(onUnmount).toHaveBeenCalledTimes(1);
        });
        it('is called only once when portal closes and then is unmounted', function () {
            var onUnmount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onUnmount: onUnmount, open: true }));
            wrapper.setProps({ open: false });
            wrapper.unmount();
            expect(onUnmount).toHaveBeenCalledTimes(1);
        });
        it('is called only once when directly unmounting', function () {
            var onUnmount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onUnmount: onUnmount, open: true }));
            wrapper.unmount();
            expect(onUnmount).toHaveBeenCalledTimes(1);
        });
    });
    describe('triggerRef', function () {
        it('maintains ref on the trigger', function () {
            var triggerRef = jest.fn();
            var mountNode = document.createElement('div');
            document.body.appendChild(mountNode);
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), trigger: React.createElement("button", { id: "trigger" }), triggerRef: triggerRef }), {
                attachTo: mountNode,
            });
            var triggerElem = document.querySelector('#trigger');
            expect(triggerRef).toHaveBeenCalledTimes(1);
            expect(triggerRef).toHaveBeenCalledWith(triggerElem);
            wrapper.detach();
            document.body.removeChild(mountNode);
        });
    });
    describe('trigger', function () {
        it('renders null when not set', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null) }));
            expect(wrapper.html()).toEqual(null);
        });
        it('renders the trigger when set', function () {
            var text = 'open by click on me';
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), trigger: React.createElement("button", null, text) }));
            expect(wrapper.find('button').length).toBe(1);
            expect(wrapper.text()).toEqual(text);
        });
    });
});
