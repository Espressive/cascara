"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var styles_1 = require("@fluentui/styles");
var React = require("react");
var enzyme_1 = require("enzyme");
var Provider_1 = require("src/components/Provider/Provider");
var ProviderConsumer_1 = require("src/components/Provider/ProviderConsumer");
var styleParam = {
    disableAnimations: false,
    props: {},
    rtl: false,
    theme: styles_1.emptyTheme,
    variables: {},
};
describe('ProviderConsumer', function () {
    test('is exported', function () {
        expect(require('src/index.ts').ProviderConsumer).toEqual(ProviderConsumer_1.ProviderConsumer);
    });
    test('is a subcomponent of the Provider', function () {
        expect(Provider_1.Provider.Consumer).toEqual(ProviderConsumer_1.ProviderConsumer);
    });
    describe('render', function () {
        test('is a callback that receives the prepared theme', function () {
            expect.assertions(11);
            var inputTheme = {
                siteVariables: { a: 'b' },
                componentVariables: { Button: { color: 'red' } },
                componentStyles: { Button: { root: { color: 'red' } } },
                fontFaces: [{ name: 'name', paths: ['path.woff2'], props: { fontWeight: 400 } }],
                staticStyles: ['body{margin:0;}', { body: { margin: 0 } }],
            };
            enzyme_1.mount(React.createElement(Provider_1.Provider, { theme: inputTheme },
                React.createElement(Provider_1.Provider.Consumer, { render: function (preparedTheme) {
                        // siteVariables
                        expect(preparedTheme).toHaveProperty('siteVariables.a', 'b');
                        // componentVariables
                        expect(preparedTheme).toHaveProperty('componentVariables.Button');
                        expect(preparedTheme.componentVariables.Button).toBeInstanceOf(Function);
                        expect(preparedTheme.componentVariables.Button()).toMatchObject(inputTheme.componentVariables.Button);
                        // componentStyles
                        expect(preparedTheme).toHaveProperty('componentStyles.Button.root');
                        expect(preparedTheme.componentStyles.Button.root).toBeInstanceOf(Function);
                        expect(preparedTheme.componentStyles.Button.root(styleParam)).toMatchObject(inputTheme.componentStyles.Button.root);
                        // fontFaces
                        expect(preparedTheme).toHaveProperty('fontFaces');
                        expect(preparedTheme.fontFaces).toMatchObject(inputTheme.fontFaces);
                        // staticStyles
                        expect(preparedTheme).toHaveProperty('staticStyles');
                        expect(preparedTheme.staticStyles).toMatchObject(inputTheme.staticStyles);
                        return null;
                    } })));
        });
    });
});
