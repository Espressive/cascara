"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var accessibility_1 = require("@fluentui/accessibility");
var Button_1 = require("src/components/Button/Button");
var a11y_testing_1 = require("@fluentui/a11y-testing");
describe('Button', function () {
    commonTests_1.isConformant(Button_1.Button, {
        testPath: __filename,
        constructorName: 'Button',
    });
    describe('accessibility', function () {
        describe('button', function () {
            commonTests_1.handlesAccessibility(Button_1.Button, {
                defaultRootRole: undefined,
            });
        });
        describe('div Button', function () {
            commonTests_1.handlesAccessibility(Button_1.Button, {
                requiredProps: { as: 'div' },
                defaultRootRole: 'button',
            });
        });
        describe('HTML accessibility rules validation', function () {
            describe('icon button must have textual representation for screen readers', function () {
                test('with title', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, { icon: "books", title: "testing button" }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
                test('with aria-label attribute', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, { icon: "books", "aria-label": "testing button" }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
                test('with aria-labelledby attribute', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement("div", null,
                                    React.createElement(Button_1.Button, { icon: "books", "aria-labelledby": "tstBtn" }),
                                    React.createElement("span", { id: "tstBtn", "aria-label": "testing button" })))];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); });
            });
            describe('different buttons variants', function () {
                test('button', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, null, "Simple test button"))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
                test('button with text and icon', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, { icon: "test", content: "Simple test button" }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
            });
        });
        describe('ToggleButton behavior', function () {
            describe('role button', function () {
                test('is not defined, if compoenent is button', function () {
                    var renderedComponent = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { accessibility: accessibility_1.toggleButtonBehavior }));
                    expect(commonTests_1.getRenderedAttribute(renderedComponent, 'role', '')).toBe(undefined);
                });
                test('is defined, if compoenent is not button', function () {
                    var renderedComponent = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { as: "div", accessibility: accessibility_1.toggleButtonBehavior }));
                    expect(commonTests_1.getRenderedAttribute(renderedComponent, 'role', '')).toBe('button');
                });
            });
        });
    });
    describe('circular', function () {
        var circularProp = 'circular';
        test('is not set by default', function () {
            var btnCircular = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, null)).prop(circularProp);
            expect(btnCircular).toBeUndefined();
        });
        test('can be set to true', function () {
            var btnCircular = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { circular: true })).prop(circularProp);
            expect(btnCircular).toEqual(true);
        });
    });
    describe('onClick', function () {
        test('does not call onClick when the button is disabled', function () {
            var onClick = jest.fn();
            var button = utils_1.mountWithProvider(React.createElement(Button_1.Button, { disabled: true, onClick: onClick })).find('Button');
            button.simulate('click');
            expect(onClick).not.toHaveBeenCalled();
        });
        test('is called with (e, props) on a click', function () {
            var onClick = jest.fn();
            var button = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { onClick: onClick }));
            button.simulate('click');
            expect(onClick).toHaveBeenCalledTimes(1);
            expect(onClick).toHaveBeenCalledWith(expect.objectContaining({ type: 'click' }), expect.objectContaining({ onClick: onClick }));
        });
    });
    describe('ButtonBehavior', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(Button_1.Button, {});
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.buttonBehaviorDefinition, testFacade);
        expect(errors).toEqual([]);
    });
    describe('ButtonToggleBehavior', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(Button_1.Button, { accessibility: accessibility_1.toggleButtonBehavior });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.toggleButtonBehaviorDefinition, testFacade);
        expect(errors).toEqual([]);
    });
});
