"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var implementsCollectionShorthandProp_1 = require("../../commonTests/implementsCollectionShorthandProp");
var utils_1 = require("test/utils");
var RadioGroup_1 = require("src/components/RadioGroup/RadioGroup");
var RadioGroupItem_1 = require("src/components/RadioGroup/RadioGroupItem");
var radioGroupImplementsCollectionShorthandProp = implementsCollectionShorthandProp_1.implementsCollectionShorthandProp(RadioGroup_1.RadioGroup);
var getShorthandItems = function (props) { return [
    {
        name: 'test-name',
        key: 'test-key1',
        label: 'test-label1',
        value: 'test-value1',
        'data-foo': 'something',
        onClick: jest.fn(),
        disabled: props && props.disabledItem === 0,
    },
    {
        name: 'test-name',
        key: 'test-key2',
        label: 'test-label2',
        value: 'test-value2',
        'data-foo': 'something',
        disabled: props && props.disabledItem === 1,
    },
    {
        name: 'test-name',
        key: 'test-key3',
        label: 'test-label3',
        value: 'test-value3',
        'data-foo': 'something',
        disabled: props && props.disabledItem === 2,
    },
]; };
describe('RadioGroup', function () {
    commonTests_1.isConformant(RadioGroup_1.RadioGroup, {
        testPath: __filename,
        constructorName: 'RadioGroup',
        autoControlledProps: ['checkedValue'],
    });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(RadioGroup_1.RadioGroup, {
            defaultRootRole: 'radiogroup',
        });
        test('compliance', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(RadioGroup_1.RadioGroup, { items: getShorthandItems() }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); });
    });
    describe('implementsCollectionShorthandProp', function () {
        radioGroupImplementsCollectionShorthandProp('items', RadioGroupItem_1.RadioGroupItem, {
            mapsValueToProp: false,
        });
    });
    var itemsTest = function (getItems, isShorthandApiTest) {
        if (isShorthandApiTest === void 0) { isShorthandApiTest = true; }
        it('renders children', function () {
            var items = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems() })).find('RadioGroupItem');
            expect(items.length).toBe(3);
            expect(items.first().props().label).toBe('test-label1');
            expect(items.last().props().label).toBe('test-label3');
        });
        it('calls onClick handler for item', function () {
            var items = getItems();
            var radioGroupItems = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: items })).find('RadioGroupItem');
            radioGroupItems.first().find('div').first().simulate('click');
            var onClick = items[0].onClick || items[0].props.onClick;
            expect(onClick).toHaveBeenCalled();
        });
        it('calls onChange handler for item with updated checked state', function () {
            var onChange = jest.fn();
            var items = tslib_1.__spreadArrays([
                {
                    name: 'test-name',
                    key: 'test-key0',
                    label: 'test-label0',
                    value: 'test-value0',
                    onChange: onChange,
                }
            ], getItems());
            var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: items }));
            var radioGroupItems = wrapper.find('RadioGroupItem');
            radioGroupItems.first().simulate('click');
            expect(onChange).toHaveBeenCalledWith(undefined, expect.objectContaining({ checked: true }));
            radioGroupItems.last().simulate('click');
            expect(onChange).toHaveBeenCalledWith(undefined, expect.objectContaining({ checked: false }));
        });
        it('passes arbitrary props', function () {
            var radioGroupItems = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems() })).find('RadioGroupItem');
            expect(radioGroupItems.everyWhere(function (item) { return item.prop('data-foo') === 'something'; })).toBe(true);
        });
        describe('checkedValue', function () {
            it('should not be set and first item is focusable by default', function () {
                var radioGroupItems = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems() })).find('RadioGroupItem');
                expect(radioGroupItems.everyWhere(function (item) { return !item.is('[checked="true"]'); })).toBe(true);
                expect(radioGroupItems.at(0).props().tabIndex).toBe(0);
            });
        });
        if (isShorthandApiTest) {
            describe('click event handler', function () {
                it('should set "checked" when item is clicked', function () {
                    var onCheckedValueChange = jest.fn();
                    var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems(), onCheckedValueChange: onCheckedValueChange }));
                    var radioGroupItems = wrapper.find('RadioGroupItem');
                    radioGroupItems.at(1).find('div').first().simulate('click');
                    var updatedItems = wrapper.find('RadioGroupItem');
                    expect(updatedItems.at(0).props().checked).toBe(false);
                    expect(updatedItems.at(1).props().checked).toBe(true);
                    expect(onCheckedValueChange).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({ value: 'test-value2' }));
                });
            });
        }
        it('should not call checkedValueChanged when index did not change', function () {
            var onCheckedValueChange = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems(), onCheckedValueChange: onCheckedValueChange, checkedValue: "test-value2" }));
            var radioGroupItems = wrapper.find('RadioGroupItem');
            radioGroupItems.at(1).find('div').first().simulate('click');
            expect(onCheckedValueChange).not.toHaveBeenCalled();
        });
        if (isShorthandApiTest) {
            it('should not set "checked" when disabled item is clicked', function () {
                var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems({ disabledItem: 1 }) }));
                var radioGroupItems = wrapper.find('RadioGroupItem');
                radioGroupItems.at(1).find('div').first().simulate('click');
                var updatedItems = wrapper.find('RadioGroupItem');
                expect(updatedItems.at(0).props().checked).toBe(false);
                expect(updatedItems.at(1).props().checked).toBe(false);
            });
        }
        describe('keyDown event handler', function () {
            var testKeyDown = function (testName, items, initialValue, keyCode, expectedValue) {
                it("keyDown test - " + testName, function () {
                    var onCheckedValueChange = jest.fn();
                    var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: items, checkedValue: initialValue, onCheckedValueChange: onCheckedValueChange }));
                    wrapper
                        .find('div')
                        .first()
                        .simulate('keyDown', { preventDefault: function () { }, keyCode: keyCode, which: keyCode });
                    expect(onCheckedValueChange).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({ value: expectedValue }));
                });
            };
            testKeyDown('should check next value when right arrow is pressed', getItems(), 'test-value1', 39, 'test-value2');
            testKeyDown('should check previous value when left arrow is pressed', getItems(), 'test-value2', 37, 'test-value1');
            testKeyDown('should check first value when right arrow is pressed and last item was checked', getItems(), 'test-value3', 39, 'test-value1');
            testKeyDown('should check last value when left arrow is pressed and first item was checked', getItems(), 'test-value1', 37, 'test-value3');
            testKeyDown('should skip disabled when right arrow is pressed', getItems({ disabledItem: 1 }), 'test-value1', 39, 'test-value3');
            testKeyDown('should skip disabled when left arrow is pressed', getItems({ disabledItem: 1 }), 'test-value3', 37, 'test-value1');
        });
    };
    describe('shorthand API for items', function () {
        itemsTest(getShorthandItems);
    });
});
