"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var accessibility_1 = require("@fluentui/accessibility");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var MenuItem_1 = require("src/components/Menu/MenuItem");
var Menu_1 = require("src/components/Menu/Menu");
var MenuItemWrapper_1 = require("src/components/Menu/MenuItemWrapper");
describe('MenuItem', function () {
    commonTests_1.isConformant(MenuItem_1.MenuItem, {
        testPath: __filename,
        constructorName: 'MenuItem',
        wrapperComponent: MenuItemWrapper_1.MenuItemWrapper,
        autoControlledProps: ['menuOpen'],
        testOptions: { 'consistent-callback-names': { ignoreProps: ['onActiveChanged'] } },
    });
    commonTests_1.implementsShorthandProp(MenuItem_1.MenuItem)('menu', Menu_1.Menu, {
        implementsPopper: true,
        requiredProps: { active: true, menuOpen: true },
    });
    it('content renders as `li > a`', function () {
        var menuItem = utils_1.mountWithProviderAndGetComponent(MenuItem_1.MenuItem, React.createElement(MenuItem_1.MenuItem, { content: "Home" }))
            .find("." + MenuItemWrapper_1.menuItemWrapperClassName)
            .hostNodes();
        expect(menuItem.is('li')).toBe(true);
        // The ElementType is wrapped with Ref, which is adding two HOC in total, that's why we need the three childAt(0) usages
        expect(menuItem.childAt(0).childAt(0).childAt(0).is('a')).toBe(true);
        expect(menuItem.text()).toBe('Home');
    });
    it('children render directly inside `li`', function () {
        var menuItem = utils_1.mountWithProviderAndGetComponent(MenuItem_1.MenuItem, React.createElement(MenuItem_1.MenuItem, null, "Home"))
            .find("." + MenuItemWrapper_1.menuItemWrapperClassName)
            .hostNodes();
        expect(menuItem.is('li')).toBe(true);
        expect(menuItem.childAt(0).hostNodes().exists()).toBe(false);
        expect(menuItem.text()).toBe('Home');
    });
    describe('wrapper', function () {
        it('onClick should be called', function () {
            var onClick = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(MenuItem_1.MenuItem, { wrapper: { onClick: onClick } }, "Home"));
            wrapper.find('MenuItemWrapper').simulate('click');
            expect(onClick).toHaveBeenCalled();
        });
    });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(MenuItem_1.MenuItem, { defaultRootRole: 'presentation', usesWrapperSlot: true });
        commonTests_1.handlesAccessibility(MenuItem_1.MenuItem, { defaultRootRole: 'menuitem', partSelector: 'a' });
        var behaviors = [
            { name: 'default', behavior: undefined, expectedAnchorRole: 'menuitem' },
            {
                name: 'menuItemAsToolbarButtonBehavior',
                behavior: accessibility_1.menuItemAsToolbarButtonBehavior,
                expectedAnchorRole: 'button',
            },
            { name: 'tabBehavior', behavior: accessibility_1.tabBehavior, expectedAnchorRole: 'tab' },
        ];
        behaviors.forEach(function (accessibility) {
            test("integration test for " + accessibility.name + " behavior", function () {
                // accessibility functionality is covered by a combination of behavior tests and `handlesAccessibility()`
                // this is just an integration smoke test
                var ariaLabel = 'Useful Tool Tip';
                var menuItemComponent = utils_1.mountWithProviderAndGetComponent(MenuItem_1.MenuItem, React.createElement(MenuItem_1.MenuItem, { disabled: true, "aria-label": ariaLabel, accessibility: accessibility.behavior }));
                expect(commonTests_1.getRenderedAttribute(menuItemComponent, 'role', '')).toBe('presentation');
                expect(commonTests_1.getRenderedAttribute(menuItemComponent, 'aria-disabled', '')).toBe(undefined);
                expect(commonTests_1.getRenderedAttribute(menuItemComponent, 'aria-label', '')).toBe(undefined);
                expect(commonTests_1.getRenderedAttribute(menuItemComponent, 'role', 'a')).toBe(accessibility.expectedAnchorRole);
                expect(commonTests_1.getRenderedAttribute(menuItemComponent, 'aria-disabled', 'a')).toBe('true');
                expect(commonTests_1.getRenderedAttribute(menuItemComponent, 'aria-label', 'a')).toBe(ariaLabel);
            });
        });
    });
});
