"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var accessibility_1 = require("@fluentui/accessibility");
var Accordion_1 = require("src/components/Accordion/Accordion");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var AccordionTitle_1 = require("src/components/Accordion/AccordionTitle");
var panels = [
    {
        key: 'one',
        title: 'One',
        content: '2 3 4',
    },
    {
        key: 'two',
        title: 'Five',
        content: '6 7 8 9',
    },
    {
        key: 'three',
        title: "What's next?",
        content: '10',
    },
];
var getTitleButtonAtIndex = function (wrapper, index) {
    return wrapper
        .find("." + AccordionTitle_1.accordionTitleSlotClassNames.contentWrapper)
        .filterWhere(function (n) { return typeof n.type() === 'string'; })
        .at(index);
};
var getExclusiveItemWithPropIndex = function (accordion, prop) {
    return accordion.find('AccordionTitle').filterWhere(function (accordionTitle) { return accordionTitle.prop(prop); });
};
var getNonExclusiveItemWithPropIndex = function (accordion, prop) {
    return accordion
        .find('AccordionTitle')
        .filterWhere(function (accordionTitle) { return accordionTitle.prop(prop); })
        .prop('index');
};
var getNonExclusiveItemWithPropArray = function (accordion, prop) {
    return accordion
        .find('AccordionTitle')
        .filterWhere(function (accordionTitle) { return accordionTitle.prop(prop); })
        .map(function (node) { return node.prop('index'); });
};
var getAccordionTitleAtIndex = function (accordion, index) {
    return utils_1.findIntrinsicElement(accordion, "." + AccordionTitle_1.accordionTitleSlotClassNames.contentWrapper).at(index).getDOMNode();
};
describe('Accordion', function () {
    commonTests_1.isConformant(Accordion_1.Accordion, {
        testPath: __filename,
        constructorName: 'Accordion',
        autoControlledProps: ['activeIndex'],
    });
    describe('activeIndex', function () {
        it('has no active item by default when exclusive', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, exclusive: true }));
            expect(getExclusiveItemWithPropIndex(accordion, 'active')).toHaveLength(0);
        });
        it('is no active item by default in an non-exclusive accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels }));
            expect(getExclusiveItemWithPropIndex(accordion, 'active')).toHaveLength(0);
        });
        it('is has the first element active by default in an exclusive expanded accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, exclusive: true, expanded: true }));
            expect(getNonExclusiveItemWithPropIndex(accordion, 'active')).toBe(0);
        });
        it('is has only the first element active by default in an non-exclusive expanded accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, expanded: true }));
            expect(getNonExclusiveItemWithPropIndex(accordion, 'active')).toBe(0);
        });
        it('is has the active elements corresponding to the prop defaultActiveIndex passed', function () {
            var defaultActiveIndex = [1, 2];
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, defaultActiveIndex: defaultActiveIndex }));
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining(defaultActiveIndex));
        });
        it('actives the indexes clicked by the user if the panels were closed', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            getTitleButtonAtIndex(accordion, 2).simulate('click');
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining([0, 2]));
        });
        it('actives the only one index clicked by the user if exclusive prop is passed', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, exclusive: true }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            expect(accordion
                .find('AccordionTitle')
                .filterWhere(function (accordionTitle) { return accordionTitle.prop('active'); })
                .prop('index')).toEqual(0);
            getTitleButtonAtIndex(accordion, 2).simulate('click');
            expect(accordion
                .find('AccordionTitle')
                .filterWhere(function (accordionTitle) { return accordionTitle.prop('active'); })
                .prop('index')).toEqual(2);
        });
        it('deactivate indexes removed when their panels are closed by the user', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, defaultActiveIndex: [0, 1, 2] }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            getTitleButtonAtIndex(accordion, 2).simulate('click');
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining([1]));
        });
        it('keeps the at least one panel open if expanded prop is passed', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, defaultActiveIndex: [0], expanded: true }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining([0]));
        });
    });
    describe('focusedIndex', function () {
        it('is set at title click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 1).simulate('click');
            expect(getAccordionTitleAtIndex(accordion, 1)).toHaveFocus();
        });
        it('is changed by arrow key navigation', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 1).simulate('click');
            getTitleButtonAtIndex(wrapper, 1).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowUp,
                key: 'ArrowUp',
            });
            expect(getAccordionTitleAtIndex(accordion, 0)).toHaveFocus();
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowDown,
                key: 'ArrowDown',
            });
            expect(getAccordionTitleAtIndex(accordion, 1)).toHaveFocus();
        });
        it('is changed by arrow key navigation in a circular way', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowUp,
                key: 'ArrowUp',
            });
            expect(getAccordionTitleAtIndex(accordion, panels.length - 1)).toHaveFocus();
            getTitleButtonAtIndex(wrapper, panels.length - 1).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowDown,
                key: 'ArrowDown',
            });
            expect(getAccordionTitleAtIndex(accordion, 0)).toHaveFocus();
        });
        it('is changed to `0` at Home keydown', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 2).simulate('click');
            getTitleButtonAtIndex(wrapper, 2).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.Home,
                key: 'Home',
            });
            expect(getAccordionTitleAtIndex(accordion, 0)).toHaveFocus();
        });
        it('is changed to last index at End keydown', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.End,
                key: 'End',
            });
            expect(getAccordionTitleAtIndex(accordion, panels.length - 1)).toHaveFocus();
        });
        it('focuses the button element when is changed via focus handler', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            var title = getTitleButtonAtIndex(wrapper, 1);
            title.simulate('click');
            title.simulate('keydown', { keyCode: accessibility_1.keyboardKey.ArrowUp, key: 'ArrowUp' });
            expect(document.activeElement).toEqual(getTitleButtonAtIndex(wrapper, 0).getDOMNode());
        });
    });
    describe('panels', function () {
        it('when clicked call onClick and onTitleClick if provided by the user', function () {
            var onTitleClick = jest.fn();
            var panels = [
                {
                    key: 'one',
                    title: 'One',
                    content: '2 3 4',
                },
            ];
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, onTitleClick: onTitleClick }));
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            expect(onTitleClick).toBeCalledTimes(1);
        });
    });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(Accordion_1.Accordion, { defaultRootRole: 'presentation' });
    });
});
