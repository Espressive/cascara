"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var Carousel_1 = require("src/components/Carousel/Carousel");
var Button_1 = require("src/components/Button/Button");
var CarouselNavigation_1 = require("src/components/Carousel/CarouselNavigation");
var CarouselNavigationItem_1 = require("src/components/Carousel/CarouselNavigationItem");
var Text_1 = require("src/components/Text/Text");
var utils_1 = require("test/utils");
var buttonName = 'button-to-test';
var items = [
    {
        key: 'item1',
        content: (React.createElement("div", null,
            React.createElement(Text_1.Text, { content: 'item1' }),
            " ",
            React.createElement(Button_1.Button, { id: buttonName, content: buttonName }))),
    },
    {
        key: 'item2',
        content: React.createElement(Text_1.Text, { content: 'item2' }),
    },
    {
        key: 'item3',
        content: React.createElement(Text_1.Text, { content: 'item3' }),
    },
    {
        key: 'item4',
        content: React.createElement(Text_1.Text, { content: 'item4' }),
    },
];
function renderCarousel(props) {
    return utils_1.mountWithProvider(React.createElement(Carousel_1.Carousel, tslib_1.__assign({ items: items, getItemPositionText: function (index, length) { return index + 1 + " of " + length; } }, props)));
}
var getItemsContainer = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + Carousel_1.carouselSlotClassNames.itemsContainer);
};
var getPaddleNextWrapper = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + Carousel_1.carouselSlotClassNames.paddleNext);
};
var getPaddlePreviousWrapper = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + Carousel_1.carouselSlotClassNames.paddlePrevious);
};
var getPaginationWrapper = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + Carousel_1.carouselSlotClassNames.pagination);
};
var getNavigationNavigationWrapper = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + CarouselNavigation_1.carouselNavigationClassName);
};
var getNavigationNavigationItemAtIndexWrapper = function (wrapper, index) {
    return utils_1.findIntrinsicElement(wrapper, "." + CarouselNavigationItem_1.carouselNavigationItemClassName).at(index);
};
var getButtonWrapper = function (wrapper) { return utils_1.findIntrinsicElement(wrapper, "#" + buttonName); };
jest.useFakeTimers();
describe('Carousel', function () {
    commonTests_1.isConformant(Carousel_1.Carousel, {
        testPath: __filename,
        constructorName: 'Carousel',
        autoControlledProps: ['activeIndex'],
        disabledTests: ['kebab-aria-attributes'],
    });
    describe('activeIndex', function () {
        it('should increase at paddle next press', function () {
            var wrapper = renderCarousel();
            var paddleNext = getPaddleNextWrapper(wrapper);
            var pagination = getPaginationWrapper(wrapper);
            paddleNext.simulate('click');
            expect(pagination.getDOMNode().textContent).toBe("2 of " + items.length);
        });
        it('should pass activeIndex onActiveIndexChange', function () {
            var onActiveIndexChange = jest.fn();
            var wrapper = renderCarousel({ onActiveIndexChange: onActiveIndexChange });
            var paddleNext = getPaddleNextWrapper(wrapper);
            paddleNext.simulate('click');
            expect(onActiveIndexChange).toHaveBeenCalledWith(expect.objectContaining({ type: 'click' }), expect.objectContaining({ activeIndex: 1 }));
        });
        it('should decrese at paddle previous press', function () {
            var wrapper = renderCarousel({ defaultActiveIndex: 3 });
            var paddlePrevious = getPaddlePreviousWrapper(wrapper);
            var pagination = getPaginationWrapper(wrapper);
            paddlePrevious.simulate('click');
            expect(pagination.getDOMNode().textContent).toBe("3 of " + items.length);
        });
        it('should wrap at paddle next press if last and circular', function () {
            var wrapper = renderCarousel({ circular: true, defaultActiveIndex: 3 });
            var paddleNext = getPaddleNextWrapper(wrapper);
            var pagination = getPaginationWrapper(wrapper);
            paddleNext.simulate('click');
            expect(pagination.getDOMNode().textContent).toBe("1 of " + items.length);
        });
        it('should wrap at paddle previous press if first and circular', function () {
            var wrapper = renderCarousel({ circular: true });
            var paddlePrevious = getPaddlePreviousWrapper(wrapper);
            var pagination = getPaginationWrapper(wrapper);
            paddlePrevious.simulate('click');
            expect(pagination.getDOMNode().textContent).toBe("4 of " + items.length);
        });
        it('should increment at arrow right', function () {
            var wrapper = renderCarousel({ circular: true });
            var pagination = getPaginationWrapper(wrapper);
            var itemsContainer = getItemsContainer(wrapper);
            itemsContainer.simulate('keydown', { key: 'ArrowRight' });
            expect(pagination.getDOMNode().textContent).toBe("2 of " + items.length);
        });
        it('should decrement at arrow left', function () {
            var wrapper = renderCarousel({ circular: true, defaultActiveIndex: 3 });
            var pagination = getPaginationWrapper(wrapper);
            var itemsContainer = getItemsContainer(wrapper);
            itemsContainer.simulate('keydown', { key: 'ArrowLeft' });
            expect(pagination.getDOMNode().textContent).toBe("3 of " + items.length);
        });
        it('should not increment at arrow right if last and not circular', function () {
            var wrapper = renderCarousel({ defaultActiveIndex: 3 });
            var pagination = getPaginationWrapper(wrapper);
            var itemsContainer = getItemsContainer(wrapper);
            itemsContainer.simulate('keydown', { key: 'ArrowRight' });
            expect(pagination.getDOMNode().textContent).toBe("4 of " + items.length);
        });
        it('should not decrement at arrow left if first and not circular', function () {
            var wrapper = renderCarousel();
            var pagination = getPaginationWrapper(wrapper);
            var itemsContainer = getItemsContainer(wrapper);
            itemsContainer.simulate('keydown', { key: 'ArrowLeft' });
            expect(pagination.getDOMNode().textContent).toBe("1 of " + items.length);
        });
        it('should not change at arrow left if event is invoked on child element', function () {
            var wrapper = renderCarousel({ circular: true });
            var button = getButtonWrapper(wrapper);
            var pagination = getPaginationWrapper(wrapper);
            button.simulate('keydown', { key: 'ArrowLeft' });
            expect(pagination.getDOMNode().textContent).toBe("1 of " + items.length);
        });
        it('should not change at arrow right if event is invoked on child element', function () {
            var wrapper = renderCarousel();
            var button = getButtonWrapper(wrapper);
            var pagination = getPaginationWrapper(wrapper);
            button.simulate('keydown', { key: 'ArrowRight' });
            expect(pagination.getDOMNode().textContent).toBe("1 of " + items.length);
        });
    });
    describe('paddle', function () {
        it('next should be hidden on last element if not circular', function () {
            var wrapper = renderCarousel({ defaultActiveIndex: 3, circular: true });
            expect(!wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddleNext));
            expect(wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddlePrevious));
        });
        it('previous should be hidden on last element if not circular', function () {
            var wrapper = renderCarousel({ circular: true });
            expect(!wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddlePrevious));
            expect(wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddleNext));
        });
        it('next should not be hidden on last element if circular', function () {
            var wrapper = renderCarousel({ defaultActiveIndex: 3, circular: true });
            expect(wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddleNext));
            expect(wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddlePrevious));
        });
        it('previous should not be hidden on last element if circular', function () {
            var wrapper = renderCarousel({ circular: true });
            expect(wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddlePrevious));
            expect(wrapper.exists("." + Carousel_1.carouselSlotClassNames.paddleNext));
        });
        it('next should be focused on last slide transition if pagination and not circular', function () {
            var wrapper = renderCarousel({ defaultActiveIndex: 1 });
            var paddleNext = getPaddleNextWrapper(wrapper);
            var paddlePrevios = getPaddlePreviousWrapper(wrapper);
            paddlePrevios.simulate('keydown', { key: 'Enter' });
            expect(document.activeElement).toEqual(paddleNext.getDOMNode());
        });
        it('previous should be focused on first slide transition if pagination and not circular', function () {
            var wrapper = renderCarousel({ defaultActiveIndex: 2 });
            var paddleNext = getPaddleNextWrapper(wrapper);
            var paddlePrevios = getPaddlePreviousWrapper(wrapper);
            paddleNext.simulate('keydown', { key: 'Enter' });
            expect(document.activeElement).toEqual(paddlePrevios.getDOMNode());
        });
    });
    describe('navigation', function () {
        var navigation = {
            items: items.map(function (item) { return ({ key: item.key, icon: { name: 'icon-circle' } }); }),
        };
        afterEach(function () {
            jest.runAllTimers();
        });
        it('should not show pagination if navigation prop is passed', function () {
            var wrapper = renderCarousel({ navigation: navigation });
            var navigationWrapper = getNavigationNavigationWrapper(wrapper);
            var paginationWrapper = getPaginationWrapper(wrapper);
            expect(paginationWrapper.exists()).toBe(false);
            expect(navigationWrapper.exists()).toBe(true);
            expect(navigationWrapper.getDOMNode().children.length).toBe(4);
        });
        it('should show pagination if navigation prop is not passed', function () {
            var wrapper = renderCarousel();
            var navigationWrapper = getNavigationNavigationWrapper(wrapper);
            var paginationWrapper = getPaginationWrapper(wrapper);
            expect(paginationWrapper.exists()).toBe(true);
            expect(navigationWrapper.exists()).toBe(false);
        });
        it('should show and focus the appropriate slide when clicked', function () {
            var wrapper = renderCarousel({ navigation: navigation });
            var secondNavigationItemWrapper = getNavigationNavigationItemAtIndexWrapper(wrapper, 1);
            secondNavigationItemWrapper.simulate('click');
            jest.runAllTimers();
            expect(document.activeElement.firstElementChild.innerHTML).toEqual('item2');
        });
        it('should show no pagination if getItemPositionText is not passed', function () {
            var wrapper = renderCarousel({ getItemPositionText: undefined });
            var paginationWrapper = getPaginationWrapper(wrapper);
            expect(paginationWrapper.exists()).toBe(false);
        });
    });
});
