{"version":3,"sources":["compose/computeDisplayNames.ts"],"names":["computeDisplayNames","inputOptions","parentOptions","overrideStyles","displayName","filter","Boolean","displayNames","concat"],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CAA6BC,YAA7B,EAA2DC,aAA3D,EAA4G;AACjH,MAAID,YAAY,CAACE,cAAjB,EAAiC;AAC/B,WAAO,CAACF,YAAY,CAACG,WAAd,EAA2BC,MAA3B,CAAkCC,OAAlC,CAAP;AACD,GAHgH,CAIjH;;;AACA,SAAOL,YAAY,CAACG,WAAb,GACHF,aAAa,CAACK,YAAd,CAA2BC,MAA3B,CAAkCP,YAAY,CAACG,WAA/C,CADG,GAEHF,aAAa,CAACK,YAFlB;AAGD","sourcesContent":["import { ComposeOptions, ComposePreparedOptions } from './consts';\n\n/**\n * Given input/parent options, which are both assumed to be defined and populated with\n * displayNames array, return a string array of display names.\n */\nexport function computeDisplayNames(inputOptions: ComposeOptions, parentOptions: ComposePreparedOptions): string[] {\n  if (inputOptions.overrideStyles) {\n    return [inputOptions.displayName].filter(Boolean) as string[];\n  }\n  // To support styles composition we need to properly pick up display names\n  return inputOptions.displayName\n    ? parentOptions.displayNames.concat(inputOptions.displayName)\n    : parentOptions.displayNames;\n}\n"],"file":"computeDisplayNames.js"}