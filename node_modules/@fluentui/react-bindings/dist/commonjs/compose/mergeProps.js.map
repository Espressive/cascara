{"version":3,"sources":["compose/mergeProps.ts"],"names":["mergeProps","state","options","result","slots","root","as","slotProps"],"mappings":";;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAT,CAMLC,KANK,EAMUC,OANV,EAMyG;AAC9G,MAAMC,MAAgC,GAAG;AACvCF,IAAAA,KAAK,EAALA,KADuC;AAEvCG,IAAAA,KAAK,oBACAF,OAAO,CAACE,KADR;AAEH;AACAC,MAAAA,IAAI,EAAGJ,KAAD,CAAeK,EAAf,IAAqBJ,OAAO,CAACE,KAAR,CAAcC,IAAnC,IAA2C;AAH9C,MAFkC;AAOvCE,IAAAA,SAAS,EAAE;AAP4B,GAAzC,CAD8G,CAW9G;;AACA,0CAAiBJ,MAAjB,EAAyBD,OAAzB,EAZ8G,CAc9G;;AAEA,SAAOC,MAAP;AACD","sourcesContent":["import { ComposePreparedOptions, MergePropsResult, GenericDictionary } from './consts';\nimport { resolveSlotProps } from './resolveSlotProps';\n\n/**\n * Merge props takes in state and compose options, and resolves slots and slotProps.\n * It's expected that the component will call mergeProps(state, options) from within\n * render; after resolving state and before rendering slots and slotProps.\n */\nexport function mergeProps<\n  TProps,\n  TState = TProps,\n  TSlots = GenericDictionary,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TSlotProps = { [key in keyof TSlots]: any }\n>(state: TState, options: ComposePreparedOptions<TProps, TState>): MergePropsResult<TState, TSlots, TSlotProps> {\n  const result: MergePropsResult<TState> = {\n    state,\n    slots: {\n      ...options.slots,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      root: (state as any).as || options.slots.root || 'div',\n    },\n    slotProps: {},\n  };\n\n  // Resolve slotProps/slots from state.\n  resolveSlotProps(result, options);\n\n  // TODO: Resolve inline styles.\n\n  return result as MergePropsResult<TState, TSlots, TSlotProps>;\n}\n"],"file":"mergeProps.js"}