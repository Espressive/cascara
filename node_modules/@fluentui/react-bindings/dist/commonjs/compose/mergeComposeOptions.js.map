{"version":3,"sources":["compose/mergeComposeOptions.ts"],"names":["mergeComposeOptions","input","inputOptions","parentOptions","defaultComposeOptions","mapPropsToSlotPropsChain","slotProps","resolveSlotProps","props","reduce","acc","definition","nextProps","slots","Object","keys","mergedSlotProps","forEach","slot","inputClasses","Array","isArray","classes","state","ref","options","className","displayName","displayNames","mapPropsToStylesPropsChain","mapPropsToStylesProps","render","handledProps","overrideStyles","shorthandConfig"],"mappings":"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","sourcesContent":["import { defaultComposeOptions, ComposeOptions, ComposePreparedOptions, Input } from './consts';\nimport { computeDisplayNames } from './computeDisplayNames';\n\nexport function mergeComposeOptions(\n  input: Input,\n  inputOptions: ComposeOptions,\n  parentOptions: Required<ComposePreparedOptions> = defaultComposeOptions,\n): Required<ComposePreparedOptions> {\n  const mapPropsToSlotPropsChain = inputOptions.slotProps\n    ? [...parentOptions.slotProps, inputOptions.slotProps]\n    : parentOptions.slotProps;\n\n  const resolveSlotProps = <P = {}>(props: P) =>\n    mapPropsToSlotPropsChain.reduce<Record<string, object>>((acc, definition) => {\n      const nextProps = { ...definition(props) };\n      const slots: string[] = [...Object.keys(acc), ...Object.keys(nextProps)];\n      const mergedSlotProps: Record<string, object> = {};\n\n      slots.forEach(slot => {\n        if (!mergedSlotProps[slot]) {\n          mergedSlotProps[slot] = {\n            ...acc[slot],\n            ...nextProps[slot],\n          };\n        }\n      });\n\n      return mergedSlotProps;\n    }, {});\n\n  const inputClasses = Array.isArray(inputOptions.classes) ? inputOptions.classes : [inputOptions.classes];\n\n  const state: ComposePreparedOptions['state'] = (props, ref, options) => {\n    if (inputOptions.state) {\n      return inputOptions.state(parentOptions.state(props, ref, options), ref, options);\n    }\n\n    return parentOptions.state(props, ref, options);\n  };\n\n  return {\n    className: inputOptions.className || parentOptions.className,\n    classes: [...parentOptions.classes, ...inputClasses],\n\n    displayName: inputOptions.displayName || parentOptions.displayName,\n    displayNames: computeDisplayNames(inputOptions, parentOptions),\n\n    mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps\n      ? [...parentOptions.mapPropsToStylesPropsChain, inputOptions.mapPropsToStylesProps]\n      : parentOptions.mapPropsToStylesPropsChain,\n\n    render: typeof input === 'function' ? input : parentOptions.render,\n\n    handledProps: [...parentOptions.handledProps, ...((inputOptions.handledProps as never[]) || ([] as never[]))],\n\n    overrideStyles: inputOptions.overrideStyles || false,\n\n    slots: {\n      ...parentOptions.slots,\n      ...inputOptions.slots,\n    },\n\n    slotProps: mapPropsToSlotPropsChain,\n\n    state,\n\n    resolveSlotProps,\n\n    shorthandConfig: {\n      ...parentOptions.shorthandConfig,\n      ...inputOptions.shorthandConfig,\n    },\n  };\n}\n"],"file":"mergeComposeOptions.js"}