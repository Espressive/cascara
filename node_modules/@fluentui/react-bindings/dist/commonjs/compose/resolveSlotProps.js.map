{"version":3,"sources":["compose/resolveSlotProps.ts"],"names":["NullRender","resolveSlotProps","result","options","state","slots","slotProps","forEach","definition","nextSlotProps","Object","keys","key","assignToMapObject","getUnhandledProps","slotName","slot","slotProp","undefined","mergedSlotProp","shorthandConfig","mappedProp","defaultMappedProps","children","restProps","React","Fragment","map","value","props","unhandledProps","handledProps","indexOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { defaultMappedProps, ComposePreparedOptions, GenericDictionary, MergePropsResult } from './consts';\nimport { mergeSlotProp } from './mergeSlotProp';\n\nexport const NullRender = () => null;\n\n/**\n * Helper utility which resolves the slots and slot props derived from user input.\n */\nexport function resolveSlotProps<TProps, TState = TProps>(\n  result: MergePropsResult<TState>,\n  options: ComposePreparedOptions<TProps, TState>,\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  // Derive the default slot props from the config, if provided.\n  options.slotProps.forEach(definition => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const nextSlotProps = definition(state as any);\n\n    Object.keys(nextSlotProps).forEach(key => {\n      slotProps[key] = { ...slotProps[key], ...nextSlotProps[key] };\n    });\n  });\n\n  //  Mix unrecognized props onto root, appropriate, excluding the handled props.\n  assignToMapObject(slotProps, 'root', getUnhandledProps(state, options));\n\n  // Iterate through slots and resolve shorthand values.\n  Object.keys(slots).forEach((slotName: string) => {\n    const slot = slots[slotName];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const slotProp = (state as any)[slotName];\n\n    if (slot && slotProp !== undefined && slotProp !== null) {\n      const mergedSlotProp = mergeSlotProp(\n        slotProp,\n        slotProps[slotName],\n        (slot && slot.shorthandConfig && slot.shorthandConfig.mappedProp) || defaultMappedProps[slot],\n      );\n\n      if (typeof mergedSlotProp.children === 'function') {\n        const { children, ...restProps } = slotProp;\n        // If the children is a function, replace the slot.\n        slots[slotName] = React.Fragment;\n        slotProps[slotName] = {\n          children: slotProp.children(slot, { ...slotProps[slotName], ...restProps }),\n        };\n      } else {\n        slotProps[slotName] = mergedSlotProp;\n      }\n    }\n\n    // Ensure no slots are falsey\n    if (!slots[slotName] || slotProp === null) {\n      slots[slotName] = NullRender;\n    }\n  });\n\n  return result;\n}\n\nfunction assignToMapObject(map: Record<string, {}>, key: string, value: {}) {\n  if (value) {\n    if (!map[key]) {\n      map[key] = {};\n    }\n    map[key] = { ...map[key], ...value };\n  }\n}\n\nfunction getUnhandledProps<TProps, TState>(\n  props: GenericDictionary,\n  options: ComposePreparedOptions<TProps, TState>,\n): GenericDictionary {\n  const unhandledProps: GenericDictionary = {};\n  const slots = Object.keys(options.slots);\n\n  for (const key of Object.keys(props)) {\n    if (\n      key !== 'className' &&\n      key !== 'as' &&\n      options.handledProps.indexOf(key as keyof TProps) === -1 &&\n      slots.indexOf(key) === -1\n    ) {\n      unhandledProps[key] = props[key];\n    }\n  }\n\n  return unhandledProps;\n}\n"],"file":"resolveSlotProps.js"}