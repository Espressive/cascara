{"version":3,"sources":["compose/compose.ts"],"names":["compose","input","inputOptions","composeOptions","fluentComposeConfig","undefined","Component","React","forwardRef","props","ref","render","state","slots","__self","displayName","defaultProps"],"mappings":";;;;;;;AAAA;;AAGA;;AACA;;AAEA,SAASA,OAAT,CAOEC,KAPF,EAQEC,YARF,EASE;AAAA,MADAA,YACA;AADAA,IAAAA,YACA,GADiG,EACjG;AAAA;;AACA,MAAMC,cAAc,GAAG,8CACrBF,KADqB,EAEpBC,YAFoB,EAGrB,kDAAsBD,KAAtB,IAA+BA,KAAK,CAACG,mBAArC,GAA2DC,SAHtC,CAAvB;AAMA,MAAMC,SAAS,gBAAIC,KAAK,CAACC,UAAN,CACjB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACd,WAAOP,cAAc,CAACQ,MAAf,CAAsBF,KAAtB,EAA6BC,GAA7B,oBACFP,cADE;AAELS,MAAAA,KAAK,EAAET,cAAc,CAACS,KAAf,CAAqBH,KAArB,EAA4BC,GAA5B,EAAiCP,cAAjC,CAFF;AAGLU,MAAAA,KAAK,oBACAV,cAAc,CAACU,KADf;AAEHC,QAAAA,MAAM,EAAER;AAFL;AAHA,OAAP;AAQD,GAVgB,CAAnB;AAaAA,EAAAA,SAAS,CAACS,WAAV,GAAwBZ,cAAc,CAACY,WAAvC;;AAEA,MAAKd,KAAD,CAAiCe,YAArC,EAAmD;AACjDV,IAAAA,SAAS,CAACU,YAAV,GAA0Bf,KAAD,CAAiCe,YAA1D;AACD;;AAECV,EAAAA,SAAF,CAA8CF,mBAA9C,GAAoED,cAApE;AAEA,SAAOG,SAAP;AACD,C,CAED;;;eACeN,O","sourcesContent":["import * as React from 'react';\n\nimport { ComponentWithAs, ComposedComponent, ComposeOptions, Input, InputComposeComponent } from './consts';\nimport { wasComposedPreviously } from './wasComposedPreviously';\nimport { mergeComposeOptions } from './mergeComposeOptions';\n\nfunction compose<\n  TElementType extends keyof JSX.IntrinsicElements,\n  TInputProps,\n  TInputStylesProps,\n  TParentProps,\n  TParentStylesProps\n>(\n  input: Input<TElementType, TInputProps>,\n  inputOptions: ComposeOptions<TInputProps, TInputStylesProps, TParentProps, TParentStylesProps> = {},\n) {\n  const composeOptions = mergeComposeOptions(\n    input as Input,\n    (inputOptions as unknown) as ComposeOptions,\n    wasComposedPreviously(input) ? input.fluentComposeConfig : undefined,\n  );\n\n  const Component = (React.forwardRef<HTMLElement, TInputProps & TParentProps & { as?: React.ElementType }>(\n    (props, ref) => {\n      return composeOptions.render(props, ref as React.Ref<HTMLDivElement>, {\n        ...composeOptions,\n        state: composeOptions.state(props, ref, composeOptions),\n        slots: {\n          ...composeOptions.slots,\n          __self: Component,\n        },\n      });\n    },\n  ) as unknown) as ComponentWithAs<TElementType, TInputProps & TParentProps>;\n\n  Component.displayName = composeOptions.displayName;\n\n  if ((input as InputComposeComponent).defaultProps) {\n    Component.defaultProps = (input as InputComposeComponent).defaultProps;\n  }\n\n  ((Component as unknown) as ComposedComponent).fluentComposeConfig = composeOptions;\n\n  return Component;\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default compose;\n"],"file":"compose.js"}