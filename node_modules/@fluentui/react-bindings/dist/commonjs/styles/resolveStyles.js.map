{"version":3,"sources":["styles/resolveStyles.ts"],"names":["classesCache","WeakMap","stylesCache","resolveStyles","options","resolvedVariables","allDisplayNames","componentClassName","className","theme","primaryDisplayName","componentProps","inlineStylesProps","rtl","disableAnimations","renderer","performanceFlags","performance","telemetry","design","styles","variables","noInlineStylesOverrides","noVariableOverrides","enableBooleanVariablesCaching","process","env","NODE_ENV","enableStylesCaching","Error","hasOnlyBooleanVariables","Object","keys","every","variableName","cacheEnabled","mergedStyles","length","componentStyles","root","map","displayName","filter","Boolean","reduce","acc","styleParam","props","rendererParam","direction","join","sanitizeCss","enableSanitizeCssPlugin","resolvedStylesDebug","has","set","propsCacheKey","JSON","stringify","variablesCacheKey","componentCacheKey","Proxy","resolvedStyles","classes","forEach","slotName","lazyEvaluationKey","slotCacheKey","defineProperty","enumerable","configurable","val","get","stylesThemeCache","telemetryPartStart","enabled","now","isDebugEnabled","msResolveStylesTotal","classesThemeCache","stylesRootCacheHits","stylesSlotsCacheHits","styleObj","renderRule","resultClassName","msRenderStylesTotal","target"],"mappings":"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","sourcesContent":["import { RendererParam } from '@fluentui/react-northstar-styles-renderer';\nimport {\n  ComponentSlotStylesInput,\n  ComponentSlotStylesPrepared,\n  ComponentSlotStylesResolved,\n  ComponentStyleFunctionParam,\n  ComponentVariablesObject,\n  ICSSInJSStyle,\n  isDebugEnabled,\n  mergeComponentStyles,\n  ThemePrepared,\n  withDebugId,\n} from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\n\nimport { ComponentSlotClasses, ResolveStylesOptions } from './types';\n\nexport type ResolveStylesResult = {\n  resolvedStyles: ComponentSlotStylesResolved;\n  resolvedStylesDebug: Record<string, { styles: Object }[]>;\n  classes: ComponentSlotClasses;\n};\n\n// this weak map is used as cache for the classes\nconst classesCache = new WeakMap<ThemePrepared, Record<string, string>>();\n\n// this weak map is used as cache for the styles\nconst stylesCache = new WeakMap<ThemePrepared, Record<string, ICSSInJSStyle>>();\n\n/**\n * Both resolvedStyles and classes are objects of getters with lazy evaluation\n *\n * Additionally if the cacheEnabled option is provided, than the resolved styles\n * and classes are caching the results in WeakMaps. The key of the maps contains the following:\n * - theme\n * - displayName\n * - slot name\n * - styling props\n * - rtl mode\n * - disable animations mode\n */\nexport const resolveStyles = (\n  options: ResolveStylesOptions,\n  resolvedVariables: ComponentVariablesObject,\n): ResolveStylesResult => {\n  const {\n    allDisplayNames,\n    className: componentClassName,\n    theme,\n    primaryDisplayName,\n    componentProps,\n    inlineStylesProps,\n    rtl,\n    disableAnimations,\n    renderer,\n    performance: performanceFlags,\n    telemetry,\n  } = options;\n\n  const { className, design, styles, variables } = inlineStylesProps;\n  const noInlineStylesOverrides = !(design || styles);\n\n  let noVariableOverrides = performanceFlags.enableBooleanVariablesCaching || !variables;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    if (!performanceFlags.enableStylesCaching && performanceFlags.enableBooleanVariablesCaching) {\n      throw new Error(\n        '@fluentui/react-northstar: Please check your \"performance\" settings on \"Provider\", to enable \"enableBooleanVariablesCaching\" you need to enable \"enableStylesCaching\"',\n      );\n    }\n  }\n\n  if (performanceFlags.enableBooleanVariablesCaching) {\n    if (_.isPlainObject(variables)) {\n      const hasOnlyBooleanVariables = Object.keys(variables).every(\n        variableName =>\n          variables[variableName] === null ||\n          typeof variables[variableName] === 'undefined' ||\n          typeof variables[variableName] === 'boolean',\n      );\n\n      if (!hasOnlyBooleanVariables) {\n        noVariableOverrides = false;\n      }\n    } else if (!_.isNil(variables)) {\n      noVariableOverrides = false;\n    }\n  }\n\n  const cacheEnabled = performanceFlags.enableStylesCaching && noInlineStylesOverrides && noVariableOverrides;\n\n  // Merge theme styles with inline overrides if any\n  let mergedStyles: ComponentSlotStylesPrepared;\n\n  if (allDisplayNames.length === 1) {\n    mergedStyles = theme.componentStyles[allDisplayNames[0]] || { root: () => ({}) };\n  } else {\n    const styles = allDisplayNames.map(displayName => theme.componentStyles[displayName]).filter(Boolean);\n\n    if (styles.length > 0) {\n      mergedStyles = styles.reduce<ComponentSlotStylesPrepared>((acc, styles) => {\n        return mergeComponentStyles(acc, styles);\n      }, {});\n    } else {\n      mergedStyles = { root: () => ({}) };\n    }\n  }\n\n  if (!noInlineStylesOverrides) {\n    mergedStyles = mergeComponentStyles(\n      mergedStyles,\n      mergeComponentStyles(\n        design && withDebugId({ root: design } as ComponentSlotStylesInput, 'props.design'),\n        styles && withDebugId({ root: styles } as ComponentSlotStylesInput, 'props.styles'),\n      ),\n    );\n  }\n\n  const styleParam: ComponentStyleFunctionParam = {\n    props: componentProps,\n    variables: resolvedVariables,\n    theme,\n    rtl,\n    disableAnimations,\n  };\n\n  // Heads Up! Keep in sync with Design.tsx render logic\n  const rendererParam: RendererParam = {\n    direction: rtl ? 'rtl' : 'ltr',\n    disableAnimations,\n    displayName: allDisplayNames.join(':'), // does not affect styles, only used by useEnhancedRenderer in docs\n    sanitizeCss: performanceFlags.enableSanitizeCssPlugin,\n  };\n\n  const resolvedStylesDebug: Record<string, { styles: Object }[]> = {};\n\n  if (cacheEnabled && theme) {\n    if (!stylesCache.has(theme)) {\n      stylesCache.set(theme, {});\n    }\n    if (!classesCache.has(theme)) {\n      classesCache.set(theme, {});\n    }\n  }\n\n  const propsCacheKey = cacheEnabled ? JSON.stringify(componentProps) : '';\n  const variablesCacheKey =\n    cacheEnabled && performanceFlags.enableBooleanVariablesCaching ? JSON.stringify(variables) : '';\n  const componentCacheKey = cacheEnabled\n    ? `${allDisplayNames.join(':')}:${propsCacheKey}:${variablesCacheKey}:${styleParam.rtl}${\n        styleParam.disableAnimations\n      }`\n    : '';\n\n  if (typeof Proxy === 'undefined') {\n    //\n    //\n    // IE11 branch of code, feel free to remove later.\n    // Keep it sync with another branch below!\n    //\n    //\n\n    const resolvedStyles: Record<string, ICSSInJSStyle> = {};\n    const classes: Record<string, string> = {};\n\n    Object.keys(mergedStyles).forEach(slotName => {\n      // resolve/render slot styles once and cache\n      const lazyEvaluationKey = `${slotName}__return`;\n      const slotCacheKey = componentCacheKey + slotName;\n\n      Object.defineProperty(resolvedStyles, slotName, {\n        enumerable: false,\n        configurable: false,\n        set(val: ICSSInJSStyle) {\n          // Add to the cache if it's enabled\n          if (cacheEnabled && theme) {\n            stylesCache.set(theme, {\n              ...stylesCache.get(theme),\n              [slotCacheKey]: val,\n            });\n          }\n\n          resolvedStyles[lazyEvaluationKey] = val;\n        },\n        get(): ICSSInJSStyle {\n          // If caching enabled and entry exists, get from cache, avoid lazy evaluation\n          if (cacheEnabled && theme) {\n            const stylesThemeCache = stylesCache.get(theme) || {};\n            if (stylesThemeCache[slotCacheKey]) {\n              return stylesThemeCache[slotCacheKey];\n            }\n          }\n\n          if (resolvedStyles[lazyEvaluationKey]) {\n            return resolvedStyles[lazyEvaluationKey];\n          }\n\n          const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n\n          // resolve/render slot styles once and cache\n          resolvedStyles[lazyEvaluationKey] = mergedStyles[slotName](styleParam);\n\n          if (cacheEnabled && theme) {\n            stylesCache.set(theme, {\n              ...stylesCache.get(theme),\n              [slotCacheKey]: resolvedStyles[lazyEvaluationKey],\n            });\n          }\n\n          if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n            resolvedStylesDebug[slotName] = (resolvedStyles[slotName] as any)['_debug'];\n            delete (resolvedStyles[slotName] as any)['_debug'];\n          }\n\n          if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n            telemetry.performance[primaryDisplayName].msResolveStylesTotal += performance.now() - telemetryPartStart;\n          }\n\n          return resolvedStyles[lazyEvaluationKey];\n        },\n      });\n\n      Object.defineProperty(classes, slotName, {\n        enumerable: false,\n        configurable: false,\n        set(val: string) {\n          if (cacheEnabled && theme) {\n            classesCache.set(theme, {\n              ...classesCache.get(theme),\n              [slotCacheKey]: val,\n            });\n          }\n\n          classes[lazyEvaluationKey] = val;\n        },\n        get(): string {\n          if (cacheEnabled && theme) {\n            const classesThemeCache = classesCache.get(theme) || {};\n\n            //\n            // Cached styles\n            //\n\n            if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === '') {\n              if (telemetry?.performance[primaryDisplayName]) {\n                if (slotName === 'root') {\n                  telemetry.performance[primaryDisplayName].stylesRootCacheHits++;\n                } else {\n                  telemetry.performance[primaryDisplayName].stylesSlotsCacheHits++;\n                }\n              }\n\n              return slotName === 'root'\n                ? cx(componentClassName, classesThemeCache[slotCacheKey], className)\n                : classesThemeCache[slotCacheKey];\n            }\n          }\n\n          //\n          // Lazy eval\n          //\n\n          if (classes[lazyEvaluationKey]) {\n            return slotName === 'root'\n              ? cx(componentClassName, classes[lazyEvaluationKey], className)\n              : classes[lazyEvaluationKey];\n          }\n\n          // this resolves the getter magic\n          const styleObj = resolvedStyles[slotName];\n          const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n\n          if (styleObj) {\n            classes[lazyEvaluationKey] = renderer.renderRule(styleObj, rendererParam);\n\n            if (cacheEnabled && theme) {\n              classesCache.set(theme, {\n                ...classesCache.get(theme),\n                [slotCacheKey]: classes[lazyEvaluationKey],\n              });\n            }\n          }\n\n          const resultClassName =\n            slotName === 'root'\n              ? cx(componentClassName, classes[lazyEvaluationKey], className)\n              : classes[lazyEvaluationKey];\n\n          if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n            telemetry.performance[primaryDisplayName].msRenderStylesTotal += performance.now() - telemetryPartStart;\n          }\n\n          return resultClassName;\n        },\n      });\n    });\n\n    return {\n      resolvedStyles,\n      resolvedStylesDebug,\n      classes,\n    };\n  }\n\n  const resolvedStyles = new Proxy<Record<string, ICSSInJSStyle>>(\n    {},\n    {\n      get(target, slotName: string) {\n        const slotCacheKey = componentCacheKey + slotName;\n\n        // If caching enabled and entry exists, get from cache, avoid lazy evaluation\n        if (cacheEnabled && theme) {\n          const stylesThemeCache = stylesCache.get(theme) || {};\n          if (stylesThemeCache[slotCacheKey]) {\n            return stylesThemeCache[slotCacheKey];\n          }\n        }\n\n        if (target[slotName]) {\n          return target[slotName];\n        }\n\n        const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n\n        // resolve/render slot styles once and cache\n        target[slotName] = mergedStyles[slotName]?.(styleParam);\n\n        if (cacheEnabled && theme) {\n          stylesCache.set(theme, {\n            ...stylesCache.get(theme),\n            [slotCacheKey]: target[slotName],\n          });\n        }\n\n        if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n          resolvedStylesDebug[slotName] = (target[slotName] as any)['_debug'];\n          delete (target[slotName] as any)['_debug'];\n        }\n\n        if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n          telemetry.performance[primaryDisplayName].msResolveStylesTotal += performance.now() - telemetryPartStart;\n        }\n\n        return target[slotName];\n      },\n    },\n  );\n  const classes = new Proxy<Record<string, string>>(\n    {},\n    {\n      get(target, slotName: string) {\n        const slotCacheKey = componentCacheKey + slotName;\n\n        if (cacheEnabled && theme) {\n          const classesThemeCache = classesCache.get(theme) || {};\n\n          //\n          // Cached styles\n          //\n\n          if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === '') {\n            if (telemetry?.performance[primaryDisplayName]) {\n              if (slotName === 'root') {\n                telemetry.performance[primaryDisplayName].stylesRootCacheHits++;\n              } else {\n                telemetry.performance[primaryDisplayName].stylesSlotsCacheHits++;\n              }\n            }\n\n            return slotName === 'root'\n              ? cx(componentClassName, classesThemeCache[slotCacheKey], className)\n              : classesThemeCache[slotCacheKey];\n          }\n        }\n\n        //\n        // Lazy eval\n        //\n\n        if (target[slotName]) {\n          return slotName === 'root' ? cx(componentClassName, target[slotName], className) : target[slotName];\n        }\n\n        // this resolves the getter magic\n        const styleObj = resolvedStyles[slotName];\n        const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n\n        if (styleObj) {\n          target[slotName] = renderer.renderRule(styleObj, rendererParam);\n\n          if (cacheEnabled && theme) {\n            classesCache.set(theme, {\n              ...classesCache.get(theme),\n              [slotCacheKey]: target[slotName],\n            });\n          }\n        }\n\n        const resultClassName =\n          slotName === 'root' ? cx(componentClassName, target[slotName], className) : target[slotName];\n\n        if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n          telemetry.performance[primaryDisplayName].msRenderStylesTotal += performance.now() - telemetryPartStart;\n        }\n\n        return resultClassName;\n      },\n    },\n  );\n\n  return {\n    resolvedStyles,\n    resolvedStylesDebug,\n    classes,\n  };\n};\n"],"file":"resolveStyles.js"}