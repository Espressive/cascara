"use strict";

exports.__esModule = true;
exports.resolveVariables = void 0;

var _styles = require("@fluentui/styles");

var variablesCache = new WeakMap();

var resolveVariables = function resolveVariables(displayNames, theme, variables, enabledVariablesCaching) {
  var componentThemeVariables; // Filter out components that doesn't have defined variables in theme

  var effectiveDisplayNames = displayNames.filter(function (displayName) {
    return !!theme.componentVariables[displayName];
  }); //
  // Simple caching model, works only if there is no `props.variables`
  // Resolves variables for this component, cache the result in provider
  //

  if (enabledVariablesCaching) {
    if (!variablesCache.has(theme)) {
      variablesCache.set(theme, {});
    }

    var variablesThemeCache = variablesCache.get(theme) || {}; // const displayNames = { Foo: variables, Bar: undefined, Baz: undefined }
    // This allows to avoid creating useless cache entries for `Bar` & `Baz` components

    var handlingDisplayName = effectiveDisplayNames[effectiveDisplayNames.length - 1];

    if (!variablesThemeCache[handlingDisplayName]) {
      // A short circle to avoid additional merging for non-composed components
      if (effectiveDisplayNames.length === 1) {
        variablesThemeCache[handlingDisplayName] = (0, _styles.callable)(theme.componentVariables[handlingDisplayName])(theme.siteVariables);
      } else {
        variablesThemeCache[handlingDisplayName] = _styles.mergeComponentVariables.apply(void 0, effectiveDisplayNames.map(function (displayName) {
          return theme.componentVariables[displayName];
        }))(theme.siteVariables);
      }

      variablesCache.set(theme, variablesThemeCache);
    }

    componentThemeVariables = variablesThemeCache[handlingDisplayName];
  } else if (effectiveDisplayNames.length === 1) {
    componentThemeVariables = (0, _styles.callable)(theme.componentVariables[effectiveDisplayNames[0]])(theme.siteVariables) || {};
  } else {
    componentThemeVariables = _styles.mergeComponentVariables.apply(void 0, effectiveDisplayNames.map(function (displayName) {
      return theme.componentVariables[displayName];
    }))(theme.siteVariables);
  }

  if (variables === undefined) {
    return componentThemeVariables;
  }

  return (0, _styles.mergeComponentVariables)(componentThemeVariables, (0, _styles.withDebugId)(variables, 'props.variables'))(theme.siteVariables);
};

exports.resolveVariables = resolveVariables;
//# sourceMappingURL=resolveVariables.js.map
