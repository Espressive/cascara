{"version":3,"sources":["styles/getStyles.ts"],"names":["getStyles","options","primaryDisplayName","telemetry","telemetryPartStart","enabled","performance","now","resolvedVariables","allDisplayNames","theme","inlineStylesProps","variables","enableVariablesCaching","msResolveVariablesTotal","classes","resolvedStyles","resolvedStylesDebug","process","env","NODE_ENV","isDebugEnabled","saveDebug","componentName","join","componentVariables","_debug","resolved","componentStyles","siteVariables","siteVars","keys","Object","length","pop","styles"],"mappings":";;;;;;;;;;;AAAA;;AAKA;;AACA;;AASO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAoD;AAAA,MACnEC,kBADmE,GACjCD,OADiC,CACnEC,kBADmE;AAAA,MAC/CC,SAD+C,GACjCF,OADiC,CAC/CE,SAD+C,EAG3E;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAGD,SAAS,QAAT,IAAAA,SAAS,CAAEE,OAAX,GAAqBC,WAAW,CAACC,GAAZ,EAArB,GAAyC,CAApE;AACA,MAAMC,iBAAiB,GAAG,wCACxBP,OAAO,CAACQ,eADgB,EAExBR,OAAO,CAACS,KAFgB,EAGxBT,OAAO,CAACU,iBAAR,CAA0BC,SAHF,EAIxBX,OAAO,CAACK,WAAR,CAAoBO,sBAJI,CAA1B;;AAOA,MAAIV,SAAS,QAAT,IAAAA,SAAS,CAAEE,OAAX,IAAsBF,SAAS,CAACG,WAAV,CAAsBJ,kBAAtB,CAA1B,EAAqE;AACnEC,IAAAA,SAAS,CAACG,WAAV,CAAsBJ,kBAAtB,EAA0CY,uBAA1C,IAAqER,WAAW,CAACC,GAAZ,KAAoBH,kBAAzF;AACD;;AApB0E,uBAsBlB,mCAAcH,OAAd,EAAuBO,iBAAvB,CAtBkB;AAAA,MAsBnEO,OAtBmE,kBAsBnEA,OAtBmE;AAAA,MAsB1DC,cAtB0D,kBAsB1DA,cAtB0D;AAAA,MAsB1CC,mBAtB0C,kBAsB1CA,mBAtB0C,EAwB3E;;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,sBAA7C,EAA6D;AAC3DpB,IAAAA,OAAO,CAACqB,SAAR,CAAkB;AAChBC,MAAAA,aAAa,EAAEtB,OAAO,CAACQ,eAAR,CAAwBe,IAAxB,CAA6B,GAA7B,CADC;AAEhBC,MAAAA,kBAAkB,EAAE,sBAASjB,iBAAiB,CAACkB,MAA3B,EAAmC,UAAAd,SAAS;AAAA,eAAI,CAAC,uBAAUA,SAAS,CAACe,QAApB,CAAL;AAAA,OAA5C,CAFJ;AAGhBC,MAAAA,eAAe,EAAEX,mBAHD;AAIhBY,MAAAA,aAAa,EAAE,sBAAS5B,OAAO,CAACS,KAAR,CAAcmB,aAAd,CAA4BH,MAArC,EAA6C,UAAAI,QAAQ,EAAI;AACtE,YAAI,uBAAUA,QAAV,KAAuB,uBAAUA,QAAQ,CAACH,QAAnB,CAA3B,EAAyD;AACvD,iBAAO,KAAP;AACD;;AAED,YAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,QAAQ,CAACH,QAArB,CAAb;;AACA,YAAII,IAAI,CAACE,MAAL,KAAgB,CAAhB,IAAqBF,IAAI,CAACG,GAAL,OAAe,WAApC,IAAmD,uBAAUJ,QAAQ,CAACH,QAAT,CAAkB,WAAlB,CAAV,CAAvD,EAAkG;AAChG,iBAAO,KAAP;AACD;;AAED,eAAO,IAAP;AACD,OAXc;AAJC,KAAlB;AAiBD;;AAED,SAAO;AACLZ,IAAAA,OAAO,EAAPA,OADK;AAELH,IAAAA,SAAS,EAAEJ,iBAFN;AAGL2B,IAAAA,MAAM,EAAEnB,cAHH;AAILN,IAAAA,KAAK,EAAET,OAAO,CAACS;AAJV,GAAP;AAMD,CAnDM","sourcesContent":["import { ComponentSlotStylesResolved, ComponentVariablesObject, isDebugEnabled } from '@fluentui/styles';\nimport * as _ from 'lodash';\n\nimport { ProviderContextPrepared } from '../context';\nimport { ComponentSlotClasses, ResolveStylesOptions } from '../styles/types';\nimport { resolveVariables } from './resolveVariables';\nimport { resolveStyles } from './resolveStyles';\n\nexport type GetStylesResult = {\n  classes: ComponentSlotClasses;\n  variables: ComponentVariablesObject;\n  styles: ComponentSlotStylesResolved;\n  theme: ProviderContextPrepared['theme'];\n};\n\nexport const getStyles = (options: ResolveStylesOptions): GetStylesResult => {\n  const { primaryDisplayName, telemetry } = options;\n\n  //\n  // To compute styles we are going through three stages:\n  // - resolve variables (siteVariables => componentVariables + props.variables)\n  // - resolve styles (with resolvedVariables & props.styles & props.design)\n  // - compute classes (with resolvedStyles)\n  // - conditionally add sources for evaluating debug information to component\n\n  const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n  const resolvedVariables = resolveVariables(\n    options.allDisplayNames,\n    options.theme,\n    options.inlineStylesProps.variables,\n    options.performance.enableVariablesCaching,\n  );\n\n  if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n    telemetry.performance[primaryDisplayName].msResolveVariablesTotal += performance.now() - telemetryPartStart;\n  }\n\n  const { classes, resolvedStyles, resolvedStylesDebug } = resolveStyles(options, resolvedVariables);\n\n  // conditionally add sources for evaluating debug information to component\n  if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n    options.saveDebug({\n      componentName: options.allDisplayNames.join(':'),\n      componentVariables: _.filter(resolvedVariables._debug, variables => !_.isEmpty(variables.resolved)),\n      componentStyles: resolvedStylesDebug,\n      siteVariables: _.filter(options.theme.siteVariables._debug, siteVars => {\n        if (_.isEmpty(siteVars) || _.isEmpty(siteVars.resolved)) {\n          return false;\n        }\n\n        const keys = Object.keys(siteVars.resolved);\n        if (keys.length === 1 && keys.pop() === 'fontSizes' && _.isEmpty(siteVars.resolved['fontSizes'])) {\n          return false;\n        }\n\n        return true;\n      }),\n    });\n  }\n\n  return {\n    classes,\n    variables: resolvedVariables,\n    styles: resolvedStyles,\n    theme: options.theme,\n  };\n};\n"],"file":"getStyles.js"}