{"version":3,"sources":["hooks/useAccessibility.ts"],"names":["useAccessibility","behavior","options","actionHandlers","debugName","mapPropsToBehavior","rtl","definition","latestDefinition","React","useRef","slotHandlers","slotProps","current","getA11yProps","slotName","userProps","hasKeyDownHandlers","Boolean","keyHandlers","onKeyDown","childBehavior","childBehaviors","undefined","e","accessibilityHandler","userHandler","args","finalProps","accessibility","attributes","unstable_wrapWithFocusZone","element","focusZone","child","process","env","NODE_ENV","Children","only","createElement","FocusZone","props","as","type","isRtl","unstable_behaviorDefinition"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributesBySlot } from '@fluentui/accessibility';\nimport * as React from 'react';\n\nimport { getAccessibility } from '../accessibility/getAccessibility';\nimport { AccessibilityActionHandlers, KeyboardEventHandler, ReactAccessibilityBehavior } from '../accessibility/types';\nimport { FocusZone } from '../FocusZone/FocusZone';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\ntype UseAccessibilityOptions<Props> = {\n  actionHandlers?: AccessibilityActionHandlers;\n  debugName?: string;\n  mapPropsToBehavior?: () => Props;\n  rtl?: boolean;\n};\n\ntype UseAccessibilityResult = (<SlotProps extends Record<string, any> & UserProps>(\n  slotName: string,\n  slotProps: SlotProps,\n) => MergedProps<SlotProps>) & {\n  unstable_wrapWithFocusZone: (children: React.ReactElement) => React.ReactElement;\n  unstable_behaviorDefinition: () => ReactAccessibilityBehavior;\n};\n\ntype UserProps = {\n  onKeyDown?: KeyboardEventHandler;\n};\n\ntype MergedProps<SlotProps extends Record<string, any> = any> = SlotProps &\n  Partial<AccessibilityAttributesBySlot> &\n  UserProps;\n\nexport const useAccessibility = <Props>(\n  behavior: Accessibility<Props>,\n  options: UseAccessibilityOptions<Props> = {},\n) => {\n  const { actionHandlers, debugName = 'Undefined', mapPropsToBehavior = () => ({}), rtl = false } = options;\n\n  const definition = getAccessibility(debugName, behavior, mapPropsToBehavior(), rtl, actionHandlers);\n\n  const latestDefinition = React.useRef<ReactAccessibilityBehavior>();\n  const slotHandlers = React.useRef<Record<string, KeyboardEventHandler>>({});\n  const slotProps = React.useRef<Record<string, UserProps>>({});\n\n  useIsomorphicLayoutEffect(() => {\n    latestDefinition.current = definition;\n  });\n\n  const getA11yProps: UseAccessibilityResult = (slotName, userProps) => {\n    const hasKeyDownHandlers = Boolean(definition.keyHandlers[slotName] || userProps.onKeyDown);\n    const childBehavior = definition.childBehaviors ? definition.childBehaviors[slotName] : undefined;\n    slotProps.current[slotName] = userProps;\n\n    // We want to avoid adding event handlers until it's really needed\n    if (hasKeyDownHandlers) {\n      if (!slotHandlers.current[slotName]) {\n        slotHandlers.current[slotName] = (e, ...args) => {\n          const accessibilityHandler = latestDefinition.current?.keyHandlers[slotName]?.onKeyDown;\n          const userHandler = slotProps.current[slotName].onKeyDown;\n\n          if (accessibilityHandler) accessibilityHandler(e);\n          if (userHandler) userHandler(e, ...args);\n        };\n      }\n    } else {\n      delete slotHandlers.current[slotName];\n    }\n\n    const finalProps: MergedProps = {\n      ...(childBehavior && { accessibility: childBehavior }),\n      ...definition.attributes[slotName],\n      ...userProps,\n      onKeyDown: slotHandlers.current[slotName],\n    };\n\n    return finalProps;\n  };\n\n  // Provides an experimental handling for FocusZone definition in behaviors\n  getA11yProps.unstable_wrapWithFocusZone = (element: React.ReactElement) => {\n    if (definition.focusZone) {\n      let child: React.ReactElement = element;\n\n      if (process.env.NODE_ENV !== 'production') {\n        child = React.Children.only(element);\n      }\n\n      return React.createElement(FocusZone, {\n        ...definition.focusZone.props,\n        ...child.props,\n        as: child.type,\n        isRtl: rtl,\n      });\n    }\n\n    return element;\n  };\n\n  getA11yProps.unstable_behaviorDefinition = () => definition;\n\n  return getA11yProps;\n};\n"],"file":"useAccessibility.js"}