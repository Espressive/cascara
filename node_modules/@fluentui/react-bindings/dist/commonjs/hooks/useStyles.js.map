{"version":3,"sources":["hooks/useStyles.ts"],"names":["useStyles","displayName","options","context","className","process","env","NODE_ENV","composeOptions","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","rtl","componentStylesProps","composeProps","composeStylesProps","mapPropsToStylesPropsChain","reduce","acc","fn","debug","React","useRef","fluentUIDebug","allDisplayNames","displayNames","primaryDisplayName","componentProps","inlineStylesProps","disableAnimations","renderer","saveDebug","current","theme","performance","telemetry","classes","resolvedStyles","styles"],"mappings":";;;;;;;AAEA;;AAEA;;AAEA;;AAiDO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CACvBC,WADuB,EAEvBC,OAFuB,EAGH;AAAA;;AACpB,MAAMC,OAAO,GAAG,gCAAhB;AADoB,2BAUhBD,OAVgB,CAIlBE,SAJkB;AAAA,MAIlBA,SAJkB,mCAINC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,EAAxC,GAA6C,iBAJvC;AAAA,MAKlBC,cALkB,GAUhBN,OAVgB,CAKlBM,cALkB;AAAA,8BAUhBN,OAVgB,CAMlBO,gBANkB;AAAA,MAMlBA,gBANkB,sCAMC;AAAA,WAAO,EAAP;AAAA,GAND;AAAA,8BAUhBP,OAVgB,CAOlBQ,sBAPkB;AAAA,MAOlBA,sBAPkB,sCAOO;AAAA,WAAO,EAAP;AAAA,GAPP;AAAA,8BAUhBR,OAVgB,CAQlBS,cARkB;AAAA,MAQlBA,cARkB,sCAQD,EARC;AAAA,qBAUhBT,OAVgB,CASlBU,GATkB;AAAA,MASlBA,GATkB,6BASZ,KATY;AAWpB,MAAMC,oBAAoB,GAAGJ,gBAAgB,EAA7C,CAXoB,CAapB;;AACA,MAAMK,YAAY,qBAAQH,cAAR,EAA2BE,oBAA3B,CAAlB;AACA,MAAME,kBAAkB,GAAGP,cAAH,6CAAGA,cAAc,CAAEQ,0BAAnB,qBAAG,sBAA4CC,MAA5C,CACzB,UAACC,GAAD,EAAMC,EAAN;AAAA,6BAAmBD,GAAnB,EAA2BC,EAAE,CAACL,YAAD,CAA7B;AAAA,GADyB,EAEzB,EAFyB,CAA3B,CAfoB,CAoBpB;;AACA,MAAMM,KAAK,GAAGC,KAAK,CAACC,MAAN,CAAkD;AAAEC,IAAAA,aAAa,EAAE;AAAjB,GAAlD,CAAd;;AArBoB,mBAsBwB,2BAAU;AACpD;AACAC,IAAAA,eAAe,EAAE,CAAAhB,cAAc,QAAd,YAAAA,cAAc,CAAEiB,YAAhB,KAAgC,CAACxB,WAAD,CAFG;AAGpDG,IAAAA,SAAS,EAAE,CAAAI,cAAc,QAAd,YAAAA,cAAc,CAAEJ,SAAhB,KAA6BA,SAHY;AAIpDsB,IAAAA,kBAAkB,EAAE,CAAAlB,cAAc,QAAd,YAAAA,cAAc,CAAEP,WAAhB,KAA+BA,WAJC;AAKpD0B,IAAAA,cAAc,oBACTd,oBADS,EAETE,kBAFS,CALsC;AASpDa,IAAAA,iBAAiB,EAAElB,sBAAsB,EATW;AAWpD;AACAmB,IAAAA,iBAAiB,EAAE1B,OAAO,CAAC0B,iBAZyB;AAapDC,IAAAA,QAAQ,EAAE3B,OAAO,CAAC2B,QAbkC;AAcpDlB,IAAAA,GAAG,EAAHA,GAdoD;AAepDmB,IAAAA,SAAS,EAAE,mBAAAR,aAAa;AAAA,aAAKH,KAAK,CAACY,OAAN,GAAgB;AAAET,QAAAA,aAAa,EAAbA;AAAF,OAArB;AAAA,KAf4B;AAgBpDU,IAAAA,KAAK,EAAE9B,OAAO,CAAC8B,KAhBqC;AAiBpDC,IAAAA,WAAW,EAAE/B,OAAO,CAAC+B,WAjB+B;AAkBpDC,IAAAA,SAAS,EAAEhC,OAAO,CAACgC;AAlBiC,GAAV,CAtBxB;AAAA,MAsBZC,OAtBY,cAsBZA,OAtBY;AAAA,MAsBKC,cAtBL,cAsBHC,MAtBG;;AA2CpB,SAAO;AAAEF,IAAAA,OAAO,EAAPA,OAAF;AAAWE,IAAAA,MAAM,EAAED;AAAnB,GAAP;AACD,CA/CM","sourcesContent":["import { ComposePreparedOptions } from '../compose';\nimport { ComponentSlotStyle, ComponentSlotStylesResolved, ComponentVariablesInput, DebugData } from '@fluentui/styles';\nimport * as React from 'react';\n\nimport { useFluentContext } from '../context';\nimport { ComponentDesignProp, ComponentSlotClasses, PrimitiveProps } from '../styles/types';\nimport { getStyles } from '../styles/getStyles';\n\ntype UseStylesOptions<StyleProps extends PrimitiveProps> = {\n  /** A classname that will be added by default to all instances of a component on the `root` slot. */\n  className?: string;\n\n  /** An options from compose(), should be used only if component was created by `compose()`. */\n  composeOptions?: ComposePreparedOptions;\n\n  /**\n   * A mapping from component's props to styles functions props. Can be only primitive types as they will be used for\n   * cache keys.\n   */\n  mapPropsToStyles?: () => StyleProps;\n\n  /**\n   * A set props of that contain mapping for props that perform inline styles overrides, for example `styles` or\n   * `variables`.\n   */\n  mapPropsToInlineStyles?: () => InlineStyleProps<any>;\n\n  /**\n   * All components props, should be used only if component was created by `compose()`. Will be replaced in future with\n   * better approach.\n   */\n  unstable_props?: Record<string, any>;\n\n  /** A current mode for text direction (ltr or rtl). */\n  rtl?: boolean;\n};\n\nexport type UseStylesResult = {\n  classes: ComponentSlotClasses;\n  styles: ComponentSlotStylesResolved;\n};\n\ntype InlineStyleProps<ComponentProps> = {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  design?: ComponentDesignProp;\n\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle<ComponentProps, any>; // TODO: see if we can improve it\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n};\n\nexport const useStyles = <StyleProps extends PrimitiveProps>(\n  displayName: string,\n  options: UseStylesOptions<StyleProps>,\n): UseStylesResult => {\n  const context = useFluentContext();\n\n  const {\n    className = process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',\n    composeOptions,\n    mapPropsToStyles = () => ({} as StyleProps),\n    mapPropsToInlineStyles = () => ({} as InlineStyleProps<any>),\n    unstable_props = {},\n    rtl = false,\n  } = options;\n  const componentStylesProps = mapPropsToStyles();\n\n  // `composeProps` should include all props including stylesProps as they can contain state\n  const composeProps = { ...unstable_props, ...componentStylesProps };\n  const composeStylesProps = composeOptions?.mapPropsToStylesPropsChain?.reduce(\n    (acc, fn) => ({ ...acc, ...fn(composeProps) }),\n    {},\n  );\n\n  // Stores debug information for component.\n  const debug = React.useRef<{ fluentUIDebug: DebugData | null }>({ fluentUIDebug: null });\n  const { classes, styles: resolvedStyles } = getStyles({\n    // Input values\n    allDisplayNames: composeOptions?.displayNames || [displayName],\n    className: composeOptions?.className || className,\n    primaryDisplayName: composeOptions?.displayName || displayName,\n    componentProps: {\n      ...componentStylesProps,\n      ...composeStylesProps,\n    },\n    inlineStylesProps: mapPropsToInlineStyles(),\n\n    // Context values\n    disableAnimations: context.disableAnimations,\n    renderer: context.renderer,\n    rtl,\n    saveDebug: fluentUIDebug => (debug.current = { fluentUIDebug }),\n    theme: context.theme,\n    performance: context.performance,\n    telemetry: context.telemetry,\n  });\n\n  return { classes, styles: resolvedStyles };\n};\n"],"file":"useStyles.js"}