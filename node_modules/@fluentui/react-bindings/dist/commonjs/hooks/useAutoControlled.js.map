{"version":3,"sources":["hooks/useAutoControlled.ts"],"names":["isUndefined","value","useAutoControlled","options","React","useState","defaultValue","initialValue","stateValue","setStateValue","valueRef","useRef","useEffect","current","setValue","useCallback","newState"],"mappings":";;;;;;;AAAA;;AASA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAAgB,OAAOA,KAAP,KAAiB,WAAjC;AAAA,CAApB;AAEA;AACA;AACA;AACA;;;AACO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BC,OAD+B,EAE0B;AAAA,wBACrBC,KAAK,CAACC,QAAN,CAClCL,WAAW,CAACG,OAAO,CAACG,YAAT,CAAX,GAAqCH,OAAO,CAACI,YAA7C,GAAsEJ,OAAO,CAACG,YAD5C,CADqB;AAAA,MAClDE,UADkD;AAAA,MACtCC,aADsC;;AAKzD,MAAMR,KAAK,GAAGD,WAAW,CAACG,OAAO,CAACF,KAAT,CAAX,GAA6BO,UAA7B,GAA0CL,OAAO,CAACF,KAAhE,CALyD,CAMzD;;AACA,MAAMS,QAAQ,GAAGN,KAAK,CAACO,MAAN,CAAaV,KAAb,CAAjB;AAEAG,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAM;AACpBF,IAAAA,QAAQ,CAACG,OAAT,GAAmBZ,KAAnB;AACD,GAFD,EAEG,CAACA,KAAD,CAFH;AAIA,MAAMa,QAAQ,GAAGV,KAAK,CAACW,WAAN,CAAkB,UAACC,QAAD,EAAqB;AACtD,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC;AACA;AACAN,MAAAA,QAAQ,CAACG,OAAT,GAAmBG,QAAQ,CAACN,QAAQ,CAACG,OAAV,CAA3B;AACD,KAJD,MAIO;AACLH,MAAAA,QAAQ,CAACG,OAAT,GAAmBG,QAAnB;AACD;;AAEDP,IAAAA,aAAa,CAACC,QAAQ,CAACG,OAAV,CAAb;AACD,GAVgB,EAUd,EAVc,CAAjB;AAYA,SAAO,CAACZ,KAAD,EAAQa,QAAR,CAAP;AACD,CA5BM","sourcesContent":["import * as React from 'react';\n\ntype UseAutoControlledOptions<Value> = {\n  defaultValue: Value;\n  value: Value;\n\n  initialValue?: Value;\n};\n\nconst isUndefined = (value: any) => typeof value === 'undefined';\n\n/**\n * Returns a stateful value, and a function to update it. Mimics the `useState()` React Hook\n * signature.\n */\nexport const useAutoControlled = <Value>(\n  options: UseAutoControlledOptions<Value>,\n): [Value, React.Dispatch<React.SetStateAction<Value>>] => {\n  const [stateValue, setStateValue] = React.useState<Value>(\n    isUndefined(options.defaultValue) ? (options.initialValue as Value) : options.defaultValue,\n  );\n\n  const value = isUndefined(options.value) ? stateValue : options.value;\n  // Used to avoid dependencies in \"setValue\"\n  const valueRef = React.useRef(value);\n\n  React.useEffect(() => {\n    valueRef.current = value;\n  }, [value]);\n\n  const setValue = React.useCallback((newState: Value) => {\n    if (typeof newState === 'function') {\n      // Handles functional updates\n      // https://reactjs.org/docs/hooks-reference.html#functional-updates\n      valueRef.current = newState(valueRef.current);\n    } else {\n      valueRef.current = newState;\n    }\n\n    setStateValue(valueRef.current);\n  }, []);\n\n  return [value, setValue];\n};\n"],"file":"useAutoControlled.js"}