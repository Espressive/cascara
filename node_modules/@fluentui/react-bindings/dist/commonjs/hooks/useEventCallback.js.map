{"version":3,"sources":["hooks/useEventCallback.ts"],"names":["useEventCallback","fn","callbackRef","React","useRef","Error","current","useCallback","callback"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAiCC,EAAjC,EAAmE;AACjG,MAAMC,WAAW,GAAGC,KAAK,CAACC,MAAN,CAAwB,YAAM;AAChD,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD,GAFmB,CAApB;AAIA,4DAA0B,YAAM;AAC9BH,IAAAA,WAAW,CAACI,OAAZ,GAAsBL,EAAtB;AACD,GAFD,EAEG,CAACA,EAAD,CAFH;AAIA,SAAOE,KAAK,CAACI,WAAN,CACL,YAAmB;AACjB,QAAMC,QAAQ,GAAGN,WAAW,CAACI,OAA7B;AACA,WAAOE,QAAQ,MAAR,mBAAP;AACD,GAJI,EAKL,CAACN,WAAD,CALK,CAAP;AAOD,CAhBM","sourcesContent":["import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\n/**\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when\n * e.g. user props are depedencies which could change on every render\n * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently\n *\n * This should not be used often, but can be a useful re-render optimization since the callback is a ref and\n * will not be invalidated between rerenders\n *\n * @param fn - The callback function that will be used\n */\nexport const useEventCallback = <Args extends unknown[], Return>(fn: (...args: Args) => Return) => {\n  const callbackRef = React.useRef<typeof fn>(() => {\n    throw new Error('Cannot call an event handler while rendering');\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    callbackRef.current = fn;\n  }, [fn]);\n\n  return React.useCallback(\n    (...args: Args) => {\n      const callback = callbackRef.current;\n      return callback(...args);\n    },\n    [callbackRef],\n  );\n};\n"],"file":"useEventCallback.js"}