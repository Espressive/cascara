{"version":3,"sources":["hooks/useStateManager.ts"],"names":["getDefinedProps","props","definedProps","Object","keys","forEach","propName","undefined","useStateManager","managerFactory","options","mapPropsToInitialState","mapPropsToState","sideEffects","latestActions","React","useMemo","latestManager","useRef","useReducer","c","forceUpdate","initialState","current","state","actions","assign","process","env","NODE_ENV","isExtensible","preventExtensions","freeze"],"mappings":";;;;;;;AACA;;AAaA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAoCC,KAApC,EAAqE;AAC3F,MAAMC,YAA4B,GAAG,EAArC;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2B,UAAAC,QAAQ,EAAI;AACrC,QAAIL,KAAK,CAACK,QAAD,CAAL,KAAoBC,SAAxB,EAAmC;AACXL,MAAAA,YAAtB,CAAoCI,QAApC,IAAgDL,KAAK,CAACK,QAAD,CAArD;AACD;AACF,GAJD;AAMA,SAAOJ,YAAP;AACD,CAVD;;AAYO,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAC7BC,cAD6B,EAE7BC,OAF6B,EAGa;AAAA,MAD1CA,OAC0C;AAD1CA,IAAAA,OAC0C,GADD,EACC;AAAA;;AAAA,iBAKtCA,OALsC;AAAA,uCAExCC,sBAFwC;AAAA,MAExCA,sBAFwC,sCAEf;AAAA,WAAO,EAAP;AAAA,GAFe;AAAA,uCAGxCC,eAHwC;AAAA,MAGxCA,eAHwC,sCAGtB;AAAA,WAAO,EAAP;AAAA,GAHsB;AAAA,sCAIxCC,WAJwC;AAAA,MAIxCA,WAJwC,qCAI1B,EAJ0B;AAM1C,MAAMC,aAAa,GAAGC,KAAK,CAACC,OAAN,CACpB;AAAA,WAAO,EAAP;AAAA,GADoB,EAEpB;AACA;AACA;AACA,GAACP,cAAD,CALoB,CAAtB;AAOA,MAAMQ,aAAa,GAAGF,KAAK,CAACG,MAAN,CAA6C,IAA7C,CAAtB,CAb0C,CAe1C;;AAf0C,aAgBlBH,KAAK,CAACI,UAAN,CAAiB,UAACC,CAAD;AAAA,WAAeA,CAAC,GAAG,CAAnB;AAAA,GAAjB,EAAuC,CAAvC,CAhBkB;AAAA,MAgBjCC,WAhBiC,YAkB1C;;;AACA,MAAMC,YAAY,GAAGL,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACM,OAAd,CAAsBC,KAA9C,GAAsDxB,eAAe,CAACW,sBAAsB,EAAvB,CAA1F;AAEAM,EAAAA,aAAa,CAACM,OAAd,GAAwBd,cAAc,CAAC;AACrC;AACAgB,IAAAA,OAAO,EAAE,EAF4B;AAGrCD,IAAAA,KAAK,oBAAOF,YAAP,EAAwBtB,eAAe,CAACY,eAAe,EAAhB,CAAvC,CAHgC;AAIrCC,IAAAA,WAAW,YACNA,WADM,GAET;AACA;AACA;AAAA,aAAMQ,WAAW,EAAjB;AAAA,KAJS;AAJ0B,GAAD,CAAtC,CArB0C,CAiC1C;AACA;;AACAlB,EAAAA,MAAM,CAACuB,MAAP,CAAcZ,aAAd,EAA6BG,aAAa,CAACM,OAAd,CAAsBE,OAAnD,EAnC0C,CAqC1C;AACA;;AACA,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI1B,MAAM,CAAC2B,YAAP,CAAoBhB,aAApB,CAAJ,EAAwCX,MAAM,CAAC4B,iBAAP,CAAyBjB,aAAzB;AACzC,GAzCyC,CA2C1C;AACA;AACA;AACA;AACA;;;AAEA,SAAO;AACLU,IAAAA,KAAK,EACHG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,aAAa,CAACM,OAAd,CAAsBC,KAA9D,GAAsErB,MAAM,CAAC6B,MAAP,CAAcf,aAAa,CAACM,OAAd,CAAsBC,KAApC,CAFnE;AAGLC,IAAAA,OAAO,EAAEX;AAHJ,GAAP;AAKD,CAzDM","sourcesContent":["import { AnyAction, EnhancedActions, Manager, ManagerFactory, SideEffect } from '@fluentui/state';\nimport * as React from 'react';\n\ntype UseStateManagerOptions<State> = {\n  mapPropsToInitialState?: () => Partial<State>;\n  mapPropsToState?: () => Partial<State>;\n  sideEffects?: SideEffect<State>[];\n};\n\ntype UseStateManagerResult<State, Actions> = {\n  state: Readonly<State>;\n  actions: Readonly<Actions>;\n};\n\nconst getDefinedProps = <Props extends Record<string, any>>(props: Props): Partial<Props> => {\n  const definedProps: Partial<Props> = {};\n\n  Object.keys(props).forEach(propName => {\n    if (props[propName] !== undefined) {\n      (<Record<string, any>>definedProps)[propName] = props[propName];\n    }\n  });\n\n  return definedProps;\n};\n\nexport const useStateManager = <State extends Record<string, any>, Actions extends Record<string, AnyAction>>(\n  managerFactory: ManagerFactory<State, Actions>,\n  options: UseStateManagerOptions<State> = {},\n): UseStateManagerResult<State, Actions> => {\n  const {\n    mapPropsToInitialState = () => ({} as Partial<State>),\n    mapPropsToState = () => ({} as Partial<State>),\n    sideEffects = [],\n  } = options;\n  const latestActions = React.useMemo<Actions>(\n    () => ({} as Actions),\n    // The change of `managerFactory` should trigger recreation of `latestActions` as they can be different between\n    // managers\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [managerFactory],\n  );\n  const latestManager = React.useRef<Manager<State, Actions> | null>(null);\n\n  // Heads up! forceUpdate() is used only for triggering rerenders, stateManager is SSOT\n  const [, forceUpdate] = React.useReducer((c: number) => c + 1, 0) as [never, () => void];\n\n  // If manager exists, the current state will be used\n  const initialState = latestManager.current ? latestManager.current.state : getDefinedProps(mapPropsToInitialState());\n\n  latestManager.current = managerFactory({\n    // Factory has already configured actions\n    actions: {} as EnhancedActions<State, Actions>,\n    state: { ...initialState, ...getDefinedProps(mapPropsToState()) },\n    sideEffects: [\n      ...sideEffects,\n      // `sideEffect` is called with two arguments, but hooks don't support the second callback\n      // argument\n      () => forceUpdate(),\n    ],\n  });\n\n  // We need to keep the same reference to an object with actions to allow usage them as\n  // a dependency in useCallback() hook\n  Object.assign(latestActions, latestManager.current.actions);\n\n  // For development environments we disallow ability to extend object with other properties to\n  // avoid misusage\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.isExtensible(latestActions)) Object.preventExtensions(latestActions);\n  }\n\n  // We need to pass exactly `manager.state` to provide the same state object during the same render\n  // frame.\n  // It keeps behavior consistency between React state tools and our managers\n  // https://github.com/facebook/react/issues/11527#issuecomment-360199710\n  // Object.freeze() is used only in dev-mode to avoid usage mistakes\n\n  return {\n    state:\n      process.env.NODE_ENV === 'production' ? latestManager.current.state : Object.freeze(latestManager.current.state),\n    actions: latestActions,\n  };\n};\n"],"file":"useStateManager.js"}