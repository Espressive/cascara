{"version":3,"sources":["hooks/useCallbackRef.ts"],"names":["useCallbackRef","initialValue","callback","skipInitialResolve","isFirst","React","useRef","useState","value","facade","current","ref","last"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,CACLC,YADK,EAELC,QAFK,EAGLC,kBAHK,EAI6B;AAClC,MAAMC,OAAO,GAAGC,KAAK,CAACC,MAAN,CAAa,IAAb,CAAhB;;AADkC,wBAEpBD,KAAK,CAACE,QAAN,CAAe;AAAA,WAAO;AAClC;AACAC,MAAAA,KAAK,EAAEP,YAF2B;AAGlC;AACAC,MAAAA,QAAQ,EAARA,QAJkC;AAKlC;AACAO,MAAAA,MAAM,EAAE;AACN,YAAIC,OAAJ,GAAc;AACZ,iBAAOC,GAAG,CAACH,KAAX;AACD,SAHK;;AAIN,YAAIE,OAAJ,CAAYF,KAAZ,EAAmB;AACjB,cAAMI,IAAI,GAAGD,GAAG,CAACH,KAAjB;;AAEA,cAAII,IAAI,KAAKJ,KAAb,EAAoB;AAClBG,YAAAA,GAAG,CAACH,KAAJ,GAAYA,KAAZ;;AAEA,gBAAIL,kBAAkB,IAAIC,OAAO,CAACM,OAAlC,EAA2C;AACzC;AACD;;AAEDC,YAAAA,GAAG,CAACT,QAAJ,CAAaM,KAAb,EAAoBI,IAApB;AACD;AACF;;AAhBK;AAN0B,KAAP;AAAA,GAAf,CAFoB;AAAA,MAE3BD,GAF2B;;AA4BlC,4DAA0B,YAAM;AAC9BP,IAAAA,OAAO,CAACM,OAAR,GAAkB,KAAlB;AACD,GAFD,EAEG,EAFH,EA5BkC,CAgClC;;AACAC,EAAAA,GAAG,CAACT,QAAJ,GAAeA,QAAf;AAEA,SAAOS,GAAG,CAACF,MAAX;AACD","sourcesContent":["import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\n/**\n * Creates a MutableRef with ref change callback. Is useful as React.useRef() doesn't notify you when its content\n * changes and mutating the .current property doesn't cause a re-render. An opt-out will be use a callback ref via\n * React.useState(), but it will cause re-renders always.\n *\n * @param initialValue - initial ref value\n * @param {Function} callback - a callback to run when value changes\n * @param {Boolean} skipInitialResolve - a flag to skip an initial ref report\n *\n * @example\n * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);\n * ref.current = 1;\n * // prints 0 -> 1\n *\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref\n * @returns {MutableRefObject}\n */\nexport function useCallbackRef<T>(\n  initialValue: T | null,\n  callback: (newValue: T | null, lastValue: T | null) => void,\n  skipInitialResolve?: boolean,\n): React.MutableRefObject<T | null> {\n  const isFirst = React.useRef(true);\n  const [ref] = React.useState(() => ({\n    // value\n    value: initialValue,\n    // last callback\n    callback,\n    // \"memoized\" public interface\n    facade: {\n      get current() {\n        return ref.value;\n      },\n      set current(value) {\n        const last = ref.value;\n\n        if (last !== value) {\n          ref.value = value;\n\n          if (skipInitialResolve && isFirst.current) {\n            return;\n          }\n\n          ref.callback(value, last);\n        }\n      },\n    },\n  }));\n\n  useIsomorphicLayoutEffect(() => {\n    isFirst.current = false;\n  }, []);\n\n  // update callback\n  ref.callback = callback;\n\n  return ref.facade;\n}\n"],"file":"useCallbackRef.js"}