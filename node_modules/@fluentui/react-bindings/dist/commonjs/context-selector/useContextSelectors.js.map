{"version":3,"sources":["context-selector/useContextSelectors.ts"],"names":["useContextSelectors","context","selectors","contextValue","React","useContext","value","current","version","listeners","selected","Object","keys","forEach","key","useReducer","prevState","payload","stateHasNotChanged","every","is","statePayloadHasChanged","some","nextSelected","selectedHasNotChanged","e","state","dispatch","hasSelectedValuesUpdates","find","undefined","push","index","indexOf","splice"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Context, ContextSelector, ContextVersion, ContextValues } from './types';\nimport { useIsomorphicLayoutEffect } from './utils';\n\n/**\n * This hook returns context selected value by selectors.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referencially changed.\n */\nexport const useContextSelectors = <\n  Value extends Record<string, any>,\n  Properties extends string,\n  Selectors extends Record<Properties, ContextSelector<Value, SelectedValue>>,\n  SelectedValue extends any\n>(\n  context: Context<Value>,\n  selectors: Selectors,\n): Record<Properties, SelectedValue> => {\n  const contextValue = React.useContext((context as unknown) as Context<ContextValues<Value>>);\n\n  const {\n    value: { current: value },\n    version: { current: version },\n    listeners,\n  } = contextValue;\n\n  const selected = {} as Record<Properties, SelectedValue>;\n  Object.keys(selectors).forEach((key: Properties) => {\n    selected[key] = selectors[key](value);\n  });\n\n  const [state, dispatch] = React.useReducer(\n    (\n      prevState: readonly [\n        Value /* contextValue */,\n        Record<Properties, SelectedValue> /* { [key]: selector(value) } */,\n      ],\n      payload:\n        | undefined // undefined from render below\n        | readonly [ContextVersion, Value], // from provider effect\n    ) => {\n      if (!payload) {\n        // early bail out when is dispatched during render\n        return [value, selected] as const;\n      }\n\n      if (payload[0] <= version) {\n        const stateHasNotChanged = Object.keys(selectors).every((key: Properties) =>\n          Object.is((prevState[1] as { [key: string]: any })[key] as SelectedValue, selected[key]),\n        );\n\n        if (stateHasNotChanged) {\n          return prevState; // bail out\n        }\n\n        return [value, selected] as const;\n      }\n\n      try {\n        const statePayloadHasChanged = Object.keys(prevState[0]).some((key: Properties) => {\n          return !Object.is(prevState[0] /* previous contextValue */[key], payload[1] /* current contextValue */[key]);\n        });\n\n        if (!statePayloadHasChanged) {\n          return prevState;\n        }\n\n        const nextSelected = {} as Record<Properties, SelectedValue>;\n        Object.keys(selectors).forEach((key: Properties) => {\n          nextSelected[key] = selectors[key](payload[1]);\n        });\n\n        const selectedHasNotChanged = Object.keys(selectors).every((key: Properties) => {\n          return Object.is(prevState[1][key] /* previous { [key]: selector(value) } */, nextSelected[key]);\n        });\n\n        if (selectedHasNotChanged) {\n          return prevState;\n        }\n\n        return [payload[1], nextSelected] as const;\n      } catch (e) {\n        // ignored (stale props or some other reason)\n      }\n      return [...prevState] as const; // schedule update\n    },\n    [value, selected] as const,\n  );\n\n  // schedule re-render when selected context is updated\n  const hasSelectedValuesUpdates = Object.keys(selectors).find(\n    (key: Properties) => !Object.is(state[1] /* previous { [key]: selector(value) } */[key], selected[key]),\n  );\n  if (hasSelectedValuesUpdates !== undefined) {\n    dispatch(undefined);\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    listeners.push(dispatch);\n\n    return () => {\n      const index = listeners.indexOf(dispatch);\n      listeners.splice(index, 1);\n    };\n  }, [listeners]);\n\n  return state[1] as Record<Properties, SelectedValue>;\n};\n"],"file":"useContextSelectors.js"}