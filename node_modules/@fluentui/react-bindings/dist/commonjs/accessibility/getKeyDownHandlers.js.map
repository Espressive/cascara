{"version":3,"sources":["accessibility/getKeyDownHandlers.ts"],"names":["rtlKeyMap","keyboardKey","ArrowRight","ArrowLeft","getKeyDownHandlers","componentActionHandlers","behaviorActions","isRtlEnabled","slotKeyHandlers","componentHandlerNames","Object","keys","forEach","slotName","behaviorSlotActions","handledActions","filter","actionName","slotAction","actionHasKeyCombinations","Array","isArray","keyCombinations","length","actionHandledByComponent","indexOf","onKeyDown","event","map","keyCombination","keyToRtlKey","keyCode"],"mappings":";;;;;AAAA;;AAGA;;;;AAGA,IAAMA,SAAiC,gCACpCC,2BAAYC,UADwB,IACXD,2BAAYE,SADD,aAEpCF,2BAAYE,SAFwB,IAEZF,2BAAYC,UAFA,aAAvC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,uBADgC,EAEhCC,eAFgC,EAGhCC,YAHgC,EAIH;AAC7B,MAAMC,eAAyC,GAAG,EAAlD;;AAEA,MAAI,CAACH,uBAAD,IAA4B,CAACC,eAAjC,EAAkD;AAChD,WAAOE,eAAP;AACD;;AAED,MAAMC,qBAAqB,GAAGC,MAAM,CAACC,IAAP,CAAYN,uBAAZ,CAA9B;AAEAK,EAAAA,MAAM,CAACC,IAAP,CAAYL,eAAZ,EAA6BM,OAA7B,CAAqC,UAAAC,QAAQ,EAAI;AAC/C,QAAMC,mBAAmB,GAAGR,eAAe,CAACO,QAAD,CAA3C;AACA,QAAME,cAAc,GAAGL,MAAM,CAACC,IAAP,CAAYG,mBAAZ,EAAiCE,MAAjC,CAAwC,UAAAC,UAAU,EAAI;AAC3E,UAAMC,UAAU,GAAGJ,mBAAmB,CAACG,UAAD,CAAtC;AAEA,UAAME,wBAAwB,GAC5BC,KAAK,CAACC,OAAN,CAAcH,UAAU,CAACI,eAAzB,KAA6CJ,UAAU,CAACI,eAAX,CAA2BC,MAA3B,GAAoC,CADnF;AAEA,UAAMC,wBAAwB,GAAGf,qBAAqB,CAACgB,OAAtB,CAA8BR,UAA9B,MAA8C,CAAC,CAAhF;AAEA,aAAOE,wBAAwB,IAAIK,wBAAnC;AACD,KARsB,CAAvB;;AAUA,QAAIT,cAAc,CAACQ,MAAf,GAAwB,CAA5B,EAA+B;AAC7Bf,MAAAA,eAAe,CAACK,QAAD,CAAf,GAA4B;AAC1Ba,QAAAA,SAAS,EAAE,mBAACC,KAAD,EAAgC;AACzCZ,UAAAA,cAAc,CAACH,OAAf,CAAuB,UAAAK,UAAU,EAAI;AACnC,gBAAIK,eAAe,GAAGR,mBAAmB,CAACG,UAAD,CAAnB,CAAgCK,eAAtD;;AAEA,gBAAIA,eAAJ,EAAqB;AACnB,kBAAIf,YAAJ,EAAkB;AAChBe,gBAAAA,eAAe,GAAGA,eAAe,CAACM,GAAhB,CAAoB,UAAAC,cAAc,EAAI;AACtD,sBAAMC,WAAW,GAAG9B,SAAS,CAAC6B,cAAc,CAACE,OAAhB,CAA7B;;AACA,sBAAID,WAAJ,EAAiB;AACfD,oBAAAA,cAAc,CAACE,OAAf,GAAyBD,WAAzB;AACD;;AACD,yBAAOD,cAAP;AACD,iBANiB,CAAlB;AAOD;;AAED,kBAAI,4CAAmBF,KAAnB,EAA0BL,eAA1B,CAAJ,EAAgD;AAC9CjB,gBAAAA,uBAAuB,CAACY,UAAD,CAAvB,CAAoCU,KAApC;AACD;AACF;AACF,WAlBD;AAmBD;AArByB,OAA5B;AAuBD;AACF,GArCD;AAuCA,SAAOnB,eAAP;AACD,CArDM","sourcesContent":["import { KeyActions, keyboardKey } from '@fluentui/accessibility';\nimport * as React from 'react';\n\nimport { shouldHandleOnKeys } from './shouldHandleOnKeys';\nimport { AccessibilityActionHandlers, AccessibilityKeyHandlers } from './types';\n\nconst rtlKeyMap: Record<number, number> = {\n  [keyboardKey.ArrowRight]: keyboardKey.ArrowLeft,\n  [keyboardKey.ArrowLeft]: keyboardKey.ArrowRight,\n};\n\n/**\n * Assigns onKeyDown handler to the slot element, based on Component's actions\n * and keys mappings defined in Accessibility behavior\n * @param {AccessibilityActionHandlers} componentActionHandlers Actions handlers defined in a component.\n * @param {KeyActions} behaviorActions Mappings of actions and keys defined in Accessibility behavior.\n * @param {boolean} isRtlEnabled Indicates if Left and Right arrow keys should be swapped in RTL mode.\n */\nexport const getKeyDownHandlers = (\n  componentActionHandlers: AccessibilityActionHandlers,\n  behaviorActions: KeyActions,\n  isRtlEnabled?: boolean,\n): AccessibilityKeyHandlers => {\n  const slotKeyHandlers: AccessibilityKeyHandlers = {};\n\n  if (!componentActionHandlers || !behaviorActions) {\n    return slotKeyHandlers;\n  }\n\n  const componentHandlerNames = Object.keys(componentActionHandlers);\n\n  Object.keys(behaviorActions).forEach(slotName => {\n    const behaviorSlotActions = behaviorActions[slotName];\n    const handledActions = Object.keys(behaviorSlotActions).filter(actionName => {\n      const slotAction = behaviorSlotActions[actionName];\n\n      const actionHasKeyCombinations =\n        Array.isArray(slotAction.keyCombinations) && slotAction.keyCombinations.length > 0;\n      const actionHandledByComponent = componentHandlerNames.indexOf(actionName) !== -1;\n\n      return actionHasKeyCombinations && actionHandledByComponent;\n    });\n\n    if (handledActions.length > 0) {\n      slotKeyHandlers[slotName] = {\n        onKeyDown: (event: React.KeyboardEvent) => {\n          handledActions.forEach(actionName => {\n            let keyCombinations = behaviorSlotActions[actionName].keyCombinations;\n\n            if (keyCombinations) {\n              if (isRtlEnabled) {\n                keyCombinations = keyCombinations.map(keyCombination => {\n                  const keyToRtlKey = rtlKeyMap[keyCombination.keyCode];\n                  if (keyToRtlKey) {\n                    keyCombination.keyCode = keyToRtlKey;\n                  }\n                  return keyCombination;\n                });\n              }\n\n              if (shouldHandleOnKeys(event, keyCombinations)) {\n                componentActionHandlers[actionName](event);\n              }\n            }\n          });\n        },\n      };\n    }\n  });\n\n  return slotKeyHandlers;\n};\n"],"file":"getKeyDownHandlers.js"}