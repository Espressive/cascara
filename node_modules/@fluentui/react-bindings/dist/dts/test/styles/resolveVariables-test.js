"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
var resolveVariables_1 = require("../../src/styles/resolveVariables");
var siteVariables = tslib_1.__assign(tslib_1.__assign({}, styles_1.emptyTheme.siteVariables), { brand: 'blue' });
var testVariables = function (siteVariables) {
    if (siteVariables === void 0) { siteVariables = styles_1.emptyTheme.siteVariables; }
    return ({
        backgroundColor: siteVariables.brand,
    });
};
var createTheme = function (componentVariables) { return (tslib_1.__assign(tslib_1.__assign({}, styles_1.emptyTheme), { siteVariables: siteVariables, componentVariables: tslib_1.__assign({ Test: testVariables }, componentVariables) })); };
describe('resolveVariables', function () {
    test('resolved variables', function () {
        var variables = resolveVariables_1.resolveVariables(['Test'], createTheme(), {}, false);
        expect(variables).toMatchObject({ backgroundColor: 'blue' });
    });
    test('merges theme with input variables', function () {
        var propsVariables = function () { return ({
            color: 'red',
        }); };
        var variables = resolveVariables_1.resolveVariables(['Test'], createTheme(), propsVariables, false);
        expect(variables).toMatchObject({ backgroundColor: 'blue', color: 'red' });
    });
    test("allows input variables to override theme's", function () {
        var propsVariables = {
            backgroundColor: 'green',
        };
        var variables = resolveVariables_1.resolveVariables(['Test'], createTheme(), propsVariables, false);
        expect(variables).toMatchObject({ backgroundColor: 'green' });
    });
    test('avoids merging if variables are undefined', function () {
        var theme = createTheme();
        var variables = resolveVariables_1.resolveVariables(['Test'], theme, undefined, false);
        expect(variables).toMatchObject({ backgroundColor: 'blue' });
    });
    test('avoids merging for multiple display names if variables are undefined', function () {
        var theme = createTheme({ Foo: testVariables, Bar: testVariables });
        var variables = resolveVariables_1.resolveVariables(['Foo', 'Bar'], theme, undefined, false);
        expect(variables).toMatchObject({ backgroundColor: 'blue' });
    });
    describe('enabledVariablesCaching', function () {
        test('caches resolved variables', function () {
            var fooVariables = jest.fn().mockReturnValue({ backgroundColor: 'blue' });
            var theme = createTheme({ Foo: fooVariables });
            var variables = resolveVariables_1.resolveVariables(['Foo'], theme, {}, true);
            var secondVariables = resolveVariables_1.resolveVariables(['Foo'], theme, {}, true);
            expect(variables).toMatchObject(secondVariables);
            expect(fooVariables).toHaveBeenCalledTimes(1);
        });
        test('omits usage of undefined variables', function () {
            var fooVariables = jest.fn().mockReturnValue({ content: 'foo' });
            var theme = createTheme({ Foo: fooVariables, Bar: undefined });
            expect(resolveVariables_1.resolveVariables(['Foo', 'Bar'], theme, {}, true)).toMatchObject({ content: 'foo' });
            expect(fooVariables).toHaveBeenCalledTimes(1);
        });
        test('handles multiple displayNames', function () {
            var fooVariables = jest.fn().mockReturnValue({ backgroundColor: 'blue', borderColor: 'black' });
            var barVariables = jest.fn().mockReturnValue({ backgroundColor: 'green', color: 'red' });
            var theme = createTheme({ Foo: fooVariables, Bar: barVariables });
            expect(resolveVariables_1.resolveVariables(['Foo', 'Bar'], theme, {}, true)).toMatchObject({
                backgroundColor: 'green',
                borderColor: 'black',
                color: 'red',
            });
            // Runs to check cache
            _.times(3, function () { return resolveVariables_1.resolveVariables(['Foo', 'Bar'], theme, {}, true); });
            expect(fooVariables).toHaveBeenCalledTimes(1);
            expect(barVariables).toHaveBeenCalledTimes(1);
        });
        test('considers displayName while caching resolved variables', function () {
            var fooVariables = jest.fn().mockReturnValue({ backgroundColor: 'blue' });
            var barVariables = jest.fn().mockReturnValue({ color: 'red' });
            var theme = createTheme({ Foo: fooVariables, Bar: barVariables });
            var variables = resolveVariables_1.resolveVariables(['Foo'], theme, {}, true);
            var secondVariables = resolveVariables_1.resolveVariables(['Bar'], theme, {}, true);
            expect(variables).toMatchObject({ backgroundColor: 'blue' });
            expect(secondVariables).toMatchObject({ color: 'red' });
            expect(fooVariables).toHaveBeenCalledTimes(1);
            expect(barVariables).toHaveBeenCalledTimes(1);
        });
        test('considers theme while caching resolved variables', function () {
            var fooVariables = jest.fn().mockReturnValue({ backgroundColor: 'blue' });
            var theme = createTheme({ Foo: fooVariables });
            var secondTheme = createTheme({ Foo: fooVariables });
            var variables = resolveVariables_1.resolveVariables(['Foo'], theme, {}, true);
            var secondVariables = resolveVariables_1.resolveVariables(['Foo'], secondTheme, {}, true);
            expect(variables).toMatchObject({ backgroundColor: 'blue' });
            expect(secondVariables).toMatchObject({ backgroundColor: 'blue' });
            expect(fooVariables).toHaveBeenCalledTimes(2);
        });
    });
});
