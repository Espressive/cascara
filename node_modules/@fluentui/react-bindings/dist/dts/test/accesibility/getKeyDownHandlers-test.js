"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var getKeyDownHandlers_1 = require("../../src/accessibility/getKeyDownHandlers");
var accessibility_1 = require("@fluentui/accessibility");
var testKeyCode = accessibility_1.keyboardKey.ArrowRight;
var partElementName = 'anchor';
var actionsDefinition;
var eventArg = function (keyCodeValue) { return ({
    keyCode: keyCodeValue,
    altKey: false,
    ctrlKey: false,
    metaKey: false,
    shiftKey: false,
}); };
describe('getKeyDownHandlers', function () {
    beforeEach(function () {
        var _a;
        actionsDefinition = (_a = {},
            _a[partElementName] = {
                testAction: {
                    keyCombinations: [{ keyCode: testKeyCode }],
                },
            },
            _a);
    });
    describe('should attach onKeyDown handler', function () {
        test('when there are common actions and actions definition', function () {
            var _a;
            var actions = {
                testAction: function () { },
            };
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            expect(keyHandlers.hasOwnProperty(partElementName)).toBeTruthy();
            expect((_a = keyHandlers[partElementName]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('onKeyDown')).toBeTruthy();
        });
        test('for few component elements', function () {
            var _a, _b;
            var actions = {
                testAction: function () { },
                someOtherTestAction: function () { },
            };
            var anotherPartName = 'root';
            actionsDefinition[anotherPartName] = {
                someOtherTestAction: {
                    keyCombinations: [{ keyCode: testKeyCode }],
                },
            };
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            expect(keyHandlers.hasOwnProperty(partElementName)).toBeTruthy();
            expect(keyHandlers.hasOwnProperty(anotherPartName)).toBeTruthy();
            expect((_a = keyHandlers[partElementName]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('onKeyDown')).toBeTruthy();
            expect((_b = keyHandlers[anotherPartName]) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('onKeyDown')).toBeTruthy();
        });
        test('when there is 1 common action and few others that are not common', function () {
            var _a;
            var actions = {
                uncommonAction: function () { },
                testAction: function () { },
            };
            actionsDefinition[partElementName].doSomething = {
                keyCombinations: [{ keyCode: testKeyCode }],
            };
            actionsDefinition[partElementName].doSomethingElse = {
                keyCombinations: [{ keyCode: testKeyCode }],
            };
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            expect(keyHandlers.hasOwnProperty(partElementName)).toBeTruthy();
            expect((_a = keyHandlers[partElementName]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('onKeyDown')).toBeTruthy();
        });
        test('and action should be invoked if keydown event has keycode mapped to that action', function () {
            var actions = {
                testAction: jest.fn(),
                otherAction: jest.fn(),
                anotherTestAction: jest.fn(),
            };
            actionsDefinition[partElementName].otherAction = {
                keyCombinations: [{ keyCode: testKeyCode }],
            };
            actionsDefinition[partElementName].anotherTestAction = {
                keyCombinations: [{ keyCode: 21 }],
            };
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            keyHandlers[partElementName] &&
                // @ts-ignore
                keyHandlers[partElementName]['onKeyDown'](eventArg(testKeyCode));
            expect(actions.testAction).toHaveBeenCalled();
            expect(actions.otherAction).toHaveBeenCalled();
            expect(actions.anotherTestAction).not.toHaveBeenCalled();
        });
        test('should ignore actions with no keyCombinations', function () {
            var actions = {
                testAction: jest.fn(),
                actionFalse: jest.fn(),
                actionNull: jest.fn(),
                actionEmpty: jest.fn(),
            };
            actionsDefinition[partElementName].actionFalse = {
                // @ts-ignore
                keyCombinations: false,
            };
            actionsDefinition[partElementName].actionNull = {
                // @ts-ignore
                keyCombinations: null,
            };
            actionsDefinition[partElementName].actionEmpty = {
                keyCombinations: [],
            };
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            keyHandlers[partElementName] &&
                // @ts-ignore
                keyHandlers[partElementName]['onKeyDown'](eventArg(testKeyCode));
            expect(actions.testAction).toHaveBeenCalled();
            expect(actions.actionFalse).not.toHaveBeenCalled();
            expect(actions.actionNull).not.toHaveBeenCalled();
            expect(actions.actionEmpty).not.toHaveBeenCalled();
        });
        describe('with respect of RTL', function () {
            test('swap Right key to Left key', function () {
                var actions = {
                    actionOnLeftArrow: jest.fn(),
                    actionOnRightArrow: jest.fn(),
                };
                actionsDefinition[partElementName].actionOnLeftArrow = {
                    keyCombinations: [{ keyCode: accessibility_1.keyboardKey.ArrowLeft }],
                };
                actionsDefinition[partElementName].actionOnRightArrow = {
                    keyCombinations: [{ keyCode: accessibility_1.keyboardKey.ArrowRight }],
                };
                var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition, /** isRtlEnabled */ true);
                // @ts-ignore
                keyHandlers[partElementName]['onKeyDown'](eventArg(accessibility_1.keyboardKey.ArrowRight));
                expect(actions.actionOnLeftArrow).toHaveBeenCalled();
                expect(actions.actionOnRightArrow).not.toHaveBeenCalled();
            });
            test('swap Left key to Right key', function () {
                var actions = {
                    actionOnLeftArrow: jest.fn(),
                    actionOnRightArrow: jest.fn(),
                };
                actionsDefinition[partElementName].actionOnLeftArrow = {
                    keyCombinations: [{ keyCode: accessibility_1.keyboardKey.ArrowLeft }],
                };
                actionsDefinition[partElementName].actionOnRightArrow = {
                    keyCombinations: [{ keyCode: accessibility_1.keyboardKey.ArrowRight }],
                };
                var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition, /** isRtlEnabled */ true);
                // @ts-ignore
                keyHandlers[partElementName]['onKeyDown'](eventArg(accessibility_1.keyboardKey.ArrowLeft));
                expect(actions.actionOnLeftArrow).not.toHaveBeenCalled();
                expect(actions.actionOnRightArrow).toHaveBeenCalled();
            });
            test('should ignore actions with no keyCombinations', function () {
                var actions = {
                    actionOnRightArrow: jest.fn(),
                    actionFalse: jest.fn(),
                    actionNull: jest.fn(),
                    actionEmpty: jest.fn(),
                };
                actionsDefinition[partElementName].actionOnRightArrow = {
                    keyCombinations: [{ keyCode: accessibility_1.keyboardKey.ArrowRight }],
                };
                actionsDefinition[partElementName].actionFalse = {
                    // @ts-ignore
                    keyCombinations: false,
                };
                actionsDefinition[partElementName].actionNull = {
                    // @ts-ignore
                    keyCombinations: null,
                };
                actionsDefinition[partElementName].actionEmpty = {
                    keyCombinations: [],
                };
                var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition, true);
                keyHandlers[partElementName] &&
                    // @ts-ignore
                    keyHandlers[partElementName]['onKeyDown'](eventArg(accessibility_1.keyboardKey.ArrowLeft));
                expect(actions.actionOnRightArrow).toHaveBeenCalled();
                expect(actions.actionFalse).not.toHaveBeenCalled();
                expect(actions.actionNull).not.toHaveBeenCalled();
                expect(actions.actionEmpty).not.toHaveBeenCalled();
            });
        });
    });
    describe('should not attach onKeyDown handler', function () {
        test('when actions are null', function () {
            var actions = null;
            // @ts-ignore
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            expect(keyHandlers.hasOwnProperty(partElementName)).toBeFalsy();
        });
        test("when accessibility's actionsDefinition is null", function () {
            var actions = { otherAction: function () { } };
            // @ts-ignore
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, null);
            expect(keyHandlers.hasOwnProperty(partElementName)).toBeFalsy();
        });
        test('there are not common actions and actions definition', function () {
            var actions = { otherAction: function () { } };
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            expect(keyHandlers.hasOwnProperty(partElementName)).toBeFalsy();
        });
        test('when action definition has no keyCombinations', function () {
            var actions = {
                testAction: function () { },
                actionFalse: function () { },
                actionNull: function () { },
                actionEmpty: function () { },
            };
            actionsDefinition.anotherPart = {
                actionFalse: {
                    // @ts-ignore
                    keyCombinations: false,
                },
                actionNull: {
                    // @ts-ignore
                    keyCombinations: null,
                },
                actionEmpty: {
                    keyCombinations: [],
                },
            };
            var keyHandlers = getKeyDownHandlers_1.getKeyDownHandlers(actions, actionsDefinition);
            expect(keyHandlers.hasOwnProperty('anotherPart')).toBeFalsy();
        });
    });
});
