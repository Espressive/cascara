"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_bindings_1 = require("@fluentui/react-bindings");
var React = require("react");
var ReactDOM = require("react-dom");
var test_utils_1 = require("react-dom/test-utils");
var TestContext = react_bindings_1.createContext({
    index: -1,
    value: '',
});
var TestComponent = function (props) {
    var context = react_bindings_1.useContextSelectors(TestContext, {
        active: function (v) { return v.index === props.index; },
        value: function (v) { return v.value; },
    });
    React.useEffect(function () {
        props.onUpdate && props.onUpdate();
    });
    return React.createElement("div", { className: "test-component", "data-active": context.active, "data-value": context.value });
};
var TestProvider = function (props) {
    var _a = React.useState(+props.value.index), index = _a[0], setIndex = _a[1];
    var _b = React.useState(props.value.value), value = _b[0], setValue = _b[1];
    return (React.createElement("div", { className: "test-provider" },
        React.createElement("button", { className: "set-index", onClick: function (e) { var _a; return setIndex(+((_a = e.target) === null || _a === void 0 ? void 0 : _a.dataset.index)); } }),
        React.createElement("button", { className: "change-value", onClick: function (e) { var _a; return setValue((_a = e.target) === null || _a === void 0 ? void 0 : _a.dataset.value); } }),
        React.createElement(TestContext.Provider, { value: { index: index, value: value } }, props.children)));
};
describe('useContextSelectors', function () {
    var container;
    beforeEach(function () {
        container = document.createElement('div');
        document.body.appendChild(container);
    });
    afterEach(function () {
        document.body.removeChild(container);
        container = null;
    });
    it('propogates values via Context', function () {
        var _a, _b;
        ReactDOM.render(React.createElement(TestProvider, { value: { index: 1, value: 'foo' } },
            React.createElement(TestComponent, { index: 1 })), container);
        expect((_a = document.querySelector('.test-component')) === null || _a === void 0 ? void 0 : _a.dataset.active).toBe('true');
        expect((_b = document.querySelector('.test-component')) === null || _b === void 0 ? void 0 : _b.dataset.value).toBe('foo');
    });
    it('updates only on selector match', function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var onUpdate = jest.fn();
        ReactDOM.render(React.createElement(TestProvider, { value: { index: -1, value: 'foo' } },
            React.createElement(TestComponent, { index: 1, onUpdate: onUpdate })), container);
        test_utils_1.act(function () {
            // no-op to wait for effects
        });
        expect((_a = document.querySelector('.test-component')) === null || _a === void 0 ? void 0 : _a.dataset.active).toBe('false');
        expect((_b = document.querySelector('.test-component')) === null || _b === void 0 ? void 0 : _b.dataset.value).toBe('foo');
        expect(onUpdate).toBeCalledTimes(1);
        // No match, (v.index: 2, p.index: 1)
        test_utils_1.act(function () {
            var _a, _b, _c, _d;
            (_a = document.querySelector('.set-index')) === null || _a === void 0 ? void 0 : _a.setAttribute('data-index', '2');
            (_b = document.querySelector('.change-value')) === null || _b === void 0 ? void 0 : _b.setAttribute('data-value', 'foo');
            (_c = document.querySelector('.set-index')) === null || _c === void 0 ? void 0 : _c.click();
            (_d = document.querySelector('.change-value')) === null || _d === void 0 ? void 0 : _d.click();
        });
        expect((_c = document.querySelector('.test-component')) === null || _c === void 0 ? void 0 : _c.dataset.active).toBe('false');
        expect((_d = document.querySelector('.test-component')) === null || _d === void 0 ? void 0 : _d.dataset.value).toBe('foo');
        expect(onUpdate).toBeCalledTimes(1);
        // // Match => update, (v.index: 1, p.index: 1)
        test_utils_1.act(function () {
            var _a, _b, _c, _d;
            (_a = document.querySelector('.set-index')) === null || _a === void 0 ? void 0 : _a.setAttribute('data-index', '1');
            (_b = document.querySelector('.change-value')) === null || _b === void 0 ? void 0 : _b.setAttribute('data-value', 'foo');
            (_c = document.querySelector('.set-index')) === null || _c === void 0 ? void 0 : _c.click();
            (_d = document.querySelector('.change-value')) === null || _d === void 0 ? void 0 : _d.click();
        });
        expect((_e = document.querySelector('.test-component')) === null || _e === void 0 ? void 0 : _e.dataset.active).toBe('true');
        expect((_f = document.querySelector('.test-component')) === null || _f === void 0 ? void 0 : _f.dataset.value).toBe('foo');
        expect(onUpdate).toBeCalledTimes(2);
        // // Match previous => no update, (v.index: 1, p.index: 1)
        test_utils_1.act(function () {
            var _a, _b, _c, _d;
            (_a = document.querySelector('.set-index')) === null || _a === void 0 ? void 0 : _a.setAttribute('data-index', '1');
            (_b = document.querySelector('.change-value')) === null || _b === void 0 ? void 0 : _b.setAttribute('data-value', 'foo');
            (_c = document.querySelector('.set-index')) === null || _c === void 0 ? void 0 : _c.click();
            (_d = document.querySelector('.change-value')) === null || _d === void 0 ? void 0 : _d.click();
        });
        expect((_g = document.querySelector('.test-component')) === null || _g === void 0 ? void 0 : _g.dataset.active).toBe('true');
        expect((_h = document.querySelector('.test-component')) === null || _h === void 0 ? void 0 : _h.dataset.value).toBe('foo');
        expect(onUpdate).toBeCalledTimes(2);
        // Match => update, (v.value: 'bar')
        test_utils_1.act(function () {
            var _a, _b, _c, _d;
            (_a = document.querySelector('.set-index')) === null || _a === void 0 ? void 0 : _a.setAttribute('data-index', '1');
            (_b = document.querySelector('.change-value')) === null || _b === void 0 ? void 0 : _b.setAttribute('data-value', 'bar');
            (_c = document.querySelector('.set-index')) === null || _c === void 0 ? void 0 : _c.click();
            (_d = document.querySelector('.change-value')) === null || _d === void 0 ? void 0 : _d.click();
        });
        expect((_j = document.querySelector('.test-component')) === null || _j === void 0 ? void 0 : _j.dataset.value).toBe('bar');
        expect(onUpdate).toBeCalledTimes(3);
    });
    it('updates are propogated inside React.memo()', function () {
        var _a;
        // https://reactjs.org/docs/react-api.html#reactmemo
        // Will never pass updates
        var MemoComponent = React.memo(TestComponent, function () { return true; });
        var onUpdate = jest.fn();
        ReactDOM.render(React.createElement(TestProvider, { value: { index: 0, value: 'foo' } },
            React.createElement(MemoComponent, { index: 1, onUpdate: onUpdate })), container);
        test_utils_1.act(function () {
            var _a, _b, _c, _d;
            (_a = document.querySelector('.set-index')) === null || _a === void 0 ? void 0 : _a.setAttribute('data-index', '1');
            (_b = document.querySelector('.change-value')) === null || _b === void 0 ? void 0 : _b.setAttribute('data-value', 'foo');
            (_c = document.querySelector('.set-index')) === null || _c === void 0 ? void 0 : _c.click();
            (_d = document.querySelector('.change-value')) === null || _d === void 0 ? void 0 : _d.click();
        });
        expect((_a = document.querySelector('.test-component')) === null || _a === void 0 ? void 0 : _a.dataset.active).toBe('true');
        expect(onUpdate).toBeCalledTimes(2);
    });
});
