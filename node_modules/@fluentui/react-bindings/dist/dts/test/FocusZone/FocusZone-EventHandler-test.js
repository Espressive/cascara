"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var ReactDOM = require("react-dom");
var React = require("react");
var react_bindings_1 = require("@fluentui/react-bindings");
function handlersEqual(a, b) {
    return a.listener === b.listener && _.isEqual(a.options, b.options);
}
// HEADS UP: this test is intentionally in a separate file aside from the rest of FocusZone tests
// As it is testing ref counting on a global `window` object it would interfere with other FocusZone tests
// which use ReactTestUtils.renderIntoDocument() which renders FocusZone into a detached DOM node and never unmounts.
describe('FocusZone keydown event handler', function () {
    var host;
    var keydownEventHandlers;
    beforeEach(function () {
        host = document.createElement('div');
        keydownEventHandlers = [];
        window.addEventListener = jest.fn(function (type, listener, options) {
            if (type === 'keydown') {
                var eventListener_1 = { listener: listener, options: options };
                if (!keydownEventHandlers.some(function (item) { return handlersEqual(item, eventListener_1); })) {
                    keydownEventHandlers.push(eventListener_1);
                }
            }
        });
        window.removeEventListener = jest.fn(function (type, listener, options) {
            if (type === 'keydown') {
                var eventListener_2 = { listener: listener, options: options };
                var index = keydownEventHandlers.findIndex(function (item) { return handlersEqual(item, eventListener_2); });
                if (index >= 0) {
                    keydownEventHandlers.splice(index, 1);
                }
            }
        });
    });
    it('is added on mount/removed on unmount', function () {
        ReactDOM.render(React.createElement(react_bindings_1.FocusZone, null), host);
        expect(keydownEventHandlers.length).toBe(1);
        ReactDOM.unmountComponentAtNode(host);
        expect(keydownEventHandlers.length).toBe(0);
    });
    it('is added only once for nested focus zones', function () {
        ReactDOM.render(React.createElement("div", null,
            React.createElement(react_bindings_1.FocusZone, null,
                React.createElement(react_bindings_1.FocusZone, null))), host);
        expect(keydownEventHandlers.length).toBe(1);
        ReactDOM.unmountComponentAtNode(host);
        expect(keydownEventHandlers.length).toBe(0);
    });
    it('is added only once for sibling focus zones', function () {
        ReactDOM.render(React.createElement("div", null,
            React.createElement(react_bindings_1.FocusZone, null),
            React.createElement(react_bindings_1.FocusZone, null)), host);
        expect(keydownEventHandlers.length).toBe(1);
        ReactDOM.unmountComponentAtNode(host);
        expect(keydownEventHandlers.length).toBe(0);
    });
});
