"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var React = require("react");
var ReactTestUtils = require("react-dom/test-utils");
// rAF does not exist in node - let's mock it
window.requestAnimationFrame = function (callback) {
    var r = window.setTimeout(callback, 0);
    jest.runAllTimers();
    return r;
};
var animationFrame = function () { return new Promise(function (resolve) { return window.requestAnimationFrame(resolve); }); };
jest.useFakeTimers();
describe('AutoFocusZone', function () {
    var lastFocusedElement;
    var _onFocus = function (ev) { return (lastFocusedElement = ev.target); };
    var setupElement = function (element, _a) {
        var clientRect = _a.clientRect, _b = _a.isVisible, isVisible = _b === void 0 ? true : _b;
        // @ts-ignore
        element.getBoundingClientRect = function () { return ({
            top: clientRect.top,
            left: clientRect.left,
            bottom: clientRect.bottom,
            right: clientRect.right,
            width: clientRect.right - clientRect.left,
            height: clientRect.bottom - clientRect.top,
        }); };
        element.setAttribute('data-is-visible', String(isVisible));
        element.focus = function () { return ReactTestUtils.Simulate.focus(element); };
    };
    beforeEach(function () {
        lastFocusedElement = undefined;
    });
    describe('Focusing the ATZ', function () {
        function setupTest(firstFocusableSelector) {
            var autoFocusZoneRef = null;
            var topLevelDiv = ReactTestUtils.renderIntoDocument(React.createElement("div", { onFocusCapture: _onFocus },
                React.createElement(react_bindings_1.AutoFocusZone, { "data-is-focusable": true, firstFocusableSelector: firstFocusableSelector, ref: function (ftz) {
                        autoFocusZoneRef = ftz;
                    } },
                    React.createElement("button", { className: 'f' }, "f"),
                    React.createElement(react_bindings_1.FocusZone, null,
                        React.createElement("button", { className: 'a' }, "a"),
                        React.createElement("button", { className: 'b' }, "b"))),
                React.createElement("button", { className: 'z' }, "z")));
            var buttonF = topLevelDiv.querySelector('.f');
            var buttonA = topLevelDiv.querySelector('.a');
            var buttonB = topLevelDiv.querySelector('.b');
            var buttonZ = topLevelDiv.querySelector('.z');
            // Assign bounding locations to buttons.
            setupElement(buttonF, { clientRect: { top: 0, bottom: 10, left: 0, right: 10 } });
            setupElement(buttonA, { clientRect: { top: 10, bottom: 20, left: 0, right: 10 } });
            setupElement(buttonB, { clientRect: { top: 20, bottom: 30, left: 0, right: 10 } });
            setupElement(buttonZ, { clientRect: { top: 30, bottom: 40, left: 0, right: 10 } });
            return { autoFocusZone: autoFocusZoneRef, buttonF: buttonF, buttonA: buttonA, buttonB: buttonB, buttonZ: buttonZ };
        }
        it('goes to first focusable element when focusing the ATZ', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a, autoFocusZone, buttonF;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect.assertions(1);
                        _a = setupTest(), autoFocusZone = _a.autoFocusZone, buttonF = _a.buttonF;
                        // By calling `componentDidMount`, AFZ will behave as just initialized and focus needed element
                        // Focus within should go to 1st focusable inner element.
                        // @ts-ignore
                        autoFocusZone.componentDidMount();
                        return [4 /*yield*/, animationFrame()];
                    case 1:
                        _b.sent();
                        expect(lastFocusedElement).toBe(buttonF);
                        return [2 /*return*/];
                }
            });
        }); });
        it('goes to the element with containing the firstFocusableSelector if provided when focusing the ATZ', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a, autoFocusZone, buttonB;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect.assertions(1);
                        _a = setupTest('.b'), autoFocusZone = _a.autoFocusZone, buttonB = _a.buttonB;
                        // By calling `componentDidMount`, AFZ will behave as just initialized and focus needed element
                        // Focus within should go to the element containing the selector.
                        // @ts-ignore
                        autoFocusZone.componentDidMount();
                        return [4 /*yield*/, animationFrame()];
                    case 1:
                        _b.sent();
                        expect(lastFocusedElement).toBe(buttonB);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
