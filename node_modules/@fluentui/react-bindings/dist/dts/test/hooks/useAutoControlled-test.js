"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_bindings_1 = require("@fluentui/react-bindings");
var enzyme_1 = require("enzyme");
var react_hooks_1 = require("@testing-library/react-hooks");
var React = require("react");
var ReactTestUtils = require("react-dom/test-utils");
var TestComponent = function (props) {
    var _a = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultValue,
        value: props.value,
        initialValue: props.initialValue,
    }), value = _a[0], setValue = _a[1];
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { onChange: function (e) {
                setValue(e.target.value);
                if (props.onChange)
                    props.onChange(e.target.value);
            }, value: value || '' }),
        React.createElement("button", { onClick: function () {
                setValue(function (state) { return state + "onClick"; });
            } })));
};
describe('useAutoControlled', function () {
    it('defaults to "undefined"', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, null));
        expect(wrapper.find('input').prop('value')).toBe('');
    });
    it('defaults to `initialValue` if specified', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { initialValue: "foo" }));
        expect(wrapper.find('input').prop('value')).toBe('foo');
    });
    it('sets default values of controlled props to the state', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { defaultValue: "foo" }));
        expect(wrapper.find('input').prop('value')).toBe('foo');
    });
    it('sets values of controlled props to the state', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { value: "foo" }));
        expect(wrapper.find('input').prop('value')).toBe('foo');
    });
    it('handles state updates based on values', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, null));
        ReactTestUtils.act(function () {
            wrapper.find('input').simulate('change', { target: { value: 'foo' } });
        });
        expect(wrapper.find('input').prop('value')).toBe('foo');
    });
    it('handles state updates based on function', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, null));
        ReactTestUtils.act(function () {
            wrapper.find('input').simulate('change', { target: { value: 'bar' } });
        });
        expect(wrapper.find('input').prop('value')).toBe('bar');
        ReactTestUtils.act(function () {
            wrapper.find('button').simulate('click');
        });
        expect(wrapper.find('input').prop('value')).toBe('baronClick');
    });
    it('handles state updates with a default value', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { defaultValue: "foo" }));
        ReactTestUtils.act(function () {
            wrapper.find('input').simulate('change', { target: { value: 'bar' } });
        });
        expect(wrapper.find('input').prop('value')).toBe('bar');
    });
    it('ignores state updates if controlled', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { value: "foo" }));
        ReactTestUtils.act(function () {
            wrapper.find('input').simulate('change', { target: { value: 'bar' } });
        });
        expect(wrapper.find('input').prop('value')).toBe('foo');
    });
    it('sets values of controlled props to the state on updates', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { value: "foo" }));
        ReactTestUtils.act(function () {
            wrapper.setProps({ value: 'bar' });
        });
        expect(wrapper.find('input').prop('value')).toBe('bar');
        ReactTestUtils.act(function () {
            wrapper.setProps({ value: 'baz' });
        });
        expect(wrapper.find('input').prop('value')).toBe('baz');
    });
    it('keeps last value of controlled prop in the state if value gets "undefined"', function () {
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { defaultValue: "foo" }));
        ReactTestUtils.act(function () {
            wrapper.setProps({ value: undefined });
        });
        expect(wrapper.find('input').prop('value')).toBe('foo');
    });
    it('should update function passing updated value', function () {
        var _a = react_hooks_1.renderHook(function (_a) {
            var value = _a.value;
            return react_bindings_1.useAutoControlled({ defaultValue: '', value: value });
        }, {
            initialProps: { value: 'a' },
        }), result = _a.result, rerender = _a.rerender;
        rerender({ value: 'b' });
        var dispatchSpy = jest.fn();
        react_hooks_1.act(function () {
            result.current[1](dispatchSpy);
        });
        expect(dispatchSpy).toBeCalledWith('b');
    });
});
