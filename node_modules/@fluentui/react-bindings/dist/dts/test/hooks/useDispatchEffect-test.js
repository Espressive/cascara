"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var state_1 = require("@fluentui/state");
var enzyme_1 = require("enzyme");
var React = require("react");
var ReactTestUtils = require("react-dom/test-utils");
var createTestManager = function (config) {
    return state_1.createManager(tslib_1.__assign(tslib_1.__assign({}, config), { actions: {
            change: function (value) { return function () { return ({ value: value }); }; },
            clear: function () { return function () { return ({ value: '' }); }; },
        }, state: tslib_1.__assign({ value: '' }, config.state) }));
};
var TestComponent = function (props) {
    var _a = react_bindings_1.unstable_useDispatchEffect(function (e, prevState, nextState) {
        if (prevState.value !== nextState.value) {
            props.onChange(e, tslib_1.__assign(tslib_1.__assign({}, props), { value: nextState.value }));
        }
    }), dispatch = _a[0], dispatchEffect = _a[1];
    var _b = react_bindings_1.useStateManager(createTestManager, {
        mapPropsToInitialState: function () { return ({ value: props.defaultValue }); },
        mapPropsToState: function () { return ({ value: props.value }); },
        sideEffects: [dispatchEffect],
    }), state = _b.state, actions = _b.actions;
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { onChange: function (e) { return dispatch(e, actions.change, e.target.value); }, value: state.value }),
        React.createElement("button", { onClick: function (e) { return dispatch(e, actions.clear); } })));
};
describe('useDispatchEffect', function () {
    it('calls an action with params', function () {
        var onChange = jest.fn();
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { onChange: onChange }));
        ReactTestUtils.act(function () {
            wrapper.find('input').simulate('change', { target: { value: 'baz' } });
        });
        expect(wrapper.find('input').prop('value')).toBe('baz');
    });
    it('calls an action without params', function () {
        var onChange = jest.fn();
        var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { defaultValue: "foo", onChange: onChange }));
        ReactTestUtils.act(function () {
            wrapper.find('button').simulate('click');
        });
        expect(wrapper.find('input').prop('value')).toBe('');
    });
});
