"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_bindings_1 = require("@fluentui/react-bindings");
var enzyme_1 = require("enzyme");
var React = require("react");
var consoleUtil = require("../consoleUtil");
var TestComponent = function (props) {
    return react_bindings_1.useTriggerElement(props);
};
var OLD_ENV = process.env.NODE_ENV;
describe('useTriggerElement', function () {
    beforeEach(function () {
        process.env.NODE_ENV = 'development';
    });
    afterAll(function () {
        process.env.NODE_ENV = OLD_ENV;
    });
    it('"children" can be null', function () {
        var wrapper = enzyme_1.mount(React.createElement(TestComponent, null, null));
        expect(wrapper.children()).toHaveLength(0);
    });
    it('"trigger" can be null', function () {
        var wrapper = enzyme_1.mount(React.createElement(TestComponent, { trigger: null }));
        expect(wrapper.children()).toHaveLength(0);
    });
    it('"trigger" should be a React element', function () {
        consoleUtil.disableOnce();
        expect(function () { return enzyme_1.mount(React.createElement(TestComponent, null, "Foo")); }).toThrow('React.Children.only expected to receive a single React element child.');
    });
    it('"trigger" should be a single element', function () {
        consoleUtil.disableOnce();
        expect(function () {
            return enzyme_1.mount(React.createElement(TestComponent, null,
                React.createElement("button", null),
                React.createElement("button", null)));
        }).toThrow('React.Children.only expected to receive a single React element child.');
    });
    it('"trigger" should not be a Fragment element', function () {
        consoleUtil.disableOnce();
        expect(function () {
            return enzyme_1.mount(React.createElement(TestComponent, null,
                React.createElement(React.Fragment, null)));
        }).toThrow(/A "React\.Fragment" cannot be used as a "trigger"/);
    });
    it('"trigger" with "disabled" will produce a warning', function () {
        consoleUtil.disableOnce();
        var warn = jest.spyOn(global.console, 'warn').mockImplementation(function () { });
        enzyme_1.mount(React.createElement(TestComponent, null,
            React.createElement("button", { disabled: true })));
        expect(warn).toHaveBeenCalledWith(expect.stringMatching(/Disabled elements should used as/));
    });
    it('"pointer-events" should be set on disabled "trigger" children', function () {
        consoleUtil.disableOnce();
        expect(function () {
            return enzyme_1.mount(React.createElement(TestComponent, null,
                React.createElement("div", null,
                    React.createElement("button", { disabled: true }))));
        }).toThrow(/A disabled element should have explicit/);
    });
});
