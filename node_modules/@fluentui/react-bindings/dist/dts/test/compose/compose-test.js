"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var enzyme_1 = require("enzyme");
var react_bindings_1 = require("@fluentui/react-bindings");
describe('compose', function () {
    var useToggle = function (props) { return props; };
    var Toggle = react_bindings_1.compose(function (_props, ref, options) {
        var state = options.state;
        var _a = react_bindings_1.mergeProps(state, options), slots = _a.slots, slotProps = _a.slotProps;
        return React.createElement(slots.root, tslib_1.__assign({ ref: ref }, slotProps.root));
    }, {
        slots: {},
        state: useToggle,
        handledProps: ['checked'],
        displayName: 'Toggle',
    });
    it('can compose a component', function () {
        var wrapper = enzyme_1.mount(React.createElement(Toggle, { id: "foo", checked: true }));
        expect(wrapper.html()).toMatch('<div id="foo"></div>');
        expect(Toggle.displayName).toEqual('Toggle');
    });
    it('can recompose a component', function () {
        var NewToggle = react_bindings_1.compose(Toggle, { displayName: 'NewToggle' });
        var wrapper = enzyme_1.mount(React.createElement(NewToggle, { id: "foo" }));
        expect(wrapper.html()).toMatch('<div id="foo"></div>');
        expect(NewToggle.displayName).toEqual('NewToggle');
    });
    it('can pass shorthandConfig via composeOptions', function () {
        var BaseComponent = react_bindings_1.compose(function (_props, _ref, composeOptions) {
            return (React.createElement("div", { "data-mapped-prop": composeOptions.shorthandConfig.mappedProp, "data-allows-jsx": composeOptions.shorthandConfig.allowsJSX }));
        }, {
            shorthandConfig: {
                allowsJSX: false,
                mappedProp: 'content',
            },
        });
        var ComposedComponent = react_bindings_1.compose(BaseComponent, {
            shorthandConfig: {
                mappedProp: 'slot',
            },
        });
        var wrapper = enzyme_1.shallow(React.createElement(BaseComponent, null));
        var composedWrapper = enzyme_1.shallow(React.createElement(ComposedComponent, null));
        expect(wrapper.prop('data-mapped-prop')).toEqual('content');
        expect(wrapper.prop('data-allows-jsx')).toEqual(false);
        expect(composedWrapper.prop('data-mapped-prop')).toEqual('slot');
        expect(composedWrapper.prop('data-allows-jsx')).toEqual(false);
    });
    it('can recompose the state of a component', function () {
        var useNewToggle = function (props) {
            return tslib_1.__assign(tslib_1.__assign({}, props), { 'data-new-state': 'NewToggle' });
        };
        var NewToggle = react_bindings_1.compose(Toggle, {
            displayName: 'NewToggle',
            state: useNewToggle,
        });
        var wrapper = enzyme_1.mount(React.createElement(NewToggle, { id: "foo" }));
        expect(wrapper.html()).toMatch('<div id="foo" data-new-state="NewToggle"></div>');
        expect(NewToggle.displayName).toEqual('NewToggle');
    });
});
