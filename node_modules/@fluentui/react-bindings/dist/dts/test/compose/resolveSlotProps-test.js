"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var consts_1 = require("../../src/compose/consts");
var resolveSlotProps_1 = require("../../src/compose/resolveSlotProps");
var nullRenderer = function () { return null; };
describe('resolveSlotProps', function () {
    var selfSlot = { __self: consts_1.defaultComposeOptions.slots.__self };
    var getDefaultSlots = function () { return ({
        slots: tslib_1.__assign(tslib_1.__assign({}, selfSlot), { root: nullRenderer, slot1: nullRenderer, slot2: nullRenderer, slot3: nullRenderer }),
    }); };
    var defaultOptionsWithSlots = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, consts_1.defaultComposeOptions), getDefaultSlots()), { classes: [{ root: 'root' }, function () { return ({ foo: 'foo' }); }, { bar: 'bar', baz: 'baz' }] });
    it('can expand strings, booleans, and numbers as children', function () {
        var state = {
            slot1: 'text',
            slot2: 0,
            slot3: false,
        };
        expect(resolveSlotProps_1.resolveSlotProps({
            slots: defaultOptionsWithSlots.slots,
            state: state,
            slotProps: {},
        }, defaultOptionsWithSlots)).toEqual({
            slots: defaultOptionsWithSlots.slots,
            state: state,
            slotProps: {
                root: {},
                slot1: { children: 'text' },
                slot2: { children: 0 },
                slot3: { children: false },
            },
        });
    });
    it('can expand JSX', function () {
        var slotContent = React.createElement("button", null);
        var state = { slot1: slotContent };
        expect(resolveSlotProps_1.resolveSlotProps(tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots()), { state: state, slotProps: {} }), defaultOptionsWithSlots)).toEqual(tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots()), { state: state, slotProps: {
                root: {},
                slot1: { children: slotContent },
            } }));
    });
    it('can expand children functions', function () {
        var renderFunction = function () { return React.createElement("button", null); };
        var slotContent = React.createElement("button", null);
        var state = { slot1: { children: renderFunction } };
        expect(resolveSlotProps_1.resolveSlotProps(tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots()), { slotProps: {}, state: state }), defaultOptionsWithSlots)).toEqual({
            slots: tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots().slots), { slot1: React.Fragment }),
            state: state,
            slotProps: {
                root: {},
                slot1: { children: slotContent },
            },
        });
    });
    it('provide children function correct params', function () {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var renderFunction = function (Component, props) {
            expect(Component).toEqual(nullRenderer);
            expect(props).toEqual({
                className: 'slot1',
                parentProp: 'parentProp',
            });
            return React.createElement("button", null);
        };
        var slotContent = React.createElement("button", null);
        var state = { slot1: { className: 'slot1', children: renderFunction } };
        expect(resolveSlotProps_1.resolveSlotProps(tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots()), { slotProps: {
                slot1: { parentProp: 'parentProp' },
            }, state: state }), defaultOptionsWithSlots)).toEqual({
            slots: tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots().slots), { slot1: React.Fragment }),
            state: state,
            slotProps: {
                root: {},
                slot1: { children: slotContent },
            },
        });
    });
    it('can expand null slots from state', function () {
        var state = { slot1: null };
        expect(resolveSlotProps_1.resolveSlotProps(tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots()), { slotProps: {}, state: state }), defaultOptionsWithSlots)).toEqual({
            slots: tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots().slots), { slot1: resolveSlotProps_1.NullRender }),
            state: state,
            slotProps: {
                root: {},
            },
        });
    });
    it('can expand null slots from config', function () {
        var state = {};
        expect(resolveSlotProps_1.resolveSlotProps({
            slots: tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots().slots), { slot1: null }),
            slotProps: {},
            state: state,
        }, defaultOptionsWithSlots)).toEqual({
            slots: tslib_1.__assign(tslib_1.__assign({}, getDefaultSlots().slots), { slot1: resolveSlotProps_1.NullRender }),
            state: state,
            slotProps: {
                root: {},
            },
        });
    });
    // TODO: separate checkin.
    // it('merges style prop', () => {
    //   const state = {
    //     style: { padding: 1, background: 'black' },
    //   };
    //   expect(
    //     resolveSlotProps(
    //       {
    //         slots: {
    //           ...getDefaultSlots().slots,
    //           slot1: null,
    //         },
    //         slotProps: {
    //           root: {
    //             style: { background: 'red', margin: 1 },
    //           },
    //         },
    //         state,
    //       },
    //       defaultOptionsWithSlots,
    //     ),
    //   ).toEqual({
    //     slots: {
    //       ...getDefaultSlots().slots,
    //       slot1: NullRender,
    //     },
    //     state,
    //     slotProps: {
    //       root: {
    //         style: { padding: 1, background: 'black', margin: 1 },
    //       },
    //     },
    //   });
    // });
    // it('merges style prop and handles user overrides', () => {});
});
