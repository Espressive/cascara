"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoFocusZone = void 0;
var tslib_1 = require("tslib");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var styles_1 = require("@fluentui/styles");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var getElementType_1 = require("../utils/getElementType");
var getUnhandledProps_1 = require("../utils/getUnhandledProps");
var focusUtilities_1 = require("./focusUtilities");
/** AutoFocusZone is used to focus inner element on mount. */
var AutoFocusZone = /** @class */ (function (_super) {
    tslib_1.__extends(AutoFocusZone, _super);
    function AutoFocusZone() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.root = React.createRef();
        _this.findElementAndFocusAsync = function () {
            if (!_this.root.current)
                return;
            var firstFocusableSelector = _this.props.firstFocusableSelector;
            var focusSelector = styles_1.callable(firstFocusableSelector)();
            var firstFocusableChild = focusSelector
                ? _this.root.current.querySelector(focusSelector)
                : focusUtilities_1.getNextElement(_this.root.current, _this.root.current.firstChild, true, false, false, true);
            firstFocusableChild && focusUtilities_1.focusAsync(firstFocusableChild);
        };
        return _this;
    }
    AutoFocusZone.prototype.componentDidMount = function () {
        this.findElementAndFocusAsync();
    };
    AutoFocusZone.prototype.render = function () {
        var unhandledProps = getUnhandledProps_1.getUnhandledProps(AutoFocusZone.handledProps, this.props);
        var ElementType = getElementType_1.getElementType(this.props);
        return (React.createElement(react_component_ref_1.Ref, { innerRef: this.root },
            React.createElement(ElementType, tslib_1.__assign({}, unhandledProps), this.props.children)));
    };
    AutoFocusZone.propTypes = {
        as: PropTypes.elementType,
        firstFocusableSelector: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    };
    AutoFocusZone.handledProps = _.keys(AutoFocusZone.propTypes);
    return AutoFocusZone;
}(React.Component));
exports.AutoFocusZone = AutoFocusZone;
