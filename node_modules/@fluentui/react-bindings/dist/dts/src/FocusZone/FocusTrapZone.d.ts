import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FocusTrapZoneProps } from './FocusTrapZone.types';
/** FocusTrapZone is used to trap the focus in any html element placed in body
 *  and hide other elements outside of Focus Trap Zone from accessibility tree.
 *  Pressing tab will circle focus within the inner focusable elements of the FocusTrapZone. */
export declare class FocusTrapZone extends React.Component<FocusTrapZoneProps, {}> {
    static _focusStack: FocusTrapZone[];
    _root: {
        current: HTMLElement | null;
    };
    _previouslyFocusedElementOutsideTrapZone?: HTMLElement;
    _previouslyFocusedElementInTrapZone?: HTMLElement;
    _firstBumper: React.RefObject<HTMLDivElement>;
    _lastBumper: React.RefObject<HTMLDivElement>;
    _hasFocus: boolean;
    windowRef: React.MutableRefObject<Window>;
    createRef: (elem: any) => void;
    shouldHandleOutsideClick: () => boolean;
    static propTypes: {
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        className: PropTypes.Requireable<string>;
        elementToFocusOnDismiss: PropTypes.Requireable<object>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        isClickableOutsideFocusTrap: PropTypes.Requireable<boolean>;
        ignoreExternalFocusing: PropTypes.Requireable<boolean>;
        forceFocusInsideTrapOnOutsideFocus: PropTypes.Requireable<boolean>;
        forceFocusInsideTrapOnComponentUpdate: PropTypes.Requireable<boolean>;
        firstFocusableSelector: PropTypes.Requireable<string>;
        disableFirstFocus: PropTypes.Requireable<boolean>;
        focusPreviouslyFocusedInnerElement: PropTypes.Requireable<boolean>;
        focusTriggerOnOutsideClick: PropTypes.Requireable<boolean>;
    };
    static defaultProps: FocusTrapZoneProps;
    componentDidMount(): void;
    componentDidUpdate(prevProps: FocusTrapZoneProps): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    _onRootFocus: (ev: React.FocusEvent<HTMLDivElement>) => void;
    _onRootBlur: (ev: React.FocusEvent<HTMLDivElement>) => void;
    _onFirstBumperFocus: () => void;
    _onLastBumperFocus: () => void;
    _isBumper(element: HTMLElement): boolean;
    _onBumperFocus: (isFirstBumper: boolean) => void;
    _focusAsync(element: HTMLElement): void;
    _enableFocusTrapZone: () => void;
    _bringFocusIntoZone: () => void;
    _releaseFocusTrapZone: () => void;
    _findElementAndFocusAsync: () => void;
    _onFocusCapture: (ev: React.FocusEvent<HTMLDivElement>) => void;
    _forceFocusInTrap: (ev: Event, triggeredElement: HTMLElement) => void;
    _handleOutsideFocus: (ev: FocusEvent) => void;
    _handleOutsideClick: (ev: MouseEvent) => void;
    _onKeyboardHandler: (ev: React.KeyboardEvent<HTMLDivElement>) => void;
    _getPreviouslyFocusedElementOutsideTrapZone: () => HTMLElement;
    _hideContentFromAccessibilityTree: () => void;
    _showContentInAccessibilityTree: () => void;
}
