"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useContextSelector = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var utils_1 = require("./utils");
/**
 * This hook returns context selected value by selector.
 * It will only accept context created by `createContext`.
 * It will trigger re-render if only the selected value is referencially changed.
 */
var useContextSelector = function (context, selector) {
    var contextValue = React.useContext(context);
    var value = contextValue.value.current, version = contextValue.version.current, listeners = contextValue.listeners;
    var selected = selector(value);
    var _a = React.useReducer(function (prevState, payload) {
        if (!payload) {
            // early bail out when is dispatched during render
            return [value, selected];
        }
        if (payload[0] <= version) {
            if (Object.is(prevState[1], selected)) {
                return prevState; // bail out
            }
            return [value, selected];
        }
        try {
            if (Object.is(prevState[0], payload[1])) {
                return prevState; // do not update
            }
            var nextSelected = selector(payload[1]);
            if (Object.is(prevState[1], nextSelected)) {
                return prevState; // do not update
            }
            return [payload[1], nextSelected];
        }
        catch (e) {
            // ignored (stale props or some other reason)
        }
        return tslib_1.__spreadArrays(prevState); // schedule update
    }, [value, selected]), state = _a[0], dispatch = _a[1];
    if (!Object.is(state[1], selected)) {
        // schedule re-render
        // this is safe because it's self contained
        dispatch(undefined);
    }
    utils_1.useIsomorphicLayoutEffect(function () {
        listeners.push(dispatch);
        return function () {
            var index = listeners.indexOf(dispatch);
            listeners.splice(index, 1);
        };
    }, [listeners]);
    return state[1];
};
exports.useContextSelector = useContextSelector;
