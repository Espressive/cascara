import { ComposePreparedOptions } from '../compose';
import { ComponentSlotStyle, ComponentSlotStylesResolved, ComponentVariablesInput } from '@fluentui/styles';
import { ComponentDesignProp, ComponentSlotClasses, PrimitiveProps } from '../styles/types';
declare type UseStylesOptions<StyleProps extends PrimitiveProps> = {
    /** A classname that will be added by default to all instances of a component on the `root` slot. */
    className?: string;
    /** An options from compose(), should be used only if component was created by `compose()`. */
    composeOptions?: ComposePreparedOptions;
    /**
     * A mapping from component's props to styles functions props. Can be only primitive types as they will be used for
     * cache keys.
     */
    mapPropsToStyles?: () => StyleProps;
    /**
     * A set props of that contain mapping for props that perform inline styles overrides, for example `styles` or
     * `variables`.
     */
    mapPropsToInlineStyles?: () => InlineStyleProps<any>;
    /**
     * All components props, should be used only if component was created by `compose()`. Will be replaced in future with
     * better approach.
     */
    unstable_props?: Record<string, any>;
    /** A current mode for text direction (ltr or rtl). */
    rtl?: boolean;
};
export declare type UseStylesResult = {
    classes: ComponentSlotClasses;
    styles: ComponentSlotStylesResolved;
};
declare type InlineStyleProps<ComponentProps> = {
    /** Additional CSS class name(s) to apply.  */
    className?: string;
    design?: ComponentDesignProp;
    /** Additional CSS styles to apply to the component instance.  */
    styles?: ComponentSlotStyle<ComponentProps, any>;
    /** Override for theme site variables to allow modifications of component styling via themes. */
    variables?: ComponentVariablesInput;
};
export declare const useStyles: <StyleProps extends Record<string, string | number | boolean | undefined>>(displayName: string, options: UseStylesOptions<StyleProps>) => UseStylesResult;
export {};
