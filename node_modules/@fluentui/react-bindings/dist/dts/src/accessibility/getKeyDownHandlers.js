"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyDownHandlers = void 0;
var accessibility_1 = require("@fluentui/accessibility");
var shouldHandleOnKeys_1 = require("./shouldHandleOnKeys");
var rtlKeyMap = (_a = {},
    _a[accessibility_1.keyboardKey.ArrowRight] = accessibility_1.keyboardKey.ArrowLeft,
    _a[accessibility_1.keyboardKey.ArrowLeft] = accessibility_1.keyboardKey.ArrowRight,
    _a);
/**
 * Assigns onKeyDown handler to the slot element, based on Component's actions
 * and keys mappings defined in Accessibility behavior
 * @param {AccessibilityActionHandlers} componentActionHandlers Actions handlers defined in a component.
 * @param {KeyActions} behaviorActions Mappings of actions and keys defined in Accessibility behavior.
 * @param {boolean} isRtlEnabled Indicates if Left and Right arrow keys should be swapped in RTL mode.
 */
var getKeyDownHandlers = function (componentActionHandlers, behaviorActions, isRtlEnabled) {
    var slotKeyHandlers = {};
    if (!componentActionHandlers || !behaviorActions) {
        return slotKeyHandlers;
    }
    var componentHandlerNames = Object.keys(componentActionHandlers);
    Object.keys(behaviorActions).forEach(function (slotName) {
        var behaviorSlotActions = behaviorActions[slotName];
        var handledActions = Object.keys(behaviorSlotActions).filter(function (actionName) {
            var slotAction = behaviorSlotActions[actionName];
            var actionHasKeyCombinations = Array.isArray(slotAction.keyCombinations) && slotAction.keyCombinations.length > 0;
            var actionHandledByComponent = componentHandlerNames.indexOf(actionName) !== -1;
            return actionHasKeyCombinations && actionHandledByComponent;
        });
        if (handledActions.length > 0) {
            slotKeyHandlers[slotName] = {
                onKeyDown: function (event) {
                    handledActions.forEach(function (actionName) {
                        var keyCombinations = behaviorSlotActions[actionName].keyCombinations;
                        if (keyCombinations) {
                            if (isRtlEnabled) {
                                keyCombinations = keyCombinations.map(function (keyCombination) {
                                    var keyToRtlKey = rtlKeyMap[keyCombination.keyCode];
                                    if (keyToRtlKey) {
                                        keyCombination.keyCode = keyToRtlKey;
                                    }
                                    return keyCombination;
                                });
                            }
                            if (shouldHandleOnKeys_1.shouldHandleOnKeys(event, keyCombinations)) {
                                componentActionHandlers[actionName](event);
                            }
                        }
                    });
                },
            };
        }
    });
    return slotKeyHandlers;
};
exports.getKeyDownHandlers = getKeyDownHandlers;
