"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnimationStyles = void 0;
var tslib_1 = require("tslib");
// Notice:
// This temporary lives here, will be remove once `animation` prop will be dropped
var createAnimationStyles = function (animation, theme) {
    var animationCSSProp;
    var _a = theme.animations, animations = _a === void 0 ? {} : _a;
    var animationName = animation.name;
    if (animations[animationName]) {
        var _b = animations[animationName], keyframe = _b.keyframe, duration = _b.duration, delay = _b.delay, direction = _b.direction, fillMode = _b.fillMode, iterationCount = _b.iterationCount, playState = _b.playState, timingFunction = _b.timingFunction, keyframeParams = _b.keyframeParams;
        var animationThemeKeyframeParams = keyframeParams || {};
        var animationPropKeyframeParams = animation.keyframeParams;
        var mergedKeyframeParams = animationPropKeyframeParams
            ? tslib_1.__assign(tslib_1.__assign({}, animationThemeKeyframeParams), (animationPropKeyframeParams || {})) : animationThemeKeyframeParams;
        var keyframeDefinition = typeof keyframe === 'string' ? keyframe : { keyframe: keyframe, params: mergedKeyframeParams };
        animationCSSProp = {
            animationName: keyframeDefinition,
            animationDelay: animation.delay || delay,
            animationDirection: animation.direction || direction,
            animationDuration: animation.duration || duration,
            animationFillMode: animation.fillMode || fillMode,
            animationIterationCount: animation.iterationCount || iterationCount,
            animationPlayState: animation.playState || playState,
            animationTimingFunction: animation.timingFunction || timingFunction,
        };
    }
    else {
        // animations was not found in the theme object
        animationCSSProp = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ animationName: animation.name }, (animation.delay && { animationDelay: animation.delay })), (animation.direction && { animationDirection: animation.direction })), (animation.duration && { animationDuration: animation.duration })), (animation.fillMode && { animationFillMode: animation.fillMode })), (animation.iterationCount && {
            animationIterationCount: animation.iterationCount,
        })), (animation.playState && { animationPlayState: animation.playState })), (animation.timingFunction && {
            animationTimingFunction: animation.timingFunction,
        }));
    }
    return animationCSSProp;
};
exports.createAnimationStyles = createAnimationStyles;
