"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStyles = void 0;
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
var resolveVariables_1 = require("./resolveVariables");
var resolveStyles_1 = require("./resolveStyles");
var getStyles = function (options) {
    var primaryDisplayName = options.primaryDisplayName, telemetry = options.telemetry;
    //
    // To compute styles we are going through three stages:
    // - resolve variables (siteVariables => componentVariables + props.variables)
    // - resolve styles (with resolvedVariables & props.styles & props.design)
    // - compute classes (with resolvedStyles)
    // - conditionally add sources for evaluating debug information to component
    var telemetryPartStart = (telemetry === null || telemetry === void 0 ? void 0 : telemetry.enabled) ? performance.now() : 0;
    var resolvedVariables = resolveVariables_1.resolveVariables(options.allDisplayNames, options.theme, options.inlineStylesProps.variables, options.performance.enableVariablesCaching);
    if ((telemetry === null || telemetry === void 0 ? void 0 : telemetry.enabled) && telemetry.performance[primaryDisplayName]) {
        telemetry.performance[primaryDisplayName].msResolveVariablesTotal += performance.now() - telemetryPartStart;
    }
    var _a = resolveStyles_1.resolveStyles(options, resolvedVariables), classes = _a.classes, resolvedStyles = _a.resolvedStyles, resolvedStylesDebug = _a.resolvedStylesDebug;
    // conditionally add sources for evaluating debug information to component
    if (process.env.NODE_ENV !== 'production' && styles_1.isDebugEnabled) {
        options.saveDebug({
            componentName: options.allDisplayNames.join(':'),
            componentVariables: _.filter(resolvedVariables._debug, function (variables) { return !_.isEmpty(variables.resolved); }),
            componentStyles: resolvedStylesDebug,
            siteVariables: _.filter(options.theme.siteVariables._debug, function (siteVars) {
                if (_.isEmpty(siteVars) || _.isEmpty(siteVars.resolved)) {
                    return false;
                }
                var keys = Object.keys(siteVars.resolved);
                if (keys.length === 1 && keys.pop() === 'fontSizes' && _.isEmpty(siteVars.resolved['fontSizes'])) {
                    return false;
                }
                return true;
            }),
        });
    }
    return {
        classes: classes,
        variables: resolvedVariables,
        styles: resolvedStyles,
        theme: options.theme,
    };
};
exports.getStyles = getStyles;
