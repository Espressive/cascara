"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveVariables = void 0;
var styles_1 = require("@fluentui/styles");
var variablesCache = new WeakMap();
var resolveVariables = function (displayNames, theme, variables, enabledVariablesCaching) {
    var componentThemeVariables;
    // Filter out components that doesn't have defined variables in theme
    var effectiveDisplayNames = displayNames.filter(function (displayName) { return !!theme.componentVariables[displayName]; });
    //
    // Simple caching model, works only if there is no `props.variables`
    // Resolves variables for this component, cache the result in provider
    //
    if (enabledVariablesCaching) {
        if (!variablesCache.has(theme)) {
            variablesCache.set(theme, {});
        }
        var variablesThemeCache = variablesCache.get(theme) || {};
        // const displayNames = { Foo: variables, Bar: undefined, Baz: undefined }
        // This allows to avoid creating useless cache entries for `Bar` & `Baz` components
        var handlingDisplayName = effectiveDisplayNames[effectiveDisplayNames.length - 1];
        if (!variablesThemeCache[handlingDisplayName]) {
            // A short circle to avoid additional merging for non-composed components
            if (effectiveDisplayNames.length === 1) {
                variablesThemeCache[handlingDisplayName] = styles_1.callable(theme.componentVariables[handlingDisplayName])(theme.siteVariables);
            }
            else {
                variablesThemeCache[handlingDisplayName] = styles_1.mergeComponentVariables.apply(void 0, effectiveDisplayNames.map(function (displayName) { return theme.componentVariables[displayName]; }))(theme.siteVariables);
            }
            variablesCache.set(theme, variablesThemeCache);
        }
        componentThemeVariables = variablesThemeCache[handlingDisplayName];
    }
    else if (effectiveDisplayNames.length === 1) {
        componentThemeVariables = styles_1.callable(theme.componentVariables[effectiveDisplayNames[0]])(theme.siteVariables) || {};
    }
    else {
        componentThemeVariables = styles_1.mergeComponentVariables.apply(void 0, effectiveDisplayNames.map(function (displayName) { return theme.componentVariables[displayName]; }))(theme.siteVariables);
    }
    if (variables === undefined) {
        return componentThemeVariables;
    }
    return styles_1.mergeComponentVariables(componentThemeVariables, styles_1.withDebugId(variables, 'props.variables'))(theme.siteVariables);
};
exports.resolveVariables = resolveVariables;
