import * as React from 'react';
import { useIsomorphicLayoutEffect } from './utils';
/**
 * This hook returns context selected value by selector.
 * It will only accept context created by `createContext`.
 * It will trigger re-render if only the selected value is referencially changed.
 */

export var useContextSelector = function useContextSelector(context, selector) {
  var contextValue = React.useContext(context);
  var value = contextValue.value.current,
      version = contextValue.version.current,
      listeners = contextValue.listeners;
  var selected = selector(value);

  var _React$useReducer = React.useReducer(function (prevState, payload) // from provider effect
  {
    if (!payload) {
      // early bail out when is dispatched during render
      return [value, selected];
    }

    if (payload[0] <= version) {
      if (Object.is(prevState[1], selected)) {
        return prevState; // bail out
      }

      return [value, selected];
    }

    try {
      if (Object.is(prevState[0], payload[1])) {
        return prevState; // do not update
      }

      var nextSelected = selector(payload[1]);

      if (Object.is(prevState[1], nextSelected)) {
        return prevState; // do not update
      }

      return [payload[1], nextSelected];
    } catch (e) {// ignored (stale props or some other reason)
    }

    return [].concat(prevState); // schedule update
  }, [value, selected]),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  if (!Object.is(state[1], selected)) {
    // schedule re-render
    // this is safe because it's self contained
    dispatch(undefined);
  }

  useIsomorphicLayoutEffect(function () {
    listeners.push(dispatch);
    return function () {
      var index = listeners.indexOf(dispatch);
      listeners.splice(index, 1);
    };
  }, [listeners]);
  return state[1];
};
//# sourceMappingURL=useContextSelector.js.map
