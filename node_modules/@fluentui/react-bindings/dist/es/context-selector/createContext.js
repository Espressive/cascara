import * as React from 'react';
import { runWithNormalPriority, useIsomorphicLayoutEffect } from './utils';

var createProvider = function createProvider(Original) {
  var Provider = function Provider(props) {
    // Holds an actual "props.value"
    var valueRef = React.useRef(props.value); // Used to sync context updates and avoid stale values, can be considered as render/effect counter of Provider.

    var versionRef = React.useRef(0); // A stable object, is used to avoid context updates via mutation of its values.

    var contextValue = React.useRef();

    if (!contextValue.current) {
      contextValue.current = {
        value: valueRef,
        version: versionRef,
        listeners: []
      };
    }

    useIsomorphicLayoutEffect(function () {
      valueRef.current = props.value;
      versionRef.current += 1;
      runWithNormalPriority(function () {
        contextValue.current.listeners.forEach(function (listener) {
          listener([versionRef.current, props.value]);
        });
      });
    }, [props.value]);
    return /*#__PURE__*/React.createElement(Original, {
      value: contextValue.current
    }, props.children);
  };
  /* istanbul ignore else */


  if (process.env.NODE_ENV !== 'production') {
    Provider.displayName = 'ContextSelector.Provider';
  }

  return Provider;
};

export var createContext = function createContext(defaultValue) {
  var context = /*#__PURE__*/React.createContext({
    value: {
      current: defaultValue
    },
    version: {
      current: -1
    },
    listeners: []
  });
  context.Provider = createProvider(context.Provider); // We don't support Consumer API

  delete context.Consumer;
  return context;
};
//# sourceMappingURL=createContext.js.map
