import { getKeyDownHandlers } from './getKeyDownHandlers';
var emptyBehavior = {
  attributes: {},
  keyHandlers: {}
};
export var getAccessibility = function getAccessibility(displayName, behavior, behaviorProps, isRtlEnabled, actionHandlers) {
  if (behavior === null || behavior === undefined) {
    return emptyBehavior;
  }

  var definition = behavior(behaviorProps);
  var keyHandlers = actionHandlers && definition.keyActions ? getKeyDownHandlers(actionHandlers, definition.keyActions, isRtlEnabled) : {};

  if (definition.focusZone) {
    definition.focusZone.props = Object.assign({
      // maintain behavior of focus zone in v7 behaviors
      preventFocusRestoration: true
    }, definition.focusZone.props);
  }

  if (process.env.NODE_ENV !== 'production') {
    // For the non-production builds we enable the runtime accessibility attributes validator.
    // We're adding the data-aa-class attribute which is being consumed by the validator, the
    // schema is located in @fluentui/ability-attributes package.
    if (definition.attributes) {
      Object.keys(definition.attributes).forEach(function (slotName) {
        var validatorName = definition.attributes[slotName]['data-aa-class'] || "" + displayName + (slotName === 'root' ? '' : "__" + slotName);

        if (!definition.attributes[slotName]) {
          definition.attributes[slotName] = {};
        }

        definition.attributes[slotName]['data-aa-class'] = validatorName;
      });
    }
  }

  return Object.assign({}, emptyBehavior, definition, {
    keyHandlers: keyHandlers
  });
};
//# sourceMappingURL=getAccessibility.js.map
