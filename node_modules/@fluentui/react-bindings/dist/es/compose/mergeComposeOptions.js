import { defaultComposeOptions } from './consts';
import { computeDisplayNames } from './computeDisplayNames';
export function mergeComposeOptions(input, inputOptions, parentOptions) {
  if (parentOptions === void 0) {
    parentOptions = defaultComposeOptions;
  }

  var mapPropsToSlotPropsChain = inputOptions.slotProps ? [].concat(parentOptions.slotProps, [inputOptions.slotProps]) : parentOptions.slotProps;

  var resolveSlotProps = function resolveSlotProps(props) {
    return mapPropsToSlotPropsChain.reduce(function (acc, definition) {
      var nextProps = Object.assign({}, definition(props));
      var slots = [].concat(Object.keys(acc), Object.keys(nextProps));
      var mergedSlotProps = {};
      slots.forEach(function (slot) {
        if (!mergedSlotProps[slot]) {
          mergedSlotProps[slot] = Object.assign({}, acc[slot], nextProps[slot]);
        }
      });
      return mergedSlotProps;
    }, {});
  };

  var inputClasses = Array.isArray(inputOptions.classes) ? inputOptions.classes : [inputOptions.classes];

  var state = function state(props, ref, options) {
    if (inputOptions.state) {
      return inputOptions.state(parentOptions.state(props, ref, options), ref, options);
    }

    return parentOptions.state(props, ref, options);
  };

  return {
    className: inputOptions.className || parentOptions.className,
    classes: [].concat(parentOptions.classes, inputClasses),
    displayName: inputOptions.displayName || parentOptions.displayName,
    displayNames: computeDisplayNames(inputOptions, parentOptions),
    mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps ? [].concat(parentOptions.mapPropsToStylesPropsChain, [inputOptions.mapPropsToStylesProps]) : parentOptions.mapPropsToStylesPropsChain,
    render: typeof input === 'function' ? input : parentOptions.render,
    handledProps: [].concat(parentOptions.handledProps, inputOptions.handledProps || []),
    overrideStyles: inputOptions.overrideStyles || false,
    slots: Object.assign({}, parentOptions.slots, inputOptions.slots),
    slotProps: mapPropsToSlotPropsChain,
    state: state,
    resolveSlotProps: resolveSlotProps,
    shorthandConfig: Object.assign({}, parentOptions.shorthandConfig, inputOptions.shorthandConfig)
  };
}
//# sourceMappingURL=mergeComposeOptions.js.map
