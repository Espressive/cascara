{"version":3,"sources":["compose/compose.ts"],"names":["React","wasComposedPreviously","mergeComposeOptions","compose","input","inputOptions","composeOptions","fluentComposeConfig","undefined","Component","forwardRef","props","ref","render","state","slots","__self","displayName","defaultProps"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,mBAAT,QAAoC,uBAApC;;AAEA,SAASC,OAAT,CAOEC,KAPF,EAQEC,YARF,EASE;AAAA,MADAA,YACA;AADAA,IAAAA,YACA,GADiG,EACjG;AAAA;;AACA,MAAMC,cAAc,GAAGJ,mBAAmB,CACxCE,KADwC,EAEvCC,YAFuC,EAGxCJ,qBAAqB,CAACG,KAAD,CAArB,GAA+BA,KAAK,CAACG,mBAArC,GAA2DC,SAHnB,CAA1C;AAMA,MAAMC,SAAS,gBAAIT,KAAK,CAACU,UAAN,CACjB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACd,WAAON,cAAc,CAACO,MAAf,CAAsBF,KAAtB,EAA6BC,GAA7B,oBACFN,cADE;AAELQ,MAAAA,KAAK,EAAER,cAAc,CAACQ,KAAf,CAAqBH,KAArB,EAA4BC,GAA5B,EAAiCN,cAAjC,CAFF;AAGLS,MAAAA,KAAK,oBACAT,cAAc,CAACS,KADf;AAEHC,QAAAA,MAAM,EAAEP;AAFL;AAHA,OAAP;AAQD,GAVgB,CAAnB;AAaAA,EAAAA,SAAS,CAACQ,WAAV,GAAwBX,cAAc,CAACW,WAAvC;;AAEA,MAAKb,KAAD,CAAiCc,YAArC,EAAmD;AACjDT,IAAAA,SAAS,CAACS,YAAV,GAA0Bd,KAAD,CAAiCc,YAA1D;AACD;;AAECT,EAAAA,SAAF,CAA8CF,mBAA9C,GAAoED,cAApE;AAEA,SAAOG,SAAP;AACD,C,CAED;;;AACA,eAAeN,OAAf","sourcesContent":["import * as React from 'react';\n\nimport { ComponentWithAs, ComposedComponent, ComposeOptions, Input, InputComposeComponent } from './consts';\nimport { wasComposedPreviously } from './wasComposedPreviously';\nimport { mergeComposeOptions } from './mergeComposeOptions';\n\nfunction compose<\n  TElementType extends keyof JSX.IntrinsicElements,\n  TInputProps,\n  TInputStylesProps,\n  TParentProps,\n  TParentStylesProps\n>(\n  input: Input<TElementType, TInputProps>,\n  inputOptions: ComposeOptions<TInputProps, TInputStylesProps, TParentProps, TParentStylesProps> = {},\n) {\n  const composeOptions = mergeComposeOptions(\n    input as Input,\n    (inputOptions as unknown) as ComposeOptions,\n    wasComposedPreviously(input) ? input.fluentComposeConfig : undefined,\n  );\n\n  const Component = (React.forwardRef<HTMLElement, TInputProps & TParentProps & { as?: React.ElementType }>(\n    (props, ref) => {\n      return composeOptions.render(props, ref as React.Ref<HTMLDivElement>, {\n        ...composeOptions,\n        state: composeOptions.state(props, ref, composeOptions),\n        slots: {\n          ...composeOptions.slots,\n          __self: Component,\n        },\n      });\n    },\n  ) as unknown) as ComponentWithAs<TElementType, TInputProps & TParentProps>;\n\n  Component.displayName = composeOptions.displayName;\n\n  if ((input as InputComposeComponent).defaultProps) {\n    Component.defaultProps = (input as InputComposeComponent).defaultProps;\n  }\n\n  ((Component as unknown) as ComposedComponent).fluentComposeConfig = composeOptions;\n\n  return Component;\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default compose;\n"],"file":"compose.js"}