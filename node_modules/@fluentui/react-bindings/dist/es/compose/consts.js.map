{"version":3,"sources":["compose/consts.ts"],"names":["defaultComposeOptions","className","process","env","NODE_ENV","classes","displayName","displayNames","mapPropsToStylesPropsChain","render","handledProps","overrideStyles","slots","__self","slotProps","state","props","resolveSlotProps","shorthandConfig","defaultMappedProps","iframe","img","input"],"mappings":"AAQA;AACA;AACA;AAwDA;AACA;AACA;;AAkEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAwBA;AACA;AACA;AAmBA;AACA;AACA;AAiBA;AACA;AACA;AAEA,OAAO,IAAMA,qBAAuD,GAAG;AACrEC,EAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,EAAxC,GAA6C,iBADa;AAErEC,EAAAA,OAAO,EAAE,EAF4D;AAGrEC,EAAAA,WAAW,EAAE,EAHwD;AAIrEC,EAAAA,YAAY,EAAE,EAJuD;AAKrEC,EAAAA,0BAA0B,EAAE,EALyC;AAMrEC,EAAAA,MAAM,EAAE;AAAA,WAAM,IAAN;AAAA,GAN6D;AAOrEC,EAAAA,YAAY,EAAE,EAPuD;AAQrEC,EAAAA,cAAc,EAAE,KARqD;AASrE;AACAC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAA,aAAM,IAAN;AAAA;AAAV,GAV8D;AAWrEC,EAAAA,SAAS,EAAE,EAX0D;AAYrEC,EAAAA,KAAK,EAAE,eAAAC,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAZyD;AAarEC,EAAAA,gBAAgB,EAAE;AAAA,WAAO,EAAP;AAAA,GAbmD;AAcrEC,EAAAA,eAAe,EAAE;AAdoD,CAAhE;AAiBP;AACA;AACA;;AACA,OAAO,IAAMC,kBAA0C,GAAG;AACxDC,EAAAA,MAAM,EAAE,KADgD;AAExDC,EAAAA,GAAG,EAAE,KAFmD;AAGxDC,EAAAA,KAAK,EAAE;AAHiD,CAAnD","sourcesContent":["import * as React from 'react';\n\nexport interface ShorthandConfig<TProps> {\n  mappedProp?: keyof TProps;\n  mappedArrayProp?: keyof TProps;\n  allowsJSX?: boolean;\n}\n\n//\n// \"as\" type safety\n//\n\nexport type PropsOfElement<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  E extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any> | ComponentWithAs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n> = E extends { __PRIVATE_PROPS: any }\n  ? E['__PRIVATE_PROPS']\n  : JSX.LibraryManagedAttributes<E, React.ComponentPropsWithRef<E>>;\n\nexport type ComponentWithAs<TElementType extends keyof JSX.IntrinsicElements = 'div', TProps = {}> = (<\n  TExtendedElementType extends React.ElementType = TElementType\n>(\n  props: Omit<PropsOfElement<TExtendedElementType>, 'as' | keyof TProps> & { as?: TExtendedElementType } & TProps,\n) => JSX.Element) & {\n  propTypes?: React.WeakValidationMap<TProps> & {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contextTypes?: React.ValidationMap<any>;\n  defaultProps?: Partial<TProps & { as: TElementType }>;\n  displayName?: string;\n\n  /**\n   * A hack to simplify the resolution for ComponentWithAs.\n   * @see https://github.com/microsoft/fluentui/pull/13841\n   */\n  readonly __PRIVATE_PROPS?: Omit<PropsOfElement<TElementType>, 'as' | keyof TProps> & { as?: TElementType } & TProps;\n};\n\nexport type ForwardRefWithAs<\n  TElementType extends keyof JSX.IntrinsicElements = 'div',\n  TRef extends HTMLElement = HTMLElement,\n  TProps = {}\n> = (<TExtendedElementType extends React.ElementType = TElementType>(\n  props: React.RefAttributes<TRef> &\n    Omit<PropsOfElement<TExtendedElementType>, 'as' | keyof TProps> & { as?: TExtendedElementType } & TProps,\n) => JSX.Element) & {\n  propTypes?: React.WeakValidationMap<TProps> & {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contextTypes?: React.ValidationMap<any>;\n  defaultProps?: Partial<TProps & { as: TElementType }>;\n  displayName?: string;\n\n  /**\n   * A hack to simplify the resolution for ComponentWithAs.\n   * @see https://github.com/microsoft/fluentui/pull/13841\n   */\n  readonly __PRIVATE_PROPS?: React.RefAttributes<TRef> &\n    Omit<PropsOfElement<TElementType>, 'as' | keyof TProps> & { as?: TElementType } & TProps;\n};\n\n//\n// Compose types\n//\n\nexport type ComposedComponent<TProps = {}> = React.FunctionComponent<TProps> & {\n  fluentComposeConfig: Required<ComposePreparedOptions>;\n};\n\nexport type InputComposeComponent<TProps = {}> = React.FunctionComponent<TProps> & {\n  fluentComposeConfig?: Required<ComposePreparedOptions>;\n};\n\nexport type Input<TElementType extends React.ElementType = 'div', TProps = {}> =\n  | InputComposeComponent<TProps>\n  | ComposeRenderFunction<TElementType, TProps & { as?: React.ElementType }>;\n\nexport type ComposeRenderFunction<\n  TElementType extends React.ElementType = 'div',\n  TProps = {},\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _TState = TProps\n> = (\n  props: TProps,\n  ref: React.Ref<TElementType extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[TElementType] : TElementType>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options: ComposePreparedOptions & { state: any },\n) => React.ReactElement | null;\n\nexport type ComposeOptions<\n  TInputProps = {},\n  TInputStylesProps = {},\n  TParentProps = {},\n  TParentStylesProps = {},\n  TState = TParentProps & TInputProps\n> = {\n  className?: string;\n\n  classes?: ClassDictionary | ClassFunction | (ClassDictionary | ClassFunction)[];\n\n  displayName?: string;\n\n  mapPropsToStylesProps?: (props: TParentStylesProps & TInputProps) => TInputStylesProps;\n\n  handledProps?: (keyof TInputProps | 'as')[];\n\n  overrideStyles?: boolean;\n\n  slots?: Record<string, React.ElementType>;\n\n  slotProps?: (props: TParentProps & TInputProps) => Record<string, object>;\n\n  shorthandConfig?: ShorthandConfig<TParentProps & TInputProps>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  state?: (props: TState, ref: React.Ref<HTMLElement>, options: ComposePreparedOptions) => any;\n};\n\nexport type MergePropsResult<\n  TState extends GenericDictionary,\n  TSlots = GenericDictionary,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TSlotProps = { [key in keyof TSlots]: any }\n> = {\n  state: TState;\n  slots: TSlots;\n  slotProps: TSlotProps;\n};\n\n/**\n * Generic name to any dictionary.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type GenericDictionary = Record<string, any>;\n\n/**\n * Generic set of module to class name map.\n */\nexport type ClassDictionary = Record<string, string>;\n\n/**\n * Generic class resolver function type.\n */\nexport type ClassFunction = (state: GenericDictionary, slots: GenericDictionary) => ClassDictionary;\n\n/**\n * Merged ComposeOptions.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ComposePreparedOptions<TProps = {}, TInputState = any, TParentState = TProps> = {\n  className: string;\n  classes: (undefined | ClassDictionary | ClassFunction)[];\n\n  displayName: string;\n  displayNames: string[];\n\n  mapPropsToStylesPropsChain: ((props: object) => object)[];\n  render: ComposeRenderFunction;\n\n  handledProps: (keyof TProps | 'as')[];\n\n  overrideStyles: boolean;\n\n  slots: Record<string, React.ElementType> & { __self: React.ElementType };\n  slotProps: ((props: TProps) => Record<string, object>)[];\n\n  state: (props: TParentState, ref: React.Ref<HTMLElement>, options: ComposePreparedOptions) => TInputState;\n\n  resolveSlotProps: <TResolvedProps>(props: TResolvedProps) => Record<string, object>;\n  shorthandConfig: ShorthandConfig<TProps>;\n};\n\n//\n// Component types\n//\n\nexport interface ComponentProps {\n  as?: React.ElementType;\n\n  className?: string;\n}\n\nexport interface BaseSlots {\n  root: React.ElementType;\n}\n\nexport type SlotProps<TSlots extends BaseSlots, TProps, TRootProps extends React.HTMLAttributes<HTMLElement>> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key in keyof Omit<TSlots, 'root'>]: key extends keyof TProps ? TProps[key] : any;\n} & {\n  root: TRootProps;\n};\n\n//\n// Slot Prop / Shorthand types\n//\n\nexport type SlotPropRenderFunction<TProps> = (Component: React.ElementType<TProps>, props: TProps) => React.ReactNode;\n\nexport type ObjectSlotProp<TProps extends GenericDictionary> = TProps & {\n  children?: TProps['children'] | SlotPropRenderFunction<TProps>;\n};\n\nexport type SlotProp<TProps> =\n  | React.ReactChild\n  | React.ReactNodeArray\n  | React.ReactPortal\n  | boolean\n  | null\n  | undefined\n  | ObjectSlotProp<TProps>;\n\n//\n//\n//\n\nexport const defaultComposeOptions: Required<ComposePreparedOptions> = {\n  className: process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',\n  classes: [],\n  displayName: '',\n  displayNames: [],\n  mapPropsToStylesPropsChain: [],\n  render: () => null,\n  handledProps: [] as never[],\n  overrideStyles: false,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  slots: { __self: () => null },\n  slotProps: [],\n  state: props => props,\n  resolveSlotProps: () => ({}),\n  shorthandConfig: {},\n};\n\n/**\n * A set of mapped props for intrinsic element types.\n */\nexport const defaultMappedProps: Record<string, string> = {\n  iframe: 'src',\n  img: 'src',\n  input: 'type',\n};\n"],"file":"consts.js"}