{"version":3,"sources":["styles/resolveVariables.ts"],"names":["callable","mergeComponentVariables","withDebugId","variablesCache","WeakMap","resolveVariables","displayNames","theme","variables","enabledVariablesCaching","componentThemeVariables","effectiveDisplayNames","filter","displayName","componentVariables","has","set","variablesThemeCache","get","handlingDisplayName","length","siteVariables","map","undefined"],"mappings":"AAAA,SACEA,QADF,EAIEC,uBAJF,EAMEC,WANF,QAOO,kBAPP;AASA,IAAMC,cAAc,GAAG,IAAIC,OAAJ,EAAvB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BC,YAD8B,EAE9BC,KAF8B,EAG9BC,SAH8B,EAI9BC,uBAJ8B,EAKD;AAC7B,MAAIC,uBAAJ,CAD6B,CAG7B;;AACA,MAAMC,qBAAqB,GAAGL,YAAY,CAACM,MAAb,CAAoB,UAAAC,WAAW;AAAA,WAAI,CAAC,CAACN,KAAK,CAACO,kBAAN,CAAyBD,WAAzB,CAAN;AAAA,GAA/B,CAA9B,CAJ6B,CAM7B;AACA;AACA;AACA;;AAEA,MAAIJ,uBAAJ,EAA6B;AAC3B,QAAI,CAACN,cAAc,CAACY,GAAf,CAAmBR,KAAnB,CAAL,EAAgC;AAC9BJ,MAAAA,cAAc,CAACa,GAAf,CAAmBT,KAAnB,EAA0B,EAA1B;AACD;;AAED,QAAMU,mBAAmB,GAAGd,cAAc,CAACe,GAAf,CAAmBX,KAAnB,KAA6B,EAAzD,CAL2B,CAO3B;AACA;;AACA,QAAMY,mBAAmB,GAAGR,qBAAqB,CAACA,qBAAqB,CAACS,MAAtB,GAA+B,CAAhC,CAAjD;;AAEA,QAAI,CAACH,mBAAmB,CAACE,mBAAD,CAAxB,EAA+C;AAC7C;AACA,UAAIR,qBAAqB,CAACS,MAAtB,KAAiC,CAArC,EAAwC;AACtCH,QAAAA,mBAAmB,CAACE,mBAAD,CAAnB,GAA2CnB,QAAQ,CAACO,KAAK,CAACO,kBAAN,CAAyBK,mBAAzB,CAAD,CAAR,CACzCZ,KAAK,CAACc,aADmC,CAA3C;AAGD,OAJD,MAIO;AACLJ,QAAAA,mBAAmB,CAACE,mBAAD,CAAnB,GAA2ClB,uBAAuB,MAAvB,SACtCU,qBAAqB,CAACW,GAAtB,CAA0B,UAAAT,WAAW;AAAA,iBAAIN,KAAK,CAACO,kBAAN,CAAyBD,WAAzB,CAAJ;AAAA,SAArC,CADsC,EAEzCN,KAAK,CAACc,aAFmC,CAA3C;AAGD;;AAEDlB,MAAAA,cAAc,CAACa,GAAf,CAAmBT,KAAnB,EAA0BU,mBAA1B;AACD;;AAEDP,IAAAA,uBAAuB,GAAGO,mBAAmB,CAACE,mBAAD,CAA7C;AACD,GA3BD,MA2BO,IAAIR,qBAAqB,CAACS,MAAtB,KAAiC,CAArC,EAAwC;AAC7CV,IAAAA,uBAAuB,GAAGV,QAAQ,CAACO,KAAK,CAACO,kBAAN,CAAyBH,qBAAqB,CAAC,CAAD,CAA9C,CAAD,CAAR,CAA6DJ,KAAK,CAACc,aAAnE,KAAqF,EAA/G;AACD,GAFM,MAEA;AACLX,IAAAA,uBAAuB,GAAGT,uBAAuB,MAAvB,SACrBU,qBAAqB,CAACW,GAAtB,CAA0B,UAAAT,WAAW;AAAA,aAAIN,KAAK,CAACO,kBAAN,CAAyBD,WAAzB,CAAJ;AAAA,KAArC,CADqB,EAExBN,KAAK,CAACc,aAFkB,CAA1B;AAGD;;AAED,MAAIb,SAAS,KAAKe,SAAlB,EAA6B;AAC3B,WAAOb,uBAAP;AACD;;AAED,SAAOT,uBAAuB,CAC5BS,uBAD4B,EAE5BR,WAAW,CAACM,SAAD,EAAY,iBAAZ,CAFiB,CAAvB,CAGLD,KAAK,CAACc,aAHD,CAAP;AAID,CA3DM","sourcesContent":["import {\n  callable,\n  ComponentVariablesInput,\n  ComponentVariablesObject,\n  mergeComponentVariables,\n  ThemePrepared,\n  withDebugId,\n} from '@fluentui/styles';\n\nconst variablesCache = new WeakMap<ThemePrepared, Record<string, ComponentVariablesObject>>();\n\nexport const resolveVariables = (\n  displayNames: string[],\n  theme: ThemePrepared,\n  variables: ComponentVariablesInput | undefined,\n  enabledVariablesCaching: boolean | undefined,\n): ComponentVariablesObject => {\n  let componentThemeVariables: ComponentVariablesObject;\n\n  // Filter out components that doesn't have defined variables in theme\n  const effectiveDisplayNames = displayNames.filter(displayName => !!theme.componentVariables[displayName]);\n\n  //\n  // Simple caching model, works only if there is no `props.variables`\n  // Resolves variables for this component, cache the result in provider\n  //\n\n  if (enabledVariablesCaching) {\n    if (!variablesCache.has(theme)) {\n      variablesCache.set(theme, {});\n    }\n\n    const variablesThemeCache = variablesCache.get(theme) || {};\n\n    // const displayNames = { Foo: variables, Bar: undefined, Baz: undefined }\n    // This allows to avoid creating useless cache entries for `Bar` & `Baz` components\n    const handlingDisplayName = effectiveDisplayNames[effectiveDisplayNames.length - 1];\n\n    if (!variablesThemeCache[handlingDisplayName]) {\n      // A short circle to avoid additional merging for non-composed components\n      if (effectiveDisplayNames.length === 1) {\n        variablesThemeCache[handlingDisplayName] = callable(theme.componentVariables[handlingDisplayName])(\n          theme.siteVariables,\n        );\n      } else {\n        variablesThemeCache[handlingDisplayName] = mergeComponentVariables(\n          ...effectiveDisplayNames.map(displayName => theme.componentVariables[displayName]),\n        )(theme.siteVariables);\n      }\n\n      variablesCache.set(theme, variablesThemeCache);\n    }\n\n    componentThemeVariables = variablesThemeCache[handlingDisplayName];\n  } else if (effectiveDisplayNames.length === 1) {\n    componentThemeVariables = callable(theme.componentVariables[effectiveDisplayNames[0]])(theme.siteVariables) || {};\n  } else {\n    componentThemeVariables = mergeComponentVariables(\n      ...effectiveDisplayNames.map(displayName => theme.componentVariables[displayName]),\n    )(theme.siteVariables);\n  }\n\n  if (variables === undefined) {\n    return componentThemeVariables;\n  }\n\n  return mergeComponentVariables(\n    componentThemeVariables,\n    withDebugId(variables, 'props.variables'),\n  )(theme.siteVariables);\n};\n"],"file":"resolveVariables.js"}