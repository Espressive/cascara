import { Accessibility, AccessibilityAttributesBySlot } from '@fluentui/accessibility';
import * as React from 'react';
import { AccessibilityActionHandlers, KeyboardEventHandler, ReactAccessibilityBehavior } from '../accessibility/types';
declare type UseAccessibilityOptions<Props> = {
    actionHandlers?: AccessibilityActionHandlers;
    debugName?: string;
    mapPropsToBehavior?: () => Props;
    rtl?: boolean;
};
declare type UseAccessibilityResult = (<SlotProps extends Record<string, any> & UserProps>(slotName: string, slotProps: SlotProps) => MergedProps<SlotProps>) & {
    unstable_wrapWithFocusZone: (children: React.ReactElement) => React.ReactElement;
    unstable_behaviorDefinition: () => ReactAccessibilityBehavior;
};
declare type UserProps = {
    onKeyDown?: KeyboardEventHandler;
};
declare type MergedProps<SlotProps extends Record<string, any> = any> = SlotProps & Partial<AccessibilityAttributesBySlot> & UserProps;
export declare const useAccessibility: <Props>(behavior: Accessibility<Props>, options?: UseAccessibilityOptions<Props>) => UseAccessibilityResult;
export {};
