import * as React from 'react';
import { getAccessibility } from '../accessibility/getAccessibility';
import { FocusZone } from '../FocusZone/FocusZone';
import { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';
export var useAccessibility = function useAccessibility(behavior, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      actionHandlers = _options.actionHandlers,
      _options$debugName = _options.debugName,
      debugName = _options$debugName === void 0 ? 'Undefined' : _options$debugName,
      _options$mapPropsToBe = _options.mapPropsToBehavior,
      mapPropsToBehavior = _options$mapPropsToBe === void 0 ? function () {
    return {};
  } : _options$mapPropsToBe,
      _options$rtl = _options.rtl,
      rtl = _options$rtl === void 0 ? false : _options$rtl;
  var definition = getAccessibility(debugName, behavior, mapPropsToBehavior(), rtl, actionHandlers);
  var latestDefinition = React.useRef();
  var slotHandlers = React.useRef({});
  var slotProps = React.useRef({});
  useIsomorphicLayoutEffect(function () {
    latestDefinition.current = definition;
  });

  var getA11yProps = function getA11yProps(slotName, userProps) {
    var hasKeyDownHandlers = Boolean(definition.keyHandlers[slotName] || userProps.onKeyDown);
    var childBehavior = definition.childBehaviors ? definition.childBehaviors[slotName] : undefined;
    slotProps.current[slotName] = userProps; // We want to avoid adding event handlers until it's really needed

    if (hasKeyDownHandlers) {
      if (!slotHandlers.current[slotName]) {
        slotHandlers.current[slotName] = function (e) {
          var _latestDefinition$cur, _latestDefinition$cur2;

          var accessibilityHandler = (_latestDefinition$cur = latestDefinition.current) == null ? void 0 : (_latestDefinition$cur2 = _latestDefinition$cur.keyHandlers[slotName]) == null ? void 0 : _latestDefinition$cur2.onKeyDown;
          var userHandler = slotProps.current[slotName].onKeyDown;
          if (accessibilityHandler) accessibilityHandler(e);

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (userHandler) userHandler.apply(void 0, [e].concat(args));
        };
      }
    } else {
      delete slotHandlers.current[slotName];
    }

    var finalProps = Object.assign({}, childBehavior && {
      accessibility: childBehavior
    }, definition.attributes[slotName], userProps, {
      onKeyDown: slotHandlers.current[slotName]
    });
    return finalProps;
  }; // Provides an experimental handling for FocusZone definition in behaviors


  getA11yProps.unstable_wrapWithFocusZone = function (element) {
    if (definition.focusZone) {
      var child = element;

      if (process.env.NODE_ENV !== 'production') {
        child = React.Children.only(element);
      }

      return /*#__PURE__*/React.createElement(FocusZone, Object.assign({}, definition.focusZone.props, child.props, {
        as: child.type,
        isRtl: rtl
      }));
    }

    return element;
  };

  getA11yProps.unstable_behaviorDefinition = function () {
    return definition;
  };

  return getA11yProps;
};
//# sourceMappingURL=useAccessibility.js.map
