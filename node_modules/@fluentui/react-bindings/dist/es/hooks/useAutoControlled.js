import * as React from 'react';

var isUndefined = function isUndefined(value) {
  return typeof value === 'undefined';
};
/**
 * Returns a stateful value, and a function to update it. Mimics the `useState()` React Hook
 * signature.
 */


export var useAutoControlled = function useAutoControlled(options) {
  var _React$useState = React.useState(isUndefined(options.defaultValue) ? options.initialValue : options.defaultValue),
      stateValue = _React$useState[0],
      setStateValue = _React$useState[1];

  var value = isUndefined(options.value) ? stateValue : options.value; // Used to avoid dependencies in "setValue"

  var valueRef = React.useRef(value);
  React.useEffect(function () {
    valueRef.current = value;
  }, [value]);
  var setValue = React.useCallback(function (newState) {
    if (typeof newState === 'function') {
      // Handles functional updates
      // https://reactjs.org/docs/hooks-reference.html#functional-updates
      valueRef.current = newState(valueRef.current);
    } else {
      valueRef.current = newState;
    }

    setStateValue(valueRef.current);
  }, []);
  return [value, setValue];
};
//# sourceMappingURL=useAutoControlled.js.map
