{"version":3,"sources":["hooks/useUnhandledProps.ts"],"names":["getUnhandledProps","useUnhandledProps","handledProps","props","process","env","NODE_ENV"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,YAA3B,EAAmDC,KAAnD,EAAoG;AACzG,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAON,iBAAiB,CAACE,YAAD,oBACnBC,KADmB;AAEtB,kCAA4B;AAFN,OAAxB;AAID;;AAED,SAAOH,iBAAiB,CAACE,YAAD,EAAeC,KAAf,CAAxB;AACD","sourcesContent":["import { getUnhandledProps } from '../utils/getUnhandledProps';\n\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\nexport function useUnhandledProps(handledProps: string[], props: Record<string, any>): Record<string, any> {\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps(handledProps, {\n      ...props,\n      'data-uses-unhanded-props': true,\n    } as Record<string, any>);\n  }\n\n  return getUnhandledProps(handledProps, props);\n}\n"],"file":"useUnhandledProps.js"}