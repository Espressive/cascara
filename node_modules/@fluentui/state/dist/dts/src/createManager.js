"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createManager = void 0;
var tslib_1 = require("tslib");
var createManager = function (config) {
    var actions = config.actions, debug = config.debug, _a = config.middleware, middleware = _a === void 0 ? [] : _a, _b = config.sideEffects, sideEffects = _b === void 0 ? [] : _b, state = config.state;
    var _state = tslib_1.__assign({}, state);
    var getState = function () { return (tslib_1.__assign({}, _state)); };
    var setState = function (partial) { return Object.assign(_state, partial); };
    var manager = {
        actions: {},
        get state() {
            return getState();
        },
    };
    // assign actions to manager's api
    Object.keys(actions).forEach(function (actionName) {
        var enhancedAction = actions[actionName];
        var action = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var prevState = getState();
            applyAction.apply(void 0, tslib_1.__spreadArrays([enhancedAction], args));
            applyMiddleware(prevState);
            applySideEffects(prevState);
        };
        manager.actions[actionName] = action;
    });
    var applyAction = function (action) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (process.env.NODE_ENV !== 'production') {
            if (debug) {
                // eslint-disable-next-line no-console
                console.log('manager ACTION', action.name || 'Anonymous');
            }
        }
        var actionResult = action.apply(void 0, args)(getState(), manager.actions);
        if (actionResult) {
            setState(actionResult);
        }
    };
    var applyMiddleware = function (prevState) {
        middleware.forEach(function (middlewareItem, index) {
            if (process.env.NODE_ENV !== 'production') {
                if (debug) {
                    // eslint-disable-next-line no-console
                    console.log("manager MIDDLEWARE[" + index + "]", {
                        prev: prevState,
                        next: getState(),
                    });
                }
            }
            setState(middlewareItem(prevState, getState(), manager.actions));
        });
    };
    var applySideEffects = function (prevState) {
        sideEffects.forEach(function (sideEffect, index) {
            if (process.env.NODE_ENV !== 'production') {
                if (debug) {
                    // eslint-disable-next-line no-console
                    console.log("manager SIDE_EFFECT[" + index + "]");
                }
            }
            sideEffect(prevState, manager.state);
        });
    };
    return manager;
};
exports.createManager = createManager;
