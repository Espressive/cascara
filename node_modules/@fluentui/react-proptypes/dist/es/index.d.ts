import * as PropTypes from 'prop-types';
declare type ObjectOf<T> = Record<string, T>;
/**
 * Ensure a prop is a valid DOM node.
 */
export declare const domNode: (props: ObjectOf<any>, propName: string) => Error;
/**
 * Similar to PropTypes.oneOf but shows closest matches.
 * Word order is ignored allowing `left chevron` to match `chevron left`.
 * Useful for very large lists of options (e.g. Icon name, Flag name, etc.)
 * @param suggestions - An array of allowed values.
 */
export declare const suggest: (suggestions: string[]) => (props: ObjectOf<any>, propName: string, componentName: string) => Error;
/**
 * The prop cannot be used.
 * Similar to `deprecate` but with different error message.
 */
export declare const never: (props: ObjectOf<any>, propName: string, componentName: string) => Error;
/**
 * Disallow other props from being defined with this prop.
 * @param disallowedProps - An array of props that cannot be used with this prop.
 */
export declare const disallow: (disallowedProps: string[]) => (props: ObjectOf<any>, propName: string, componentName: string) => Error;
/**
 * Ensure a prop adherers to multiple prop type validators.
 * @param validators - An array of propType functions.
 */
export declare const every: (validators: Function[]) => (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
/**
 * Ensure a prop adherers to at least one of the given prop type validators.
 * @param validators - An array of propType functions.
 */
export declare const some: (validators: Function[]) => (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => Error;
/**
 * Ensure a validator passes only when a component has a given propsShape.
 * @param propsShape - An object describing the prop shape.
 * @param validator - A propType function.
 */
export declare const givenProps: (propsShape: Record<string, any>, validator: Function) => (props: ObjectOf<any>, propName: string, componentName: string, ...args: any) => any;
/**
 * Define prop dependencies by requiring other props.
 * @param requiredProps - An array of required prop names.
 */
export declare const demand: (requiredProps: string[]) => (props: ObjectOf<any>, propName: string, componentName: string) => Error;
/**
 * Ensure an multiple prop contains a string with only possible values.
 * @param possible - An array of possible values to prop.
 */
export declare const multipleProp: (possible: string[]) => (props: ObjectOf<string | false>, propName: string, componentName: string) => Error;
/**
 * Ensure a component can render as a node passed as a prop value in place of children.
 */
export declare const nodeContent: (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
export declare const wrapperShorthand: PropTypes.Requireable<PropTypes.ReactNodeLike>;
/**
 * A shorthand prop which can be used together with `children`.
 */
export declare const shorthandAllowingChildren: PropTypes.Requireable<PropTypes.ReactNodeLike>;
export declare const shorthandObjectAllowingChildren: PropTypes.Requireable<object>;
/**
 * ObjectItemShorthand is a description of a component that can be
 * a props object or a render function.
 */
export declare const objectItemShorthand: (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
/**
 * Item shorthand is a description of a component that can be a literal,
 * a props object, an element or a render function.
 */
export declare const itemShorthand: (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
export declare const itemShorthandWithKindProp: (kindPropValues: string[]) => (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
export declare const itemShorthandWithoutJSX: (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
/**
 * Collection shorthand ensures a prop is an array of item shorthand.
 */
export declare const collectionObjectShorthand: (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
/**
 * Collection shorthand ensures a prop is an array of item shorthand.
 */
export declare const collectionShorthand: (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
export declare const collectionShorthandWithKindProp: (kindPropValues: string[]) => (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => any;
/**
 * Show a deprecated warning for component props with a help message and optional validator.
 * @param help - A help message to display with the deprecation warning.
 * @param validator - A propType function.
 */
export declare const deprecate: (help: string, validator?: Function) => (props: ObjectOf<any>, propName: string, componentName: string, ...args: any[]) => Error;
export declare const accessibility: PropTypes.Requireable<(...args: any[]) => any>;
export declare const size: PropTypes.Requireable<"small" | "smallest" | "smaller" | "medium" | "large" | "larger" | "largest">;
export declare const align: PropTypes.Requireable<"start" | "end" | "center" | "justify">;
export declare const animation: PropTypes.Requireable<any>;
export declare const design: PropTypes.Requireable<PropTypes.InferProps<{
    position: PropTypes.Requireable<any>;
    display: PropTypes.Requireable<any>;
    top: PropTypes.Requireable<string>;
    right: PropTypes.Requireable<string>;
    bottom: PropTypes.Requireable<string>;
    left: PropTypes.Requireable<string>;
    padding: PropTypes.Requireable<string>;
    paddingTop: PropTypes.Requireable<string>;
    paddingRight: PropTypes.Requireable<string>;
    paddingBottom: PropTypes.Requireable<string>;
    paddingLeft: PropTypes.Requireable<string>;
    margin: PropTypes.Requireable<string>;
    marginTop: PropTypes.Requireable<string>;
    marginRight: PropTypes.Requireable<string>;
    marginBottom: PropTypes.Requireable<string>;
    marginLeft: PropTypes.Requireable<string>;
    width: PropTypes.Requireable<string>;
    height: PropTypes.Requireable<string>;
    minWidth: PropTypes.Requireable<string>;
    maxWidth: PropTypes.Requireable<string>;
    minHeight: PropTypes.Requireable<string>;
    maxHeight: PropTypes.Requireable<string>;
}>>;
/** A checker that matches the React.Ref type. */
export declare const ref: PropTypes.Requireable<((...args: any[]) => any) | {
    current: any;
}>;
export {};
