"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userDepsTemplate = userDepsTemplate;

var _path = _interopRequireDefault(require("path"));

var _slash = _interopRequireDefault(require("slash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function userDepsTemplate(_ref) {
  var globalImports = _ref.globalImports,
      fixturePaths = _ref.fixturePaths,
      decoratorPaths = _ref.decoratorPaths,
      rendererConfig = _ref.rendererConfig,
      rootDir = _ref.rootDir,
      relativeToDir = _ref.relativeToDir;
  var fixtures = createImportMap(fixturePaths, rootDir, relativeToDir);
  var fixtureKeys = Object.keys(fixtures);
  var decorators = createImportMap(decoratorPaths, rootDir, relativeToDir);
  var decoratorKeys = Object.keys(decorators);
  return "\n// This file is automatically generated by Cosmos. Add it to .gitignore and\n// only edit if you know what you're doing.\n\n// Keeping global imports here is superior to making them bundle entry points\n// because this way they become hot-reloadable.\n".concat(globalImports.map(function (p) {
    return "import '".concat(resolveImportPath(p, relativeToDir), "';");
  }).join("\n"), "\n\n").concat(fixtureKeys.map(function (k, i) {
    return "import fixture".concat(i, " from '").concat(fixtures[k], "';");
  }).join("\n"), "\n\n").concat(decoratorKeys.map(function (k, i) {
    return "import decorator".concat(i, " from '").concat(decorators[k], "';");
  }).join("\n"), "\n\nexport const rendererConfig = ").concat(JSON.stringify(rendererConfig, null, 2), ";\n\nexport const fixtures = {\n").concat(fixtureKeys.map(function (k, i) {
    return "  '".concat(k, "': fixture").concat(i);
  }).join(",\n"), "\n};\n\nexport const decorators = {\n").concat(decoratorKeys.map(function (k, i) {
    return "  '".concat(k, "': decorator").concat(i);
  }).join(",\n"), "\n};\n").trimLeft();
}

function createImportMap(paths, rootDir, relativeToDir) {
  return paths.reduce(function (acc, p) {
    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, (0, _slash.default)(_path.default.relative(rootDir, p)), resolveImportPath(p, relativeToDir)));
  }, {});
}

function resolveImportPath(filePath, relativeToDir) {
  return (0, _slash.default)(relativeToDir ? ".".concat(_path.default.sep).concat(_path.default.relative(relativeToDir, filePath)) : filePath);
}