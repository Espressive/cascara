"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFixturesSync = getFixturesSync;
exports.getFixtures = void 0;

var _FixtureLoader = require("react-cosmos-shared2/FixtureLoader");

var _react = require("react-cosmos-shared2/react");

var _userDeps = require("./shared/userDeps");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var getFixtures = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(args) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getFixturesSync(args));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getFixtures(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.getFixtures = getFixtures;

function getFixturesSync(_ref2) {
  var cosmosConfig = _ref2.cosmosConfig;

  var _getUserModules = (0, _userDeps.getUserModules)(cosmosConfig),
      fixtureExportsByPath = _getUserModules.fixtureExportsByPath,
      decoratorsByPath = _getUserModules.decoratorsByPath;

  var fixtures = [];
  Object.keys(fixtureExportsByPath).forEach(function (fixturePath) {
    var fixtureExport = fixtureExportsByPath[fixturePath];

    if ((0, _react.isMultiFixture)(fixtureExport)) {
      // FIXME: Why does fixtureExport need to be cast as ReactFixtureMap when
      // the type predicate returned by isMultiFixture already ensures it?
      var multiFixtureExport = fixtureExport;
      Object.keys(fixtureExport).forEach(function (fixtureName) {
        var fixtureId = {
          path: fixturePath,
          name: fixtureName
        };
        fixtures.push({
          fixtureId: fixtureId,
          getElement: createFixtureElementGetter(multiFixtureExport[fixtureName], fixturePath, decoratorsByPath)
        });
      });
    } else {
      var fixtureId = {
        path: fixturePath,
        name: null
      };
      fixtures.push({
        fixtureId: fixtureId,
        getElement: createFixtureElementGetter(fixtureExport, fixturePath, decoratorsByPath)
      });
    }
  });
  return fixtures;
}

function createFixtureElementGetter(fixture, fixturePath, decoratorsByPath) {
  var decorators = (0, _react.getSortedDecoratorsForFixturePath)(fixturePath, decoratorsByPath);
  return function () {
    return (0, _FixtureLoader.getDecoratedFixtureElement)(fixture, decorators, {
      fixtureState: {},
      setFixtureState: function setFixtureState() {},
      onErrorReset: function onErrorReset() {}
    });
  };
}