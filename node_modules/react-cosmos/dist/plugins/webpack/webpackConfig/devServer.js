"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDevWebpackConfig = getDevWebpackConfig;

var _path = _interopRequireDefault(require("path"));

var _webpack = require("../cosmosConfig/webpack");

var _htmlPlugin = require("./htmlPlugin");

var _shared = require("./shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getDevWebpackConfig(_x, _x2) {
  return _getDevWebpackConfig.apply(this, arguments);
}

function _getDevWebpackConfig() {
  _getDevWebpackConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(cosmosConfig, userWebpack) {
    var _webpackConfig$optimi;

    var baseWebpackConfig, webpackConfig, name;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _shared.getUserWebpackConfig)(cosmosConfig, userWebpack);

          case 2:
            baseWebpackConfig = _context.sent;
            webpackConfig = _objectSpread(_objectSpread({}, baseWebpackConfig), {}, {
              entry: getEntry(cosmosConfig),
              output: getOutput(cosmosConfig),
              module: _objectSpread(_objectSpread({}, baseWebpackConfig.module), {}, {
                rules: getRules(baseWebpackConfig)
              }),
              resolve: (0, _shared.resolveLocalReactDeps)(cosmosConfig, baseWebpackConfig),
              plugins: getPlugins(cosmosConfig, baseWebpackConfig, userWebpack)
            }); // optimization.splitChunks.name = false breaks auto fixture file discovery.
            // When the splitChunks.name is set to false, existing fixtures hot reload
            // fine, but added or removed fixture files don't appear or disappear in the
            // React Cosmos UI automatically â€” a page refresh is required. The webpack
            // build updates correctly, but module.hot.accept isn't called on the client:
            // https://github.com/react-cosmos/react-cosmos/blob/548e9b7e9ca9fbc66f3915861cf1ae9d60222b28/packages/react-cosmos/src/plugins/webpack/client/index.ts#L24-L29
            // Create React App uses this setting:
            // https://github.com/facebook/create-react-app/blob/37712374bcaa6ccb168eeaf4fe8bd52d120dbc58/packages/react-scripts/config/webpack.config.js#L286
            // Apparently it's a webpack 4 bug:
            // https://twitter.com/wSokra/status/1255925851557974016

            if ((_webpackConfig$optimi = webpackConfig.optimization) !== null && _webpackConfig$optimi !== void 0 && _webpackConfig$optimi.splitChunks) {
              name = webpackConfig.optimization.splitChunks.name;
              if (name === false) delete webpackConfig.optimization.splitChunks.name;
            }

            return _context.abrupt("return", webpackConfig);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getDevWebpackConfig.apply(this, arguments);
}

function getEntry(cosmosConfig) {
  var _createWebpackCosmosC = (0, _webpack.createWebpackCosmosConfig)(cosmosConfig),
      hotReload = _createWebpackCosmosC.hotReload; // The React devtools hook needs to be imported before any other module that
  // might import React


  var devtoolsHook = (0, _shared.resolveClientPath)('reactDevtoolsHook');
  var clientIndex = (0, _shared.resolveClientPath)('index');
  return hotReload ? [devtoolsHook, getHotMiddlewareEntry(), clientIndex] : [devtoolsHook, clientIndex];
}

function getOutput(_ref) {
  var publicUrl = _ref.publicUrl;
  var filename = '[name].js';
  return {
    filename: filename,
    publicPath: publicUrl,
    // Enable click-to-open source in react-error-overlay
    devtoolModuleFilenameTemplate: function devtoolModuleFilenameTemplate(info) {
      return _path.default.resolve(info.absoluteResourcePath).replace(/\\/g, '/');
    }
  };
}

function getRules(baseWebpackConfig) {
  var existingRules = baseWebpackConfig.module && baseWebpackConfig.module.rules || [];
  return [].concat(_toConsumableArray(existingRules), [(0, _shared.getUserDepsLoaderRule)()]);
}

function getPlugins(cosmosConfig, baseWebpackConfig, userWebpack) {
  var existingPlugins = baseWebpackConfig.plugins || [];
  var globalsPlugin = (0, _shared.getGlobalsPlugin)(cosmosConfig, userWebpack, true);
  var noEmitErrorsPlugin = new userWebpack.NoEmitOnErrorsPlugin();
  var plugins = [].concat(_toConsumableArray(existingPlugins), [globalsPlugin, noEmitErrorsPlugin]);

  var _createWebpackCosmosC2 = (0, _webpack.createWebpackCosmosConfig)(cosmosConfig),
      hotReload = _createWebpackCosmosC2.hotReload;

  if (hotReload && !(0, _shared.hasPlugin)(plugins, 'HotModuleReplacementPlugin')) {
    var hmrPlugin = new userWebpack.HotModuleReplacementPlugin();
    plugins = [].concat(_toConsumableArray(plugins), [hmrPlugin]);
  }

  return (0, _htmlPlugin.ensureHtmlWebackPlugin)(cosmosConfig, plugins);
}

function getHotMiddlewareEntry() {
  var clientPath = require.resolve('@skidding/webpack-hot-middleware/client');

  return "".concat(clientPath, "?reload=true&overlay=false");
}