"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserWebpackConfig = getUserWebpackConfig;
exports.getBaseWebpackConfig = getBaseWebpackConfig;
exports.resolveClientPath = resolveClientPath;
exports.getUserDepsLoaderRule = getUserDepsLoaderRule;
exports.resolveLocalReactDeps = resolveLocalReactDeps;
exports.getGlobalsPlugin = getGlobalsPlugin;
exports.hasPlugin = hasPlugin;
exports.isInstanceOfPlugin = isInstanceOfPlugin;
exports.getNodeEnv = getNodeEnv;

var _path = _interopRequireDefault(require("path"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _cli = require("../../../shared/cli");

var _fs = require("../../../shared/fs");

var _webpack = require("../cosmosConfig/webpack");

var _default = require("./default");

var _module = require("./module");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getUserWebpackConfig(_x, _x2) {
  return _getUserWebpackConfig.apply(this, arguments);
}

function _getUserWebpackConfig() {
  _getUserWebpackConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(cosmosConfig, userWebpack) {
    var baseWebpackConfig, _createWebpackCosmosC, overridePath, relPath, webpackOverride;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getBaseWebpackConfig(cosmosConfig, userWebpack);

          case 2:
            baseWebpackConfig = _context.sent;
            _createWebpackCosmosC = (0, _webpack.createWebpackCosmosConfig)(cosmosConfig), overridePath = _createWebpackCosmosC.overridePath;

            if (!(!overridePath || !(0, _fs.moduleExists)(overridePath))) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", baseWebpackConfig);

          case 6:
            relPath = _path.default.relative(process.cwd(), overridePath);
            console.log("[Cosmos] Overriding webpack config at ".concat(relPath));
            webpackOverride = (0, _module.getDefaultExport)((0, _fs.requireModule)(overridePath));
            return _context.abrupt("return", webpackOverride(baseWebpackConfig, getNodeEnv()));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getUserWebpackConfig.apply(this, arguments);
}

function getBaseWebpackConfig(_x3, _x4) {
  return _getBaseWebpackConfig.apply(this, arguments);
}

function _getBaseWebpackConfig() {
  _getBaseWebpackConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(cosmosConfig, userWebpack) {
    var rootDir, _createWebpackCosmosC2, configPath, relPath, userConfigExport, cliArgs;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            rootDir = cosmosConfig.rootDir;
            _createWebpackCosmosC2 = (0, _webpack.createWebpackCosmosConfig)(cosmosConfig), configPath = _createWebpackCosmosC2.configPath;

            if (!(!configPath || !(0, _fs.moduleExists)(configPath))) {
              _context2.next = 5;
              break;
            }

            console.log('[Cosmos] Using default webpack config');
            return _context2.abrupt("return", (0, _default.getDefaultWebpackConfig)(userWebpack, rootDir));

          case 5:
            relPath = _path.default.relative(process.cwd(), configPath);
            console.log("[Cosmos] Using webpack config found at ".concat(relPath));
            userConfigExport = (0, _module.getDefaultExport)((0, _fs.requireModule)(configPath));
            cliArgs = (0, _cli.getCliArgs)();

            if (!(typeof userConfigExport === 'function')) {
              _context2.next = 15;
              break;
            }

            _context2.next = 12;
            return userConfigExport(cliArgs.env || getNodeEnv(), cliArgs);

          case 12:
            _context2.t0 = _context2.sent;
            _context2.next = 16;
            break;

          case 15:
            _context2.t0 = userConfigExport;

          case 16:
            return _context2.abrupt("return", _context2.t0);

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getBaseWebpackConfig.apply(this, arguments);
}

function resolveClientPath(relPath) {
  return require.resolve("../client/".concat(relPath));
}

function getUserDepsLoaderRule() {
  return {
    loader: require.resolve('./userDepsLoader'),
    include: resolveClientPath('userDeps')
  };
}

function resolveLocalReactDeps(cosmosConfig, baseWebpackConfig) {
  var rootDir = cosmosConfig.rootDir;
  var _baseWebpackConfig$re = baseWebpackConfig.resolve,
      resolve = _baseWebpackConfig$re === void 0 ? {} : _baseWebpackConfig$re;
  var alias = resolve.alias || {}; // Preserve existing React aliases (eg. when using Preact)

  var reactAlias = hasAlias(alias, 'react');
  var reactDomAlias = hasAlias(alias, 'react-dom');

  if (reactAlias && reactDomAlias) {
    console.log('[Cosmos] React and React DOM aliases found in webpack config');
    return resolve;
  }

  if (reactAlias) {
    console.log('[Cosmos] React alias found in webpack config');
  } else {
    var reactPath = _resolveFrom.default.silent(rootDir, 'react');

    if (!reactPath) throw new Error("[Cosmos] Local dependency not found: react");
    alias = addAlias(alias, 'react', _path.default.dirname(reactPath));
  }

  if (reactDomAlias) {
    console.log('[Cosmos] React DOM alias found in webpack config');
  } else {
    var reactDomPath = _resolveFrom.default.silent(rootDir, 'react-dom');

    if (!reactDomPath) throw new Error("[Cosmos] Local dependency not found: react-dom");
    alias = addAlias(alias, 'react-dom', _path.default.dirname(reactDomPath));
  }

  return _objectSpread(_objectSpread({}, resolve), {}, {
    alias: alias
  });
}

function getGlobalsPlugin(_ref, userWebpack, devServerOn) {
  var publicUrl = _ref.publicUrl;
  var cleanPublicUrl = removeTrailingSlash(publicUrl);
  return new userWebpack.DefinePlugin({
    // "if (__DEV__)" blocks get stripped when compiling a static export build
    __DEV__: JSON.stringify(devServerOn),
    'process.env': {
      NODE_ENV: JSON.stringify(getNodeEnv()),
      PUBLIC_URL: JSON.stringify(cleanPublicUrl)
    }
  });
}

function hasPlugin(plugins, pluginName) {
  return plugins && plugins.filter(function (p) {
    return isInstanceOfPlugin(p, pluginName);
  }).length > 0;
}

function isInstanceOfPlugin(plugin, constructorName) {
  return plugin.constructor && plugin.constructor.name === constructorName;
}

function removeTrailingSlash(url) {
  return url.replace(/\/$/, '');
}

function getNodeEnv() {
  // Disallow non dev/prod environments, like "test" inside Jest, because
  // they are not supported by webpack
  return process.env.NODE_ENV === 'production' ? 'production' : 'development';
}

function hasAlias(alias, name) {
  if (!alias) return false;
  var exactName = "".concat(name, "$");

  if (Array.isArray(alias)) {
    return alias.some(function (a) {
      return a.name === name || a.name === exactName;
    });
  } else {
    var keys = Object.keys(alias);
    return keys.includes(name) || keys.includes(exactName);
  }
}

function addAlias(alias, name, value) {
  return Array.isArray(alias) ? [].concat(_toConsumableArray(alias), [{
    name: name,
    alias: value
  }]) : _objectSpread(_objectSpread({}, alias), {}, _defineProperty({}, name, value));
}