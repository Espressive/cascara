"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExportWebpackConfig = getExportWebpackConfig;

var _path = _interopRequireDefault(require("path"));

var _webpack = require("../cosmosConfig/webpack");

var _shared = require("../../../shared/shared");

var _htmlPlugin = require("./htmlPlugin");

var _shared2 = require("./shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getExportWebpackConfig(_x, _x2) {
  return _getExportWebpackConfig.apply(this, arguments);
}

function _getExportWebpackConfig() {
  _getExportWebpackConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(cosmosConfig, userWebpack) {
    var baseWebpackConfig;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _shared2.getUserWebpackConfig)(cosmosConfig, userWebpack);

          case 2:
            baseWebpackConfig = _context.sent;
            return _context.abrupt("return", _objectSpread(_objectSpread({}, baseWebpackConfig), {}, {
              entry: getEntry(),
              output: getOutput(cosmosConfig),
              module: _objectSpread(_objectSpread({}, baseWebpackConfig.module), {}, {
                rules: getRules(baseWebpackConfig)
              }),
              resolve: (0, _shared2.resolveLocalReactDeps)(cosmosConfig, baseWebpackConfig),
              plugins: getPlugins(cosmosConfig, baseWebpackConfig, userWebpack)
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getExportWebpackConfig.apply(this, arguments);
}

function getEntry() {
  // The React devtools hook needs to be imported before any other module that
  // might import React
  var devtoolsHook = (0, _shared2.resolveClientPath)('reactDevtoolsHook');
  var clientIndex = (0, _shared2.resolveClientPath)('index');
  return [devtoolsHook, clientIndex];
}

function getOutput(cosmosConfig) {
  var exportPath = cosmosConfig.exportPath,
      publicUrl = cosmosConfig.publicUrl;

  var _createWebpackCosmosC = (0, _webpack.createWebpackCosmosConfig)(cosmosConfig),
      includeHashInOutputFilename = _createWebpackCosmosC.includeHashInOutputFilename;

  return {
    path: _path.default.resolve(exportPath, (0, _shared.removeLeadingSlash)(publicUrl)),
    filename: includeHashInOutputFilename ? '[name].[contenthash].js' : '[name].js',
    publicPath: publicUrl
  };
}

function getRules(baseWebpackConfig) {
  var existingRules = baseWebpackConfig.module && baseWebpackConfig.module.rules || [];
  return [].concat(_toConsumableArray(existingRules), [(0, _shared2.getUserDepsLoaderRule)()]);
}

function getPlugins(cosmosConfig, baseWebpackConfig, userWebpack) {
  var existingPlugins = baseWebpackConfig.plugins || [];
  var globalsPlugin = (0, _shared2.getGlobalsPlugin)(cosmosConfig, userWebpack, false);
  var noEmitErrorsPlugin = new userWebpack.NoEmitOnErrorsPlugin();
  return (0, _htmlPlugin.ensureHtmlWebackPlugin)(cosmosConfig, [].concat(_toConsumableArray(existingPlugins), [globalsPlugin, noEmitErrorsPlugin]));
}