"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeFixtureLoader = NativeFixtureLoader;

var _react = _interopRequireDefault(require("react"));

var _FixtureLoader = require("react-cosmos-shared2/FixtureLoader");

var ReactNative = _interopRequireWildcard(require("react-native"));

var _urlParse = _interopRequireDefault(require("url-parse"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var View = ReactNative.View,
    Text = ReactNative.Text,
    StyleSheet = ReactNative.StyleSheet,
    NativeModules = ReactNative.NativeModules; // https://stackoverflow.com/a/53655887/128816

var wsWarning = 'Unrecognized WebSocket connection option(s) `agent`, `perMessageDeflate`, `pfx`, `key`, `passphrase`, `cert`, `ca`, `ciphers`, `rejectUnauthorized`. Did you mean to put these under `headers`?';
if (ReactNative.LogBox) ReactNative.LogBox.ignoreLogs([wsWarning]);else if (ReactNative.YellowBox) ReactNative.YellowBox.ignoreWarnings([wsWarning]); // TODO: Generate unique ID per device

var rendererId = 'native-renderer';

function NativeFixtureLoader(_ref) {
  var port = _ref.rendererConfig.port,
      fixtures = _ref.fixtures,
      decorators = _ref.decorators;
  var socketUrl = getSocketUrl(port);
  return /*#__PURE__*/_react.default.createElement(_FixtureLoader.FixtureLoader, {
    rendererId: rendererId,
    rendererConnect: (0, _FixtureLoader.createWebSocketsConnect)(socketUrl),
    fixtures: fixtures,
    selectedFixtureId: null,
    systemDecorators: [],
    userDecorators: decorators,
    renderMessage: renderMessage
  });
}

function getSocketUrl(port) {
  var host = (0, _urlParse.default)(NativeModules.SourceCode.scriptURL).hostname;
  return "ws://".concat(host, ":").concat(port);
}

function renderMessage(_ref2) {
  var msg = _ref2.msg;
  return /*#__PURE__*/_react.default.createElement(View, {
    style: styles.container
  }, /*#__PURE__*/_react.default.createElement(Text, null, msg));
}

var styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center'
  }
});