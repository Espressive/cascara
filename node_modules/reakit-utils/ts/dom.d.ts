import { ComponentType } from "react";
/**
 * It's `true` if it is running in a browser environment or `false` if it is not (SSR).
 *
 * @example
 * import { canUseDOM } from "reakit-utils";
 *
 * const title = canUseDOM ? document.title : "";
 */
export declare const canUseDOM: boolean;
/**
 * Checks if a given string exists in the user agent string.
 */
export declare function isUA(string: string): boolean;
/**
 * Returns `element.ownerDocument || document`.
 */
export declare function getDocument(element?: Element | Document | null): Document;
/**
 * Returns `element.ownerDocument.defaultView || window`.
 */
export declare function getWindow(element?: Element): Window;
/**
 * Returns `element.ownerDocument.activeElement`.
 */
export declare function getActiveElement(element?: Element | Document | null): Element | null;
/**
 * Similar to `Element.prototype.contains`, but a little bit faster when
 * `element` is the same as `child`.
 *
 * @example
 * import { contains } from "reakit-utils";
 *
 * contains(document.getElementById("parent"), document.getElementById("child"));
 */
export declare function contains(parent: Element, child: Element): boolean;
/**
 * Checks whether `element` is a native HTML button element.
 *
 * @example
 * import { isButton } from "reakit-utils";
 *
 * isButton(document.querySelector("button")); // true
 * isButton(document.querySelector("input[type='button']")); // true
 * isButton(document.querySelector("div")); // false
 * isButton(document.querySelector("input[type='text']")); // false
 * isButton(document.querySelector("div[role='button']")); // false
 *
 * @returns {boolean}
 */
export declare function isButton(element: {
    tagName: string;
    type?: string;
}): boolean;
/**
 * Ponyfill for `Element.prototype.matches`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
 */
export declare function matches(element: Element, selectors: string): boolean;
/**
 * Ponyfill for `Element.prototype.closest`
 *
 * @example
 * import { closest } from "reakit-utils";
 *
 * closest(document.getElementById("id"), "div");
 * // same as
 * document.getElementById("id").closest("div");
 */
export declare function closest<K extends keyof HTMLElementTagNameMap>(element: Element, selectors: K): HTMLElementTagNameMap[K];
export declare function closest<K extends keyof SVGElementTagNameMap>(element: Element, selectors: K): SVGElementTagNameMap[K];
export declare function closest<T extends Element = Element>(element: Element, selectors: string): T | null;
/**
 * Check whether the given element is a text field, where text field is defined
 * by the ability to select within the input, or that it is contenteditable.
 *
 * @example
 * import { isTextField } from "reakit-utils";
 *
 * isTextField(document.querySelector("div")); // false
 * isTextField(document.querySelector("input")); // true
 * isTextField(document.querySelector("input[type='button']")); // false
 * isTextField(document.querySelector("textarea")); // true
 * isTextField(document.querySelector("div[contenteditable='true']")); // true
 */
export declare function isTextField(element: HTMLElement): boolean;
/**
 * Returns the native tag name of the passed element. If the element is not
 * provided, the second argument `defaultType` will be used, but only if it's
 * a string.
 *
 * @example
 * import { getNativeElementType } from "reakit-utils";
 *
 * getNativeElementType(document.querySelector("div")); // "div"
 * getNativeElementType(document.querySelector("button")); // "button"
 * getNativeElementType(null, "button"); // "button"
 * getNativeElementType(null, SomeComponent); // undefined
 */
export declare function getNativeElementType(element?: Element | null, defaultType?: string | ComponentType): string | undefined;
