import { FocusEvent as ReactFocusEvent, SyntheticEvent } from "react";
/**
 * Returns `true` if `event` has been fired within a React Portal element.
 */
export declare function isPortalEvent(event: SyntheticEvent): boolean;
/**
 * Returns `true` if `event.target` and `event.currentTarget` are the same.
 */
export declare function isSelfTarget(event: SyntheticEvent): boolean;
/**
 * Creates an event. Supports IE 11.
 *
 * @example
 * import { createEvent } from "reakit-utils";
 *
 * const element = document.getElementById("id");
 * createEvent(element, "blur", { bubbles: false });
 */
export declare function createEvent(element: HTMLElement, type: string, eventInit?: EventInit): Event;
/**
 * Creates and dispatches an event. Supports IE 11.
 *
 * @example
 * import { fireEvent } from "reakit-utils";
 *
 * fireEvent(document.getElementById("id"), "blur", {
 *   bubbles: true,
 *   cancelable: true,
 * });
 */
export declare function fireEvent(element: HTMLElement, type: string, eventInit: EventInit): boolean;
/**
 * Creates and dispatches a blur event. Supports IE 11.
 *
 * @example
 * import { fireBlurEvent } from "reakit-utils";
 *
 * fireBlurEvent(document.getElementById("id"));
 */
export declare function fireBlurEvent(element: HTMLElement, eventInit?: FocusEventInit): boolean;
/**
 * Creates and dispatches a keyboard event. Supports IE 11.
 *
 * @example
 * import { fireKeyboardEvent } from "reakit-utils";
 *
 * fireKeyboardEvent(document.getElementById("id"), "keydown", {
 *   key: "ArrowDown",
 *   shiftKey: true,
 * });
 */
export declare function fireKeyboardEvent(element: HTMLElement, type: string, eventInit: KeyboardEventInit): boolean;
/**
 * Cross-browser method that returns the next active element (the element that
 * is receiving focus) after a blur event is dispatched. It receives the blur
 * event object as the argument.
 *
 * @example
 * import { getNextActiveElementOnBlur } from "reakit-utils";
 *
 * const element = document.getElementById("id");
 * element.addEventListener("blur", (event) => {
 *   const nextActiveElement = getNextActiveElementOnBlur(event);
 * });
 */
export declare function getNextActiveElementOnBlur(event: ReactFocusEvent | FocusEvent): HTMLElement | null;
