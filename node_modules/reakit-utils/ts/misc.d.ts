import { SetStateAction } from "react";
import { AnyObject } from "./types";
/**
 * Compares two objects.
 *
 * @example
 * import { shallowEqual } from "reakit-utils";
 *
 * shallowEqual({ a: "a" }, {}); // false
 * shallowEqual({ a: "a" }, { b: "b" }); // false
 * shallowEqual({ a: "a" }, { a: "a" }); // true
 * shallowEqual({ a: "a" }, { a: "a", b: "b" }); // false
 */
export declare function shallowEqual(a?: AnyObject, b?: AnyObject): boolean;
/**
 * Transforms `arg` into an array if it's not already.
 *
 * @example
 * import { toArray } from "reakit-utils";
 *
 * toArray("a"); // ["a"]
 * toArray(["a"]); // ["a"]
 */
export declare function toArray<T>(arg: T): T extends any[] ? T : T[];
/**
 * Receives a `setState` argument and calls it with `currentValue` if it's a
 * function. Otherwise return the argument as the new value.
 *
 * @example
 * import { applyState } from "reakit-utils";
 *
 * applyState((value) => value + 1, 1); // 2
 * applyState(2, 1); // 2
 */
export declare function applyState<T>(argument: SetStateAction<T>, currentValue: T): T;
/**
 * Checks whether `arg` is an object or not.
 *
 * @returns {boolean}
 */
export declare function isObject(arg: any): arg is AnyObject;
/**
 * Checks whether `arg` is a plain object or not.
 *
 * @returns {boolean}
 */
export declare function isPlainObject(arg: any): arg is object;
/**
 * Checks whether `arg` is a promise or not.
 *
 * @returns {boolean}
 */
export declare function isPromise<T>(arg: T | Promise<T>): arg is Promise<T>;
/**
 * Checks whether `arg` is empty or not.
 *
 * @example
 * import { isEmpty } from "reakit-utils";
 *
 * isEmpty([]); // true
 * isEmpty(["a"]); // false
 * isEmpty({}); // true
 * isEmpty({ a: "a" }); // false
 * isEmpty(); // true
 * isEmpty(null); // true
 * isEmpty(undefined); // true
 * isEmpty(""); // true
 */
export declare function isEmpty(arg: any): boolean;
/**
 * Checks whether `arg` is an integer or not.
 *
 * @example
 * import { isInteger } from "reakit-utils";
 *
 * isInteger(1); // true
 * isInteger(1.5); // false
 * isInteger("1"); // true
 * isInteger("1.5"); // false
 */
export declare function isInteger(arg: any): boolean;
/**
 * Immutably removes an index from an array.
 *
 * @example
 * import { removeIndexFromArray } from "reakit-utils";
 *
 * removeIndexFromArray(["a", "b", "c"], 1); // ["a", "c"]
 *
 * @returns {Array} A new array without the item in the passed index.
 */
export declare function removeIndexFromArray<T extends any[]>(array: T, index: number): T;
/**
 * Immutably removes an item from an array.
 *
 * @example
 * import { removeItemFromArray } from "reakit-utils";
 *
 * removeItemFromArray(["a", "b", "c"], "b"); // ["a", "c"]
 *
 * // This only works by reference
 * const obj = {};
 * removeItemFromArray([obj], {}); // [obj]
 * removeItemFromArray([obj], obj); // []
 *
 * @returns {Array} A new array without the passed item.
 */
export declare function removeItemFromArray<A extends any[]>(array: A, item: A[number]): A;
/**
 * Omits specific keys from an object.
 *
 * @example
 * import { omit } from "reakit-utils";
 *
 * omit({ a: "a", b: "b" }, ["a"]); // { b: "b" }
 */
export declare function omit<T extends Record<string, any>, K extends keyof T>(object: T, paths: ReadonlyArray<K> | K[]): Omit<T, K>;
/**
 * Picks specific keys from an object.
 *
 * @example
 * import { pick } from "reakit-utils";
 *
 * pick({ a: "a", b: "b" }, ["a"]); // { a: "a" }
 */
export declare function pick<T extends Record<string, any>, K extends keyof T>(object: T, paths: ReadonlyArray<K> | K[]): { [P in K]: T[P]; };
