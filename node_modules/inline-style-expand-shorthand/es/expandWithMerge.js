function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import expandProperty from './expandProperty';

function mergeBase(longhands, base) {
  for (var property in longhands) {
    if (base.hasOwnProperty(property)) {
      longhands[property] = base[property];
    }
  }

  return longhands;
}

var priority = ['borderLeft', 'borderRight', 'borderBottom', 'borderTop', 'borderWidth', 'borderStyle', 'borderColor'];
export default function expandWithMerge(style) {
  // we reverse the key order to make sure more specific properties
  // will always overwrite the unspecific shorthands
  var sortedKeys = Object.keys(style).sort(function (a, b) {
    return priority.indexOf(a) && priority.indexOf(b) ? priority.indexOf(a) > priority.indexOf(b) : a > b || -1;
  }).reverse();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var property = _step.value;
      var value = style[property];

      if (typeof value === 'string' || typeof value === 'number') {
        var expansion = expandProperty(property, value);

        if (expansion) {
          Object.assign(style, mergeBase(expansion, style));
          delete style[property];
        }
      } else if (value === null) {// should skip
      } else if (Array.isArray(value)) {
        if (property === 'extend') {
          value.map(expandWithMerge);
        } else {
          var _expansion = expandProperty(property, value);

          if (_expansion) {
            Object.assign(style, mergeBase(_expansion, style));
            delete style[property];
          }
        }
      } else if (_typeof(value) === 'object') {
        expandWithMerge(value);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return style;
}