function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import expandProperty from './expandProperty';
export default function expand(style) {
  for (var property in style) {
    var value = style[property];

    if (typeof value === 'string' || typeof value === 'number') {
      var expansion = expandProperty(property, value);

      if (expansion) {
        Object.assign(style, expansion);
        delete style[property];
      }
    } else if (value === null) {// should skip
    } else if (Array.isArray(value)) {
      if (property === 'extend') {
        value.map(expand);
      } else {
        var _expansion = expandProperty(property, value);

        if (_expansion) {
          Object.assign(style, _expansion);
          delete style[property];
        }
      }
    } else if (_typeof(value) === 'object') {
      expand(value);
    }
  }

  return style;
}