"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areNodesEqual = areNodesEqual;

var _lodash = require("lodash");

var _getComponentName = require("./getComponentName");

var _isReactElement = require("./isReactElement");

function areNodesEqual(node1, node2, strictTypeCheck) {
  if ((0, _isReactElement.isReactElement)(node1) && (0, _isReactElement.isReactElement)(node2)) return areElementsEqual(node1, node2, strictTypeCheck);
  if (Array.isArray(node1) && Array.isArray(node2)) return areArrayNodesEqual(node1, node2, strictTypeCheck);
  if (isObject(node1) && isObject(node2)) return areObjectsEqual(node1, node2);
  return (0, _lodash.isEqual)(node1, node2);
}

function areElementsEqual(element1, element2, strictTypeCheck) {
  if (!areElementTypesEqual(element1.type, element2.type, strictTypeCheck)) return false; // Don't compare private element attrs like _owner and _store, which hold
  // internal details and have auto increment-type attrs

  return element1.key === element2.key && // @ts-ignore
  element1.ref === element2.ref && // Children (and props in general) can contain Elements and other Nodes
  areNodesEqual(element1.props, element2.props, strictTypeCheck);
}

function areElementTypesEqual(type1, type2, strictTypeCheck) {
  return strictTypeCheck ? type1 === type2 : (0, _getComponentName.getComponentName)(type1) === (0, _getComponentName.getComponentName)(type2);
}

function areArrayNodesEqual(node1, node2, strictTypeCheck) {
  if (node1.length !== node2.length) return false;
  return node1.every(function (node, nodeIndex) {
    return areNodesEqual(node, node2[nodeIndex], strictTypeCheck);
  });
}

function isObject(node) {
  return (0, _lodash.isPlainObject)(node);
}

function areObjectsEqual(object1, object2) {
  if (!(0, _lodash.isEqual)(Object.keys(object1), Object.keys(object2))) return false;
  return Object.keys(object1).every(function (key) {
    return (0, _lodash.isEqualWith)(object1[key], object2[key], function (value1, value2) {
      return typeof value1 === 'function' && typeof value2 === 'function' ? value1 === value2 || value1.toString() === value2.toString() : (0, _lodash.isEqual)(value1, value2);
    });
  });
}