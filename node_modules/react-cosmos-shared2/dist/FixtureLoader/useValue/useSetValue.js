"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSetValue = useSetValue;

var _react = _interopRequireDefault(require("react"));

var _fixtureState = require("../../fixtureState");

var _FixtureContext = require("../FixtureContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useSetValue(inputName, defaultValue) {
  var _React$useContext = _react.default.useContext(_FixtureContext.FixtureContext),
      setFixtureState = _React$useContext.setFixtureState;

  return _react.default.useCallback(function (stateChange) {
    setFixtureState(function (prevFs) {
      var currentValue = typeof stateChange === 'function' ? stateChange( // Types of fixture state values cannot be guaranteed at read
      // time, which means that tampering with the fixture state can
      // cause runtime errors
      getCurrentValueFromFixtureState(prevFs, inputName, defaultValue)) : stateChange;
      return _objectSpread(_objectSpread({}, prevFs), {}, {
        controls: _objectSpread(_objectSpread({}, prevFs.controls), {}, _defineProperty({}, inputName, {
          type: 'standard',
          defaultValue: (0, _fixtureState.createValue)(defaultValue),
          currentValue: (0, _fixtureState.createValue)(currentValue)
        }))
      });
    });
  }, [setFixtureState, defaultValue, inputName]);
}

function getCurrentValueFromFixtureState(fixtureState, inputName, defaultValue) {
  var fsControl = (0, _fixtureState.findFixtureStateControl)(fixtureState, inputName);
  return fsControl && fsControl.type === 'standard' ? (0, _fixtureState.extendWithValue)(defaultValue, fsControl.currentValue) : defaultValue;
}