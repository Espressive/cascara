"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePropsCapture = usePropsCapture;

var _react = _interopRequireDefault(require("react"));

var _fixtureState = require("../../../fixtureState");

var _react2 = require("../../../react");

var _FixtureContext = require("../../FixtureContext");

var _findRelevantElementPaths = require("../shared/findRelevantElementPaths");

var _nodeTree = require("../shared/nodeTree");

var _useFixtureProps = require("./useFixtureProps");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function usePropsCapture(fixture, decoratorId) {
  var _React$useContext = _react.default.useContext(_FixtureContext.FixtureContext),
      fixtureState = _React$useContext.fixtureState,
      setFixtureState = _React$useContext.setFixtureState;

  var prevFixtureRef = _react.default.useRef(fixture);

  var elPaths = (0, _findRelevantElementPaths.findRelevantElementPaths)(fixture);

  _react.default.useEffect(function () {
    // Create empty fixture state
    if (!fixtureState.props && elPaths.length === 0) {
      // Make sure not to override any (currently pending) fixture state props
      setFixtureState(function (prevFs) {
        return _objectSpread(_objectSpread({}, prevFs), {}, {
          props: prevFs.props || []
        });
      });
      return;
    } // Remove fixture state for removed child elements (likely via HMR)
    // FIXME: Also invalidate fixture state at this element path if the
    // component type of the corresponding element changed


    var fsProps = (0, _fixtureState.getFixtureStateProps)(fixtureState, decoratorId);
    fsProps.forEach(function (_ref) {
      var elementId = _ref.elementId;

      if (elPaths.indexOf(elementId.elPath) === -1) {
        setFixtureState(function (prevFs) {
          return _objectSpread(_objectSpread({}, prevFs), {}, {
            props: (0, _fixtureState.removeFixtureStateProps)(fixtureState, elementId)
          });
        });
      }
    });
    elPaths.forEach(function (elPath) {
      var childEl = (0, _nodeTree.getExpectedElementAtPath)(fixture, elPath);
      var elementId = {
        decoratorId: decoratorId,
        elPath: elPath
      }; // Component fixture state can be provided before the fixture mounts (eg.
      // a previous snapshot of a fixture state or the current fixture state
      // from another renderer)

      if (!(0, _fixtureState.findFixtureStateProps)(fixtureState, elementId)) {
        var componentName = (0, _react2.getComponentName)(childEl.type);
        setFixtureState(function (prevFs) {
          return _objectSpread(_objectSpread({}, prevFs), {}, {
            props: (0, _fixtureState.createFixtureStateProps)({
              fixtureState: prevFs,
              elementId: elementId,
              values: (0, _fixtureState.createValues)(childEl.props),
              componentName: componentName
            })
          });
        });
      } else {
        var prevChildEl = (0, _nodeTree.getElementAtPath)(prevFixtureRef.current, elPath);

        if (!(0, _react2.areNodesEqual)(prevChildEl, childEl, false)) {
          setFixtureState(function (prevFs) {
            return _objectSpread(_objectSpread({}, prevFs), {}, {
              props: (0, _fixtureState.updateFixtureStateProps)({
                fixtureState: fixtureState,
                elementId: elementId,
                values: (0, _fixtureState.createValues)(childEl.props)
              })
            });
          });
        }
      }
    });
  }, [fixture, decoratorId, elPaths, fixtureState, fixtureState.props, setFixtureState]);

  _react.default.useEffect(function () {
    prevFixtureRef.current = fixture;
  });

  return (0, _useFixtureProps.useFixtureProps)(fixture, fixtureState, decoratorId);
}