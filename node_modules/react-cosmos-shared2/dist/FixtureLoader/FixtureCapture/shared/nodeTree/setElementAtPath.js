"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setElementAtPath = setElementAtPath;

var _lodash = require("lodash");

var _react = require("../../../../react");

var _getElementAtPath = require("./getElementAtPath");

var _shared = require("./shared");

var _excluded = ["children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function setElementAtPath(node, elPath, updater) {
  var childEl = (0, _getElementAtPath.getExpectedElementAtPath)(node, elPath);
  var newEl = updater(childEl);

  if ((0, _shared.isRootPath)(elPath)) {
    return newEl;
  } // _.set also accepts arrays
  // https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/isObject.js#L15-L16


  return (0, _lodash.set)(cloneNode(node), elPath, newEl);
}

function cloneNode(value) {
  if (Array.isArray(value)) {
    return value.map(function (n) {
      return cloneNode(n);
    });
  }

  if ((0, _react.isReactElement)(value)) {
    var _value$props = value.props,
        children = _value$props.children,
        otherProps = _objectWithoutProperties(_value$props, _excluded);

    return _objectSpread(_objectSpread({}, value), {}, {
      props: _objectSpread(_objectSpread({}, otherProps), {}, {
        children: cloneNode(children)
      })
    });
  }

  return value;
}