"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceState = replaceState;

var _lodash = require("lodash");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// We need to do this because React doesn't provide a replaceState method
// (anymore) https://reactjs.org/docs/react-component.html#setstate
function replaceState(elRef, nextState) {
  var fullState = resetOriginalKeys(elRef.state, nextState);

  if (!(0, _lodash.isEqual)(fullState, elRef.state)) {
    elRef.setState(fullState);
  }
}

function resetOriginalKeys(original, current) {
  return Object.keys(original).reduce(function (result, key) {
    return Object.keys(result).indexOf(key) === -1 ? _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, undefined)) : result;
  }, current);
}