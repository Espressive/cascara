"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFixtureState = useFixtureState;

var _lodash = require("lodash");

var _react = _interopRequireDefault(require("react"));

var _fixtureState = require("../../../fixtureState");

var _react2 = require("../../../react");

var _FixtureContext = require("../../FixtureContext");

var _findRelevantElementPaths = require("../shared/findRelevantElementPaths");

var _decorateFixtureRefs = require("./decorateFixtureRefs");

var _shared = require("./shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useFixtureState(fixture, decoratorId, elRefs) {
  var elPaths = (0, _findRelevantElementPaths.findRelevantElementPaths)(fixture);

  var _React$useContext = _react.default.useContext(_FixtureContext.FixtureContext),
      fixtureState = _React$useContext.fixtureState,
      setFixtureState = _React$useContext.setFixtureState;

  var lastFixtureState = useFixtureStateRef(fixtureState); // Keep a copy of the previous fixture state to observe changes

  var prevFixtureState = _react.default.useRef(fixtureState); // Remember initial state of child components to use as a default when
  // resetting fixture state


  var initialStates = _react.default.useRef({}); // Ref handlers are reused because every time we pass a new ref handler to
  // a React element it gets called in the next render loop, even when the
  // associated element instance has been preserved. Having ref handlers fire
  // on every render loop results in unwanted operations and race conditions.


  var cachedRefHandlers = _react.default.useRef({});

  _react.default.useEffect(function () {
    return function () {
      initialStates.current = {};
      cachedRefHandlers.current = {};
    };
  }, []);

  _react.default.useEffect(function () {
    // Remove fixture state for removed child elements (likely via HMR)
    // FIXME: Also invalidate fixture state at this element path if the
    // component type of the corresponding element changed
    var fsProps = (0, _fixtureState.getFixtureStateClassState)(fixtureState, decoratorId);
    fsProps.forEach(function (_ref) {
      var elementId = _ref.elementId;
      var elPath = elementId.elPath;

      if (elPaths.indexOf(elementId.elPath) === -1) {
        setFixtureState(function (prevFs) {
          return _objectSpread(_objectSpread({}, prevFs), {}, {
            classState: (0, _fixtureState.removeFixtureStateClassState)(fixtureState, elementId)
          });
        });

        if (elRefs.current[elPath]) {
          delete elRefs.current[elPath];
          delete initialStates.current[elPath];
          delete cachedRefHandlers.current[elPath];
        }
      }
    });
    elPaths.forEach(function (elPath) {
      var elementId = {
        decoratorId: decoratorId,
        elPath: elPath
      }; // Component fixture state can be provided before the fixture mounts (eg.
      // a previous snapshot of a fixture state or the current fixture state
      // from another renderer)

      var fsClassState = (0, _fixtureState.findFixtureStateClassState)(fixtureState, elementId);

      if (!fsClassState) {
        if (initialStates.current[elPath]) {
          var state = initialStates.current[elPath].state;
          var elRef = elRefs.current[elPath];

          if (!(0, _lodash.isEqual)(elRef.state, state)) {
            (0, _shared.replaceState)(elRef, state);
          }

          setFixtureState(function (prevFs) {
            return _objectSpread(_objectSpread({}, prevFs), {}, {
              classState: (0, _fixtureState.createFixtureStateClassState)({
                fixtureState: prevFs,
                elementId: elementId,
                values: (0, _fixtureState.createValues)(state),
                componentName: (0, _react2.getComponentName)(elRef.constructor)
              })
            });
          });
        }
      } else {
        var _elRef = elRefs.current[elPath]; // The el ref can be missing for three reasons:
        //   1. Element type is stateless
        //   2. Element type is a class, but doesn't have state. An instance exists
        //      but has been discarded because of its lack of state.
        //   3. Element instance unmounted and is about to remount. When this
        //      happens, the new instance will be handled when its ref fires again.

        if (!_elRef) {
          return;
        } // The child's state can be out of sync with the fixture state for two
        // reasons:
        //   1. The child's state changed internally
        //   2. The fixture state changed
        // Here we're interested in the second scenario. In the first scenario
        // we want to let the component state override the fixture state.


        var prevFsClassState = (0, _fixtureState.findFixtureStateClassState)(prevFixtureState.current, elementId);

        if (prevFsClassState && !(0, _lodash.isEqual)(prevFsClassState, fsClassState)) {
          return (0, _shared.replaceState)(_elRef, (0, _fixtureState.extendWithValues)(_elRef.state, fsClassState.values));
        }
      }
    });
  }, [decoratorId, elPaths, elRefs, fixtureState, fixtureState.classState, setFixtureState]); // Update prev fixture state ref *after* running effects that reference it


  _react.default.useEffect(function () {
    prevFixtureState.current = fixtureState;
  });

  return (0, _decorateFixtureRefs.decorateFixtureRefs)(fixture, handleRef, cachedRefHandlers.current);

  function handleRef(elPath, elRef) {
    if (!elRef) {
      delete elRefs.current[elPath];
      return;
    } // Only track instances with state


    var state = elRef.state;

    if (!state) {
      return;
    }

    elRefs.current[elPath] = elRef;
    setInitialState(initialStates.current, elPath, elRef);
    var elementId = {
      decoratorId: decoratorId,
      elPath: elPath
    };
    var fsClassState = (0, _fixtureState.findFixtureStateClassState)(lastFixtureState.current, elementId);

    if (!fsClassState) {
      setFixtureState(function (prevFs) {
        return _objectSpread(_objectSpread({}, prevFs), {}, {
          classState: (0, _fixtureState.createFixtureStateClassState)({
            fixtureState: prevFs,
            elementId: elementId,
            values: (0, _fixtureState.createValues)(state),
            componentName: (0, _react2.getComponentName)(elRef.constructor)
          })
        });
      });
    } else {
      (0, _shared.replaceState)(elRef, (0, _fixtureState.extendWithValues)(state, fsClassState.values));
    }
  }
} // Make latest fixture state accessible in ref callback


function useFixtureStateRef(fixtureState) {
  var ref = _react.default.useRef(fixtureState);

  _react.default.useEffect(function () {
    ref.current = fixtureState;
  });

  return ref;
}

function setInitialState(initialStates, elPath, elRef) {
  var found = initialStates[elPath];
  var type = elRef.constructor; // Keep the first state recevied for this type

  var initialStateExists = found && found.type === type;

  if (!initialStateExists && elRef.state) {
    initialStates[elPath] = {
      type: type,
      state: elRef.state
    };
  }
}