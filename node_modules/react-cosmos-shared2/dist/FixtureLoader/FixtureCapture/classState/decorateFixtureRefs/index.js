"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateFixtureRefs = decorateFixtureRefs;

var _react = _interopRequireDefault(require("react"));

var _nodeTree = require("../../shared/nodeTree");

var _findRelevantElementPaths = require("../../shared/findRelevantElementPaths");

var _isRefSupported = require("./isRefSupported");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function decorateFixtureRefs(fixture, spyRef, cachedRefHandlers) {
  var elPaths = (0, _findRelevantElementPaths.findRelevantElementPaths)(fixture);
  return elPaths.reduce(function (decoratedFixture, elPath) {
    return (0, _nodeTree.setElementAtPath)(decoratedFixture, elPath, function (element) {
      if (!(0, _isRefSupported.isRefSupported)(element.type)) {
        return element;
      }

      return /*#__PURE__*/_react.default.cloneElement(element, {
        ref: getDecoratedRef(element.ref, spyRef, elPath, cachedRefHandlers)
      });
    });
  }, fixture);
}

function getDecoratedRef(origRef, spyRef, elPath, cachedRefHandlers) {
  var found = cachedRefHandlers[elPath];

  if (found && found.origRef === origRef) {
    return found.handler;
  }

  var handler = decorateRefWithSpy(origRef, spyRef, elPath);
  cachedRefHandlers[elPath] = {
    origRef: origRef,
    handler: handler
  };
  return handler;
}

function decorateRefWithSpy(origRef, spyRef, elPath) {
  return function (elRef) {
    if (origRef) {
      callOriginalRef(origRef, elRef);
    }

    spyRef(elPath, elRef);
  };
}

function callOriginalRef(ref, elRef) {
  if (typeof ref === 'string') {
    console.warn('[decorateFixtureRefs] String refs are not supported');
    return;
  }

  if (typeof ref === 'function') {
    ref(elRef);
    return;
  }

  var refObj = ref;
  refObj.current = elRef;
}