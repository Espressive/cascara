"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collapseFixtureDirs = collapseFixtureDirs;

var _lodash = require("lodash");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function collapseFixtureDirs(treeNode, fixturesDir) {
  var data = treeNode.data,
      children = treeNode.children;
  if (data.type !== 'fileDir' || !children) return treeNode;
  var collapsableDirNode = children[fixturesDir];

  if (collapsableDirNode && collapsableDirNode.data.type === 'fileDir') {
    var otherChildren = (0, _lodash.omit)(children, fixturesDir);
    var innerChildren = collapsableDirNode.children; // Make sure children of the collapsed dir don't overlap with children of
    // the parent dir

    var collapsable = innerChildren && Object.keys(otherChildren).every(function (childName) {
      return !innerChildren[childName];
    });
    if (collapsable) return {
      data: {
        type: 'fileDir'
      },
      children: _objectSpread(_objectSpread({}, collapseChildrenFixtureDirs(otherChildren, fixturesDir)), innerChildren)
    };
  }

  return _objectSpread(_objectSpread({}, treeNode), {}, {
    children: collapseChildrenFixtureDirs(children, fixturesDir)
  });
}

function collapseChildrenFixtureDirs(children, fixturesDir) {
  return Object.keys(children).reduce(function (newChildren, childName) {
    return _objectSpread(_objectSpread({}, newChildren), {}, _defineProperty({}, childName, collapseFixtureDirs(children[childName], fixturesDir)));
  }, {});
}