"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collapseIndexes = collapseIndexes;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function collapseIndexes(treeNode) {
  var data = treeNode.data,
      children = treeNode.children;
  if (data.type !== 'fileDir' || !children) return treeNode;
  var indexChild = Object.keys(children).length === 1 && children.index;
  if (indexChild && indexChild.data.type !== 'fileDir') return children.index;
  return _objectSpread(_objectSpread({}, treeNode), {}, {
    children: Object.keys(children).reduce(function (newChildren, childName) {
      return _objectSpread(_objectSpread({}, newChildren), {}, _defineProperty({}, childName, collapseIndexes(children[childName])));
    }, {})
  });
}