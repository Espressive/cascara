"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFixtureStateClassState = getFixtureStateClassState;
exports.findFixtureStateClassState = findFixtureStateClassState;
exports.createFixtureStateClassState = createFixtureStateClassState;
exports.updateFixtureStateClassState = updateFixtureStateClassState;
exports.removeFixtureStateClassState = removeFixtureStateClassState;

var _lodash = require("lodash");

var _util = require("../util");

function getFixtureStateClassState(fixtureState, decoratorId) {
  var classState = fixtureState.classState;
  return classState ? classState.filter(function (s) {
    return s.elementId.decoratorId === decoratorId;
  }) : [];
}

function findFixtureStateClassState(fixtureState, elementId) {
  var classState = fixtureState.classState;
  return classState && (0, _lodash.find)(classState, function (s) {
    return (0, _lodash.isEqual)(s.elementId, elementId);
  });
}

function createFixtureStateClassState(_ref) {
  var fixtureState = _ref.fixtureState,
      elementId = _ref.elementId,
      values = _ref.values,
      componentName = _ref.componentName;
  var _fixtureState$classSt = fixtureState.classState,
      classState = _fixtureState$classSt === void 0 ? [] : _fixtureState$classSt;
  return (0, _util.replaceOrAddItem)(classState, createClassStateMatcher(elementId), {
    elementId: elementId,
    values: values,
    componentName: componentName
  });
}

function updateFixtureStateClassState(_ref2) {
  var fixtureState = _ref2.fixtureState,
      elementId = _ref2.elementId,
      values = _ref2.values;
  var classStateItem = expectFixtureStateClassState(fixtureState, elementId);
  return (0, _util.updateItem)(fixtureState.classState, classStateItem, {
    values: values
  });
}

function removeFixtureStateClassState(fixtureState, elementId) {
  return (0, _util.removeItemMatch)(fixtureState.classState || [], createClassStateMatcher(elementId));
}

function createClassStateMatcher(elementId) {
  return function (p) {
    return (0, _lodash.isEqual)(p.elementId, elementId);
  };
}

function expectFixtureStateClassState(fixtureState, elementId) {
  var classStateItem = findFixtureStateClassState(fixtureState, elementId);

  if (!classStateItem) {
    var elId = JSON.stringify(elementId);
    throw new Error("Fixture state class state missing for element \"".concat(elId, "\""));
  }

  return classStateItem;
}