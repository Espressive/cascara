import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

import { Pagination } from './Pagination';
import fixtureData from './fixtureData';
import CustomList from './Pagination.CustomList.fixture';
import CustomTable from './Pagination.CustomTable.fixture';

/**
 * Since the behaviour of our commponent depends on its input, we must create an
 * environment capable of interacting with it.
 *
 * The data and its presentation are handled by this component (the external world).
 * Our test subject (Pagination) is only responsible for receiving the current values
 * for page and itemsPerPageLimit and notify (the external world) about any changes generated by
 * the means of children components under its domain.
 *
 * The state of this component tracks page and itemsPerPageLimit as well, this is because we are
 * pretending to be connected to an external data source and we are passing the response. */
export class Wrapper extends PureComponent {
  static propTypes = {
    entityNamePlural: PropTypes.string,
    entityNameSingular: PropTypes.string,
    recordCount: PropTypes.number,
    variant: PropTypes.string,
  };

  static defaultProps = {
    entityNamePlural: 'Total',
    entityNameSingular: 'Total',
    recordCount: fixtureData.length,
    variant: 'table',
  };

  state = {
    currentPage: 1,
    data: [].concat(fixtureData).slice(0, 10),
    itemsPerPageLimit: 10,
    rawData: [].concat(fixtureData),
  };

  handlePaginationChange = (newPagination) => {
    const { rawData } = this.state;
    const recordCount = rawData.length;
    const { limit: itemsPerPageLimit, page: currentPage } = newPagination;
    const totalPages = Math.ceil(recordCount / itemsPerPageLimit);
    const sliceFrom = itemsPerPageLimit * currentPage - itemsPerPageLimit;
    const displayTo =
      currentPage === totalPages ? recordCount : sliceFrom + itemsPerPageLimit;
    const data = [].concat(rawData).slice(sliceFrom, displayTo);

    this.setState({
      currentPage,
      data,
      itemsPerPageLimit,
    });
  };

  render() {
    const { data, itemsPerPageLimit, currentPage } = this.state;
    const {
      entityNamePlural,
      entityNameSingular,
      recordCount,
      variant,
    } = this.props;

    return (
      <Pagination
        currentPage={currentPage}
        entityNamePlural={entityNamePlural}
        entityNameSingular={entityNameSingular}
        isLoading={false}
        itemsPerPageLimit={itemsPerPageLimit}
        onPaginationChange={this.handlePaginationChange}
        recordCount={recordCount}
      >
        {variant === 'table' && <CustomTable data={data} />}
        {variant === 'list' && <CustomList data={data} />}
      </Pagination>
    );
  }
}

export default {
  list: (
    <Wrapper
      entityNamePlural={'Employees'}
      entityNameSingular={'Employee'}
      recordCount={100}
      variant={'list'}
    />
  ),
  table: (
    <Wrapper
      entityNamePlural={'Employees'}
      entityNameSingular={'Employee'}
      recordCount={100}
      variant={'table'}
    />
  ),
};
