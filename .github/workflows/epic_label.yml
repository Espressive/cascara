# This is a basic workflow to help you get started with Actions
# https://github.com/marketplace/actions/create-or-update-comment

name: Epic Label

# Controls when the action will run.
on:
  # Triggers when a pull request is labeled
  pull_request:
    types: [labeled, unlabeled]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "make_comment"
  make_comment:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      working-directory: ./.github

    # Only runs if the pull_request action has a label of 'Epic', same for both labeled and unlabeled
    # if: contains( github.event.pull_request.labels.*.name, 'Epic')
    if: ${{ github.event.label.name == 'Epic' && github.event.action == 'labeled' }}

    steps:
      - name: Get EpicComment.md
        id: get-comment-body
        run: |
          body=$(cat EpicComment.md)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo ::set-output name=body::$body

      # Runs only when a label has been added
      - name: Create Epic Comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.get-comment-body.outputs.body }}
          reaction-type: 'rocket'

  remove_comment:
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'Epic' && github.event.action == 'unlabeled' }}
    steps:
      - name: Get EpicComment.md
        id: get-comment-body
        run: |
          body=$(cat EpicComment.md)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}" 
          echo ::set-output name=body::$body

      - name: Find Epic Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: ${{ steps.get-comment-body.outputs.body }}

      - name: Delete comment
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.fc.outputs.comment-id }},
            })
