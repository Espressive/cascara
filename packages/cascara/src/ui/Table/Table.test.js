import React from 'react';
import { cleanup, fireEvent, render, screen } from '@testing-library/react';
import 'mutationobserver-shim';

import Table from './';
import { generateFakeEmployees } from '../../lib/mock/generateFakeEmployees';

describe('Table', () => {
  /**
   * Component tree
   * This test suite addresses the very basics of testing the Table UI.
   *
   * The first test is the snapshot, nothing special.
   *
   * Table actions
   * An extra column is appended if any or both of these are true:
   *
   * a) at least one `action` is specified in `dataConfig.actions` array
   * b) at least one column in the `dataConfig.display` array is editable
   *
   * In either cases, the extra column displays the action modules.
   *
   * The test `row actions` corresponds to condition a, whilst the test
   * `editable records` addresses condition b.  */
  describe('component tree', () => {
    const datasetSize = 100;
    const data = generateFakeEmployees(datasetSize);
    const dataConfig = {
      actions: [
        {
          content: 'view',
          'data-testid': 'view',
          isLabeled: false,
          module: 'button',
          name: 'view',
          size: 'small',
        },
        {
          content: 'edit',
          dataTestIDs: {
            cancel: 'edit.cancel',
            edit: 'edit.start',
            save: 'edit.save',
          },
          isLabeled: false,
          module: 'edit',
          name: 'edit',
          size: 'small',
        },
      ],
      display: [
        {
          attribute: 'active',
          'data-testid': 'active',
          isEditable: true,
          isLabeled: false,
          label: 'Active',
          module: 'checkbox',
        },
        {
          attribute: 'eid',
          'data-testid': 'eid',
          isEditable: false,
          isLabeled: false,
          label: 'ID',
          module: 'text',
        },
        {
          attribute: 'email',
          'data-testid': 'email',
          isEditable: true,
          isLabeled: false,
          label: 'Email',
          module: 'email',
        },
        {
          attribute: 'country',
          'data-testid': 'country',
          isEditable: true,
          isLabeled: false,
          label: 'Country',
          module: 'select',
          options: [
            {
              label: 'Argentina',
              value: 'Argentina',
            },
            {
              label: 'Brazil',
              value: 'Brazil',
            },
            {
              label: 'USA',
              value: 'USA',
            },
          ],
        },
        {
          attribute: 'employeeNumber',
          'data-testid': 'employeeNumber',
          isEditable: true,
          isLabeled: false,
          label: 'Employee Number',
          module: 'number',
        },
        {
          attribute: 'fullName',
          'data-testid': 'fullName',
          isEditable: true,
          isLabeled: false,
          label: 'Full Name',
          module: 'text',
        },
        {
          attribute: 'homePhone',
          'data-testid': 'homePhone',
          isEditable: true,
          isLabeled: false,
          label: 'Home Phone',
          module: 'text',
        },
        {
          attribute: 'officePhone',
          'data-testid': 'officePhone',
          isEditable: true,
          isLabeled: false,
          label: 'Office Phone',
          module: 'text',
        },
        {
          attribute: 'title',
          'data-testid': 'title',
          isEditable: true,
          isLabeled: false,
          label: 'Title',
          module: 'text',
        },
      ],
    };

    let view;

    beforeAll(() => {
      view = render(
        <Table data={data} dataConfig={dataConfig} uniqueIdAttribute={'eid'} />
      ).container;
    });

    afterEach(cleanup);

    test('snapshot test', () => {
      expect(view).toMatchSnapshot();
    });

    /**
     * The markup generated by the table must match the dataset characteristics.
     *
     * All column definitions in this test suite `dataConfig.display` have a `data-testid`
     * attribute which is used here to do a simple test:
     *
     *  Does the number of (found) testIDs match the result of multiplying `datasetSize`
     *  by the number of columns in `dataConfig.display`?
     *
     * */
    test(`table markup vs. dataset`, () => {
      const { display = [] } = dataConfig;
      render(
        <Table data={data} dataConfig={dataConfig} uniqueIdAttribute={'eid'} />
      );

      Object.values(
        display
          .map((column) => column['data-testid'])
          .reduce((allQueries, testId) => {
            allQueries[testId] = screen.getAllByTestId(testId);

            return allQueries;
          }, {})
      ).forEach((foundItems) => expect(foundItems).toHaveLength(datasetSize));
    });

    /**
     * Actions and onAction.
     *
     * When emitted, the `onAction` event contains two arguments, the first
     * one being the element that was clicked, the second is the data of the
     * row that was clicked.
     *
     * This test validates the Actions specified in `dataConfig.actions`.  */
    test(`row actions`, () => {
      const onAction = jest.fn();

      render(
        <Table
          data={data}
          dataConfig={dataConfig}
          onAction={onAction}
          uniqueIdAttribute={'eid'}
        />
      );

      const allEditButtons = screen.getAllByTestId('edit.start');
      expect(allEditButtons).toHaveLength(datasetSize);

      const editButton = screen.getAllByTestId('view');
      expect(editButton).toBeTruthy();

      fireEvent(
        editButton[0],
        new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
        })
      );

      expect(onAction).toBeCalledWith(
        expect.any(Object),
        expect.objectContaining({
          active: true,
          country: 'Argentina',
          eid: '024f2316-265a-46e8-965a-837e308ae678',
          email: 'Hayden.Zieme@espressive.com',
          employeeNumber: 93912,
          fullName: 'Hayden Zieme',
          homePhone: '887.983.0658',
          officePhone: '(980) 802-1086 x05469',
          title: 'District Operations Officer',
        })
      );
    });

    /**
     * Editable records and onAction.
     *
     * When the Table enters or exits `edit` mode, it emits the `onAction`
     * event and includes the button that was clicked and the current row data.
     *
     * This test validates the events are actualy emitted byt the Table, as well
     * as the number of buttons present in each case. */
    test(`editable records`, () => {
      const onAction = jest.fn();

      render(
        <Table
          data={data}
          dataConfig={dataConfig}
          onAction={onAction}
          uniqueIdAttribute={'eid'}
        />
      );

      const editButton = screen.getAllByTestId('edit.start');

      fireEvent(
        editButton[0],
        new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
        })
      );

      expect(onAction).toBeCalledWith(
        expect.any(Object),
        expect.objectContaining({
          active: true,
          country: 'Argentina',
          eid: '024f2316-265a-46e8-965a-837e308ae678',
          email: 'Hayden.Zieme@espressive.com',
          employeeNumber: 93912,
          fullName: 'Hayden Zieme',
          homePhone: '887.983.0658',
          officePhone: '(980) 802-1086 x05469',
          title: 'District Operations Officer',
        })
      );

      const cancelButton = screen.getByTestId('edit.cancel');
      const saveButton = screen.getByTestId('edit.save');

      expect(cancelButton).toBeTruthy();
      expect(saveButton).toBeTruthy();

      fireEvent(
        cancelButton,
        new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
        })
      );

      expect(onAction).toBeCalledWith(
        expect.any(Object),
        expect.objectContaining({
          active: true,
          country: 'Argentina',
          eid: '024f2316-265a-46e8-965a-837e308ae678',
          email: 'Hayden.Zieme@espressive.com',
          employeeNumber: 93912,
          fullName: 'Hayden Zieme',
          homePhone: '887.983.0658',
          officePhone: '(980) 802-1086 x05469',
          title: 'District Operations Officer',
        })
      );

      const saveButtons = screen.getAllByTestId('edit.start');
      expect(saveButtons).toHaveLength(datasetSize);
    });
  });
});
