{"version":3,"sources":["webpack:///../configs/eslint-config-espressive/README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAMaA,G,UAAe,S,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,4BAGA,yDACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,iBAAQ,CACN,GAAM,uBADR,uBAGA,+JAA8I,0BAAYC,WAAW,KAAvB,iBAA9I,6EACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,kEAIL,iCAAgB,0BAAYA,WAAW,KAAvB,gBAAhB,iOAA0S,0BAAYA,WAAW,KAAvB,mBAA1S,wEACA,+GACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,mFAAkE,0BAAYA,WAAW,KAAvB,oBAAlE,UACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,sEAKL,6BAAY,6BAAGA,WAAW,KAAQ,CAC9B,KAAQ,mDADA,4BAAZ,iDAGA,iBAAQ,CACN,GAAM,UADR,UAGA,2U,0NAKJJ,EAAWK,gBAAiB","file":"component---configs-eslint-config-espressive-readme-md-1370a1c77e98574ed39d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/manuramirez/code/cascara/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"eslint-config-espressive\"\n    }}>{`eslint-config-espressive`}</h1>\n    <p>{`Eslint config used by Espressive`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <h4 {...{\n      \"id\": \"install-the-package\"\n    }}>{`Install The Package`}</h4>\n    <p>{`This eslint config can be used at the root of a repository (recommended) OR at the root of a monorepo package. It should be added as a `}<inlineCode parentName=\"p\">{`devDependency`}</inlineCode>{`. Until this becomes a published package, this needs to be done manually.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"devDependencies\": {\n  \"eslint-config-espressive\": \"*\"\n},\n`}</code></pre>\n    <p>{`Then run `}<inlineCode parentName=\"p\">{`yarn install`}</inlineCode>{`. Note that during the install process, there will be warnings that there are unmet peer dependencies. These dependencies need to be installed at the root of where this config is being added. These can also be added under `}<inlineCode parentName=\"p\">{`devDependencies`}</inlineCode>{`. Again, this works best if we run this at the root of a repository.`}</p>\n    <p>{`After installing all peer dependencies, there should be no warnings from this package.`}</p>\n    <h4 {...{\n      \"id\": \"add-an-eslint-config\"\n    }}>{`Add An Eslint Config`}</h4>\n    <p>{`At the root of where eslint is expected to be used, add an `}<inlineCode parentName=\"p\">{`eslint.config.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`module.exports = {\n  root: true,\n  extends: 'espressive',\n};\n`}</code></pre>\n    <p>{`This `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/user-guide/configuring\"\n      }}>{`config could be extended`}</a>{` from here, but hopefully that is not needed.`}</p>\n    <h2 {...{\n      \"id\": \"future\"\n    }}>{`Future`}</h2>\n    <p>{`As of the creation of this file, we are not including the peer dependencies so we can set the dependencies from one location in the repository tree. We might end up later including these dependencies in the package so they do not also need to be added as dependencies wherever eslint is being set up.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}