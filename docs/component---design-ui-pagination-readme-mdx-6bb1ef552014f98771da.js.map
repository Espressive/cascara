{"version":3,"sources":["webpack:///../design/ui/pagination/README.mdx"],"names":["_frontmatter","name","EspPagination","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","of","__position","__code","__scope","semanticUiCssOffline","Playground","Props","Pagination","entityNamePlural","entityNameSingular","isLoading","limit","page","count","isMDXComponent"],"mappings":"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","file":"component---design-ui-pagination-readme-mdx-6bb1ef552014f98771da.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/manuramirez/code/cascara/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport semanticUiCssOffline from 'semantic-ui-css-offline';\nimport { Playground, Props } from 'docz';\nimport { Pagination } from './es';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst EspPagination = makeShortcode(\"EspPagination\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"espressive-ui-pagination\"\n    }}>{`Espressive UI Pagination`}</h1>\n    <p>{`This component abstracts the pagination logic into a reusable block that can be implemented anywhere pagination is required.`}</p>\n    <h2 {...{\n      \"id\": \"separation-of-concerns\"\n    }}>{`Separation of concerns`}</h2>\n    <p>{`The only concern of this component is to display a UI that allows the User to paginate through some content, the presentation of such content as well as its source are outside of the scope of this component.`}</p>\n    <h1 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h1>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`entityNamePlural`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Null`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Entitiy's name in plural form`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`entityNameSingular`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Total`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Entitiy's name in singular form`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isLoading`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Specifies if the data is loading`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onPaginationChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`noop`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Upstream logic to be called on change`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`limit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`10`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of items to display per page`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`page`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`1`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Current page number`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`totalItems`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Total count of items to be paginated`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h1 {...{\n      \"id\": \"using-this-module\"\n    }}>{`Using this module`}</h1>\n    <p>{`A good example on how to use this module is the Cosmos fixture:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import React, {PureComponent} from 'react';\nimport PropTypes  from 'prop-types';\nimport {Table}                from 'semantic-ui-react';\n\nimport Pagination             from './Pagination';\nimport dataFixture            from './fixtureData';\n\n/**\n * An example on how to separate the content\n * from the pagination.\n */\nconst ExternalTable = ({data}) => {\n  const renderBodyRow = function (row) {\n    return (\n      <Table.Row key={row.id}>\n        {\n          Object\n            .keys(row)\n            .map((field) => (\n              <Table.Cell key={field}>\n                {row[field]}\n              </Table.Cell>\n            ))\n        }\n      </Table.Row>\n    );\n  };\n\n  return (\n    <Table\n      celled\n      padded\n      // eslint-disable-next-line react/jsx-no-bind\n      renderBodyRow={renderBodyRow} // ^^ bending the law!\n      tableData={data}\n    />\n  );\n};\nExternalTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id    : PropTypes.number,\n    email : PropTypes.string,\n  })).isRequired,\n};\n\n/**\n * Since the behaviour of our commponent depends on its input, we must create an\n * environment capable of interacting with it.\n *\n * The data and its presentation are handled by this component (the external world).\n * Our test subject (Pagination) is only responsible for receiving the current values\n * for page and limit and notify (the external world) about any changes generated by\n * the means of children components under its domain.\n *\n * The state of this component tracks page and limit as well, this is because we are\n * pretending to be connected to an external data source and we are passing the response. */\nexport class Wrapper extends PureComponent {\n\n  static propTypes = {\n    entityNamePlural   : PropTypes.string,\n    entityNameSingular : PropTypes.string,\n    totalItems         : PropTypes.number,\n  };\n\n  static defaultProps = {\n    entityNamePlural   : 'Total',\n    entityNameSingular : 'Total',\n    totalItems         : dataFixture.length,\n  };\n\n  state = {\n    data    : [].concat(dataFixture).slice(0, 10),\n    limit   : 10,\n    page    : 1,\n    rawData : [].concat(dataFixture),\n  };\n\n  handlePaginationChange = (newPagination) => {\n    const {rawData} = this.state;\n    const totalItems = rawData.length;\n    const {limit, page} = newPagination;\n    const totalPages = Math.ceil(totalItems / limit);\n    const sliceFrom = limit * page - limit;\n    const displayTo = page === totalPages ? totalItems : sliceFrom + limit;\n    const data = [].concat(rawData).slice(sliceFrom, displayTo);\n\n    this.setState({\n      data,\n      limit,\n      page,\n    });\n  };\n\n  render() {\n    const {data, limit, page} = this.state;\n    const {\n      entityNamePlural,\n      entityNameSingular,\n      totalItems,\n    } = this.props;\n\n    return (\n      <Pagination\n        entityNamePlural={entityNamePlural}\n        entityNameSingular={entityNameSingular}\n        isLoading={false}\n        limit={limit}\n        onPaginationChange={this.handlePaginationChange}\n        page={page}\n        totalItems={totalItems}\n      >\n        <ExternalTable data={data} />\n      </Pagination>\n    );\n  }\n\n}\n\nexport default <Wrapper />;\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"running-tests\"\n    }}>{`Running tests`}</h1>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`yarn test`}</inlineCode>{` at the root of the monorepo`}</p>\n    <h1 {...{\n      \"id\": \"running-cosmos\"\n    }}>{`Running Cosmos`}</h1>\n    <p>{`Cosmos fixture is ready, but Cosmos setup is not. Expect an update once we configure Cosmos.`}</p>\n    <Props of={EspPagination} mdxType=\"Props\" />\n    <Playground __position={1} __code={'<EspPagination\\n  entityNamePlural={\\'Employees\\'}\\n  entityNameSingular={\\'Employee\\'}\\n  isLoading={false}\\n  limit={10}\\n  page={1}\\n  count={100}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      semanticUiCssOffline,\n      Playground,\n      Props,\n      Pagination,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <EspPagination entityNamePlural={'Employees'} entityNameSingular={'Employee'} isLoading={false} limit={10} page={1} count={100} mdxType=\"EspPagination\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}