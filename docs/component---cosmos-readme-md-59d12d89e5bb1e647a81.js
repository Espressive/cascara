(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{Z9NO:function(e,t,o){"use strict";o.r(t),o.d(t,"_frontmatter",(function(){return s})),o.d(t,"default",(function(){return l}));var a=o("Fcif"),n=o("+I+c"),i=(o("mXGw"),o("/FXl")),r=o("TjRS"),s=(o("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"cosmos/README.md"}});var c={_frontmatter:s},p=r.a;function l(e){var t=e.components,o=Object(n.a)(e,["components"]);return Object(i.b)(p,Object(a.a)({},c,o,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"cosmos"},"Cosmos"),Object(i.b)("p",null,"Configuration files for running React Cosmos in our monorepo."),Object(i.b)("h2",{id:"assumptions"},"Assumptions"),Object(i.b)("p",null,"There are a few assumptions being made for this configuration to work. If any of these assumptions become invalid, the configuration is liable to break."),Object(i.b)("h3",{id:"running-react-cosmos-as-a-binary"},"Running React Cosmos As A Binary"),Object(i.b)("p",null,"We are not installing any dependencies for Cosmos. Instead, we are running cosmos as a binary. This can be done with the command ",Object(i.b)("inlineCode",{parentName:"p"},"npx react-cosmos")," at the root of our application and it should see the config file at the root of the monorepo and run correctly. There is a script at the root of the directory called ",Object(i.b)("inlineCode",{parentName:"p"},"cosmos")," that should make running this easier."),Object(i.b)("h3",{id:"using-react-scripts-to-bootstrap-our-applications"},"Using ",Object(i.b)("inlineCode",{parentName:"h3"},"react-scripts")," To Bootstrap Our Applications"),Object(i.b)("p",null,"The assumption here is that we have not made any modifications to the out of the box ",Object(i.b)("inlineCode",{parentName:"p"},"react-scripts")," configuration with any plugins that allow modifying the Webpack configuration for ",Object(i.b)("inlineCode",{parentName:"p"},"react-scripts"),", and that we have not ejected any of our applications from that ecosystem."),Object(i.b)("h3",{id:"yarn-workspaces-for-our-monorepo"},"Yarn Workspaces For Our Monorepo"),Object(i.b)("p",null,"There are a couple assumptions here:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"We are using Yarn workspaces to define packages shared in our monorepo"),Object(i.b)("li",{parentName:"ol"},"We are using the ",Object(i.b)("inlineCode",{parentName:"li"},"workspaces")," definition in the package.json file that expects an object called ",Object(i.b)("inlineCode",{parentName:"li"},"packages")," instead of just an array of package globs at the root of the ",Object(i.b)("inlineCode",{parentName:"li"},"packages")," object."),Object(i.b)("li",{parentName:"ol"},"If we ever move the array of packages to the root of the ",Object(i.b)("inlineCode",{parentName:"li"},"workspaces")," config in the package.json, we need to update the ",Object(i.b)("inlineCode",{parentName:"li"},"webpack.override.js")," in this directory to reflect that")),Object(i.b)("h3",{id:"all-fixtures-exist-in-a-src-at-the-root-of-a-yarn-workspace"},"All Fixtures Exist In A ",Object(i.b)("inlineCode",{parentName:"h3"},"/src")," At The Root Of A Yarn Workspace"),Object(i.b)("p",null,"We are specifically not looking at code in any other location for a fixture. Fixtures should be colocated with the component they are being used to develop so this should not be an issue."),Object(i.b)("h2",{id:"running-cosmos-in-a-package"},"Running Cosmos In A Package"),Object(i.b)("p",null,"If you would like to only run Cosmos on a specific package, this is also possible, but it means bringing your own cosmos.config.json and placing it in the package to make it work. There is a file called ",Object(i.b)("inlineCode",{parentName:"p"},"cosmos.config.js.tpl")," that can be copied into any package folder and removing the ",Object(i.b)("inlineCode",{parentName:"p"},".tpl")," suffix. When running from the package directory, this should pick up all Cosmos for that particular package only."),Object(i.b)("p",null,"The default ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/react-cosmos/react-cosmos/tree/master/docs#create-react-app"}),"React Cosmos recommended config file")," for ",Object(i.b)("inlineCode",{parentName:"p"},"react-scripts")," works just fine if there are fixtures inside of a workspace application building with ",Object(i.b)("inlineCode",{parentName:"p"},"react-scripts"),"."),Object(i.b)("h2",{id:"react-scripts-is-a-package-dependency"},Object(i.b)("inlineCode",{parentName:"h2"},"react-scripts")," Is A Package Dependency"),Object(i.b)("p",null,"In order to use the same build infrastructure for ",Object(i.b)("inlineCode",{parentName:"p"},"react-scripts")," it also needs to be a dependency on any package that wants to use this global configuration. That means the the package level and also the root of the monorepo level."),Object(i.b)("p",null,"There is a check that happens in ",Object(i.b)("inlineCode",{parentName:"p"},"react-scripts")," to make sure this dependency is present. Unless we override that check in the future, that means the dependency must be declared."))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"cosmos/README.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---cosmos-readme-md-59d12d89e5bb1e647a81.js.map