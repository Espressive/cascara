{"version":3,"sources":["webpack:///../cosmos/README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,kMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,UADR,UAGA,sFACA,iBAAQ,CACN,GAAM,eADR,eAGA,iLACA,iBAAQ,CACN,GAAM,oCADR,oCAGA,yJAAwI,0BAAYC,WAAW,KAAvB,oBAAxI,0KAA+W,0BAAYA,WAAW,KAAvB,UAA/W,0CACA,iBAAQ,CACN,GAAM,qDADR,SAEa,0BAAYA,WAAW,MAAvB,iBAFb,kCAGA,6GAA4F,0BAAYA,WAAW,KAAvB,iBAA5F,sFAA4O,0BAAYA,WAAW,KAAvB,iBAA5O,+EACA,iBAAQ,CACN,GAAM,oCADR,oCAGA,6DACA,sBACE,kBAAIA,WAAW,MAAf,0EACA,kBAAIA,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,cAAzC,sEAAuK,0BAAYA,WAAW,MAAvB,YAAvK,iEAA8R,0BAAYA,WAAW,MAAvB,YAA9R,YACA,kBAAIA,WAAW,MAAf,4DAAiF,0BAAYA,WAAW,MAAvB,cAAjF,sDAA+L,0BAAYA,WAAW,MAAvB,uBAA/L,uCAEF,iBAAQ,CACN,GAAM,+DADR,2BAE+B,0BAAYA,WAAW,MAAvB,QAF/B,oCAGA,oNACA,iBAAQ,CACN,GAAM,+BADR,+BAGA,mOAAkN,0BAAYA,WAAW,KAAvB,wBAAlN,gEAAmV,0BAAYA,WAAW,KAAvB,QAAnV,sHACA,oCAAmB,6BAAGA,WAAW,KAAQ,CACrC,KAAQ,mFADO,wCAAnB,QAE0D,0BAAYA,WAAW,KAAvB,iBAF1D,0FAE8M,0BAAYA,WAAW,KAAvB,iBAF9M,KAGA,iBAAQ,CACN,GAAM,yCACL,0BAAYA,WAAW,MAAvB,iBAFH,4BAGA,0EAAyD,0BAAYA,WAAW,KAAvB,iBAAzD,2KACA,yDAAwC,0BAAYA,WAAW,KAAvB,iBAAxC,4I,gMAKJJ,EAAWK,gBAAiB","file":"component---cosmos-readme-md-59d12d89e5bb1e647a81.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/manuramirez/code/cascara/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"cosmos\"\n    }}>{`Cosmos`}</h1>\n    <p>{`Configuration files for running React Cosmos in our monorepo.`}</p>\n    <h2 {...{\n      \"id\": \"assumptions\"\n    }}>{`Assumptions`}</h2>\n    <p>{`There are a few assumptions being made for this configuration to work. If any of these assumptions become invalid, the configuration is liable to break.`}</p>\n    <h3 {...{\n      \"id\": \"running-react-cosmos-as-a-binary\"\n    }}>{`Running React Cosmos As A Binary`}</h3>\n    <p>{`We are not installing any dependencies for Cosmos. Instead, we are running cosmos as a binary. This can be done with the command `}<inlineCode parentName=\"p\">{`npx react-cosmos`}</inlineCode>{` at the root of our application and it should see the config file at the root of the monorepo and run correctly. There is a script at the root of the directory called `}<inlineCode parentName=\"p\">{`cosmos`}</inlineCode>{` that should make running this easier.`}</p>\n    <h3 {...{\n      \"id\": \"using-react-scripts-to-bootstrap-our-applications\"\n    }}>{`Using `}<inlineCode parentName=\"h3\">{`react-scripts`}</inlineCode>{` To Bootstrap Our Applications`}</h3>\n    <p>{`The assumption here is that we have not made any modifications to the out of the box `}<inlineCode parentName=\"p\">{`react-scripts`}</inlineCode>{` configuration with any plugins that allow modifying the Webpack configuration for `}<inlineCode parentName=\"p\">{`react-scripts`}</inlineCode>{`, and that we have not ejected any of our applications from that ecosystem.`}</p>\n    <h3 {...{\n      \"id\": \"yarn-workspaces-for-our-monorepo\"\n    }}>{`Yarn Workspaces For Our Monorepo`}</h3>\n    <p>{`There are a couple assumptions here:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`We are using Yarn workspaces to define packages shared in our monorepo`}</li>\n      <li parentName=\"ol\">{`We are using the `}<inlineCode parentName=\"li\">{`workspaces`}</inlineCode>{` definition in the package.json file that expects an object called `}<inlineCode parentName=\"li\">{`packages`}</inlineCode>{` instead of just an array of package globs at the root of the `}<inlineCode parentName=\"li\">{`packages`}</inlineCode>{` object.`}</li>\n      <li parentName=\"ol\">{`If we ever move the array of packages to the root of the `}<inlineCode parentName=\"li\">{`workspaces`}</inlineCode>{` config in the package.json, we need to update the `}<inlineCode parentName=\"li\">{`webpack.override.js`}</inlineCode>{` in this directory to reflect that`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"all-fixtures-exist-in-a-src-at-the-root-of-a-yarn-workspace\"\n    }}>{`All Fixtures Exist In A `}<inlineCode parentName=\"h3\">{`/src`}</inlineCode>{` At The Root Of A Yarn Workspace`}</h3>\n    <p>{`We are specifically not looking at code in any other location for a fixture. Fixtures should be colocated with the component they are being used to develop so this should not be an issue.`}</p>\n    <h2 {...{\n      \"id\": \"running-cosmos-in-a-package\"\n    }}>{`Running Cosmos In A Package`}</h2>\n    <p>{`If you would like to only run Cosmos on a specific package, this is also possible, but it means bringing your own cosmos.config.json and placing it in the package to make it work. There is a file called `}<inlineCode parentName=\"p\">{`cosmos.config.js.tpl`}</inlineCode>{` that can be copied into any package folder and removing the `}<inlineCode parentName=\"p\">{`.tpl`}</inlineCode>{` suffix. When running from the package directory, this should pick up all Cosmos for that particular package only.`}</p>\n    <p>{`The default `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-cosmos/react-cosmos/tree/master/docs#create-react-app\"\n      }}>{`React Cosmos recommended config file`}</a>{` for `}<inlineCode parentName=\"p\">{`react-scripts`}</inlineCode>{` works just fine if there are fixtures inside of a workspace application building with `}<inlineCode parentName=\"p\">{`react-scripts`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"react-scripts-is-a-package-dependency\"\n    }}><inlineCode parentName=\"h2\">{`react-scripts`}</inlineCode>{` Is A Package Dependency`}</h2>\n    <p>{`In order to use the same build infrastructure for `}<inlineCode parentName=\"p\">{`react-scripts`}</inlineCode>{` it also needs to be a dependency on any package that wants to use this global configuration. That means the the package level and also the root of the monorepo level.`}</p>\n    <p>{`There is a check that happens in `}<inlineCode parentName=\"p\">{`react-scripts`}</inlineCode>{` to make sure this dependency is present. Unless we override that check in the future, that means the dependency must be declared.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}