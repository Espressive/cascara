(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{wpWH:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return d}));var a=n("Fcif"),i=n("+I+c"),r=(n("mXGw"),n("/FXl")),o=n("TjRS"),l=n("ghDz"),b=n("ZFoC"),c=n("237t"),p=(n("aD51"),{});void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"design/ui/pagination/README.mdx"}});var s={_frontmatter:p},m=o.a;function d(e){var t,n=e.components,d=Object(i.a)(e,["components"]);return Object(r.b)(m,Object(a.a)({},s,d,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"espressive-ui-pagination"},"Espressive UI Pagination"),Object(r.b)("p",null,"This component abstracts the pagination logic into a reusable block that can be implemented anywhere pagination is required."),Object(r.b)("h2",{id:"separation-of-concerns"},"Separation of concerns"),Object(r.b)("p",null,"The only concern of this component is to display a UI that allows the User to paginate through some content, the presentation of such content as well as its source are outside of the scope of this component."),Object(r.b)("h1",{id:"props"},"Props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"entityNamePlural"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Null")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"String"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Entitiy's name in plural form")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"entityNameSingular"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Total")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"String"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Entitiy's name in singular form")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"isLoading"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"false")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Boolean"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Specifies if the data is loading")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"onPaginationChange"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"noop")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Function"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Upstream logic to be called on change")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"limit"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"10")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number of items to display per page")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"page"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"1")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Current page number")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"totalItems"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"0")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Total count of items to be paginated")))),Object(r.b)("h1",{id:"using-this-module"},"Using this module"),Object(r.b)("p",null,"A good example on how to use this module is the Cosmos fixture:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"import React, {PureComponent} from 'react';\nimport PropTypes  from 'prop-types';\nimport {Table}                from 'semantic-ui-react';\n\nimport Pagination             from './Pagination';\nimport dataFixture            from './fixtureData';\n\n/**\n * An example on how to separate the content\n * from the pagination.\n */\nconst ExternalTable = ({data}) => {\n  const renderBodyRow = function (row) {\n    return (\n      <Table.Row key={row.id}>\n        {\n          Object\n            .keys(row)\n            .map((field) => (\n              <Table.Cell key={field}>\n                {row[field]}\n              </Table.Cell>\n            ))\n        }\n      </Table.Row>\n    );\n  };\n\n  return (\n    <Table\n      celled\n      padded\n      // eslint-disable-next-line react/jsx-no-bind\n      renderBodyRow={renderBodyRow} // ^^ bending the law!\n      tableData={data}\n    />\n  );\n};\nExternalTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id    : PropTypes.number,\n    email : PropTypes.string,\n  })).isRequired,\n};\n\n/**\n * Since the behaviour of our commponent depends on its input, we must create an\n * environment capable of interacting with it.\n *\n * The data and its presentation are handled by this component (the external world).\n * Our test subject (Pagination) is only responsible for receiving the current values\n * for page and limit and notify (the external world) about any changes generated by\n * the means of children components under its domain.\n *\n * The state of this component tracks page and limit as well, this is because we are\n * pretending to be connected to an external data source and we are passing the response. */\nexport class Wrapper extends PureComponent {\n\n  static propTypes = {\n    entityNamePlural   : PropTypes.string,\n    entityNameSingular : PropTypes.string,\n    totalItems         : PropTypes.number,\n  };\n\n  static defaultProps = {\n    entityNamePlural   : 'Total',\n    entityNameSingular : 'Total',\n    totalItems         : dataFixture.length,\n  };\n\n  state = {\n    data    : [].concat(dataFixture).slice(0, 10),\n    limit   : 10,\n    page    : 1,\n    rawData : [].concat(dataFixture),\n  };\n\n  handlePaginationChange = (newPagination) => {\n    const {rawData} = this.state;\n    const totalItems = rawData.length;\n    const {limit, page} = newPagination;\n    const totalPages = Math.ceil(totalItems / limit);\n    const sliceFrom = limit * page - limit;\n    const displayTo = page === totalPages ? totalItems : sliceFrom + limit;\n    const data = [].concat(rawData).slice(sliceFrom, displayTo);\n\n    this.setState({\n      data,\n      limit,\n      page,\n    });\n  };\n\n  render() {\n    const {data, limit, page} = this.state;\n    const {\n      entityNamePlural,\n      entityNameSingular,\n      totalItems,\n    } = this.props;\n\n    return (\n      <Pagination\n        entityNamePlural={entityNamePlural}\n        entityNameSingular={entityNameSingular}\n        isLoading={false}\n        limit={limit}\n        onPaginationChange={this.handlePaginationChange}\n        page={page}\n        totalItems={totalItems}\n      >\n        <ExternalTable data={data} />\n      </Pagination>\n    );\n  }\n\n}\n\nexport default <Wrapper />;\n")),Object(r.b)("h1",{id:"running-tests"},"Running tests"),Object(r.b)("p",null,"Run ",Object(r.b)("inlineCode",{parentName:"p"},"yarn test")," at the root of the monorepo"),Object(r.b)("h1",{id:"running-cosmos"},"Running Cosmos"),Object(r.b)("p",null,"Cosmos fixture is ready, but Cosmos setup is not. Expect an update once we configure Cosmos."),Object(r.b)(b.d,{of:c.EspPagination,mdxType:"Props"}),Object(r.b)(b.c,{__position:1,__code:"<EspPagination\n  entityNamePlural={'Employees'}\n  entityNameSingular={'Employee'}\n  isLoading={false}\n  limit={10}\n  page={1}\n  count={100}\n/>",__scope:(t={props:d,DefaultLayout:o.a,semanticUiCssOffline:l.default,Playground:b.c,Props:b.d,EspPagination:c.EspPagination},t.DefaultLayout=o.a,t._frontmatter=p,t),mdxType:"Playground"},Object(r.b)(c.EspPagination,{entityNamePlural:"Employees",entityNameSingular:"Employee",isLoading:!1,limit:10,page:1,count:100,mdxType:"EspPagination"})))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"design/ui/pagination/README.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---design-ui-pagination-readme-mdx-8fbd2d0f092fe923b800.js.map