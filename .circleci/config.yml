version: 2.1

orbs:
  node: circleci/node@4.7.0
  slack: circleci/slack@4.4.4

parameters:
  installed-key:
    type: string
    default: cascara-MONOREPO_INSTALLED-{{ .Revision }}

aliases:
  - &is_main
    equal: [main, << pipeline.git.branch >>]
  - &is_develop
    equal: [develop, << pipeline.git.branch >>]

commands:
  deploy-vercel:
    description: Deploys our docs to Vercel
    parameters:
      vercel-deploy-hook:
        type: string
        default: $VERCEL_DEPLOY_DEVELOP
    steps:
      - run:
          name: Deploy Vercel
          command: curl -X POST << parameters.vercel-deploy-hook >>

job_executor: &job_executor
  executor:
    name: node/default
    tag: '12.13.0'

post_steps: &post_steps
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1

jobs:
  install:
    <<: *job_executor
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: yarn install --immutable
          pkg-manager: yarn
      - run:
          name: Prepare Packages
          command: yarn workspaces foreach run prepare
      - store_artifacts:
          path: ./node_modules/@espressive/cascara # check to see why we do not have @espressive/cascara
      - save_cache:
          key: << pipeline.parameters.installed-key >>
          paths:
            - ~/
  danger:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Danger Checks
          command: yarn danger ci
  lint:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Danger Checks
          command: yarn lint --format junit --output-file ./coverage/eslint.xml
      - store_test_results:
          path: ./coverage
      - store_artifacts:
          path: ./coverage

  test:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Run Unit Tests
          command: yarn test --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./coverage/junit/
      - store_test_results:
          path: ./coverage/junit/
      - store_artifacts:
          path: ./coverage

  build-cascara:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Build Cascara Runtimes
          command: yarn cascara build

  build-cosmos:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Build Cosmos
          command: yarn cosmos:build
      - store_artifacts:
          path: ./build/cosmos
          destination: cosmos

  publish:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - add_ssh_keys:
          fingerprints:
            - $GITHUB_PACKAGE_DEPLOY_FINGERPRINT
      - run:
          name: Set Up Git config
          command: |
            git config --global -l
            git config --global user.email circleci@circleci
            git config --global user.name CircleCI
      - run:
          name: Get Changeset Status
          command: yarn changeset status --output=./versions.json
      - store_artifacts:
          path: ./versions.json
      - run:
          name: Get artifacts url > $STORED_ARTIFACTS
          command: |
            artifacts=$(curl -X GET "https://circleci.com/api/v2/project/github/Espressive/cascara/$CIRCLE_BUILD_NUM/artifacts" \
            -H "Accept: application/json" \
            -u "$CIRCLE_API_TOKEN:")
            # generate a heredoc in BASH_ENV
            # the '\<<' is a CircleCI escape
            echo "read -r -d '' STORED_ARTIFACTS \<< 'EOF_ARTIFACTS'" >> $BASH_ENV
            echo "$artifacts" >> $BASH_ENV
            echo "EOF_ARTIFACTS" >> $BASH_ENV
      - when:
          condition: *is_develop
          steps:
            - run:
                name: Publish Next Snapshot
                command: | # DO NOT COMMIT CHANGES FOR SNAPSHOT RELEASES!!!
                  yarn changeset version --snapshot next
                  node tooling/setReleaseVersions.js
                  yarn changeset publish --tag next
            - slack/notify:
                event: pass
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": ":thumbsup_all: New Cascara `next` versions published."
                          }
                        ]
                      }
                    ]
                  }

      - when:
          condition: *is_main
          steps:
            - run:
                name: Publish Full Release
                command: |
                  yarn changeset version
                  git add .
                  git commit -m "Publish Full Release"
                  node tooling/setReleaseVersions.js
                  yarn changeset publish
                  git checkout -- "*.json"
                  git push --follow-tags
            - slack/notify:
                event: pass
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": ":catjam: New `latest` releases for the Cascara monorepo!"
                          }
                        ]
                      }
                    ]
                  }

install_pre_steps: &install_pre_steps
  pre-steps:
    - run: echo "//npm.pkg.github.com/:_authToken=${GH_TOKEN}" >> ~/.npmrc
    - run: echo "@espressive:registry=https://npm.pkg.github.com" >> ~/.npmrc

requires_install: &requires_install
  requires:
    - install

requires_tests: &requires_tests
  requires:
    - lint
    - test

filter_main_and_dev: &filter_main_and_dev
  filters:
    branches:
      only:
        - main
        - develop

filter_tags: &filter_tags
  filters:
    # Ignore all branch commits
    branches:
      ignore: /.*/
    tags:
      only: /^@espressive.*/

workflows:
  build-and-test:
    jobs:
      - install:
          <<: *install_pre_steps
          <<: *post_steps
      - danger:
          <<: *post_steps
          <<: *requires_install
      - lint:
          <<: *post_steps
          <<: *requires_install
          requires:
            - danger
      - test:
          <<: *post_steps
          <<: *requires_install
          requires:
            - danger
      - build-cascara:
          <<: *post_steps
          <<: *requires_tests
          requires:
            - danger
      - build-cosmos:
          <<: *post_steps
          <<: *requires_tests
          requires:
            - danger
      - publish:
          <<: *filter_main_and_dev
          <<: *post_steps
          requires:
            - danger
            - build-cascara
            - build-cosmos
# publish-tagged-packages:
#   jobs:
#     - install:
#         <<: *filter_tags
#         <<: *install_pre_steps
#         <<: *post_steps
#     - publish-packages:
#         <<: *filter_tags
#         <<: *post_steps
#         <<: *requires_install
