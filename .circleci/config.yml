version: 2.1

orbs:
  node: circleci/node@4.0.1
  slack: circleci/slack@4.2.1

parameters:
  installed-key:
    type: string
    default: cascara-MONOREPO_INSTALLED-{{ .Revision }}

aliases:
  - &is_main
    equal: [main, << pipeline.git.branch >>]
  - &is_develop
    equal: [develop, << pipeline.git.branch >>]

commands:
  deploy-vercel:
    description: Deploys our docs to Vercel
    parameters:
      vercel-args:
        type: string
        default: ''
      vercel-deploy-hook:
        type: string
        default: $VERCEL_DEPLOY_DEVELOP
    steps:
      - run:
          name: Deploy Vercel
          command: curl -X << parameters.vercel-deploy-hook >>
          # command: yarn vercel -t $VERCEL_TOKEN --no-clipboard --confirm << parameters.vercel-args >>
  lerna-publish:
    description: Publishes our monorepo packages with Lerna
    parameters:
      prerelease:
        type: boolean
        default: true
      lerna-args:
        type: string
        default: ''
    steps:
      - add_ssh_keys:
          fingerprints:
            - $GITHUB_PACKAGE_DEPLOY_FINGERPRINT
      - run:
          name: Set Up Git config
          command: |
            git config --global -l
            git config --global user.email circleci@circleci
            git config --global user.name CircleCI
      - run:
          name: Bump Package Versions
          command: |
            yarn lerna version <<# parameters.prerelease >>prerelease<</ parameters.prerelease >> --conventional-commits --create-release github --yes << parameters.lerna-args >>
      - run:
          name: Publish Packages
          command: |
            yarn lerna publish from-git --yes
      # - run:
      #     name: Git Push Changes
      #     command: |
      #       git push --follow-tags --no-verify --atomic

job_executor: &job_executor
  executor:
    name: node/default
    tag: '12.13.0'

post_steps: &post_steps
  post-steps:
    - slack/notify:
        custom: |
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "[JOB FAILED] ${CIRCLE_BRANCH}",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Job*:\n${CIRCLE_JOB}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author*:\n${CIRCLE_USERNAME}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
        event: fail

jobs:
  install:
    <<: *job_executor
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Prepare Packages
          command: yarn workspaces run prepare
      - store_artifacts:
          path: ./node_modules/@espressive/cascara # check to see why we do not have @espressive/cascara
      - save_cache:
          key: << pipeline.parameters.installed-key >>
          paths:
            - ~/

  lint:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Run Eslint
          command: yarn lint --format junit --output-file ./coverage/eslint.xml
      - store_test_results:
          path: ./coverage
      - store_artifacts:
          path: ./coverage

  test:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Run Unit Tests
          command: yarn test --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./coverage/junit/
      - store_test_results:
          path: ./coverage/junit/
      - store_artifacts:
          path: ./coverage

  build-cascara:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Build Cascara Runtimes
          command: yarn cascara build

  build-cosmos:
    <<: *job_executor
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - run:
          name: Build Cosmos
          command: yarn cosmos:build
      - store_artifacts:
          path: ./build/cosmos
          destination: cosmos

  release-packages:
    <<: *job_executor
    parameters:
      options:
        description: 'Option flags passed to the Lerna release command'
        default: ''
        type: string
    steps:
      - restore_cache:
          key: << pipeline.parameters.installed-key >>
      - when:
          condition: *is_main
          steps:
            - lerna-publish:
                prerelease: false
                lerna-args: --conventional-graduate
      - when:
          condition: *is_develop
          steps:
            - lerna-publish

  deploy-docs:
    <<: *job_executor
    steps:
      # - restore_cache:
      #     key: << pipeline.parameters.installed-key >>
      - when:
          condition: *is_main
          steps:
            - deploy-vercel:
                # vercel-args: --prod
                vercel-deploy-hook: $VERCEL_DEPLOY_MAIN
      - unless:
          condition: *is_main
          steps:
            - deploy-vercel

workflows:
  build-and-test:
    jobs:
      - install:
          pre-steps:
            - run: echo "//npm.pkg.github.com/:_authToken=${GITHUB_INSTALL_AUTH_TOKEN}" >> ~/.npmrc
            - run: echo "@espressive:registry=https://npm.pkg.github.com" >> ~/.npmrc
          <<: *post_steps
      - lint:
          <<: *post_steps
          requires:
            - install
      - test:
          <<: *post_steps
          requires:
            - install
      - build-cascara:
          <<: *post_steps
          requires:
            - lint
            - test
      - build-cosmos:
          <<: *post_steps
          requires:
            - lint
            - test
      - release-packages:
          <<: *post_steps
          filters:
            branches:
              only:
                - main
                - develop
          requires:
            - build-cascara
      - deploy-docs:
          <<: *post_steps
          requires:
            - release-packages
